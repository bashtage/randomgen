# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

parameters:
  # defaults for any parameters that are not specified
  name: ''
  vmImage: ''


jobs:

- job: ${{ parameters.name }}Test
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    matrix:
      ${{ if eq(parameters.name, 'Linux') }}:
        python37_legacy:
          python.version: '3.7'
          RANDOMGEN_DEBUG: false
          CC: clang
          NUMPY: 1.17.5
        python38_legacy:
          python.version: '3.8'
          coverage: true
          NUMPY: 1.17.0
        python39_latest:
          python.version: '3.9'
        python310_latest:
          python.version: '3.10'
        python36_latest:
          python.version: '3.6'
        python38_mid_conda:
          python.version: '3.8'
          use.conda: true
          NUMPY: 1.18.5
          CYTHON: 0.29.24
          USE_SCIPY: "true"
          USE_NUMBA: "true"
        python_38_coverage:
          python.version: '3.8'
          PYPI: true
          coverage: false
          RANDOMGEN_CYTHON_COVERAGE: false
          RANDOMGEN_DEBUG: true
          test.install: true
        python_37_legacy_conda:
          python.version: '3.7'
          use.conda: true
          coverage: false
          test.install: true
      ${{ if eq(parameters.name, 'macOS') }}:
        python39_latest_macos:
          python.version: '3.9'

    maxParallel: 10

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
    displayName: 'Use Python $(python.version)'

  - bash: |
      echo "##vso[task.prependpath]$CONDA/bin"
      echo "##vso[task.prependpath]$CONDA/envs/randomgen-test"
      echo "##vso[task.prependpath]$CONDA/envs/randomgen-test/condabin"
      echo "##vso[task.prependpath]$CONDA/envs/randomgen-test/bin"
    displayName: 'Add conda and env to PATH'
    condition: eq(variables['use.conda'], 'true')

  - script: |
      source ci/azure/install-posix.sh
    displayName: 'Install dependencies'

  - script: |
     flake8 randomgen
     black --check randomgen
     isort --check randomgen
    displayName: 'Check style and formatting'

  - script: python -m pip list
    displayName: 'List Configuration (PyPI)'
    condition: ne(variables['use.conda'], 'true')

  - script: conda list
    displayName: 'List Configuration (conda)'
    condition: eq(variables['use.conda'], 'true')

  - script: |
      echo "Installing to site packages"
      python -m pip wheel . -w wheelhouse/
      WHL=$(ls -t wheelhouse/randomgen-*.whl | head -n1)
      pip install ${WHL}
    displayName: 'Install randomgen (site-packages)'
    condition: eq(variables['test.install'], 'true')

  - script: |
      python -m pip install -e . -v --no-build-isolation
    displayName: 'Install randomgen (editable)'
    condition: ne(variables['test.install'], 'true')

  - script: |
      echo "Testing site packages"
      mkdir test_run_dir
      pushd test_run_dir
      python -c "import randomgen; randomgen.test(['-n', 'auto', '--junitxml=../junit/test-results.xml'])"
      popd
    displayName: 'Run tests (site-packages)'
    condition: eq(variables['test.install'], 'true')

  - script: |
      echo "Testing editable install"
      if [[ ${COVERAGE} == "true" ]]; then
        export COVERAGE_OPTS="--cov-config .coveragerc --cov=randomgen --cov-report xml:coverage.xml --cov-report term"
      fi
      echo pytest -m "${PYTEST_PATTERN}" --junitxml=junit/test-results.xml -n auto --durations=25 ${COVERAGE_OPTS} randomgen/tests
      pytest -m "${PYTEST_PATTERN}" --junitxml=junit/test-results.xml -n auto --durations=25 ${COVERAGE_OPTS} randomgen/tests
    displayName: 'Run tests (editable)'
    condition: ne(variables['test.install'], 'true')

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
    condition: and(eq(variables['coverage'], 'true'), ne(variables['test.install'], 'true'))

  - bash: bash <(curl -s https://codecov.io/bash)
    displayName: 'CodeCov upload'
    condition: and(eq(variables['coverage'], 'true'), ne(variables['test.install'], 'true'))
