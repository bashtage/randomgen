Search.setIndex({"alltitles": {"128-bit Linear Congruential Generator (LCG) with Output Mixing": [[196, null]], "64-bit Mersenne Twister": [[199, null]], "AES Counter-based RNG": [[0, null]], "Additional Experiments": [[243, "additional-experiments"]], "Advancing the PRNG\u2019s state": [[239, "advancing-the-prng-s-state"]], "BLAKE2b hash-based RNG": [[1, null]], "Bit Generators": [[194, null], [235, "bit-generators"]], "ChaCha cipher-based RNG": [[2, null]], "Change Log": [[217, null]], "Changes": [[235, "changes"]], "Changes between 1.16 and 1.18": [[221, "changes-between-1-16-and-1-18"]], "Changes in 1.19": [[221, "changes-in-1-19"]], "Changes in 1.23": [[221, "changes-in-1-23"]], "Core Testing": [[243, "core-testing"]], "Correlated Seeds": [[243, "correlated-seeds"]], "Custom Lock": [[204, "custom-lock"]], "Cython": [[223, "cython"]], "Danger": [[234, null], [235, null], [236, null]], "Differences from NumPy (1.17+)": [[238, "differences-from-numpy-1-17"]], "Distinct Keys in Cryptographic Generators": [[239, "distinct-keys-in-cryptographic-generators"]], "Distributions": [[222, "distributions"]], "Double SIMD Mersenne Twister (dSFMT)": [[3, null]], "Entropy From Iteration, Indirection, Xor (EFIIX)  Generator": [[4, null]], "Evolution of randomgen": [[221, null]], "Example Configuration": [[243, "example-configuration"]], "Experimental RNGs": [[194, "experimental-rngs"]], "Extended Generator": [[222, null]], "Extending": [[0, "extending"], [1, "extending"], [2, "extending"], [3, "extending"], [4, "extending"], [193, "extending"], [195, "extending"], [196, "extending"], [197, "extending"], [198, "extending"], [199, "extending"], [200, "extending"], [201, "extending"], [202, "extending"], [203, "extending"], [204, "extending"], [205, "extending"], [206, "extending"], [207, "extending"], [208, "extending"], [209, "extending"], [210, "extending"], [211, "extending"], [212, "extending"], [213, "extending"], [214, "extending"], [215, "extending"], [216, "extending"], [223, null]], "From Low-level Objects": [[212, "from-low-level-objects"]], "Future Plans": [[224, null]], "HC-128 Cipher Generator": [[193, null]], "Hardware-based Random Number Generator (RDRAND)": [[204, null]], "History": [[235, "history"]], "Indices and tables": [[235, "indices-and-tables"]], "Introduction": [[235, "introduction"]], "Jenkins Small Fast Generator": [[195, null]], "Jumping the PRNG state": [[239, "jumping-the-prng-state"]], "Key Generation": [[209, "key-generation"]], "LXM Generator": [[197, null]], "Legacy Random Generation": [[236, null]], "Mersenne Twister (MT19937)": [[198, null]], "Middle Square with Weyl increment (64-bit, Squares)": [[209, null]], "Multithreaded Generation": [[237, null]], "New Bit Generators": [[223, "new-bit-generators"]], "New Features": [[235, "new-features"]], "Non-reproducible Sequences": [[239, "non-reproducible-sequences"]], "Note": [[240, null], [242, null]], "Notes": [[243, "notes"]], "Numba": [[223, "numba"]], "Parallel Generation": [[235, "parallel-generation"]], "Parallel Random Number Generation": [[239, null]], "Parallel generation": [[0, "parallel-generation"], [1, "parallel-generation"], [3, "parallel-generation"], [196, "parallel-generation"], [197, "parallel-generation"], [198, "parallel-generation"], [200, "parallel-generation"], [201, "parallel-generation"], [202, "parallel-generation"], [203, "parallel-generation"], [204, "parallel-generation"], [207, "parallel-generation"], [208, "parallel-generation"], [209, "parallel-generation"], [210, "parallel-generation"], [213, "parallel-generation"], [214, "parallel-generation"], [215, "parallel-generation"], [216, "parallel-generation"]], "Parallelization": [[206, "parallelization"]], "Performance": [[219, "Performance"], [219, "id1"], [240, null]], "Permuted Congruential Generator (32-bit, PCG32)": [[200, null]], "Permuted Congruential Generator (64-bit, PCG64)": [[201, null]], "Permuted Congruential Generator 2.0 (64-bit Multiplier, DXSM Output)": [[202, null]], "Philox Counter-based RNG": [[203, null]], "Python BitGenerators": [[223, "python-bitgenerators"]], "Quality Assurance": [[243, null]], "Random Generator": [[234, null], [235, "random-generator"]], "RandomGen": [[235, "randomgen"]], "Recommendation": [[240, "recommendation"]], "References": [[241, null]], "Removed Features": [[235, "removed-features"]], "Rotate-Multiply (Romu) Generators": [[205, null]], "SFC64 Generator": [[206, null]], "SIMD-oriented Fast Mersenne Twister (SFMT)": [[207, null]], "SPECK Counter-based RNG": [[208, null]], "See also": [[145, null], [202, null], [209, null], [222, null], [226, null], [227, null], [230, null], [233, null]], "Seed Sequences": [[242, null]], "Seed and State Manipulation": [[222, "seed-and-state-manipulation"]], "Seeding and State": [[0, "seeding-and-state"], [1, "seeding-and-state"], [2, "seeding-and-state"], [3, "seeding-and-state"], [4, "seeding-and-state"], [193, "seeding-and-state"], [195, "seeding-and-state"], [196, "seeding-and-state"], [197, "seeding-and-state"], [198, "seeding-and-state"], [199, "seeding-and-state"], [200, "seeding-and-state"], [201, "seeding-and-state"], [202, "seeding-and-state"], [203, "seeding-and-state"], [204, "seeding-and-state"], [205, "seeding-and-state"], [206, "seeding-and-state"], [207, "seeding-and-state"], [208, "seeding-and-state"], [209, "seeding-and-state"], [210, "seeding-and-state"], [211, "seeding-and-state"], [213, "seeding-and-state"], [214, "seeding-and-state"], [215, "seeding-and-state"], [216, "seeding-and-state"]], "Sequential Seeds": [[243, "sequential-seeds"]], "Shared functionality": [[218, null]], "Stable RNGs": [[194, "stable-rngs"]], "State": [[212, "state"]], "Supported Generators": [[235, "supported-generators"]], "System Entropy": [[220, null]], "Testing": [[0, "testing"], [1, "testing"], [2, "testing"], [3, "testing"], [4, "testing"], [193, "testing"], [195, "testing"], [196, "testing"], [197, "testing"], [198, "testing"], [199, "testing"], [200, "testing"], [201, "testing"], [202, "testing"], [203, "testing"], [204, "testing"], [205, "testing"], [206, "testing"], [207, "testing"], [208, "testing"], [209, "testing"], [210, "testing"], [211, "testing"], [212, "testing"], [213, "testing"], [214, "testing"], [215, "testing"], [216, "testing"]], "ThreeFry Counter-based RNG": [[210, null]], "Timings": [[240, "timings"]], "Tyche PRNG": [[211, null]], "User-defined Bit Generators": [[194, "user-defined-bit-generators"], [212, null]], "Using Python": [[219, "Using-Python"]], "Using a SeedSequence": [[239, "using-a-seedsequence"]], "Using numba": [[219, "Using-numba"]], "Warning": [[212, null]], "Weyl Sequences": [[239, "weyl-sequences"]], "What\u2019s New or Different": [[235, "what-s-new-or-different"], [238, null]], "Writing a BitGenerator": [[219, null]], "Xoroshiro128+": [[213, null]], "Xorshift1024*\u03c6": [[214, null]], "Xoshiro256**": [[215, null]], "Xoshiro512**": [[216, null]], "Zero (0) Seeding": [[243, "zero-0-seeding"]], "randomgen.aes.AESCounter.advance": [[5, null]], "randomgen.aes.AESCounter.cffi": [[6, null]], "randomgen.aes.AESCounter.ctypes": [[7, null]], "randomgen.aes.AESCounter.jump": [[8, null]], "randomgen.aes.AESCounter.jumped": [[9, null]], "randomgen.aes.AESCounter.random_raw": [[10, null]], "randomgen.aes.AESCounter.seed": [[11, null]], "randomgen.aes.AESCounter.state": [[12, null]], "randomgen.blabla.BlaBla.advance": [[13, null]], "randomgen.blabla.BlaBla.cffi": [[14, null]], "randomgen.blabla.BlaBla.ctypes": [[15, null]], "randomgen.blabla.BlaBla.jumped": [[16, null]], "randomgen.blabla.BlaBla.random_raw": [[17, null]], "randomgen.blabla.BlaBla.seed": [[18, null]], "randomgen.blabla.BlaBla.state": [[19, null]], "randomgen.chacha.ChaCha.cffi": [[20, null]], "randomgen.chacha.ChaCha.ctypes": [[21, null]], "randomgen.chacha.ChaCha.random_raw": [[22, null]], "randomgen.chacha.ChaCha.seed": [[23, null]], "randomgen.chacha.ChaCha.state": [[24, null]], "randomgen.dsfmt.DSFMT.cffi": [[25, null]], "randomgen.dsfmt.DSFMT.ctypes": [[26, null]], "randomgen.dsfmt.DSFMT.jump": [[27, null]], "randomgen.dsfmt.DSFMT.jumped": [[28, null]], "randomgen.dsfmt.DSFMT.random_raw": [[29, null]], "randomgen.dsfmt.DSFMT.seed": [[30, null]], "randomgen.dsfmt.DSFMT.state": [[31, null]], "randomgen.efiix64.EFIIX64.cffi": [[32, null]], "randomgen.efiix64.EFIIX64.ctypes": [[33, null]], "randomgen.efiix64.EFIIX64.random_raw": [[34, null]], "randomgen.efiix64.EFIIX64.seed": [[35, null]], "randomgen.efiix64.EFIIX64.state": [[36, null]], "randomgen.generator.ExtendedGenerator.bit_generator": [[225, null]], "randomgen.generator.ExtendedGenerator.complex_normal": [[226, null]], "randomgen.generator.ExtendedGenerator.multivariate_complex_normal": [[227, null]], "randomgen.generator.ExtendedGenerator.multivariate_normal": [[228, null]], "randomgen.generator.ExtendedGenerator.random": [[229, null]], "randomgen.generator.ExtendedGenerator.standard_wishart": [[230, null]], "randomgen.generator.ExtendedGenerator.state": [[231, null]], "randomgen.generator.ExtendedGenerator.uintegers": [[232, null]], "randomgen.generator.ExtendedGenerator.wishart": [[233, null]], "randomgen.hc128.HC128.cffi": [[37, null]], "randomgen.hc128.HC128.ctypes": [[38, null]], "randomgen.hc128.HC128.random_raw": [[39, null]], "randomgen.hc128.HC128.seed": [[40, null]], "randomgen.hc128.HC128.state": [[41, null]], "randomgen.jsf.JSF.cffi": [[42, null]], "randomgen.jsf.JSF.ctypes": [[43, null]], "randomgen.jsf.JSF.random_raw": [[44, null]], "randomgen.jsf.JSF.seed": [[45, null]], "randomgen.jsf.JSF.state": [[46, null]], "randomgen.lxm.LXM.cffi": [[47, null]], "randomgen.lxm.LXM.ctypes": [[48, null]], "randomgen.lxm.LXM.jump": [[49, null]], "randomgen.lxm.LXM.jumped": [[50, null]], "randomgen.lxm.LXM.random_raw": [[51, null]], "randomgen.lxm.LXM.seed": [[52, null]], "randomgen.lxm.LXM.state": [[53, null]], "randomgen.mt19937.MT19937.cffi": [[54, null]], "randomgen.mt19937.MT19937.ctypes": [[55, null]], "randomgen.mt19937.MT19937.jump": [[56, null]], "randomgen.mt19937.MT19937.jumped": [[57, null]], "randomgen.mt19937.MT19937.random_raw": [[58, null]], "randomgen.mt19937.MT19937.seed": [[59, null]], "randomgen.mt19937.MT19937.state": [[60, null]], "randomgen.mt64.MT64.cffi": [[61, null]], "randomgen.mt64.MT64.ctypes": [[62, null]], "randomgen.mt64.MT64.random_raw": [[63, null]], "randomgen.mt64.MT64.seed": [[64, null]], "randomgen.mt64.MT64.state": [[65, null]], "randomgen.pcg32.PCG32.advance": [[66, null]], "randomgen.pcg32.PCG32.cffi": [[67, null]], "randomgen.pcg32.PCG32.ctypes": [[68, null]], "randomgen.pcg32.PCG32.jump": [[69, null]], "randomgen.pcg32.PCG32.jumped": [[70, null]], "randomgen.pcg32.PCG32.random_raw": [[71, null]], "randomgen.pcg32.PCG32.seed": [[72, null]], "randomgen.pcg32.PCG32.state": [[73, null]], "randomgen.pcg64.LCG128Mix.advance": [[74, null]], "randomgen.pcg64.LCG128Mix.cffi": [[75, null]], "randomgen.pcg64.LCG128Mix.ctypes": [[76, null]], "randomgen.pcg64.LCG128Mix.jumped": [[77, null]], "randomgen.pcg64.LCG128Mix.random_raw": [[78, null]], "randomgen.pcg64.LCG128Mix.seed": [[79, null]], "randomgen.pcg64.LCG128Mix.state": [[80, null]], "randomgen.pcg64.PCG64.advance": [[81, null]], "randomgen.pcg64.PCG64.cffi": [[82, null]], "randomgen.pcg64.PCG64.ctypes": [[83, null]], "randomgen.pcg64.PCG64.jump": [[84, null]], "randomgen.pcg64.PCG64.jumped": [[85, null]], "randomgen.pcg64.PCG64.random_raw": [[86, null]], "randomgen.pcg64.PCG64.seed": [[87, null]], "randomgen.pcg64.PCG64.state": [[88, null]], "randomgen.pcg64.PCG64DXSM.advance": [[89, null]], "randomgen.pcg64.PCG64DXSM.cffi": [[90, null]], "randomgen.pcg64.PCG64DXSM.ctypes": [[91, null]], "randomgen.pcg64.PCG64DXSM.jump": [[92, null]], "randomgen.pcg64.PCG64DXSM.jumped": [[93, null]], "randomgen.pcg64.PCG64DXSM.random_raw": [[94, null]], "randomgen.pcg64.PCG64DXSM.seed": [[95, null]], "randomgen.pcg64.PCG64DXSM.state": [[96, null]], "randomgen.philox.Philox.advance": [[97, null]], "randomgen.philox.Philox.cffi": [[98, null]], "randomgen.philox.Philox.ctypes": [[99, null]], "randomgen.philox.Philox.jump": [[100, null]], "randomgen.philox.Philox.jumped": [[101, null]], "randomgen.philox.Philox.random_raw": [[102, null]], "randomgen.philox.Philox.seed": [[103, null]], "randomgen.philox.Philox.state": [[104, null]], "randomgen.rdrand.RDRAND.cffi": [[105, null]], "randomgen.rdrand.RDRAND.ctypes": [[106, null]], "randomgen.rdrand.RDRAND.jumped": [[107, null]], "randomgen.rdrand.RDRAND.random_raw": [[108, null]], "randomgen.rdrand.RDRAND.seed": [[109, null]], "randomgen.rdrand.RDRAND.state": [[110, null]], "randomgen.rdrand.RDRAND.success": [[111, null]], "randomgen.romu.Romu.cffi": [[112, null]], "randomgen.romu.Romu.ctypes": [[113, null]], "randomgen.romu.Romu.random_raw": [[114, null]], "randomgen.romu.Romu.seed": [[115, null]], "randomgen.romu.Romu.state": [[116, null]], "randomgen.sfc.SFC64.cffi": [[117, null]], "randomgen.sfc.SFC64.ctypes": [[118, null]], "randomgen.sfc.SFC64.random_raw": [[119, null]], "randomgen.sfc.SFC64.seed": [[120, null]], "randomgen.sfc.SFC64.state": [[121, null]], "randomgen.sfc.SFC64.weyl_increments": [[122, null]], "randomgen.sfmt.SFMT.cffi": [[123, null]], "randomgen.sfmt.SFMT.ctypes": [[124, null]], "randomgen.sfmt.SFMT.jump": [[125, null]], "randomgen.sfmt.SFMT.jumped": [[126, null]], "randomgen.sfmt.SFMT.random_raw": [[127, null]], "randomgen.sfmt.SFMT.seed": [[128, null]], "randomgen.sfmt.SFMT.state": [[129, null]], "randomgen.speck128.SPECK128.advance": [[130, null]], "randomgen.speck128.SPECK128.cffi": [[131, null]], "randomgen.speck128.SPECK128.ctypes": [[132, null]], "randomgen.speck128.SPECK128.jump": [[133, null]], "randomgen.speck128.SPECK128.jumped": [[134, null]], "randomgen.speck128.SPECK128.random_raw": [[135, null]], "randomgen.speck128.SPECK128.seed": [[136, null]], "randomgen.speck128.SPECK128.state": [[137, null]], "randomgen.squares.Squares.advance": [[138, null]], "randomgen.squares.Squares.cffi": [[139, null]], "randomgen.squares.Squares.ctypes": [[140, null]], "randomgen.squares.Squares.jumped": [[141, null]], "randomgen.squares.Squares.random_raw": [[142, null]], "randomgen.squares.Squares.seed": [[143, null]], "randomgen.squares.Squares.state": [[144, null]], "randomgen.squares.generate_keys": [[145, null]], "randomgen.threefry.ThreeFry.advance": [[146, null]], "randomgen.threefry.ThreeFry.cffi": [[147, null]], "randomgen.threefry.ThreeFry.ctypes": [[148, null]], "randomgen.threefry.ThreeFry.jump": [[149, null]], "randomgen.threefry.ThreeFry.jumped": [[150, null]], "randomgen.threefry.ThreeFry.random_raw": [[151, null]], "randomgen.threefry.ThreeFry.seed": [[152, null]], "randomgen.threefry.ThreeFry.state": [[153, null]], "randomgen.tyche.Tyche.cffi": [[154, null]], "randomgen.tyche.Tyche.ctypes": [[155, null]], "randomgen.tyche.Tyche.random_raw": [[156, null]], "randomgen.tyche.Tyche.seed": [[157, null]], "randomgen.tyche.Tyche.state": [[158, null]], "randomgen.wrapper.UserBitGenerator.cffi": [[159, null]], "randomgen.wrapper.UserBitGenerator.ctypes": [[160, null]], "randomgen.wrapper.UserBitGenerator.from_cfunc": [[161, null]], "randomgen.wrapper.UserBitGenerator.from_ctypes": [[162, null]], "randomgen.wrapper.UserBitGenerator.random_raw": [[163, null]], "randomgen.wrapper.UserBitGenerator.state": [[164, null]], "randomgen.xoroshiro128.Xoroshiro128.cffi": [[165, null]], "randomgen.xoroshiro128.Xoroshiro128.ctypes": [[166, null]], "randomgen.xoroshiro128.Xoroshiro128.jump": [[167, null]], "randomgen.xoroshiro128.Xoroshiro128.jumped": [[168, null]], "randomgen.xoroshiro128.Xoroshiro128.random_raw": [[169, null]], "randomgen.xoroshiro128.Xoroshiro128.seed": [[170, null]], "randomgen.xoroshiro128.Xoroshiro128.state": [[171, null]], "randomgen.xorshift1024.Xorshift1024.cffi": [[172, null]], "randomgen.xorshift1024.Xorshift1024.ctypes": [[173, null]], "randomgen.xorshift1024.Xorshift1024.jump": [[174, null]], "randomgen.xorshift1024.Xorshift1024.jumped": [[175, null]], "randomgen.xorshift1024.Xorshift1024.random_raw": [[176, null]], "randomgen.xorshift1024.Xorshift1024.seed": [[177, null]], "randomgen.xorshift1024.Xorshift1024.state": [[178, null]], "randomgen.xoshiro256.Xoshiro256.cffi": [[179, null]], "randomgen.xoshiro256.Xoshiro256.ctypes": [[180, null]], "randomgen.xoshiro256.Xoshiro256.jump": [[181, null]], "randomgen.xoshiro256.Xoshiro256.jumped": [[182, null]], "randomgen.xoshiro256.Xoshiro256.random_raw": [[183, null]], "randomgen.xoshiro256.Xoshiro256.seed": [[184, null]], "randomgen.xoshiro256.Xoshiro256.state": [[185, null]], "randomgen.xoshiro512.Xoshiro512.cffi": [[186, null]], "randomgen.xoshiro512.Xoshiro512.ctypes": [[187, null]], "randomgen.xoshiro512.Xoshiro512.jump": [[188, null]], "randomgen.xoshiro512.Xoshiro512.jumped": [[189, null]], "randomgen.xoshiro512.Xoshiro512.random_raw": [[190, null]], "randomgen.xoshiro512.Xoshiro512.seed": [[191, null]], "randomgen.xoshiro512.Xoshiro512.state": [[192, null]], "v1.15": [[217, "v1-15"]], "v1.15.1": [[217, "v1-15-1"]], "v1.16.0": [[217, "v1-16-0"]], "v1.16.1": [[217, "v1-16-1"]], "v1.16.2": [[217, "v1-16-2"]], "v1.16.3": [[217, "v1-16-3"]], "v1.16.4": [[217, "v1-16-4"]], "v1.16.5": [[217, "v1-16-5"]], "v1.16.6": [[217, "v1-16-6"]], "v1.17.0": [[217, "v1-17-0"]], "v1.18.0": [[217, "v1-18-0"]], "v1.19.0": [[217, "v1-19-0"]], "v1.19.1": [[217, "v1-19-1"]], "v1.19.2": [[217, "v1-19-2"]], "v1.19.3": [[217, "v1-19-3"]], "v1.20.0": [[217, "v1-20-0"]], "v1.20.1": [[217, "v1-20-1"]], "v1.20.2": [[217, "v1-20-2"]], "v1.23.0": [[217, "v1-23-0"]], "v1.23.1": [[217, "v1-23-1"]], "v1.26.0": [[217, "v1-26-0"]], "v1.26.1": [[217, "v1-26-1"]], "v2.0.0": [[217, "v2-0-0"]], "v2.1.0": [[217, "v2-1-0"]]}, "docurls": ["bit_generators/aesctr.html", "bit_generators/blabla.html", "bit_generators/chacha.html", "bit_generators/dsfmt.html", "bit_generators/efiix64.html", "bit_generators/generated/randomgen.aes.AESCounter.advance.html", "bit_generators/generated/randomgen.aes.AESCounter.cffi.html", "bit_generators/generated/randomgen.aes.AESCounter.ctypes.html", "bit_generators/generated/randomgen.aes.AESCounter.jump.html", "bit_generators/generated/randomgen.aes.AESCounter.jumped.html", "bit_generators/generated/randomgen.aes.AESCounter.random_raw.html", "bit_generators/generated/randomgen.aes.AESCounter.seed.html", "bit_generators/generated/randomgen.aes.AESCounter.state.html", "bit_generators/generated/randomgen.blabla.BlaBla.advance.html", "bit_generators/generated/randomgen.blabla.BlaBla.cffi.html", "bit_generators/generated/randomgen.blabla.BlaBla.ctypes.html", "bit_generators/generated/randomgen.blabla.BlaBla.jumped.html", "bit_generators/generated/randomgen.blabla.BlaBla.random_raw.html", "bit_generators/generated/randomgen.blabla.BlaBla.seed.html", "bit_generators/generated/randomgen.blabla.BlaBla.state.html", "bit_generators/generated/randomgen.chacha.ChaCha.cffi.html", "bit_generators/generated/randomgen.chacha.ChaCha.ctypes.html", "bit_generators/generated/randomgen.chacha.ChaCha.random_raw.html", "bit_generators/generated/randomgen.chacha.ChaCha.seed.html", "bit_generators/generated/randomgen.chacha.ChaCha.state.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.cffi.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.ctypes.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.jump.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.jumped.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.random_raw.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.seed.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.state.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.cffi.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.ctypes.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.random_raw.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.seed.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.state.html", "bit_generators/generated/randomgen.hc128.HC128.cffi.html", "bit_generators/generated/randomgen.hc128.HC128.ctypes.html", "bit_generators/generated/randomgen.hc128.HC128.random_raw.html", "bit_generators/generated/randomgen.hc128.HC128.seed.html", "bit_generators/generated/randomgen.hc128.HC128.state.html", "bit_generators/generated/randomgen.jsf.JSF.cffi.html", "bit_generators/generated/randomgen.jsf.JSF.ctypes.html", "bit_generators/generated/randomgen.jsf.JSF.random_raw.html", "bit_generators/generated/randomgen.jsf.JSF.seed.html", "bit_generators/generated/randomgen.jsf.JSF.state.html", "bit_generators/generated/randomgen.lxm.LXM.cffi.html", "bit_generators/generated/randomgen.lxm.LXM.ctypes.html", "bit_generators/generated/randomgen.lxm.LXM.jump.html", "bit_generators/generated/randomgen.lxm.LXM.jumped.html", "bit_generators/generated/randomgen.lxm.LXM.random_raw.html", "bit_generators/generated/randomgen.lxm.LXM.seed.html", "bit_generators/generated/randomgen.lxm.LXM.state.html", "bit_generators/generated/randomgen.mt19937.MT19937.cffi.html", "bit_generators/generated/randomgen.mt19937.MT19937.ctypes.html", "bit_generators/generated/randomgen.mt19937.MT19937.jump.html", "bit_generators/generated/randomgen.mt19937.MT19937.jumped.html", "bit_generators/generated/randomgen.mt19937.MT19937.random_raw.html", "bit_generators/generated/randomgen.mt19937.MT19937.seed.html", "bit_generators/generated/randomgen.mt19937.MT19937.state.html", "bit_generators/generated/randomgen.mt64.MT64.cffi.html", "bit_generators/generated/randomgen.mt64.MT64.ctypes.html", "bit_generators/generated/randomgen.mt64.MT64.random_raw.html", "bit_generators/generated/randomgen.mt64.MT64.seed.html", "bit_generators/generated/randomgen.mt64.MT64.state.html", "bit_generators/generated/randomgen.pcg32.PCG32.advance.html", "bit_generators/generated/randomgen.pcg32.PCG32.cffi.html", "bit_generators/generated/randomgen.pcg32.PCG32.ctypes.html", "bit_generators/generated/randomgen.pcg32.PCG32.jump.html", "bit_generators/generated/randomgen.pcg32.PCG32.jumped.html", "bit_generators/generated/randomgen.pcg32.PCG32.random_raw.html", "bit_generators/generated/randomgen.pcg32.PCG32.seed.html", "bit_generators/generated/randomgen.pcg32.PCG32.state.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.advance.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.cffi.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.ctypes.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.jumped.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.random_raw.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.seed.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.state.html", "bit_generators/generated/randomgen.pcg64.PCG64.advance.html", "bit_generators/generated/randomgen.pcg64.PCG64.cffi.html", "bit_generators/generated/randomgen.pcg64.PCG64.ctypes.html", "bit_generators/generated/randomgen.pcg64.PCG64.jump.html", "bit_generators/generated/randomgen.pcg64.PCG64.jumped.html", "bit_generators/generated/randomgen.pcg64.PCG64.random_raw.html", "bit_generators/generated/randomgen.pcg64.PCG64.seed.html", "bit_generators/generated/randomgen.pcg64.PCG64.state.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.advance.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.cffi.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.ctypes.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.jump.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.jumped.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.random_raw.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.seed.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.state.html", "bit_generators/generated/randomgen.philox.Philox.advance.html", "bit_generators/generated/randomgen.philox.Philox.cffi.html", "bit_generators/generated/randomgen.philox.Philox.ctypes.html", "bit_generators/generated/randomgen.philox.Philox.jump.html", "bit_generators/generated/randomgen.philox.Philox.jumped.html", "bit_generators/generated/randomgen.philox.Philox.random_raw.html", "bit_generators/generated/randomgen.philox.Philox.seed.html", "bit_generators/generated/randomgen.philox.Philox.state.html", "bit_generators/generated/randomgen.rdrand.RDRAND.cffi.html", "bit_generators/generated/randomgen.rdrand.RDRAND.ctypes.html", "bit_generators/generated/randomgen.rdrand.RDRAND.jumped.html", "bit_generators/generated/randomgen.rdrand.RDRAND.random_raw.html", "bit_generators/generated/randomgen.rdrand.RDRAND.seed.html", "bit_generators/generated/randomgen.rdrand.RDRAND.state.html", "bit_generators/generated/randomgen.rdrand.RDRAND.success.html", "bit_generators/generated/randomgen.romu.Romu.cffi.html", "bit_generators/generated/randomgen.romu.Romu.ctypes.html", "bit_generators/generated/randomgen.romu.Romu.random_raw.html", "bit_generators/generated/randomgen.romu.Romu.seed.html", "bit_generators/generated/randomgen.romu.Romu.state.html", "bit_generators/generated/randomgen.sfc.SFC64.cffi.html", "bit_generators/generated/randomgen.sfc.SFC64.ctypes.html", "bit_generators/generated/randomgen.sfc.SFC64.random_raw.html", "bit_generators/generated/randomgen.sfc.SFC64.seed.html", "bit_generators/generated/randomgen.sfc.SFC64.state.html", "bit_generators/generated/randomgen.sfc.SFC64.weyl_increments.html", "bit_generators/generated/randomgen.sfmt.SFMT.cffi.html", "bit_generators/generated/randomgen.sfmt.SFMT.ctypes.html", "bit_generators/generated/randomgen.sfmt.SFMT.jump.html", "bit_generators/generated/randomgen.sfmt.SFMT.jumped.html", "bit_generators/generated/randomgen.sfmt.SFMT.random_raw.html", "bit_generators/generated/randomgen.sfmt.SFMT.seed.html", "bit_generators/generated/randomgen.sfmt.SFMT.state.html", "bit_generators/generated/randomgen.speck128.SPECK128.advance.html", "bit_generators/generated/randomgen.speck128.SPECK128.cffi.html", "bit_generators/generated/randomgen.speck128.SPECK128.ctypes.html", "bit_generators/generated/randomgen.speck128.SPECK128.jump.html", "bit_generators/generated/randomgen.speck128.SPECK128.jumped.html", "bit_generators/generated/randomgen.speck128.SPECK128.random_raw.html", "bit_generators/generated/randomgen.speck128.SPECK128.seed.html", "bit_generators/generated/randomgen.speck128.SPECK128.state.html", "bit_generators/generated/randomgen.squares.Squares.advance.html", "bit_generators/generated/randomgen.squares.Squares.cffi.html", "bit_generators/generated/randomgen.squares.Squares.ctypes.html", "bit_generators/generated/randomgen.squares.Squares.jumped.html", "bit_generators/generated/randomgen.squares.Squares.random_raw.html", "bit_generators/generated/randomgen.squares.Squares.seed.html", "bit_generators/generated/randomgen.squares.Squares.state.html", "bit_generators/generated/randomgen.squares.generate_keys.html", "bit_generators/generated/randomgen.threefry.ThreeFry.advance.html", "bit_generators/generated/randomgen.threefry.ThreeFry.cffi.html", "bit_generators/generated/randomgen.threefry.ThreeFry.ctypes.html", "bit_generators/generated/randomgen.threefry.ThreeFry.jump.html", "bit_generators/generated/randomgen.threefry.ThreeFry.jumped.html", "bit_generators/generated/randomgen.threefry.ThreeFry.random_raw.html", "bit_generators/generated/randomgen.threefry.ThreeFry.seed.html", "bit_generators/generated/randomgen.threefry.ThreeFry.state.html", "bit_generators/generated/randomgen.tyche.Tyche.cffi.html", "bit_generators/generated/randomgen.tyche.Tyche.ctypes.html", "bit_generators/generated/randomgen.tyche.Tyche.random_raw.html", "bit_generators/generated/randomgen.tyche.Tyche.seed.html", "bit_generators/generated/randomgen.tyche.Tyche.state.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.cffi.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.ctypes.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.from_cfunc.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.from_ctypes.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.random_raw.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.state.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.cffi.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.ctypes.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.jump.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.jumped.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.random_raw.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.seed.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.state.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.cffi.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.ctypes.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.jump.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.jumped.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.random_raw.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.seed.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.state.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.cffi.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.ctypes.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.jump.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.jumped.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.random_raw.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.seed.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.state.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.cffi.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.ctypes.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.jump.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.jumped.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.random_raw.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.seed.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.state.html", "bit_generators/hc128.html", "bit_generators/index.html", "bit_generators/jsf.html", "bit_generators/lcg128mix.html", "bit_generators/lxm.html", "bit_generators/mt19937.html", "bit_generators/mt64.html", "bit_generators/pcg32.html", "bit_generators/pcg64.html", "bit_generators/pcg64dxsm.html", "bit_generators/philox.html", "bit_generators/rdrand.html", "bit_generators/romu.html", "bit_generators/sfc.html", "bit_generators/sfmt.html", "bit_generators/speck128.html", "bit_generators/squares.html", "bit_generators/threefry.html", "bit_generators/tyche.html", "bit_generators/userbitgenerator.html", "bit_generators/xoroshiro128.html", "bit_generators/xorshift1024.html", "bit_generators/xoshiro256.html", "bit_generators/xoshiro512.html", "change-log.html", "common.html", "custom-bit-generators.html", "entropy.html", "evolution.html", "extended-generator.html", "extending.html", "future.html", "generated/randomgen.generator.ExtendedGenerator.bit_generator.html", "generated/randomgen.generator.ExtendedGenerator.complex_normal.html", "generated/randomgen.generator.ExtendedGenerator.multivariate_complex_normal.html", "generated/randomgen.generator.ExtendedGenerator.multivariate_normal.html", "generated/randomgen.generator.ExtendedGenerator.random.html", "generated/randomgen.generator.ExtendedGenerator.standard_wishart.html", "generated/randomgen.generator.ExtendedGenerator.state.html", "generated/randomgen.generator.ExtendedGenerator.uintegers.html", "generated/randomgen.generator.ExtendedGenerator.wishart.html", "generator.html", "index.html", "legacy.html", "multithreading.html", "new-or-different.html", "parallel.html", "performance.html", "references.html", "seed_sequence.html", "testing.html"], "envversion": {"nbsphinx": 4, "sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1}, "indexentries": {"advance() (randomgen.aes.aescounter method)": [[5, "randomgen.aes.AESCounter.advance", false]], "advance() (randomgen.blabla.blabla method)": [[13, "randomgen.blabla.BlaBla.advance", false]], "advance() (randomgen.pcg32.pcg32 method)": [[66, "randomgen.pcg32.PCG32.advance", false]], "advance() (randomgen.pcg64.lcg128mix method)": [[74, "randomgen.pcg64.LCG128Mix.advance", false]], "advance() (randomgen.pcg64.pcg64 method)": [[81, "randomgen.pcg64.PCG64.advance", false]], "advance() (randomgen.pcg64.pcg64dxsm method)": [[89, "randomgen.pcg64.PCG64DXSM.advance", false]], "advance() (randomgen.philox.philox method)": [[97, "randomgen.philox.Philox.advance", false]], "advance() (randomgen.speck128.speck128 method)": [[130, "randomgen.speck128.SPECK128.advance", false]], "advance() (randomgen.squares.squares method)": [[138, "randomgen.squares.Squares.advance", false]], "advance() (randomgen.threefry.threefry method)": [[146, "randomgen.threefry.ThreeFry.advance", false]], "aescounter (class in randomgen.aes)": [[0, "randomgen.aes.AESCounter", false]], "bit_generator (randomgen.common.interface attribute)": [[218, "randomgen.common.Interface.bit_generator", false]], "bit_generator (randomgen.generator.extendedgenerator attribute)": [[225, "randomgen.generator.ExtendedGenerator.bit_generator", false]], "blabla (class in randomgen.blabla)": [[1, "randomgen.blabla.BlaBla", false]], "cffi (randomgen.aes.aescounter attribute)": [[6, "randomgen.aes.AESCounter.cffi", false]], "cffi (randomgen.blabla.blabla attribute)": [[14, "randomgen.blabla.BlaBla.cffi", false]], "cffi (randomgen.chacha.chacha attribute)": [[20, "randomgen.chacha.ChaCha.cffi", false]], "cffi (randomgen.dsfmt.dsfmt attribute)": [[25, "randomgen.dsfmt.DSFMT.cffi", false]], "cffi (randomgen.efiix64.efiix64 attribute)": [[32, "randomgen.efiix64.EFIIX64.cffi", false]], "cffi (randomgen.hc128.hc128 attribute)": [[37, "randomgen.hc128.HC128.cffi", false]], "cffi (randomgen.jsf.jsf attribute)": [[42, "randomgen.jsf.JSF.cffi", false]], "cffi (randomgen.lxm.lxm attribute)": [[47, "randomgen.lxm.LXM.cffi", false]], "cffi (randomgen.mt19937.mt19937 attribute)": [[54, "randomgen.mt19937.MT19937.cffi", false]], "cffi (randomgen.mt64.mt64 attribute)": [[61, "randomgen.mt64.MT64.cffi", false]], "cffi (randomgen.pcg32.pcg32 attribute)": [[67, "randomgen.pcg32.PCG32.cffi", false]], "cffi (randomgen.pcg64.lcg128mix attribute)": [[75, "randomgen.pcg64.LCG128Mix.cffi", false]], "cffi (randomgen.pcg64.pcg64 attribute)": [[82, "randomgen.pcg64.PCG64.cffi", false]], "cffi (randomgen.pcg64.pcg64dxsm attribute)": [[90, "randomgen.pcg64.PCG64DXSM.cffi", false]], "cffi (randomgen.philox.philox attribute)": [[98, "randomgen.philox.Philox.cffi", false]], "cffi (randomgen.rdrand.rdrand attribute)": [[105, "randomgen.rdrand.RDRAND.cffi", false]], "cffi (randomgen.romu.romu attribute)": [[112, "randomgen.romu.Romu.cffi", false]], "cffi (randomgen.sfc.sfc64 attribute)": [[117, "randomgen.sfc.SFC64.cffi", false]], "cffi (randomgen.sfmt.sfmt attribute)": [[123, "randomgen.sfmt.SFMT.cffi", false]], "cffi (randomgen.speck128.speck128 attribute)": [[131, "randomgen.speck128.SPECK128.cffi", false]], "cffi (randomgen.squares.squares attribute)": [[139, "randomgen.squares.Squares.cffi", false]], "cffi (randomgen.threefry.threefry attribute)": [[147, "randomgen.threefry.ThreeFry.cffi", false]], "cffi (randomgen.tyche.tyche attribute)": [[154, "randomgen.tyche.Tyche.cffi", false]], "cffi (randomgen.wrapper.userbitgenerator attribute)": [[159, "randomgen.wrapper.UserBitGenerator.cffi", false]], "cffi (randomgen.xoroshiro128.xoroshiro128 attribute)": [[165, "randomgen.xoroshiro128.Xoroshiro128.cffi", false]], "cffi (randomgen.xorshift1024.xorshift1024 attribute)": [[172, "randomgen.xorshift1024.Xorshift1024.cffi", false]], "cffi (randomgen.xoshiro256.xoshiro256 attribute)": [[179, "randomgen.xoshiro256.Xoshiro256.cffi", false]], "cffi (randomgen.xoshiro512.xoshiro512 attribute)": [[186, "randomgen.xoshiro512.Xoshiro512.cffi", false]], "chacha (class in randomgen.chacha)": [[2, "randomgen.chacha.ChaCha", false]], "complex_normal() (randomgen.generator.extendedgenerator method)": [[226, "randomgen.generator.ExtendedGenerator.complex_normal", false]], "ctypes (randomgen.aes.aescounter attribute)": [[7, "randomgen.aes.AESCounter.ctypes", false]], "ctypes (randomgen.blabla.blabla attribute)": [[15, "randomgen.blabla.BlaBla.ctypes", false]], "ctypes (randomgen.chacha.chacha attribute)": [[21, "randomgen.chacha.ChaCha.ctypes", false]], "ctypes (randomgen.dsfmt.dsfmt attribute)": [[26, "randomgen.dsfmt.DSFMT.ctypes", false]], "ctypes (randomgen.efiix64.efiix64 attribute)": [[33, "randomgen.efiix64.EFIIX64.ctypes", false]], "ctypes (randomgen.hc128.hc128 attribute)": [[38, "randomgen.hc128.HC128.ctypes", false]], "ctypes (randomgen.jsf.jsf attribute)": [[43, "randomgen.jsf.JSF.ctypes", false]], "ctypes (randomgen.lxm.lxm attribute)": [[48, "randomgen.lxm.LXM.ctypes", false]], "ctypes (randomgen.mt19937.mt19937 attribute)": [[55, "randomgen.mt19937.MT19937.ctypes", false]], "ctypes (randomgen.mt64.mt64 attribute)": [[62, "randomgen.mt64.MT64.ctypes", false]], "ctypes (randomgen.pcg32.pcg32 attribute)": [[68, "randomgen.pcg32.PCG32.ctypes", false]], "ctypes (randomgen.pcg64.lcg128mix attribute)": [[76, "randomgen.pcg64.LCG128Mix.ctypes", false]], "ctypes (randomgen.pcg64.pcg64 attribute)": [[83, "randomgen.pcg64.PCG64.ctypes", false]], "ctypes (randomgen.pcg64.pcg64dxsm attribute)": [[91, "randomgen.pcg64.PCG64DXSM.ctypes", false]], "ctypes (randomgen.philox.philox attribute)": [[99, "randomgen.philox.Philox.ctypes", false]], "ctypes (randomgen.rdrand.rdrand attribute)": [[106, "randomgen.rdrand.RDRAND.ctypes", false]], "ctypes (randomgen.romu.romu attribute)": [[113, "randomgen.romu.Romu.ctypes", false]], "ctypes (randomgen.sfc.sfc64 attribute)": [[118, "randomgen.sfc.SFC64.ctypes", false]], "ctypes (randomgen.sfmt.sfmt attribute)": [[124, "randomgen.sfmt.SFMT.ctypes", false]], "ctypes (randomgen.speck128.speck128 attribute)": [[132, "randomgen.speck128.SPECK128.ctypes", false]], "ctypes (randomgen.squares.squares attribute)": [[140, "randomgen.squares.Squares.ctypes", false]], "ctypes (randomgen.threefry.threefry attribute)": [[148, "randomgen.threefry.ThreeFry.ctypes", false]], "ctypes (randomgen.tyche.tyche attribute)": [[155, "randomgen.tyche.Tyche.ctypes", false]], "ctypes (randomgen.wrapper.userbitgenerator attribute)": [[160, "randomgen.wrapper.UserBitGenerator.ctypes", false]], "ctypes (randomgen.xoroshiro128.xoroshiro128 attribute)": [[166, "randomgen.xoroshiro128.Xoroshiro128.ctypes", false]], "ctypes (randomgen.xorshift1024.xorshift1024 attribute)": [[173, "randomgen.xorshift1024.Xorshift1024.ctypes", false]], "ctypes (randomgen.xoshiro256.xoshiro256 attribute)": [[180, "randomgen.xoshiro256.Xoshiro256.ctypes", false]], "ctypes (randomgen.xoshiro512.xoshiro512 attribute)": [[187, "randomgen.xoshiro512.Xoshiro512.ctypes", false]], "dsfmt (class in randomgen.dsfmt)": [[3, "randomgen.dsfmt.DSFMT", false]], "efiix64 (class in randomgen.efiix64)": [[4, "randomgen.efiix64.EFIIX64", false]], "extendedgenerator (class in randomgen.generator)": [[222, "randomgen.generator.ExtendedGenerator", false]], "from_cfunc() (randomgen.wrapper.userbitgenerator class method)": [[161, "randomgen.wrapper.UserBitGenerator.from_cfunc", false]], "from_ctypes() (randomgen.wrapper.userbitgenerator class method)": [[162, "randomgen.wrapper.UserBitGenerator.from_ctypes", false]], "generate_keys() (in module randomgen.squares)": [[145, "randomgen.squares.generate_keys", false]], "hc128 (class in randomgen.hc128)": [[193, "randomgen.hc128.HC128", false]], "interface (class in randomgen.common)": [[218, "randomgen.common.Interface", false]], "jsf (class in randomgen.jsf)": [[195, "randomgen.jsf.JSF", false]], "jump() (randomgen.aes.aescounter method)": [[8, "randomgen.aes.AESCounter.jump", false]], "jump() (randomgen.dsfmt.dsfmt method)": [[27, "randomgen.dsfmt.DSFMT.jump", false]], "jump() (randomgen.lxm.lxm method)": [[49, "randomgen.lxm.LXM.jump", false]], "jump() (randomgen.mt19937.mt19937 method)": [[56, "randomgen.mt19937.MT19937.jump", false]], "jump() (randomgen.pcg32.pcg32 method)": [[69, "randomgen.pcg32.PCG32.jump", false]], "jump() (randomgen.pcg64.pcg64 method)": [[84, "randomgen.pcg64.PCG64.jump", false]], "jump() (randomgen.pcg64.pcg64dxsm method)": [[92, "randomgen.pcg64.PCG64DXSM.jump", false]], "jump() (randomgen.philox.philox method)": [[100, "randomgen.philox.Philox.jump", false]], "jump() (randomgen.sfmt.sfmt method)": [[125, "randomgen.sfmt.SFMT.jump", false]], "jump() (randomgen.speck128.speck128 method)": [[133, "randomgen.speck128.SPECK128.jump", false]], "jump() (randomgen.threefry.threefry method)": [[149, "randomgen.threefry.ThreeFry.jump", false]], "jump() (randomgen.xoroshiro128.xoroshiro128 method)": [[167, "randomgen.xoroshiro128.Xoroshiro128.jump", false]], "jump() (randomgen.xorshift1024.xorshift1024 method)": [[174, "randomgen.xorshift1024.Xorshift1024.jump", false]], "jump() (randomgen.xoshiro256.xoshiro256 method)": [[181, "randomgen.xoshiro256.Xoshiro256.jump", false]], "jump() (randomgen.xoshiro512.xoshiro512 method)": [[188, "randomgen.xoshiro512.Xoshiro512.jump", false]], "jumped() (randomgen.aes.aescounter method)": [[9, "randomgen.aes.AESCounter.jumped", false]], "jumped() (randomgen.blabla.blabla method)": [[16, "randomgen.blabla.BlaBla.jumped", false]], "jumped() (randomgen.dsfmt.dsfmt method)": [[28, "randomgen.dsfmt.DSFMT.jumped", false]], "jumped() (randomgen.lxm.lxm method)": [[50, "randomgen.lxm.LXM.jumped", false]], "jumped() (randomgen.mt19937.mt19937 method)": [[57, "randomgen.mt19937.MT19937.jumped", false]], "jumped() (randomgen.pcg32.pcg32 method)": [[70, "randomgen.pcg32.PCG32.jumped", false]], "jumped() (randomgen.pcg64.lcg128mix method)": [[77, "randomgen.pcg64.LCG128Mix.jumped", false]], "jumped() (randomgen.pcg64.pcg64 method)": [[85, "randomgen.pcg64.PCG64.jumped", false]], "jumped() (randomgen.pcg64.pcg64dxsm method)": [[93, "randomgen.pcg64.PCG64DXSM.jumped", false]], "jumped() (randomgen.philox.philox method)": [[101, "randomgen.philox.Philox.jumped", false]], "jumped() (randomgen.rdrand.rdrand method)": [[107, "randomgen.rdrand.RDRAND.jumped", false]], "jumped() (randomgen.sfmt.sfmt method)": [[126, "randomgen.sfmt.SFMT.jumped", false]], "jumped() (randomgen.speck128.speck128 method)": [[134, "randomgen.speck128.SPECK128.jumped", false]], "jumped() (randomgen.squares.squares method)": [[141, "randomgen.squares.Squares.jumped", false]], "jumped() (randomgen.threefry.threefry method)": [[150, "randomgen.threefry.ThreeFry.jumped", false]], "jumped() (randomgen.xoroshiro128.xoroshiro128 method)": [[168, "randomgen.xoroshiro128.Xoroshiro128.jumped", false]], "jumped() (randomgen.xorshift1024.xorshift1024 method)": [[175, "randomgen.xorshift1024.Xorshift1024.jumped", false]], "jumped() (randomgen.xoshiro256.xoshiro256 method)": [[182, "randomgen.xoshiro256.Xoshiro256.jumped", false]], "jumped() (randomgen.xoshiro512.xoshiro512 method)": [[189, "randomgen.xoshiro512.Xoshiro512.jumped", false]], "lcg128mix (class in randomgen.pcg64)": [[196, "randomgen.pcg64.LCG128Mix", false]], "lock (randomgen.aes.aescounter attribute)": [[0, "randomgen.aes.AESCounter.lock", false]], "lock (randomgen.blabla.blabla attribute)": [[1, "randomgen.blabla.BlaBla.lock", false]], "lock (randomgen.chacha.chacha attribute)": [[2, "randomgen.chacha.ChaCha.lock", false]], "lock (randomgen.dsfmt.dsfmt attribute)": [[3, "randomgen.dsfmt.DSFMT.lock", false]], "lock (randomgen.efiix64.efiix64 attribute)": [[4, "randomgen.efiix64.EFIIX64.lock", false]], "lock (randomgen.hc128.hc128 attribute)": [[193, "randomgen.hc128.HC128.lock", false]], "lock (randomgen.jsf.jsf attribute)": [[195, "randomgen.jsf.JSF.lock", false]], "lock (randomgen.lxm.lxm attribute)": [[197, "randomgen.lxm.LXM.lock", false]], "lock (randomgen.mt19937.mt19937 attribute)": [[198, "randomgen.mt19937.MT19937.lock", false]], "lock (randomgen.mt64.mt64 attribute)": [[199, "randomgen.mt64.MT64.lock", false]], "lock (randomgen.pcg32.pcg32 attribute)": [[200, "randomgen.pcg32.PCG32.lock", false]], "lock (randomgen.pcg64.lcg128mix attribute)": [[196, "randomgen.pcg64.LCG128Mix.lock", false]], "lock (randomgen.pcg64.pcg64 attribute)": [[201, "randomgen.pcg64.PCG64.lock", false]], "lock (randomgen.pcg64.pcg64dxsm attribute)": [[202, "randomgen.pcg64.PCG64DXSM.lock", false]], "lock (randomgen.philox.philox attribute)": [[203, "randomgen.philox.Philox.lock", false]], "lock (randomgen.rdrand.rdrand attribute)": [[204, "randomgen.rdrand.RDRAND.lock", false]], "lock (randomgen.sfmt.sfmt attribute)": [[207, "randomgen.sfmt.SFMT.lock", false]], "lock (randomgen.speck128.speck128 attribute)": [[208, "randomgen.speck128.SPECK128.lock", false]], "lock (randomgen.squares.squares attribute)": [[209, "randomgen.squares.Squares.lock", false]], "lock (randomgen.threefry.threefry attribute)": [[210, "randomgen.threefry.ThreeFry.lock", false]], "lock (randomgen.tyche.tyche attribute)": [[211, "randomgen.tyche.Tyche.lock", false]], "lock (randomgen.xoroshiro128.xoroshiro128 attribute)": [[213, "randomgen.xoroshiro128.Xoroshiro128.lock", false]], "lock (randomgen.xorshift1024.xorshift1024 attribute)": [[214, "randomgen.xorshift1024.Xorshift1024.lock", false]], "lock (randomgen.xoshiro256.xoshiro256 attribute)": [[215, "randomgen.xoshiro256.Xoshiro256.lock", false]], "lock (randomgen.xoshiro512.xoshiro512 attribute)": [[216, "randomgen.xoshiro512.Xoshiro512.lock", false]], "lxm (class in randomgen.lxm)": [[197, "randomgen.lxm.LXM", false]], "module": [[0, "module-randomgen.aes", false], [1, "module-randomgen.blabla", false], [2, "module-randomgen.chacha", false], [3, "module-randomgen.dsfmt", false], [4, "module-randomgen.efiix64", false], [193, "module-randomgen.hc128", false], [195, "module-randomgen.jsf", false], [197, "module-randomgen.lxm", false], [198, "module-randomgen.mt19937", false], [199, "module-randomgen.mt64", false], [200, "module-randomgen.pcg32", false], [201, "module-randomgen.pcg64", false], [203, "module-randomgen.philox", false], [204, "module-randomgen.rdrand", false], [205, "module-randomgen.romu", false], [206, "module-randomgen.sfc", false], [207, "module-randomgen.sfmt", false], [208, "module-randomgen.speck128", false], [209, "module-randomgen.squares", false], [210, "module-randomgen.threefry", false], [211, "module-randomgen.tyche", false], [212, "module-randomgen.wrapper", false], [213, "module-randomgen.xoroshiro128", false], [214, "module-randomgen.xorshift1024", false], [215, "module-randomgen.xoshiro256", false], [216, "module-randomgen.xoshiro512", false], [218, "module-randomgen.common", false], [220, "module-randomgen.entropy", false], [240, "module-randomgen", false]], "mt19937 (class in randomgen.mt19937)": [[198, "randomgen.mt19937.MT19937", false]], "mt64 (class in randomgen.mt64)": [[199, "randomgen.mt64.MT64", false]], "multivariate_complex_normal() (randomgen.generator.extendedgenerator method)": [[227, "randomgen.generator.ExtendedGenerator.multivariate_complex_normal", false]], "multivariate_normal() (randomgen.generator.extendedgenerator method)": [[228, "randomgen.generator.ExtendedGenerator.multivariate_normal", false]], "next_double (randomgen.common.interface attribute)": [[218, "randomgen.common.Interface.next_double", false]], "next_uint32 (randomgen.common.interface attribute)": [[218, "randomgen.common.Interface.next_uint32", false]], "next_uint64 (randomgen.common.interface attribute)": [[218, "randomgen.common.Interface.next_uint64", false]], "pcg32 (class in randomgen.pcg32)": [[200, "randomgen.pcg32.PCG32", false]], "pcg64 (class in randomgen.pcg64)": [[201, "randomgen.pcg64.PCG64", false]], "pcg64dxsm (class in randomgen.pcg64)": [[202, "randomgen.pcg64.PCG64DXSM", false]], "philox (class in randomgen.philox)": [[203, "randomgen.philox.Philox", false]], "raisinglock (class in randomgen.rdrand)": [[204, "randomgen.rdrand.RaisingLock", false]], "random() (randomgen.generator.extendedgenerator method)": [[229, "randomgen.generator.ExtendedGenerator.random", false]], "random_entropy() (in module randomgen.entropy)": [[220, "randomgen.entropy.random_entropy", false]], "random_raw() (randomgen.aes.aescounter method)": [[10, "randomgen.aes.AESCounter.random_raw", false]], "random_raw() (randomgen.blabla.blabla method)": [[17, "randomgen.blabla.BlaBla.random_raw", false]], "random_raw() (randomgen.chacha.chacha method)": [[22, "randomgen.chacha.ChaCha.random_raw", false]], "random_raw() (randomgen.dsfmt.dsfmt method)": [[29, "randomgen.dsfmt.DSFMT.random_raw", false]], "random_raw() (randomgen.efiix64.efiix64 method)": [[34, "randomgen.efiix64.EFIIX64.random_raw", false]], "random_raw() (randomgen.hc128.hc128 method)": [[39, "randomgen.hc128.HC128.random_raw", false]], "random_raw() (randomgen.jsf.jsf method)": [[44, "randomgen.jsf.JSF.random_raw", false]], "random_raw() (randomgen.lxm.lxm method)": [[51, "randomgen.lxm.LXM.random_raw", false]], "random_raw() (randomgen.mt19937.mt19937 method)": [[58, "randomgen.mt19937.MT19937.random_raw", false]], "random_raw() (randomgen.mt64.mt64 method)": [[63, "randomgen.mt64.MT64.random_raw", false]], "random_raw() (randomgen.pcg32.pcg32 method)": [[71, "randomgen.pcg32.PCG32.random_raw", false]], "random_raw() (randomgen.pcg64.lcg128mix method)": [[78, "randomgen.pcg64.LCG128Mix.random_raw", false]], "random_raw() (randomgen.pcg64.pcg64 method)": [[86, "randomgen.pcg64.PCG64.random_raw", false]], "random_raw() (randomgen.pcg64.pcg64dxsm method)": [[94, "randomgen.pcg64.PCG64DXSM.random_raw", false]], "random_raw() (randomgen.philox.philox method)": [[102, "randomgen.philox.Philox.random_raw", false]], "random_raw() (randomgen.rdrand.rdrand method)": [[108, "randomgen.rdrand.RDRAND.random_raw", false]], "random_raw() (randomgen.romu.romu method)": [[114, "randomgen.romu.Romu.random_raw", false]], "random_raw() (randomgen.sfc.sfc64 method)": [[119, "randomgen.sfc.SFC64.random_raw", false]], "random_raw() (randomgen.sfmt.sfmt method)": [[127, "randomgen.sfmt.SFMT.random_raw", false]], "random_raw() (randomgen.speck128.speck128 method)": [[135, "randomgen.speck128.SPECK128.random_raw", false]], "random_raw() (randomgen.squares.squares method)": [[142, "randomgen.squares.Squares.random_raw", false]], "random_raw() (randomgen.threefry.threefry method)": [[151, "randomgen.threefry.ThreeFry.random_raw", false]], "random_raw() (randomgen.tyche.tyche method)": [[156, "randomgen.tyche.Tyche.random_raw", false]], "random_raw() (randomgen.wrapper.userbitgenerator method)": [[163, "randomgen.wrapper.UserBitGenerator.random_raw", false]], "random_raw() (randomgen.xoroshiro128.xoroshiro128 method)": [[169, "randomgen.xoroshiro128.Xoroshiro128.random_raw", false]], "random_raw() (randomgen.xorshift1024.xorshift1024 method)": [[176, "randomgen.xorshift1024.Xorshift1024.random_raw", false]], "random_raw() (randomgen.xoshiro256.xoshiro256 method)": [[183, "randomgen.xoshiro256.Xoshiro256.random_raw", false]], "random_raw() (randomgen.xoshiro512.xoshiro512 method)": [[190, "randomgen.xoshiro512.Xoshiro512.random_raw", false]], "randomgen": [[240, "module-randomgen", false]], "randomgen.aes": [[0, "module-randomgen.aes", false]], "randomgen.blabla": [[1, "module-randomgen.blabla", false]], "randomgen.chacha": [[2, "module-randomgen.chacha", false]], "randomgen.common": [[218, "module-randomgen.common", false]], "randomgen.dsfmt": [[3, "module-randomgen.dsfmt", false]], "randomgen.efiix64": [[4, "module-randomgen.efiix64", false]], "randomgen.entropy": [[220, "module-randomgen.entropy", false]], "randomgen.hc128": [[193, "module-randomgen.hc128", false]], "randomgen.jsf": [[195, "module-randomgen.jsf", false]], "randomgen.lxm": [[197, "module-randomgen.lxm", false]], "randomgen.mt19937": [[198, "module-randomgen.mt19937", false]], "randomgen.mt64": [[199, "module-randomgen.mt64", false]], "randomgen.pcg32": [[200, "module-randomgen.pcg32", false]], "randomgen.pcg64": [[201, "module-randomgen.pcg64", false]], "randomgen.philox": [[203, "module-randomgen.philox", false]], "randomgen.rdrand": [[204, "module-randomgen.rdrand", false]], "randomgen.romu": [[205, "module-randomgen.romu", false]], "randomgen.sfc": [[206, "module-randomgen.sfc", false]], "randomgen.sfmt": [[207, "module-randomgen.sfmt", false]], "randomgen.speck128": [[208, "module-randomgen.speck128", false]], "randomgen.squares": [[209, "module-randomgen.squares", false]], "randomgen.threefry": [[210, "module-randomgen.threefry", false]], "randomgen.tyche": [[211, "module-randomgen.tyche", false]], "randomgen.wrapper": [[212, "module-randomgen.wrapper", false]], "randomgen.xoroshiro128": [[213, "module-randomgen.xoroshiro128", false]], "randomgen.xorshift1024": [[214, "module-randomgen.xorshift1024", false]], "randomgen.xoshiro256": [[215, "module-randomgen.xoshiro256", false]], "randomgen.xoshiro512": [[216, "module-randomgen.xoshiro512", false]], "rdrand (class in randomgen.rdrand)": [[204, "randomgen.rdrand.RDRAND", false]], "romu (class in randomgen.romu)": [[205, "randomgen.romu.Romu", false]], "seed() (randomgen.aes.aescounter method)": [[11, "randomgen.aes.AESCounter.seed", false]], "seed() (randomgen.blabla.blabla method)": [[18, "randomgen.blabla.BlaBla.seed", false]], "seed() (randomgen.chacha.chacha method)": [[23, "randomgen.chacha.ChaCha.seed", false]], "seed() (randomgen.dsfmt.dsfmt method)": [[30, "randomgen.dsfmt.DSFMT.seed", false]], "seed() (randomgen.efiix64.efiix64 method)": [[35, "randomgen.efiix64.EFIIX64.seed", false]], "seed() (randomgen.hc128.hc128 method)": [[40, "randomgen.hc128.HC128.seed", false]], "seed() (randomgen.jsf.jsf method)": [[45, "randomgen.jsf.JSF.seed", false]], "seed() (randomgen.lxm.lxm method)": [[52, "randomgen.lxm.LXM.seed", false]], "seed() (randomgen.mt19937.mt19937 method)": [[59, "randomgen.mt19937.MT19937.seed", false]], "seed() (randomgen.mt64.mt64 method)": [[64, "randomgen.mt64.MT64.seed", false]], "seed() (randomgen.pcg32.pcg32 method)": [[72, "randomgen.pcg32.PCG32.seed", false]], "seed() (randomgen.pcg64.lcg128mix method)": [[79, "randomgen.pcg64.LCG128Mix.seed", false]], "seed() (randomgen.pcg64.pcg64 method)": [[87, "randomgen.pcg64.PCG64.seed", false]], "seed() (randomgen.pcg64.pcg64dxsm method)": [[95, "randomgen.pcg64.PCG64DXSM.seed", false]], "seed() (randomgen.philox.philox method)": [[103, "randomgen.philox.Philox.seed", false]], "seed() (randomgen.rdrand.rdrand method)": [[109, "randomgen.rdrand.RDRAND.seed", false]], "seed() (randomgen.romu.romu method)": [[115, "randomgen.romu.Romu.seed", false]], "seed() (randomgen.sfc.sfc64 method)": [[120, "randomgen.sfc.SFC64.seed", false]], "seed() (randomgen.sfmt.sfmt method)": [[128, "randomgen.sfmt.SFMT.seed", false]], "seed() (randomgen.speck128.speck128 method)": [[136, "randomgen.speck128.SPECK128.seed", false]], "seed() (randomgen.squares.squares method)": [[143, "randomgen.squares.Squares.seed", false]], "seed() (randomgen.threefry.threefry method)": [[152, "randomgen.threefry.ThreeFry.seed", false]], "seed() (randomgen.tyche.tyche method)": [[157, "randomgen.tyche.Tyche.seed", false]], "seed() (randomgen.xoroshiro128.xoroshiro128 method)": [[170, "randomgen.xoroshiro128.Xoroshiro128.seed", false]], "seed() (randomgen.xorshift1024.xorshift1024 method)": [[177, "randomgen.xorshift1024.Xorshift1024.seed", false]], "seed() (randomgen.xoshiro256.xoshiro256 method)": [[184, "randomgen.xoshiro256.Xoshiro256.seed", false]], "seed() (randomgen.xoshiro512.xoshiro512 method)": [[191, "randomgen.xoshiro512.Xoshiro512.seed", false]], "seed_seq (randomgen.aes.aescounter attribute)": [[0, "randomgen.aes.AESCounter.seed_seq", false]], "seed_seq (randomgen.blabla.blabla attribute)": [[1, "randomgen.blabla.BlaBla.seed_seq", false]], "seed_seq (randomgen.chacha.chacha attribute)": [[2, "randomgen.chacha.ChaCha.seed_seq", false]], "seed_seq (randomgen.dsfmt.dsfmt attribute)": [[3, "randomgen.dsfmt.DSFMT.seed_seq", false]], "seed_seq (randomgen.efiix64.efiix64 attribute)": [[4, "randomgen.efiix64.EFIIX64.seed_seq", false]], "seed_seq (randomgen.hc128.hc128 attribute)": [[193, "randomgen.hc128.HC128.seed_seq", false]], "seed_seq (randomgen.jsf.jsf attribute)": [[195, "randomgen.jsf.JSF.seed_seq", false]], "seed_seq (randomgen.lxm.lxm attribute)": [[197, "randomgen.lxm.LXM.seed_seq", false]], "seed_seq (randomgen.mt19937.mt19937 attribute)": [[198, "randomgen.mt19937.MT19937.seed_seq", false]], "seed_seq (randomgen.mt64.mt64 attribute)": [[199, "randomgen.mt64.MT64.seed_seq", false]], "seed_seq (randomgen.pcg32.pcg32 attribute)": [[200, "randomgen.pcg32.PCG32.seed_seq", false]], "seed_seq (randomgen.pcg64.lcg128mix attribute)": [[196, "randomgen.pcg64.LCG128Mix.seed_seq", false]], "seed_seq (randomgen.pcg64.pcg64 attribute)": [[201, "randomgen.pcg64.PCG64.seed_seq", false]], "seed_seq (randomgen.pcg64.pcg64dxsm attribute)": [[202, "randomgen.pcg64.PCG64DXSM.seed_seq", false]], "seed_seq (randomgen.philox.philox attribute)": [[203, "randomgen.philox.Philox.seed_seq", false]], "seed_seq (randomgen.rdrand.rdrand attribute)": [[204, "randomgen.rdrand.RDRAND.seed_seq", false]], "seed_seq (randomgen.sfmt.sfmt attribute)": [[207, "randomgen.sfmt.SFMT.seed_seq", false]], "seed_seq (randomgen.speck128.speck128 attribute)": [[208, "randomgen.speck128.SPECK128.seed_seq", false]], "seed_seq (randomgen.squares.squares attribute)": [[209, "randomgen.squares.Squares.seed_seq", false]], "seed_seq (randomgen.threefry.threefry attribute)": [[210, "randomgen.threefry.ThreeFry.seed_seq", false]], "seed_seq (randomgen.tyche.tyche attribute)": [[211, "randomgen.tyche.Tyche.seed_seq", false]], "seed_seq (randomgen.xoroshiro128.xoroshiro128 attribute)": [[213, "randomgen.xoroshiro128.Xoroshiro128.seed_seq", false]], "seed_seq (randomgen.xorshift1024.xorshift1024 attribute)": [[214, "randomgen.xorshift1024.Xorshift1024.seed_seq", false]], "seed_seq (randomgen.xoshiro256.xoshiro256 attribute)": [[215, "randomgen.xoshiro256.Xoshiro256.seed_seq", false]], "seed_seq (randomgen.xoshiro512.xoshiro512 attribute)": [[216, "randomgen.xoshiro512.Xoshiro512.seed_seq", false]], "sfc64 (class in randomgen.sfc)": [[206, "randomgen.sfc.SFC64", false]], "sfmt (class in randomgen.sfmt)": [[207, "randomgen.sfmt.SFMT", false]], "speck128 (class in randomgen.speck128)": [[208, "randomgen.speck128.SPECK128", false]], "squares (class in randomgen.squares)": [[209, "randomgen.squares.Squares", false]], "standard_wishart() (randomgen.generator.extendedgenerator method)": [[230, "randomgen.generator.ExtendedGenerator.standard_wishart", false]], "state (randomgen.aes.aescounter attribute)": [[12, "randomgen.aes.AESCounter.state", false]], "state (randomgen.blabla.blabla attribute)": [[19, "randomgen.blabla.BlaBla.state", false]], "state (randomgen.chacha.chacha attribute)": [[24, "randomgen.chacha.ChaCha.state", false]], "state (randomgen.common.interface attribute)": [[218, "randomgen.common.Interface.state", false]], "state (randomgen.dsfmt.dsfmt attribute)": [[31, "randomgen.dsfmt.DSFMT.state", false]], "state (randomgen.efiix64.efiix64 attribute)": [[36, "randomgen.efiix64.EFIIX64.state", false]], "state (randomgen.generator.extendedgenerator attribute)": [[231, "randomgen.generator.ExtendedGenerator.state", false]], "state (randomgen.hc128.hc128 attribute)": [[41, "randomgen.hc128.HC128.state", false]], "state (randomgen.jsf.jsf attribute)": [[46, "randomgen.jsf.JSF.state", false]], "state (randomgen.lxm.lxm attribute)": [[53, "randomgen.lxm.LXM.state", false]], "state (randomgen.mt19937.mt19937 attribute)": [[60, "randomgen.mt19937.MT19937.state", false]], "state (randomgen.mt64.mt64 attribute)": [[65, "randomgen.mt64.MT64.state", false]], "state (randomgen.pcg32.pcg32 attribute)": [[73, "randomgen.pcg32.PCG32.state", false]], "state (randomgen.pcg64.lcg128mix attribute)": [[80, "randomgen.pcg64.LCG128Mix.state", false]], "state (randomgen.pcg64.pcg64 attribute)": [[88, "randomgen.pcg64.PCG64.state", false]], "state (randomgen.pcg64.pcg64dxsm attribute)": [[96, "randomgen.pcg64.PCG64DXSM.state", false]], "state (randomgen.philox.philox attribute)": [[104, "randomgen.philox.Philox.state", false]], "state (randomgen.rdrand.rdrand attribute)": [[110, "randomgen.rdrand.RDRAND.state", false]], "state (randomgen.romu.romu attribute)": [[116, "randomgen.romu.Romu.state", false]], "state (randomgen.sfc.sfc64 attribute)": [[121, "randomgen.sfc.SFC64.state", false]], "state (randomgen.sfmt.sfmt attribute)": [[129, "randomgen.sfmt.SFMT.state", false]], "state (randomgen.speck128.speck128 attribute)": [[137, "randomgen.speck128.SPECK128.state", false]], "state (randomgen.squares.squares attribute)": [[144, "randomgen.squares.Squares.state", false]], "state (randomgen.threefry.threefry attribute)": [[153, "randomgen.threefry.ThreeFry.state", false]], "state (randomgen.tyche.tyche attribute)": [[158, "randomgen.tyche.Tyche.state", false]], "state (randomgen.wrapper.userbitgenerator attribute)": [[164, "randomgen.wrapper.UserBitGenerator.state", false]], "state (randomgen.xoroshiro128.xoroshiro128 attribute)": [[171, "randomgen.xoroshiro128.Xoroshiro128.state", false]], "state (randomgen.xorshift1024.xorshift1024 attribute)": [[178, "randomgen.xorshift1024.Xorshift1024.state", false]], "state (randomgen.xoshiro256.xoshiro256 attribute)": [[185, "randomgen.xoshiro256.Xoshiro256.state", false]], "state (randomgen.xoshiro512.xoshiro512 attribute)": [[192, "randomgen.xoshiro512.Xoshiro512.state", false]], "state_address (randomgen.common.interface attribute)": [[218, "randomgen.common.Interface.state_address", false]], "success (randomgen.rdrand.rdrand attribute)": [[111, "randomgen.rdrand.RDRAND.success", false]], "threefry (class in randomgen.threefry)": [[210, "randomgen.threefry.ThreeFry", false]], "tyche (class in randomgen.tyche)": [[211, "randomgen.tyche.Tyche", false]], "uintegers() (randomgen.generator.extendedgenerator method)": [[232, "randomgen.generator.ExtendedGenerator.uintegers", false]], "userbitgenerator (class in randomgen.wrapper)": [[212, "randomgen.wrapper.UserBitGenerator", false]], "weyl_increments() (randomgen.sfc.sfc64 method)": [[122, "randomgen.sfc.SFC64.weyl_increments", false]], "wishart() (randomgen.generator.extendedgenerator method)": [[233, "randomgen.generator.ExtendedGenerator.wishart", false]], "xoroshiro128 (class in randomgen.xoroshiro128)": [[213, "randomgen.xoroshiro128.Xoroshiro128", false]], "xorshift1024 (class in randomgen.xorshift1024)": [[214, "randomgen.xorshift1024.Xorshift1024", false]], "xoshiro256 (class in randomgen.xoshiro256)": [[215, "randomgen.xoshiro256.Xoshiro256", false]], "xoshiro512 (class in randomgen.xoshiro512)": [[216, "randomgen.xoshiro512.Xoshiro512", false]]}, "objects": {"": [[240, 0, 0, 1, "randomgen", ""]], "randomgen": [[0, 0, 0, 1, "aes", ""], [1, 0, 0, 1, "blabla", ""], [2, 0, 0, 1, "chacha", ""], [218, 0, 0, 1, "common", ""], [3, 0, 0, 1, "dsfmt", ""], [4, 0, 0, 1, "efiix64", ""], [220, 0, 0, 1, "entropy", ""], [193, 0, 0, 1, "hc128", ""], [195, 0, 0, 1, "jsf", ""], [197, 0, 0, 1, "lxm", ""], [198, 0, 0, 1, "mt19937", ""], [199, 0, 0, 1, "mt64", ""], [200, 0, 0, 1, "pcg32", ""], [201, 0, 0, 1, "pcg64", ""], [203, 0, 0, 1, "philox", ""], [204, 0, 0, 1, "rdrand", ""], [205, 0, 0, 1, "romu", ""], [206, 0, 0, 1, "sfc", ""], [207, 0, 0, 1, "sfmt", ""], [208, 0, 0, 1, "speck128", ""], [209, 0, 0, 1, "squares", ""], [210, 0, 0, 1, "threefry", ""], [211, 0, 0, 1, "tyche", ""], [212, 0, 0, 1, "wrapper", ""], [213, 0, 0, 1, "xoroshiro128", ""], [214, 0, 0, 1, "xorshift1024", ""], [215, 0, 0, 1, "xoshiro256", ""], [216, 0, 0, 1, "xoshiro512", ""]], "randomgen.aes": [[0, 1, 1, 0, "AESCounter", "Container for the AES Counter pseudo-random number generator."]], "randomgen.aes.AESCounter": [[5, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [6, 4, 1, 0, "cffi", "CFFI interface"], [7, 4, 1, 0, "ctypes", "ctypes interface"], [8, 3, 1, 0, "jump", "Jumps the state as-if iter * 2**64 random numbers are generated"], [9, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [0, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [10, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [11, 3, 1, 0, "seed", "Seed the generator"], [0, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [12, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.aes.AESCounter.__init__": [[0, 2, 2, 0, "counter", "Counter to use in the AESCounter state."], [0, 2, 2, 0, "key", "Key to use in the AESCounter state."], [0, 2, 2, 0, "mode", "Deprecated parameter."], [0, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**128), a SeedSequence instance or None (the default)."]], "randomgen.aes.AESCounter.advance": [[5, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.aes.AESCounter.jump": [[8, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.aes.AESCounter.jumped": [[9, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.aes.AESCounter.random_raw": [[10, 2, 2, 0, "output", "Output values."], [10, 2, 2, 0, "size", "Output shape."]], "randomgen.aes.AESCounter.seed": [[11, 2, 2, 0, "counter", "Counter to use in the AESCounter state."], [11, 2, 2, 0, "key", "Key to use in the AESCounter state."], [11, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**128), a SeedSequence instance or None (the default)."]], "randomgen.blabla": [[1, 1, 1, 0, "BlaBla", "Container for the BlaBla family of counter pseudo-random number generators"]], "randomgen.blabla.BlaBla": [[13, 3, 1, 0, "advance", "Advance the state by delta steps"], [14, 4, 1, 0, "cffi", "CFFI interface"], [15, 4, 1, 0, "ctypes", "ctypes interface"], [16, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [1, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [17, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [18, 3, 1, 0, "seed", "Seed the generator"], [1, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [19, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.blabla.BlaBla.__init__": [[1, 2, 2, 0, "counter", "Counter to use in the BlaBla state."], [1, 2, 2, 0, "key", "Key to use in the BlaBla state."], [1, 2, 2, "randomgen.blabla.BlaBla", "mode", "Container for the BlaBla family of counter pseudo-random number generators"], [1, 2, 2, 0, "rounds", "Number of rounds to run the BlaBla mixer."], [1, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**256), an array of 4 uint64 values, a SeedSequence instance or None (the default)."]], "randomgen.blabla.BlaBla.advance": [[13, 2, 2, 0, "delta", "Number of steps to advance the state."]], "randomgen.blabla.BlaBla.jumped": [[16, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.blabla.BlaBla.random_raw": [[17, 2, 2, 0, "output", "Output values."], [17, 2, 2, 0, "size", "Output shape."]], "randomgen.blabla.BlaBla.seed": [[18, 2, 2, "randomgen.blabla.BlaBla.seed", "counter", "Seed the generator"], [18, 2, 2, "randomgen.blabla.BlaBla.seed", "key", "Seed the generator"], [18, 2, 2, "randomgen.blabla.BlaBla.seed", "seed", "Seed the generator"]], "randomgen.chacha": [[2, 1, 1, 0, "ChaCha", "Container for the ChaCha family of Counter pseudo-random number generators"]], "randomgen.chacha.ChaCha": [[20, 4, 1, 0, "cffi", "CFFI interface"], [21, 4, 1, 0, "ctypes", "ctypes interface"], [2, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [22, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [23, 3, 1, 0, "seed", "Seed the generator"], [2, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [24, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.chacha.ChaCha.__init__": [[2, 2, 2, 0, "counter", "Counter to use in the ChaCha state."], [2, 2, 2, 0, "key", "Key to use in the ChaCha state."], [2, 2, 2, 0, "mode", "Deprecated parameter."], [2, 2, 2, 0, "rounds", "Number of rounds to run the ChaCha mixer."], [2, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**256), an array of 4 uint64 values, a SeedSequence instance or None (the default)."]], "randomgen.chacha.ChaCha.random_raw": [[22, 2, 2, 0, "output", "Output values."], [22, 2, 2, 0, "size", "Output shape."]], "randomgen.chacha.ChaCha.seed": [[23, 2, 2, "randomgen.chacha.ChaCha.seed", "counter", "Seed the generator"], [23, 2, 2, "randomgen.chacha.ChaCha.seed", "key", "Seed the generator"], [23, 2, 2, "randomgen.chacha.ChaCha.seed", "seed", "Seed the generator"]], "randomgen.common": [[218, 1, 1, 0, "Interface", "Interface for interacting with a BitGenerator using ctypes or cffi"]], "randomgen.common.Interface": [[218, 4, 1, 0, "bit_generator", "Void pointer to the bit generator struct"], [218, 4, 1, 0, "next_double", "Function type the returns psuedo-random double values"], [218, 4, 1, 0, "next_uint32", "Function type the returns psuedo-random uint32 values"], [218, 4, 1, 0, "next_uint64", "Function type the returns psuedo-random uint64 values"], [218, 4, 1, 0, "state", "Void pointer to the state struct"], [218, 4, 1, 0, "state_address", "The state memoty address"]], "randomgen.common.Interface.__init__": [[218, 2, 2, "randomgen.common.Interface", "bit_generator", "Interface for interacting with a BitGenerator using ctypes or cffi"], [218, 2, 2, "randomgen.common.Interface", "next_double", "Interface for interacting with a BitGenerator using ctypes or cffi"], [218, 2, 2, "randomgen.common.Interface", "next_uint32", "Interface for interacting with a BitGenerator using ctypes or cffi"], [218, 2, 2, "randomgen.common.Interface", "next_uint64", "Interface for interacting with a BitGenerator using ctypes or cffi"], [218, 2, 2, "randomgen.common.Interface", "state", "Interface for interacting with a BitGenerator using ctypes or cffi"], [218, 2, 2, "randomgen.common.Interface", "state_address", "Interface for interacting with a BitGenerator using ctypes or cffi"]], "randomgen.dsfmt": [[3, 1, 1, 0, "DSFMT", "Container for the SIMD-based Mersenne Twister pseudo RNG."]], "randomgen.dsfmt.DSFMT": [[25, 4, 1, 0, "cffi", "CFFI interface"], [26, 4, 1, 0, "ctypes", "ctypes interface"], [27, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated."], [28, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [3, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [29, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [30, 3, 1, 0, "seed", "Seed the generator"], [3, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [31, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.dsfmt.DSFMT.__init__": [[3, 2, 2, 0, "mode", "Deprecated parameter."], [3, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator."]], "randomgen.dsfmt.DSFMT.jump": [[27, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator."]], "randomgen.dsfmt.DSFMT.jumped": [[28, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.dsfmt.DSFMT.random_raw": [[29, 2, 2, 0, "output", "Output values."], [29, 2, 2, 0, "size", "Output shape."]], "randomgen.dsfmt.DSFMT.seed": [[30, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator. Can be any integer between 0 and 2**32 - 1 inclusive, an array (or other sequence) of unsigned 32-bit integers, a SeedSequence instance or None (the default)."]], "randomgen.efiix64": [[4, 1, 1, 0, "EFIIX64", "Container for the EFIIX64x384 pseudo-random number generator."]], "randomgen.efiix64.EFIIX64": [[32, 4, 1, 0, "cffi", "CFFI interface"], [33, 4, 1, 0, "ctypes", "ctypes interface"], [4, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [34, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [35, 3, 1, 0, "seed", "Seed the generator"], [4, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [36, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.efiix64.EFIIX64.__init__": [[4, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.efiix64.EFIIX64.random_raw": [[34, 2, 2, 0, "output", "Output values."], [34, 2, 2, 0, "size", "Output shape."]], "randomgen.efiix64.EFIIX64.seed": [[35, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]], "randomgen.entropy": [[220, 5, 1, 0, "random_entropy", "Read entropy from the system cryptographic provider"]], "randomgen.entropy.random_entropy": [[220, 2, 2, 0, "size", "Output shape."], [220, 2, 2, 0, "source", "Source of entropy."]], "randomgen.generator": [[222, 1, 1, 0, "ExtendedGenerator", "Additional random value generator using a bit generator source."]], "randomgen.generator.ExtendedGenerator": [[225, 4, 1, 0, "bit_generator", "Gets the bit generator instance used by the generator"], [226, 3, 1, 0, "complex_normal", "Draw random samples from a complex normal (Gaussian) distribution."], [227, 3, 1, 0, "multivariate_complex_normal", "Draw random samples from a multivariate complex normal (Gaussian) distribution."], [228, 3, 1, 0, "multivariate_normal", "Draw random samples from a multivariate normal distribution."], [229, 3, 1, 0, "random", "Return random floats in the half-open interval [0.0, 1.0)."], [230, 3, 1, 0, "standard_wishart", "Draw samples from the Standard Wishart and Pseudo-Wishart distributions"], [231, 4, 1, 0, "state", "Get or set the bit generator's state"], [232, 3, 1, 0, "uintegers", "Return random unsigned integers"], [233, 3, 1, 0, "wishart", "Draw samples from the Wishart and pseudo-Wishart distributions."]], "randomgen.generator.ExtendedGenerator.__init__": [[222, 2, 2, 0, "bit_generator", "Bit generator to use as the core generator."]], "randomgen.generator.ExtendedGenerator.complex_normal": [[226, 2, 2, 0, "gamma", "Variance of the distribution"], [226, 2, 2, 0, "loc", "Mean of the distribution."], [226, 2, 2, 0, "relation", "Relation between the two component normals"], [226, 2, 2, 0, "size", "Output shape."]], "randomgen.generator.ExtendedGenerator.multivariate_complex_normal": [[227, 2, 2, 0, "check_valid", "Behavior when the covariance matrix implied by gamma and relation is not positive semidefinite."], [227, 2, 2, 0, "gamma", "Covariance of the real component of the distribution."], [227, 2, 2, 0, "loc", "Mean of the distribution."], [227, 2, 2, 0, "method", "The cov input is used to compute a factor matrix A such that A @ A.T = cov."], [227, 2, 2, 0, "relation", "Relation between the two component normals."], [227, 2, 2, 0, "size", "Given a shape of, for example, (m,n,k), m*n*k samples are generated, and packed in an m-by-n-by-k arrangement."], [227, 2, 2, 0, "tol", "Tolerance when checking the singular values in the covariance matrix implied by gamma and relation."]], "randomgen.generator.ExtendedGenerator.multivariate_normal": [[228, 2, 2, 0, "check_valid", "Behavior when the covariance matrix is not positive semidefinite."], [228, 2, 2, 0, "cov", "Covariance matrix of the distribution."], [228, 2, 2, 0, "mean", "Mean of the distribution."], [228, 2, 2, 0, "method", "The cov input is used to compute a factor matrix A such that A @ A.T = cov."], [228, 2, 2, 0, "size", "Given a shape of, for example, (m,n,k), m*n*k samples are generated, and packed in an m-by-n-by-k arrangement."], [228, 2, 2, 0, "tol", "Tolerance when checking the singular values in covariance matrix. cov is cast to double before the check."]], "randomgen.generator.ExtendedGenerator.random": [[229, 2, 2, 0, "dtype", "Desired dtype of the result."], [229, 2, 2, 0, "out", "Alternative output array in which to place the result."], [229, 2, 2, 0, "size", "Output shape."]], "randomgen.generator.ExtendedGenerator.standard_wishart": [[230, 2, 2, 0, "df", "The degree-of-freedom for the simulated Wishart variates."], [230, 2, 2, 0, "dim", "The dimension of the simulated Wishart variates."], [230, 2, 2, 0, "rescale", "Flag indicating whether to rescale the outputs to have expectation identity."], [230, 2, 2, 0, "size", "Output shape, excluding trailing dims."]], "randomgen.generator.ExtendedGenerator.uintegers": [[232, 2, 2, 0, "bits", "Size of the unsigned integer to return, either 32 bit or 64 bit."], [232, 2, 2, 0, "size", "Output shape."]], "randomgen.generator.ExtendedGenerator.wishart": [[233, 2, 2, 0, "check_valid", "Behavior when the covariance matrix has rank less than rank."], [233, 2, 2, 0, "df", "Degree-of-freedom values."], [233, 2, 2, 0, "method", "The cov input is used to compute a factor matrix A such that A @ A.T = cov."], [233, 2, 2, 0, "rank", "The rank of shape when generating from the Singular Wishart distribution."], [233, 2, 2, 0, "scale", "Shape matrix of the distribution."], [233, 2, 2, 0, "size", "Given a shape of, for example, (m,n,k), m*n*k samples are generated, and packed in an m-by-n-by-k arrangement."], [233, 2, 2, 0, "tol", "Tolerance when checking the rank of shape."]], "randomgen.hc128": [[193, 1, 1, 0, "HC128", "Container for the HC-128 cipher-based pseudo-random number generator"]], "randomgen.hc128.HC128": [[37, 4, 1, 0, "cffi", "CFFI interface"], [38, 4, 1, 0, "ctypes", "ctypes interface"], [193, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [39, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [40, 3, 1, 0, "seed", "Seed the generator"], [193, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [41, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.hc128.HC128.__init__": [[193, 2, 2, 0, "key", "Key for HC128."], [193, 2, 2, 0, "mode", "Deprecated parameter."], [193, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.hc128.HC128.random_raw": [[39, 2, 2, 0, "output", "Output values."], [39, 2, 2, 0, "size", "Output shape."]], "randomgen.hc128.HC128.seed": [[40, 2, 2, 0, "key", "Key for HC128."], [40, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]], "randomgen.jsf": [[195, 1, 1, 0, "JSF", "Container for Jenkins's Fast Small (JSF) pseudo-random number generator"]], "randomgen.jsf.JSF": [[42, 4, 1, 0, "cffi", "CFFI interface"], [43, 4, 1, 0, "ctypes", "ctypes interface"], [195, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [44, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [45, 3, 1, 0, "seed", "Seed the generator"], [195, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [46, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.jsf.JSF.__init__": [[195, 2, 2, 0, "mode", "Deprecated parameter."], [195, 2, 2, 0, "p", "One the the three parameters that defines JSF."], [195, 2, 2, 0, "q", "One the the three parameters that defines JSF."], [195, 2, 2, 0, "r", "One the the three parameters that defines JSF."], [195, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."], [195, 2, 2, 0, "seed_size", "Number of distinct seed values used to initialize JSF."], [195, 2, 2, 0, "size", "Output size of a single iteration of JSF."]], "randomgen.jsf.JSF.random_raw": [[44, 2, 2, 0, "output", "Output values."], [44, 2, 2, 0, "size", "Output shape."]], "randomgen.jsf.JSF.seed": [[45, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."]], "randomgen.lxm": [[197, 1, 1, 0, "LXM", "Container for the LXM pseudo-random number generator."]], "randomgen.lxm.LXM": [[47, 4, 1, 0, "cffi", "CFFI interface"], [48, 4, 1, 0, "ctypes", "ctypes interface"], [49, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated"], [50, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [197, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [51, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [52, 3, 1, 0, "seed", "Seed the generator"], [197, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [53, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.lxm.LXM.__init__": [[197, 2, 2, 0, "b", "The additive constant in the LCG update."], [197, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.lxm.LXM.jump": [[49, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.lxm.LXM.jumped": [[50, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.lxm.LXM.random_raw": [[51, 2, 2, 0, "output", "Output values."], [51, 2, 2, 0, "size", "Output shape."]], "randomgen.lxm.LXM.seed": [[52, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). The input is passed to SeedSequence which produces the values used to initialize the state."]], "randomgen.mt19937": [[198, 1, 1, 0, "MT19937", "Container for the Mersenne Twister pseudo-random number generator."]], "randomgen.mt19937.MT19937": [[54, 4, 1, 0, "cffi", "CFFI interface"], [55, 4, 1, 0, "ctypes", "ctypes interface"], [56, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated."], [57, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [198, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [58, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [59, 3, 1, 0, "seed", "Seed the generator"], [198, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [60, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.mt19937.MT19937.__init__": [[198, 2, 2, 0, "mode", "\"sequence\" uses a SeedSequence to transforms the seed into an initial state."], [198, 2, 2, 0, "numpy_seed", "Set to True to use  the same seeding mechanism as NumPy and so matches NumPy exactly."], [198, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator."]], "randomgen.mt19937.MT19937.jump": [[56, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator."]], "randomgen.mt19937.MT19937.jumped": [[57, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.mt19937.MT19937.random_raw": [[58, 2, 2, 0, "output", "Output values."], [58, 2, 2, 0, "size", "Output shape."]], "randomgen.mt19937.MT19937.seed": [[59, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator. Can be any integer between 0 and 2**32 - 1 inclusive, an array (or other sequence) of unsigned 32-bit integers, a SeedSequence instance or None (the default)."]], "randomgen.mt64": [[199, 1, 1, 0, "MT64", "Container for the 64-bit Mersenne Twister pseudo-random number generator"]], "randomgen.mt64.MT64": [[61, 4, 1, 0, "cffi", "CFFI interface"], [62, 4, 1, 0, "ctypes", "ctypes interface"], [199, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [63, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [64, 3, 1, 0, "seed", "Seed the generator"], [199, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [65, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.mt64.MT64.__init__": [[199, 2, 2, 0, "mode", "Deprecated parameter."], [199, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator."]], "randomgen.mt64.MT64.random_raw": [[63, 2, 2, 0, "output", "Output values."], [63, 2, 2, 0, "size", "Output shape."]], "randomgen.mt64.MT64.seed": [[64, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator."]], "randomgen.pcg32": [[200, 1, 1, 0, "PCG32", "Container for the PCG-32 pseudo-random number generator."]], "randomgen.pcg32.PCG32": [[66, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [67, 4, 1, 0, "cffi", "CFFI interface"], [68, 4, 1, 0, "ctypes", "ctypes interface"], [69, 3, 1, 0, "jump", "Jump the state a fixed increment"], [70, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [200, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [71, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [72, 3, 1, 0, "seed", "Seed the generator"], [200, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [73, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.pcg32.PCG32.__init__": [[200, 2, 2, 0, "inc", "The increment in the LCG."], [200, 2, 2, 0, "mode", "Deprecated parameter."], [200, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."]], "randomgen.pcg32.PCG32.advance": [[66, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.pcg32.PCG32.jump": [[69, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.pcg32.PCG32.jumped": [[70, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.pcg32.PCG32.random_raw": [[71, 2, 2, 0, "output", "Output values."], [71, 2, 2, 0, "size", "Output shape."]], "randomgen.pcg32.PCG32.seed": [[72, 2, 2, 0, "inc", "The increment in the LCG."], [72, 2, 2, 0, "seed", "Seed for PCG64."]], "randomgen.pcg64": [[196, 1, 1, 0, "LCG128Mix", "Customizable 128-bit LCG bit generator with output mixing"], [201, 1, 1, 0, "PCG64", "Container for the PCG-64 pseudo-random number generator."], [202, 1, 1, 0, "PCG64DXSM", "Container for the PCG-64 updated with a 64-bit mult using DXSM output func."]], "randomgen.pcg64.LCG128Mix": [[74, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [75, 4, 1, 0, "cffi", "CFFI interface"], [76, 4, 1, 0, "ctypes", "ctypes interface"], [77, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [196, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [78, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [79, 3, 1, 0, "seed", "Seed the generator"], [196, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [80, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.pcg64.LCG128Mix.__init__": [[196, 2, 2, 0, "dxsm_multiplier", "The multiplier to use in the DXSM output function."], [196, 2, 2, 0, "inc", "The increment in the LCG."], [196, 2, 2, 0, "multiplier", "The multipler to use in the LCG."], [196, 2, 2, 0, "output", "The name of the output function or a ctypes function or function pointer with a signature uint64(uint64, uint64)."], [196, 2, 2, 0, "post", "Whether the mix the output before or after the next increment of the LCG is computed."], [196, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer, a sequence of integers, a SeedSequence instance or None (the default)."]], "randomgen.pcg64.LCG128Mix.advance": [[74, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.pcg64.LCG128Mix.jumped": [[77, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.pcg64.LCG128Mix.random_raw": [[78, 2, 2, 0, "output", "Output values."], [78, 2, 2, 0, "size", "Output shape."]], "randomgen.pcg64.LCG128Mix.seed": [[79, 2, 2, 0, "inc", "The increment in the LCG."], [79, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."]], "randomgen.pcg64.PCG64": [[81, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [82, 4, 1, 0, "cffi", "CFFI interface"], [83, 4, 1, 0, "ctypes", "ctypes interface"], [84, 3, 1, 0, "jump", "Jump the state a fixed increment"], [85, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [201, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [86, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [87, 3, 1, 0, "seed", "Seed the generator"], [201, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [88, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.pcg64.PCG64.__init__": [[201, 2, 2, 0, "inc", "The increment in the LCG."], [201, 2, 2, 0, "mode", "\"sequence\" uses a SeedSequence to transforms the seed into an initial state."], [201, 2, 2, 0, "numpy_seed", "Set to True to use  the same seeding mechanism as NumPy and so matches NumPy exactly."], [201, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**128), a SeedSequence instance or None (the default)."], [201, 2, 2, 0, "variant", "Name of PCG64 variant to use."]], "randomgen.pcg64.PCG64.advance": [[81, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.pcg64.PCG64.jump": [[84, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.pcg64.PCG64.jumped": [[85, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.pcg64.PCG64.random_raw": [[86, 2, 2, 0, "output", "Output values."], [86, 2, 2, 0, "size", "Output shape."]], "randomgen.pcg64.PCG64.seed": [[87, 2, 2, 0, "inc", "The increment in the LCG."], [87, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."]], "randomgen.pcg64.PCG64DXSM": [[89, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [90, 4, 1, 0, "cffi", "CFFI interface"], [91, 4, 1, 0, "ctypes", "ctypes interface"], [92, 3, 1, 0, "jump", "Not implemented. Use jumped."], [93, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [202, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [94, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [95, 3, 1, 0, "seed", "Seed the generator"], [202, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [96, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.pcg64.PCG64DXSM.__init__": [[202, 2, 2, 0, "inc", "The increment in the LCG."], [202, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**128), a SeedSequence instance or None (the default)."]], "randomgen.pcg64.PCG64DXSM.advance": [[89, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.pcg64.PCG64DXSM.jump": [[92, 2, 2, "randomgen.pcg64.PCG64DXSM.jump", "iter", "Not implemented. Use jumped."]], "randomgen.pcg64.PCG64DXSM.jumped": [[93, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.pcg64.PCG64DXSM.random_raw": [[94, 2, 2, 0, "output", "Output values."], [94, 2, 2, 0, "size", "Output shape."]], "randomgen.pcg64.PCG64DXSM.seed": [[95, 2, 2, 0, "inc", "The increment in the LCG."], [95, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."]], "randomgen.philox": [[203, 1, 1, 0, "Philox", "Container for the Philox family of pseudo-random number generators."]], "randomgen.philox.Philox": [[97, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [98, 4, 1, 0, "cffi", "CFFI interface"], [99, 4, 1, 0, "ctypes", "ctypes interface"], [100, 3, 1, 0, "jump", "Jumps the state as-if 2**(W*N/2) random numbers have been generated."], [101, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [203, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [102, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [103, 3, 1, 0, "seed", "Seed the generator"], [203, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [104, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.philox.Philox.__init__": [[203, 2, 2, 0, "counter", "Counter to use in the Philox state."], [203, 2, 2, 0, "key", "Key to use in the Philox state."], [203, 2, 2, 0, "mode", "\"sequence\" uses a SeedSequence to transforms the seed into an initial state."], [203, 2, 2, 0, "number", "Number of values to produce in a single call."], [203, 2, 2, 0, "numpy_seed", "Set to True to use  the same seeding mechanism as NumPy and so matches NumPy exactly."], [203, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, data will be read from /dev/urandom (or the Windows analog) if available."], [203, 2, 2, 0, "width", "Bit width the values produced."]], "randomgen.philox.Philox.advance": [[97, 2, 2, 0, "counter", "Flag indicating whether the advance the counter only or both the counter and the buffer position."], [97, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.philox.Philox.jump": [[100, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.philox.Philox.jumped": [[101, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.philox.Philox.random_raw": [[102, 2, 2, 0, "output", "Output values."], [102, 2, 2, 0, "size", "Output shape."]], "randomgen.philox.Philox.seed": [[103, 2, 2, 0, "counter", "Counter to use in the Philox state."], [103, 2, 2, 0, "key", "Key to use in the Philox state."], [103, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, data will be read from /dev/urandom (or the Windows analog) if available."]], "randomgen.rdrand": [[204, 1, 1, 0, "RDRAND", "Container for the hardware RDRAND random number generator."], [204, 1, 1, 0, "RaisingLock", "A Lock that wraps threading.Lock can can raise errors."]], "randomgen.rdrand.RDRAND": [[105, 4, 1, 0, "cffi", "CFFI interface"], [106, 4, 1, 0, "ctypes", "ctypes interface"], [107, 3, 1, 0, "jumped", "Returns a new bit generator"], [204, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [108, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [109, 3, 1, 0, "seed", "Compatibility function. Not used."], [204, 4, 1, 0, "seed_seq", "Always None since RDRAND cannot be seeded."], [110, 4, 1, 0, "state", "Get or set the PRNG state"], [111, 4, 1, 0, "success", "Gets the flag indicating that all calls to RDRAND succeeded"]], "randomgen.rdrand.RDRAND.__init__": [[204, 2, 2, 0, "retries", "The number of times to retry."], [204, 2, 2, 0, "seed", "Must be None."]], "randomgen.rdrand.RDRAND.jumped": [[107, 2, 2, 0, "iter", "This parameter is ignored"]], "randomgen.rdrand.RDRAND.random_raw": [[108, 2, 2, 0, "output", "Output values."], [108, 2, 2, 0, "size", "Output shape."]], "randomgen.rdrand.RDRAND.seed": [[109, 2, 2, 0, "seed", "Must be None."]], "randomgen.romu": [[205, 1, 1, 0, "Romu", "Mark A. Overton's quad and trio rotate-multiply-based generators"]], "randomgen.romu.Romu": [[112, 4, 1, 0, "cffi", "CFFI interface"], [113, 4, 1, 0, "ctypes", "ctypes interface"], [114, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [115, 3, 1, 0, "seed", "Seed the generator"], [116, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.romu.Romu.__init__": [[205, 2, 2, 0, "seed", "A seed to initialize the BitGenerator."], [205, 2, 2, 0, "variant", "The variant to use."]], "randomgen.romu.Romu.random_raw": [[114, 2, 2, 0, "output", "Output values."], [114, 2, 2, 0, "size", "Output shape."]], "randomgen.romu.Romu.seed": [[115, 2, 2, "randomgen.romu.Romu.seed", "seed", "Seed the generator"]], "randomgen.sfc": [[206, 1, 1, 0, "SFC64", "Chris Doty-Humphrey's Small Fast Chaotic PRNG with optional Weyl Sequence"]], "randomgen.sfc.SFC64": [[117, 4, 1, 0, "cffi", "CFFI interface"], [118, 4, 1, 0, "ctypes", "ctypes interface"], [119, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [120, 3, 1, 0, "seed", "Seed the generator"], [121, 4, 1, 0, "state", "Get or set the PRNG state"], [122, 3, 1, 0, "weyl_increments", "Generate distinct Weyl increments to construct multiple streams"]], "randomgen.sfc.SFC64.__init__": [[206, 2, 2, 0, "k", "The increment to the Weyl sequence."], [206, 2, 2, 0, "mode", "The default uses a seed sequence to initialize all unspecified values. When using \"numpy\" uses the seed sequence to initialize three values and checks that both w and k are 1."], [206, 2, 2, 0, "numpy_seed", "Set to True to use  the same seeding mechanism as NumPy. Uses the seed sequence to initialize three state values and checks that both w and k are 1."], [206, 2, 2, 0, "seed", "A seed to initialize the BitGenerator."], [206, 2, 2, 0, "w", "The starting value of the Weyl sequence."]], "randomgen.sfc.SFC64.random_raw": [[119, 2, 2, 0, "output", "Output values."], [119, 2, 2, 0, "size", "Output shape."]], "randomgen.sfc.SFC64.seed": [[120, 2, 2, "randomgen.sfc.SFC64.seed", "seed", "Seed the generator"]], "randomgen.sfc.SFC64.weyl_increments": [[122, 2, 2, 0, "max_bits", "Maximum number of non-zero bits in the values returned."], [122, 2, 2, 0, "min_bits", "The minimum number of non-zero bits in the values returned."], [122, 2, 2, 0, "n", "Number of distinct values to generate."]], "randomgen.sfmt": [[207, 1, 1, 0, "SFMT", "Container for the SIMD-based Mersenne Twister pseudo RNG."]], "randomgen.sfmt.SFMT": [[123, 4, 1, 0, "cffi", "CFFI interface"], [124, 4, 1, 0, "ctypes", "ctypes interface"], [125, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated."], [126, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [207, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [127, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [128, 3, 1, 0, "seed", "Seed the generator"], [207, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [129, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.sfmt.SFMT.__init__": [[207, 2, 2, 0, "mode", "Deprecated parameter."], [207, 2, 2, 0, "seed", "Entropy used to initialize the pseudo-random number generator."]], "randomgen.sfmt.SFMT.jump": [[125, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator."]], "randomgen.sfmt.SFMT.jumped": [[126, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.sfmt.SFMT.random_raw": [[127, 2, 2, 0, "output", "Output values."], [127, 2, 2, 0, "size", "Output shape."]], "randomgen.sfmt.SFMT.seed": [[128, 2, 2, 0, "seed", "Entropy used to initialize the pseudo-random number generator."]], "randomgen.speck128": [[208, 1, 1, 0, "SPECK128", "Container for the SPECK (128 x 256) pseudo-random number generator."]], "randomgen.speck128.SPECK128": [[130, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [131, 4, 1, 0, "cffi", "CFFI interface"], [132, 4, 1, 0, "ctypes", "ctypes interface"], [133, 3, 1, 0, "jump", "Jumps the state as-if iter * 2**64 random numbers are generated"], [134, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [208, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [135, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [136, 3, 1, 0, "seed", "Seed the generator"], [208, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [137, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.speck128.SPECK128.__init__": [[208, 2, 2, 0, "counter", "Counter to use in the SPECK128 state."], [208, 2, 2, 0, "key", "Key to use in the SPECK128 state."], [208, 2, 2, 0, "mode", "Deprecated parameter."], [208, 2, 2, 0, "rounds", "Number of rounds of the SPECK algorithm to run."], [208, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**256), a SeedSequence instance or None (the default)."]], "randomgen.speck128.SPECK128.advance": [[130, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.speck128.SPECK128.jump": [[133, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.speck128.SPECK128.jumped": [[134, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.speck128.SPECK128.random_raw": [[135, 2, 2, 0, "output", "Output values."], [135, 2, 2, 0, "size", "Output shape."]], "randomgen.speck128.SPECK128.seed": [[136, 2, 2, 0, "counter", "Integer in [0,2**128) containing the counter position or a 2-element array of uint64 containing the counter"], [136, 2, 2, 0, "key", "Integer in [0,2**256) containing the key or a 4-element array of uint64 containing the key"], [136, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**256), a SeedSequence instance or None (the default)."]], "randomgen.squares": [[209, 1, 1, 0, "Squares", "Squares counter-based PRNG"], [145, 5, 1, 0, "generate_keys", "Pre-generate keys for use with Squares"]], "randomgen.squares.Squares": [[138, 3, 1, 0, "advance", "Advance the state of the PRNG"], [139, 4, 1, 0, "cffi", "CFFI interface"], [140, 4, 1, 0, "ctypes", "ctypes interface"], [141, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [209, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [142, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [143, 3, 1, 0, "seed", "Seed the generator"], [209, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [144, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.squares.Squares.__init__": [[209, 2, 2, 0, "counter", "The initial counter to use when constructing the PRNG. The defalt value is 0."], [209, 2, 2, 0, "key", "The key to use when constructing the PRNG."], [209, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."], [209, 2, 2, 0, "variant", "The variance of the Square to use."]], "randomgen.squares.Squares.advance": [[138, 2, 2, 0, "delta", "The number of steps to advance the PRNG."]], "randomgen.squares.Squares.jumped": [[141, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.squares.Squares.random_raw": [[142, 2, 2, 0, "output", "Output values."], [142, 2, 2, 0, "size", "Output shape."]], "randomgen.squares.Squares.seed": [[143, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]], "randomgen.squares.generate_keys": [[145, 2, 2, 0, "n", "Number of keys to generate."], [145, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."], [145, 2, 2, 0, "unique", "If True, return only unique keys."]], "randomgen.threefry": [[210, 1, 1, 0, "ThreeFry", "Container for the ThreeFry family of pseudo-random number generators."]], "randomgen.threefry.ThreeFry": [[146, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [147, 4, 1, 0, "cffi", "CFFI interface"], [148, 4, 1, 0, "ctypes", "ctypes interface"], [149, 3, 1, 0, "jump", "Jumps the state as-if 2**(W*N/2) random numbers have been generated."], [150, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [210, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [151, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [152, 3, 1, 0, "seed", "Seed the generator"], [210, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [153, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.threefry.ThreeFry.__init__": [[210, 2, 2, 0, "counter", "Counter to use in the ThreeFry state."], [210, 2, 2, 0, "key", "Key to use in the ThreeFry state."], [210, 2, 2, 0, "mode", "Deprecated parameter."], [210, 2, 2, 0, "number", "Number of values to produce in a single call."], [210, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, data will be read from /dev/urandom (or the Windows analog) if available."], [210, 2, 2, 0, "width", "Bit width the values produced."]], "randomgen.threefry.ThreeFry.advance": [[146, 2, 2, 0, "counter", "Flag indicating whether the advance the counter only or both the counter and the buffer position."], [146, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.threefry.ThreeFry.jump": [[149, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.threefry.ThreeFry.jumped": [[150, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.threefry.ThreeFry.random_raw": [[151, 2, 2, 0, "output", "Output values."], [151, 2, 2, 0, "size", "Output shape."]], "randomgen.threefry.ThreeFry.seed": [[152, 2, 2, 0, "counter", "Counter to use in the ThreeFry state."], [152, 2, 2, 0, "key", "Key to use in the ThreeFry state."], [152, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, data will be read from /dev/urandom (or the Windows analog) if available."]], "randomgen.tyche": [[211, 1, 1, 0, "Tyche", "Container for the Tychee pseudo-random number generator."]], "randomgen.tyche.Tyche": [[154, 4, 1, 0, "cffi", "CFFI interface"], [155, 4, 1, 0, "ctypes", "ctypes interface"], [211, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [156, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [157, 3, 1, 0, "seed", "Seed the generator"], [211, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [158, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.tyche.Tyche.__init__": [[211, 2, 2, 0, "idx", "The index to use when seeding from a SeedSequence."], [211, 2, 2, 0, "original", "If True, use the original Tyche implementation."], [211, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.tyche.Tyche.random_raw": [[156, 2, 2, 0, "output", "Output values."], [156, 2, 2, 0, "size", "Output shape."]], "randomgen.tyche.Tyche.seed": [[157, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]], "randomgen.wrapper": [[212, 1, 1, 0, "UserBitGenerator", "Construct a bit generator from  Python functions"]], "randomgen.wrapper.UserBitGenerator": [[159, 4, 1, 0, "cffi", "CFFI interface"], [160, 4, 1, 0, "ctypes", "ctypes interface"], [161, 3, 1, 0, "from_cfunc", "state_getter=None, state_setter=None)"], [162, 3, 1, 0, "from_ctypes", "state_getter=None, state_setter=None)"], [163, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [164, 4, 1, 0, "state", "Get or set the state"]], "randomgen.wrapper.UserBitGenerator.__init__": [[212, 2, 2, 0, "bits", "The number of bits output by the next_raw callable."], [212, 2, 2, 0, "next_32", "A callable with the same signature as as next_raw that always return 32 bits."], [212, 2, 2, 0, "next_64", "A callable with the same signature as as next_raw that always return 64 bits."], [212, 2, 2, 0, "next_double", "A callable with the same signature as as next_raw that always return a random double in [0,1)."], [212, 2, 2, 0, "next_raw", "A callable that returns either 64 or 32 random bits."], [212, 2, 2, 0, "state", "A ctypes pointer to pass into the next functions."], [212, 2, 2, 0, "state_getter", "A callable that returns the state of the bit generator."], [212, 2, 2, 0, "state_setter", "A callable that sets the state of the bit generator."]], "randomgen.wrapper.UserBitGenerator.from_cfunc": [[161, 2, 2, 0, "next_32", "A numba callback with a signature uint32(void) the return the next 32 bits from the underlying PRNG."], [161, 2, 2, 0, "next_64", "A numba callback with a signature uint64(void) the return the next 64 bits from the underlying PRNG."], [161, 2, 2, 0, "next_double", "A numba callback with a signature uint32(void) the return the next double in [0,1) from the underlying PRNG."], [161, 2, 2, 0, "next_raw", "A numba callback with a signature uint64(void) the return the next raw value from the underlying PRNG."], [161, 2, 2, 0, "state", "A void pointer to the state."], [161, 2, 2, 0, "state_getter", "A callable that returns the state of the bit generator."], [161, 2, 2, 0, "state_setter", "A callable that sets the state of the bit generator."]], "randomgen.wrapper.UserBitGenerator.from_ctypes": [[162, 2, 2, 0, "next_32", "A CFunctionType returning ctypes.c_uint64 and taking one ctypes.c_void_p input that returns the next 32 bits from the underlying PRNG."], [162, 2, 2, 0, "next_64", "A CFunctionType returning ctypes.c_uint64 and taking one ctypes.c_void_p input that returns the next 64 bits from the underlying PRNG."], [162, 2, 2, 0, "next_double", "A CFunctionType returning ctypes.c_uint64 and taking one ctypes.c_void_p input that returns the next double in [0,1) value from the underlying PRNG."], [162, 2, 2, 0, "next_raw", "A CFunctionType returning ctypes.c_uint64 and taking one ctypes.c_void_p input that returns the next raw value from the underlying PRNG."], [162, 2, 2, 0, "state", "A void pointer to the state."], [162, 2, 2, 0, "state_getter", "A callable that returns the state of the bit generator."], [162, 2, 2, 0, "state_setter", "A callable that sets the state of the bit generator."]], "randomgen.wrapper.UserBitGenerator.random_raw": [[163, 2, 2, 0, "output", "Output values."], [163, 2, 2, 0, "size", "Output shape."]], "randomgen.xoroshiro128": [[213, 1, 1, 0, "Xoroshiro128", "Container for the xoroshiro128+/++ pseudo-random number generator."]], "randomgen.xoroshiro128.Xoroshiro128": [[165, 4, 1, 0, "cffi", "CFFI interface"], [166, 4, 1, 0, "ctypes", "ctypes interface"], [167, 3, 1, 0, "jump", "Jumps the state as-if 2**64 random numbers have been generated."], [168, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [213, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [169, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [170, 3, 1, 0, "seed", "Seed the generator"], [213, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [171, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.xoroshiro128.Xoroshiro128.__init__": [[213, 2, 2, 0, "mode", "Deprecated parameter."], [213, 2, 2, 0, "plusplus", "Whether to use the ++ version (xoroshiro128++)."], [213, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence, or None (the default)."]], "randomgen.xoroshiro128.Xoroshiro128.jump": [[167, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.xoroshiro128.Xoroshiro128.jumped": [[168, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.xoroshiro128.Xoroshiro128.random_raw": [[169, 2, 2, 0, "output", "Output values."], [169, 2, 2, 0, "size", "Output shape."]], "randomgen.xoroshiro128.Xoroshiro128.seed": [[170, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence, or None (the default)."]], "randomgen.xorshift1024": [[214, 1, 1, 0, "Xorshift1024", "Container for the xorshift1024*\u03c6 pseudo-random number generator."]], "randomgen.xorshift1024.Xorshift1024": [[172, 4, 1, 0, "cffi", "CFFI interface"], [173, 4, 1, 0, "ctypes", "ctypes interface"], [174, 3, 1, 0, "jump", "Jumps the state as-if 2**512 random numbers have been generated"], [175, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [214, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [176, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [177, 3, 1, 0, "seed", "Seed the generator"], [214, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [178, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.xorshift1024.Xorshift1024.__init__": [[214, 2, 2, 0, "mode", "Deprecated parameter."], [214, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.xorshift1024.Xorshift1024.jump": [[174, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.xorshift1024.Xorshift1024.jumped": [[175, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.xorshift1024.Xorshift1024.random_raw": [[176, 2, 2, 0, "output", "Output values."], [176, 2, 2, 0, "size", "Output shape."]], "randomgen.xorshift1024.Xorshift1024.seed": [[177, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]], "randomgen.xoshiro256": [[215, 1, 1, 0, "Xoshiro256", "Container for the xoshiro256** pseudo-random number generator."]], "randomgen.xoshiro256.Xoshiro256": [[179, 4, 1, 0, "cffi", "CFFI interface"], [180, 4, 1, 0, "ctypes", "ctypes interface"], [181, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated."], [182, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [215, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [183, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [184, 3, 1, 0, "seed", "Seed the generator"], [215, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [185, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.xoshiro256.Xoshiro256.__init__": [[215, 2, 2, 0, "mode", "Deprecated parameter."], [215, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.xoshiro256.Xoshiro256.jump": [[181, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.xoshiro256.Xoshiro256.jumped": [[182, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.xoshiro256.Xoshiro256.random_raw": [[183, 2, 2, 0, "output", "Output values."], [183, 2, 2, 0, "size", "Output shape."]], "randomgen.xoshiro256.Xoshiro256.seed": [[184, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]], "randomgen.xoshiro512": [[216, 1, 1, 0, "Xoshiro512", "Container for the xoshiro512** pseudo-random number generator."]], "randomgen.xoshiro512.Xoshiro512": [[186, 4, 1, 0, "cffi", "CFFI interface"], [187, 4, 1, 0, "ctypes", "ctypes interface"], [188, 3, 1, 0, "jump", "Jumps the state as-if 2**256 random numbers have been generated."], [189, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [216, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [190, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [191, 3, 1, 0, "seed", "Seed the generator"], [216, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [192, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.xoshiro512.Xoshiro512.__init__": [[216, 2, 2, 0, "mode", "Deprecated parameter."], [216, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.xoshiro512.Xoshiro512.jump": [[188, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.xoshiro512.Xoshiro512.jumped": [[189, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.xoshiro512.Xoshiro512.random_raw": [[190, 2, 2, 0, "output", "Output values."], [190, 2, 2, 0, "size", "Output shape."]], "randomgen.xoshiro512.Xoshiro512.seed": [[191, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:parameter", "3": "py:method", "4": "py:attribute", "5": "py:function"}, "terms": {"": [0, 1, 2, 3, 4, 57, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 226, 231, 240, 243], "0": [0, 1, 2, 3, 4, 11, 18, 23, 30, 35, 40, 45, 52, 59, 64, 72, 79, 87, 95, 97, 103, 111, 122, 128, 136, 138, 143, 145, 146, 152, 157, 161, 162, 170, 177, 184, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 221, 222, 223, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 240, 242], "000": [145, 219, 223, 240], "00358": [145, 209], "01": [2, 197], "01769784": 217, "04674949j": 227, "04682163j": 227, "04913229": 227, "06278": [145, 209], "06687298j": 227, "06912343j": 227, "08": 219, "09": 197, "092": 145, "0930": 214, "0j": 227, "0x0e": 219, "0x1": 219, "0x11": 219, "0x14": 219, "0x18c589d6d5fa72c1": 145, "0x1da942042e4dd58b5": 196, "0x3f": 219, "0x5e": 219, "0x648f732e50f1b74d": 145, "0x77": 219, "0x836cdc3a1af658b7": 145, "0x94d049bb133111eb": 196, "0x98d91d71e39a4c2f": 145, "0xa39cdc865e62a037": 145, "0xb7": 219, "0xbf58476d1ce4e5b9": 196, "0xd1": 219, "0xdead10cc": 196, "0xf1ea5e": 219, "0xff37f1f758180525": 196, "0xffffffff": 219, "0xffffffffffffffff": 219, "1": [0, 1, 2, 3, 4, 8, 9, 16, 27, 28, 30, 49, 50, 56, 57, 59, 64, 69, 70, 72, 77, 84, 85, 92, 93, 97, 100, 101, 107, 122, 125, 126, 128, 133, 134, 141, 145, 146, 149, 150, 161, 162, 167, 168, 174, 175, 181, 182, 188, 189, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 223, 224, 226, 227, 228, 229, 230, 233, 235, 236, 237, 239, 240, 243], "10": [0, 1, 2, 3, 145, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 223, 237, 240], "100": [204, 219, 228, 237, 240], "1000": [122, 219, 226, 239], "1000000": [219, 223], "10000000": 237, "1000x": [217, 219], "1007": 211, "101": 240, "1024": [4, 193, 209, 211, 213, 214, 215, 216, 239], "104": 240, "109": 240, "10941": 241, "11": [0, 217, 219, 240], "11013866738698308655": 145, "11400714819323198486": [69, 70], "115": 240, "116": 240, "1167245051188668936": 219, "11749869230777074271": 219, "11789540394216366135": 145, "118": 240, "12": [1, 2, 208, 219, 240], "12103276313412614439": 219, "122": [219, 240], "123": [0, 2, 4, 193, 195, 197, 203, 204, 208, 209, 210, 211, 213, 214, 215, 216, 240], "1234": [0, 1, 2, 4, 145, 193, 195, 197, 200, 201, 202, 203, 208, 209, 210, 211, 213, 214, 215, 216], "12345": 235, "124": 240, "125": 240, "126": 240, "127": 240, "12712143389959007425": 219, "128": [0, 1, 2, 3, 11, 18, 23, 27, 28, 40, 49, 50, 56, 57, 77, 79, 84, 85, 87, 93, 95, 103, 125, 126, 136, 152, 181, 182, 194, 197, 198, 201, 202, 207, 208, 213, 215, 216, 217, 219, 235, 239, 240, 243], "12803009197309261862": 205, "128bit": 0, "128gb": 243, "129": [0, 208], "13": [195, 217, 219, 240, 241, 243], "13020151409549081939": 206, "131": 240, "132": [203, 210, 240], "13259944246262022926": 219, "133411349017971402732463711865589153492": 219, "134": 240, "135": 240, "137": 240, "138": 240, "13933250373249421220": 206, "13952735719045862400": 219, "14": [145, 197, 214, 219, 240], "140": [204, 240], "1402": 214, "1403": 214, "14241860431798867506": 219, "143": 240, "144": 240, "14412717025735663865": 212, "145": 240, "14501513697102443756": 219, "146": 240, "148": 240, "149": 240, "14_p": 145, "15": [145, 208, 219, 235, 240, 243], "15002187965291974971": 219, "151": 240, "15184288j": 227, "154": 240, "155": 240, "157": 240, "15715724510248929625": 219, "15750249268501108917": 196, "15780814468893899944": 219, "158": 240, "159": 240, "16": [1, 2, 4, 5, 66, 74, 81, 89, 97, 130, 146, 193, 196, 202, 209, 214, 235, 239, 240, 243], "160": 240, "162": 240, "163": 240, "16313": [196, 202], "16430795192718506": 219, "165": 240, "1654503": 229, "168": [145, 240], "17": [0, 1, 2, 97, 146, 195, 203, 208, 210, 235, 236, 237, 240], "170": 240, "1704": [145, 209], "171": [237, 240], "17190901158427765818": 219, "172": 240, "17233599j": 227, "173": 240, "17318243661941184039": 212, "174": 240, "17400468283504521969": 219, "177": 240, "1784984383128236737": 145, "179": 240, "17987378307908897868": 219, "18": [235, 240], "180": 145, "18011468": 227, "18034113569054765009": 219, "1805": 241, "181": 240, "182": 240, "183": 240, "18366146": 227, "184": 240, "18419364": 227, "185": 240, "186": 240, "1866397": 227, "187": 240, "19": [219, 235, 240, 243], "191": 240, "192": [205, 240], "1929": 240, "193": 240, "195": [240, 243], "196": [203, 210, 240, 243], "1966": [230, 233], "197": 240, "19754723j": 227, "198": 240, "199": [230, 233], "1991": 228, "19937": 239, "1994": [230, 233], "1997": [230, 233], "1998": 199, "1999": 196, "1_000_000_000": 209, "1e": [227, 228], "1ghz": 240, "1j": 227, "1st": 209, "1tb": 217, "2": [0, 1, 2, 3, 4, 8, 9, 11, 16, 18, 23, 27, 28, 30, 35, 40, 45, 49, 50, 52, 56, 57, 59, 64, 69, 70, 72, 77, 79, 84, 85, 87, 93, 95, 97, 100, 101, 103, 122, 125, 126, 128, 133, 134, 136, 138, 141, 143, 145, 146, 149, 150, 152, 157, 167, 168, 170, 174, 175, 177, 181, 182, 184, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 219, 221, 223, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243], "20": [2, 57, 198, 219, 235, 240, 243], "200": 240, "2000": [197, 199], "2001": 228, "2003": [197, 214], "2004": [145, 209], "2006": [3, 207], "2008": [2, 3, 57, 193, 198, 207], "2009": 195, "201": 240, "2011": [197, 203, 210, 211], "2012": [204, 211, 217], "2014": 214, "2015": [204, 226, 227], "2017": [1, 145, 209], "2018": 241, "2019": [0, 197, 208], "202": [145, 240], "2020": [4, 57, 196, 197, 202, 204, 205], "20210501": 217, "203": [222, 230, 233, 240], "204": [145, 240], "206": 240, "207": 240, "208": [237, 240], "2080": 122, "209": 240, "21": [197, 219, 240, 243], "210": 240, "210306068529402873165736369884012333108": 84, "211": 240, "212": 240, "214": 240, "2156737186088199787": 205, "217": [145, 240], "219": 240, "22": [0, 4, 217, 230, 233, 240], "221": 240, "222": 240, "224": 240, "225": [196, 240], "227": 240, "228": 240, "229": 240, "23": [224, 235, 240], "231": 240, "232": 240, "23204345": 229, "23587346j": 227, "24": [219, 240], "242": 240, "243": 240, "246": 240, "248": 240, "249": 196, "25": [145, 240], "250": 240, "2549297995355413924": 219, "255": 206, "256": [1, 2, 18, 23, 40, 103, 136, 152, 188, 189, 193, 205, 206, 208, 215, 216, 239, 243], "259": 240, "26": [205, 235, 240], "260": 196, "266": 240, "267": 240, "268": 240, "269": 240, "27": [195, 196, 240], "270": 240, "2701576j": 227, "272": 240, "273": 240, "2740075917084007745": 219, "276": 240, "279": 240, "28": [2, 197, 240], "28036548": 227, "28145563": 227, "285": 240, "2862933555777941757": 197, "290": [3, 198, 207], "298": [3, 198, 207, 240], "2nd": 228, "3": [1, 4, 57, 122, 195, 196, 197, 198, 199, 202, 203, 205, 206, 209, 210, 211, 214, 219, 227, 228, 229, 230, 233, 235, 237, 240, 243], "30": [196, 199, 240], "301": 240, "30220482": 229, "3035725": 227, "3037000493": 197, "304881062738325533": 219, "309": 240, "31": [196, 219, 240], "311": 240, "312": [64, 199], "313": 240, "31464": 211, "31483301": 227, "319": 240, "32": [0, 1, 2, 3, 4, 5, 6, 7, 14, 15, 20, 21, 25, 26, 30, 32, 33, 37, 38, 42, 43, 47, 48, 54, 55, 59, 61, 62, 66, 67, 68, 74, 75, 76, 81, 82, 83, 89, 90, 91, 97, 98, 99, 105, 106, 112, 113, 117, 118, 122, 123, 124, 128, 130, 131, 132, 139, 140, 146, 147, 148, 154, 155, 159, 160, 161, 162, 165, 166, 172, 173, 179, 180, 186, 187, 193, 195, 196, 197, 198, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 223, 232, 238, 239, 240, 243], "323": 240, "32361134": 227, "324": 240, "325874985469": 206, "32699266": 227, "32777": 193, "329": 240, "33": [0, 1, 2, 203, 208, 210], "3315941531": 219, "3394385948627484371": 243, "34": [208, 240], "343": 240, "348": [199, 240], "35185607": 227, "353": 240, "35360097j": 227, "35399562948360463058890781895381311971": 219, "354": 240, "356": 197, "357": 199, "358": 240, "36": 240, "36159505490948474": 219, "364": 240, "366935": 4, "37": [195, 219, 240, 243], "370": 240, "37548236789240574857439075": 196, "380": 240, "381": 217, "3814417803339974021": 219, "382": [3, 207], "384": 3, "385": [57, 198], "389": 240, "39": [193, 219], "390": [57, 198], "391": 240, "395": [230, 233], "3_10": 211, "3rd": 228, "4": [0, 1, 2, 4, 18, 23, 103, 136, 152, 195, 196, 197, 203, 205, 206, 208, 210, 211, 212, 214, 215, 216, 219, 227, 235, 237, 239, 240, 243], "40": 240, "400": 240, "405": [230, 233], "406": 240, "407": 240, "41": 240, "414": 240, "4141": 204, "42": 240, "42551611": 227, "432": 240, "440": 145, "44163456j": 227, "44740101": 227, "455": 240, "46": 240, "46716898": 227, "47": 193, "47026247687942121848144207491837523525": 196, "47108547995356098": 229, "481": 240, "48550": [145, 209], "4865540595714422341": 219, "489048146361948": 205, "4893028492374823749823": 122, "4976686463289251617": 219, "4986": 193, "4j": 227, "4tb": [217, 243], "5": [145, 197, 209, 219, 223, 226, 227, 229, 235, 237, 239, 240], "50": [193, 206, 239, 243], "5000": 228, "50539209j": 227, "512": [174, 175, 193, 213, 214, 215, 216, 239], "521015634160378615": 212, "5228567175856316": 237, "52338984": 229, "5264292724725465572": 219, "53": [217, 219, 239], "530704699024515781": 219, "5336551313612926520": 219, "541": 145, "55": 219, "5553417437478470678": 219, "56994348j": 227, "57787275j": 227, "5897100938578919857511": 243, "59": 240, "59809459": 227, "6": [57, 197, 208, 214, 219, 228, 235, 237, 240], "602963287911976729": 219, "603484028490308141": 239, "607": [3, 207], "61": [230, 233], "62": 219, "622": [3, 207], "623": 199, "624": [59, 128, 198, 207], "6246": 214, "63": [122, 219, 230, 233, 240], "64": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 29, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 47, 48, 51, 52, 54, 55, 58, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 82, 83, 85, 86, 87, 90, 91, 93, 94, 95, 98, 99, 102, 103, 105, 106, 112, 113, 114, 117, 118, 119, 122, 123, 124, 127, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 145, 147, 148, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 176, 177, 179, 180, 183, 184, 186, 187, 190, 191, 193, 194, 195, 196, 197, 198, 200, 203, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 223, 232, 235, 238, 239, 240, 243], "64185732j": 227, "642": 211, "64gb": 243, "65": [0, 1, 2, 203, 208, 210], "66": [237, 240], "66462037": 227, "66851489": 217, "67": 240, "68": 196, "683": 145, "687": 145, "7": [145, 195, 209, 217, 219, 221, 227, 237, 240, 243], "71": 240, "72": 240, "7203": 211, "7246136968226125645": 145, "73": [230, 233, 240], "73939778j": 227, "74": 240, "75224494": 229, "755828109848996024": 219, "76": [237, 240], "764": [3, 30], "76788821": 227, "768": [198, 207], "7713239619832409074": 212, "78": 240, "79": 240, "79479508": 229, "7j": 227, "8": [0, 2, 145, 197, 199, 205, 209, 214, 217, 219, 227, 228, 240, 243], "80": 240, "8062752282355435850": 206, "81": 240, "8192": 205, "8196": [206, 239, 243], "82": 240, "83": 240, "84": 240, "84832672j": 227, "85": [237, 240], "8509285875904376097169743623867": [4, 209, 211], "85384162": 217, "86316980830225721106033794313786972513572058861498566720023788662568817403978": 243, "8632": 1, "86532386": 217, "86649667": 227, "86820401": 229, "87": [230, 233], "87136372517582989555478159403783844777": 219, "87316102": 217, "88": 240, "882": 240, "883": 240, "88380663j": 227, "88447445j": 227, "886": 240, "8870424784319794977": 219, "89": 240, "9": [0, 1, 2, 145, 203, 208, 210, 219, 237, 240], "9007199254740992": 219, "903": 240, "912": 240, "9130649916277841551": 205, "91476019": 227, "91802901j": 227, "93": [0, 1, 2, 208], "936j": 222, "93782402j": 227, "94": 240, "9405893610231781608176235507540826829": 219, "9470186258571876535": 145, "95": 240, "9596734350428388680": 219, "96": [208, 239, 240], "9710": 217, "97279918": 227, "978": 211, "99091858": 229, "99149989": 229, "A": [3, 4, 115, 120, 161, 162, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 212, 219, 220, 221, 224, 227, 228, 230, 233, 238, 239, 243], "As": [203, 210, 242], "By": [196, 202, 209, 243], "For": [5, 11, 18, 23, 52, 66, 72, 74, 81, 89, 97, 103, 122, 130, 136, 146, 152, 177, 217, 238, 239, 240], "If": [0, 1, 2, 3, 4, 10, 11, 17, 18, 22, 23, 29, 30, 34, 35, 39, 40, 44, 45, 51, 52, 58, 59, 63, 64, 71, 72, 78, 79, 86, 87, 94, 95, 97, 102, 103, 108, 109, 114, 115, 119, 120, 122, 127, 128, 135, 136, 142, 143, 145, 146, 151, 152, 156, 157, 161, 162, 163, 164, 169, 170, 176, 177, 183, 184, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 222, 226, 227, 228, 229, 230, 232, 233], "In": [0, 1, 2, 3, 4, 5, 66, 74, 81, 89, 97, 122, 130, 146, 193, 196, 198, 199, 201, 202, 204, 207, 208, 211, 212, 213, 214, 215, 216, 217, 220, 228, 232, 233, 235, 237, 239], "It": [4, 11, 18, 23, 35, 40, 45, 52, 72, 79, 87, 95, 103, 115, 120, 136, 143, 152, 157, 170, 177, 184, 191, 193, 196, 201, 204, 205, 209, 211, 212, 213, 215, 216, 217, 219, 221, 222, 228, 233, 235, 243], "NOT": [204, 220], "No": [57, 198, 204], "Not": [92, 109], "ON": [57, 198], "On": [204, 220, 230, 233], "One": [115, 120, 195, 203, 205, 206, 210, 217, 229], "Such": 228, "The": [0, 1, 2, 3, 4, 5, 9, 11, 16, 18, 23, 28, 40, 50, 52, 57, 66, 69, 70, 72, 74, 77, 79, 81, 84, 85, 87, 89, 93, 95, 97, 101, 103, 110, 122, 126, 130, 134, 136, 138, 141, 145, 146, 150, 152, 168, 175, 182, 189, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 233, 235, 237, 239, 240, 243], "Their": [3, 198, 207], "There": [145, 195, 212, 221, 239], "These": [0, 1, 2, 3, 4, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 213, 214, 215, 216, 219, 221, 223, 228, 232, 239, 243], "To": [97, 146, 201, 203, 204, 229, 243], "With": 204, "_": [0, 2, 3, 198, 203, 204, 207, 208, 210, 213, 214, 215, 216, 219, 237, 239, 243], "__del__": 237, "__init__": [219, 237], "__name__": 219, "_fill": 237, "_has_uint32": 219, "_mm_paus": 204, "_next_32": 219, "_next_64": 219, "_next_doubl": 219, "_next_raw": 219, "_random_gener": 237, "_state": 219, "_uinteg": 219, "ab": [214, 241], "abl": 204, "about": [193, 206, 217, 219, 221, 235, 243], "abov": 243, "abrupt": 217, "absolut": 206, "absolute_import": 217, "ac": 57, "acceler": 240, "accept": [212, 219], "access": [0, 1, 2, 3, 4, 57, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 213, 214, 215, 216, 217, 219, 222, 223, 232, 238], "accord": [145, 219], "acm": [199, 203, 210], "acquir": 204, "across": [212, 217, 239, 243], "activ": 221, "actuari": [226, 227], "ad": [196, 197, 206, 217, 224], "add": [196, 217, 224, 229, 235], "addit": [4, 145, 193, 196, 197, 201, 202, 209, 211, 217, 222, 226, 235, 237, 238, 239], "addition": [201, 203, 239], "address": [6, 7, 14, 15, 20, 21, 25, 26, 32, 33, 37, 38, 42, 43, 47, 48, 54, 55, 61, 62, 67, 68, 75, 76, 82, 83, 90, 91, 98, 99, 105, 106, 112, 113, 117, 118, 123, 124, 131, 132, 139, 140, 147, 148, 154, 155, 159, 160, 165, 166, 172, 173, 179, 180, 186, 187, 212, 218, 219, 223], "advanc": [0, 1, 2, 3, 194, 196, 197, 198, 200, 201, 202, 203, 207, 208, 210, 213, 214, 215, 216, 217, 219, 235, 237], "advanced_encryption_standard": 0, "ae": [194, 235], "aescount": [0, 1, 2, 193, 208, 217, 221, 235, 238, 239, 240, 243], "aesni": 193, "affect": 217, "after": [108, 196, 219, 223, 237], "again": [11, 18, 23, 35, 40, 45, 52, 72, 79, 87, 95, 103, 115, 120, 136, 143, 152, 157, 170, 177, 184, 191], "against": 217, "agenc": 208, "ahead": [3, 57, 198, 207], "algorithm": [3, 195, 196, 198, 200, 201, 202, 205, 206, 207, 208, 217, 220], "alia": [202, 217], "alias": 201, "align": [223, 237], "all": [0, 1, 2, 3, 10, 17, 22, 29, 34, 39, 44, 51, 58, 63, 71, 78, 86, 94, 102, 111, 114, 119, 127, 135, 142, 151, 156, 163, 169, 176, 183, 190, 197, 198, 203, 204, 205, 206, 207, 208, 210, 213, 214, 215, 216, 217, 219, 221, 223, 226, 229, 232, 233, 237, 240, 243], "allow": [0, 1, 2, 3, 196, 197, 198, 203, 207, 208, 210, 212, 213, 214, 215, 216, 217, 219, 223, 235, 237, 238], "along": [209, 223, 228, 239], "alongsid": 235, "also": [3, 4, 79, 97, 115, 120, 146, 194, 195, 198, 199, 201, 203, 204, 205, 206, 207, 214, 217, 221, 223, 235, 239, 240], "alter": 197, "altern": [0, 1, 2, 193, 203, 208, 209, 210, 211, 229, 235, 240], "although": [204, 224, 240], "alwai": [0, 1, 2, 3, 4, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 224, 228, 243], "ambigu": 217, "amd": 204, "amer": [230, 233], "among": 217, "amount": 235, "an": [0, 1, 2, 3, 4, 5, 11, 18, 23, 30, 35, 40, 45, 52, 59, 64, 66, 74, 79, 81, 87, 89, 95, 97, 103, 115, 120, 122, 128, 130, 136, 138, 143, 145, 146, 152, 157, 161, 162, 170, 177, 184, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 222, 223, 227, 228, 233, 235, 237, 239, 240, 241, 243], "analog": [0, 2, 3, 4, 11, 18, 23, 30, 35, 40, 45, 59, 64, 87, 95, 103, 128, 136, 143, 145, 152, 157, 170, 177, 184, 191, 193, 195, 197, 198, 199, 200, 203, 207, 208, 209, 210, 211, 213, 214, 215, 216, 228], "analysi": [203, 210, 230, 233], "ani": [0, 1, 2, 3, 5, 8, 30, 49, 59, 64, 74, 81, 84, 89, 97, 100, 109, 128, 130, 133, 146, 149, 167, 174, 181, 188, 198, 199, 203, 204, 207, 208, 210, 219, 221, 224, 237, 239, 240, 243], "annal": [230, 233], "anon_func_st": 223, "anoth": [0, 1, 2, 11, 18, 23, 103, 152, 193, 203, 208, 210, 213, 214, 215, 216], "api": [107, 217, 221], "appear": [145, 197, 217], "append": [197, 209, 237, 239, 243], "appli": [196, 211, 217, 219, 223, 228, 233], "applic": [0, 1, 2, 3, 107, 193, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 210, 213, 214, 215, 216, 217, 230, 233, 235, 238, 239, 240], "appropri": 196, "approxim": [145, 228], "april": 205, "ar": [0, 1, 2, 3, 4, 5, 8, 10, 11, 17, 18, 22, 23, 29, 30, 34, 35, 39, 40, 44, 45, 51, 52, 58, 59, 63, 64, 66, 71, 72, 74, 78, 81, 86, 87, 89, 94, 95, 97, 102, 103, 108, 110, 114, 115, 119, 120, 122, 127, 128, 130, 133, 135, 136, 142, 143, 145, 146, 151, 152, 156, 157, 163, 164, 169, 170, 176, 177, 183, 184, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 232, 233, 235, 237, 239, 240, 243], "araujo": [211, 217], "arbitrari": [0, 1, 2, 196, 200, 201, 202, 203, 208, 210, 235, 239], "arg": 237, "argument": [209, 217, 227, 228, 233, 237, 243], "around": [223, 239], "arrai": [0, 1, 2, 3, 4, 11, 18, 23, 30, 35, 40, 45, 52, 59, 64, 103, 122, 128, 136, 143, 145, 152, 157, 170, 177, 184, 191, 193, 195, 197, 198, 199, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 223, 227, 229, 230, 233, 237, 239], "arrang": [227, 228, 233], "array_lik": [18, 23, 115, 120, 205, 206], "articl": 204, "arxiv": [145, 209, 241], "asarrai": 223, "assert": 204, "assertionerror": 204, "assess": 219, "assoc": [230, 233], "associ": 233, "assum": [196, 228, 233], "assur": [217, 235], "astyp": 237, "attach": 204, "attempt": 220, "attribut": [195, 237, 243], "audit": 204, "aug": 241, "augment": [3, 207], "aumasson": 1, "author": [217, 235], "auto": 220, "automat": [204, 220, 233], "avail": [0, 2, 3, 4, 11, 18, 23, 30, 35, 40, 45, 57, 59, 64, 87, 95, 103, 122, 128, 136, 143, 145, 152, 157, 164, 170, 177, 184, 191, 193, 195, 196, 197, 198, 199, 200, 202, 203, 204, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 235, 242], "averag": [5, 66, 74, 81, 89, 97, 130, 146, 193, 228, 239], "avoid": 217, "axi": 228, "b": [195, 197, 209, 219, 229], "back": 220, "backward": [97, 146, 217, 228, 236, 240, 243], "bad": 243, "base": [3, 5, 57, 66, 74, 81, 89, 97, 130, 146, 193, 196, 205, 207, 209, 211, 213, 217, 223, 227, 235, 238, 239, 240], "base_gen": 243, "basic": [217, 221, 235], "basic_rng": 221, "beaulieu": 208, "becaus": [227, 228, 233], "beck": 197, "becom": [202, 217], "been": [0, 1, 2, 3, 5, 9, 16, 27, 28, 49, 50, 56, 57, 66, 69, 70, 74, 77, 81, 84, 85, 89, 93, 97, 100, 101, 122, 125, 126, 130, 134, 141, 146, 149, 150, 167, 168, 174, 175, 181, 182, 188, 189, 196, 197, 198, 203, 204, 207, 208, 210, 213, 214, 215, 216, 217, 221, 223, 224, 228, 233, 234, 235, 236, 239, 243], "befor": [0, 1, 2, 11, 18, 23, 103, 152, 196, 201, 203, 204, 208, 210, 217, 219, 220, 228, 233, 236, 237, 243], "began": 235, "begin": [219, 227, 243], "behav": 237, "behavior": [227, 228, 233], "being": [217, 221, 235], "bell": 228, "below": [219, 239, 240, 243], "berlin": 211, "bernard": [145, 209], "bernstein": 2, "best": [212, 219, 239, 243], "beta": [230, 233], "better": [195, 196, 197, 200, 201, 202, 235], "between": [0, 3, 5, 30, 59, 64, 66, 72, 74, 81, 89, 97, 122, 128, 130, 145, 146, 195, 198, 199, 207, 208, 217, 226, 227, 235, 239], "bg": [205, 212], "big": [9, 16, 28, 50, 57, 70, 77, 85, 93, 101, 126, 134, 141, 150, 168, 175, 182, 189, 196], "bit": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 14, 15, 16, 17, 20, 21, 22, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 38, 39, 40, 42, 43, 44, 47, 48, 50, 51, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 71, 74, 75, 76, 77, 78, 81, 82, 83, 85, 86, 87, 89, 90, 91, 93, 94, 95, 97, 98, 99, 101, 102, 105, 106, 107, 112, 113, 114, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 134, 135, 139, 140, 141, 142, 146, 147, 148, 150, 151, 154, 155, 156, 159, 160, 161, 162, 163, 165, 166, 168, 169, 172, 173, 175, 176, 179, 180, 182, 183, 186, 187, 189, 190, 193, 195, 197, 198, 203, 204, 205, 206, 207, 208, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 231, 232, 238, 239, 240, 243], "bit_gen": [4, 122, 196, 205, 206, 209, 211, 219, 243], "bit_gen_st": 219, "bit_gener": [0, 2, 3, 6, 7, 9, 14, 15, 16, 20, 21, 25, 26, 28, 32, 33, 37, 38, 42, 43, 47, 48, 50, 54, 55, 57, 61, 62, 67, 68, 70, 75, 76, 77, 82, 83, 85, 90, 91, 93, 98, 99, 101, 105, 106, 107, 112, 113, 117, 118, 123, 124, 126, 131, 132, 134, 139, 140, 141, 147, 148, 150, 154, 155, 159, 160, 165, 166, 168, 172, 173, 175, 179, 180, 182, 186, 187, 189, 198, 200, 201, 202, 203, 207, 208, 210, 213, 214, 215, 216, 218, 219, 221, 222], "bit_generator_kwarg": 243, "bitgen": [204, 221, 223], "bitgen_st": 223, "bitgen_t": [217, 223], "bitgener": [10, 17, 22, 29, 34, 39, 44, 51, 58, 63, 71, 78, 86, 94, 102, 108, 114, 115, 119, 120, 127, 135, 142, 151, 156, 163, 169, 176, 183, 190, 204, 205, 206, 217, 218, 221, 225, 235], "bivari": [226, 227], "blabla": [1, 194, 235, 240], "blackman": [213, 215, 216], "blake_": 1, "blob": 1, "block": [193, 219, 233, 239], "blocked_rng": 239, "blogspot": 197, "bob": 195, "bool": 111, "both": [0, 1, 2, 11, 18, 23, 40, 79, 97, 103, 136, 146, 152, 193, 203, 206, 208, 209, 210, 213, 217, 219, 223, 226, 240], "bound": [217, 223, 232], "boundscheck": 223, "box": 223, "brank": 243, "break": 217, "bret": 197, "bridg": 204, "bring": 217, "brng": [217, 221], "brng_t": 217, "broadcast": [217, 221, 226, 227, 228, 233, 238], "brook": 197, "bryan": 208, "bt": 243, "buffer": [0, 1, 2, 97, 110, 146, 193, 208, 217], "bug": 217, "buggi": 217, "build": 217, "built": 219, "burtleburtl": 195, "byte": [217, 243], "c": [1, 162, 195, 212, 217, 219, 221, 223, 227, 238], "c1": [228, 233], "c2": [228, 233], "c73ddb7b": 4, "c_": 228, "c_uint64": 162, "c_void_p": [162, 219], "call": [0, 1, 2, 3, 5, 11, 18, 23, 35, 40, 45, 52, 66, 72, 74, 79, 81, 87, 89, 95, 97, 103, 111, 115, 120, 130, 136, 143, 145, 146, 152, 157, 162, 164, 170, 177, 184, 191, 197, 198, 201, 202, 203, 204, 207, 208, 210, 213, 214, 215, 216, 217, 219, 223, 237, 239], "callabl": [161, 162, 212, 219], "callback": [161, 219], "can": [0, 1, 2, 3, 4, 5, 11, 18, 23, 30, 35, 40, 45, 52, 59, 64, 66, 72, 74, 79, 81, 87, 89, 95, 97, 103, 107, 115, 120, 128, 130, 136, 143, 145, 146, 152, 157, 170, 177, 184, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 222, 223, 228, 235, 237, 239], "cannot": [0, 1, 2, 11, 18, 23, 40, 103, 152, 193, 203, 204, 208, 210, 239], "canon": 217, "capabl": [224, 235], "capac": 205, "capsul": [0, 1, 2, 3, 4, 193, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 213, 214, 215, 216, 223], "capsule_nam": 223, "captur": [0, 1, 2, 208], "carefulli": [209, 213, 215, 216], "carlo": [3, 207], "carrai": 219, "cascad": 240, "case": [0, 1, 2, 3, 10, 17, 22, 29, 34, 39, 44, 51, 58, 63, 71, 78, 86, 94, 102, 108, 114, 119, 127, 135, 142, 151, 156, 163, 169, 176, 183, 190, 193, 198, 199, 201, 207, 208, 212, 213, 214, 215, 216, 217, 219, 220, 229, 230, 232, 239], "cast": [219, 223, 228, 233], "casualti": [226, 227], "caveat": [212, 223], "cc": 227, "cdef": 223, "cdot": 145, "ceil": 237, "center": [227, 228], "certain": 209, "cffi": [217, 218, 223], "cfunc": [196, 219], "cfunctiontyp": 162, "chacha": [1, 193, 194, 223, 235, 238, 239, 240, 243], "chanc": [145, 205], "chang": [97, 146, 196, 213, 219, 222, 238, 243], "chaotic": [204, 206, 238], "char": 223, "characterist": 209, "cheap": 201, "check": [201, 203, 204, 206, 217, 223, 227, 228, 233, 243], "check_valid": [227, 228, 233], "chi": 4, "child": [4, 196, 205, 209, 211, 239, 243], "children": [196, 239], "choic": [217, 240], "choleski": [227, 228, 233], "choos": 217, "chose": [201, 206], "chosen": [122, 196], "chri": [4, 206], "cimport": 223, "cipher": [40, 238, 239], "circularli": 227, "circumst": [217, 237], "cj": [228, 233], "clark": 208, "class": [0, 1, 2, 3, 4, 10, 17, 22, 29, 34, 39, 44, 51, 58, 63, 71, 78, 86, 94, 102, 114, 119, 127, 135, 142, 151, 156, 163, 169, 176, 183, 190, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 229, 235, 237, 243], "classif": 228, "classmethod": [161, 162], "clean": 217, "cleanup": 217, "clear": [197, 204, 219], "clone": [217, 219], "close": [122, 203, 210, 217, 240], "closur": 219, "cm": [201, 222, 238], "cnp": 197, "code": [0, 1, 2, 3, 4, 57, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 223, 243], "coeffici": 206, "collis": 239, "com": [1, 196, 197, 202, 204], "combin": [4, 197, 209, 211, 240], "come": [0, 1, 2, 3, 197, 198, 203, 207, 208, 209, 210, 213, 214, 215, 216], "command": [204, 220], "common": [6, 7, 14, 15, 20, 21, 25, 26, 32, 33, 37, 38, 42, 43, 47, 48, 54, 55, 61, 62, 67, 68, 75, 76, 82, 83, 90, 91, 98, 99, 105, 106, 112, 113, 117, 118, 123, 124, 131, 132, 139, 140, 147, 148, 154, 155, 159, 160, 165, 166, 172, 173, 179, 180, 186, 187, 217, 218, 223, 235, 237, 243], "commonli": 243, "compar": [219, 235, 237], "compat": [0, 1, 2, 3, 4, 97, 107, 109, 146, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 228, 236, 240, 243], "compil": [217, 219, 223, 238], "complet": [217, 219, 234, 235, 236], "complex": [221, 226, 227, 238], "complex_norm": [221, 222, 227, 238], "complex_normal_distribut": [226, 227], "complic": 223, "compon": [226, 227, 235], "comput": [5, 8, 49, 57, 74, 81, 84, 89, 100, 130, 133, 149, 167, 174, 181, 188, 196, 197, 198, 199, 203, 210, 211, 227, 228, 233, 239, 240], "concern": 239, "concurr": 237, "condit": 217, "confer": [203, 210], "configur": [122, 202, 235, 239], "congruenti": [197, 219, 238], "conjunct": 221, "consider": 217, "consist": [0, 1, 2, 3, 4, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217], "const": 223, "constant": [4, 197, 217], "constraint": [197, 221], "construct": [122, 161, 162, 209, 212, 215, 216, 243], "constructor": 237, "consum": [0, 1, 2, 3, 4, 193, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 213, 214, 215, 216], "consumpt": 194, "contain": [0, 1, 2, 3, 4, 6, 7, 12, 14, 15, 19, 20, 21, 24, 25, 26, 31, 32, 33, 36, 37, 38, 40, 41, 42, 43, 46, 47, 48, 53, 54, 55, 60, 61, 62, 65, 67, 68, 73, 75, 76, 80, 82, 83, 88, 90, 91, 96, 98, 99, 104, 105, 106, 110, 112, 113, 116, 117, 118, 121, 122, 123, 124, 129, 131, 132, 136, 137, 139, 140, 144, 147, 148, 153, 154, 155, 158, 159, 160, 165, 166, 171, 172, 173, 178, 179, 180, 185, 186, 187, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 213, 214, 215, 216, 217, 219, 223, 231, 235], "content": 204, "contigu": [217, 237], "continu": 229, "conveni": 209, "convert": [97, 146], "coordin": 228, "copi": [217, 242], "core": [5, 66, 74, 81, 89, 97, 130, 146, 204, 221, 222, 235, 237, 239], "corner": 239, "corr": [214, 241], "correct": 217, "correctli": 217, "correl": [196, 202, 213, 227, 239], "correspond": 201, "corrupt": [0, 1, 2, 3, 4, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 213, 214, 215, 216], "could": 217, "counter": [1, 2, 4, 11, 18, 23, 97, 103, 136, 146, 152, 194, 206, 209, 217, 235, 239], "coupl": 196, "cov": [227, 228, 233], "covari": [226, 227, 228, 230, 233], "coverag": 217, "cpcg": 196, "cpointer": 219, "cpu": 204, "cpu_count": 237, "cpython": 223, "cr": 2, "creat": [1, 145, 196, 197, 219, 237, 239], "creation": 237, "cryptograph": [0, 4, 193, 203, 208, 210, 220, 235, 238], "cryptographi": [235, 240], "ctype": [161, 162, 196, 212, 217, 218, 219, 223], "current": [3, 194, 198, 199, 207, 209, 217, 223], "curv": 228, "custom": 196, "customiz": 196, "cycl": [193, 197, 204, 206], "cython": [212, 217, 219, 235], "d": [0, 2, 195, 197, 209, 219, 227, 228, 229], "d0fc": 4, "d1": 233, "d2": 233, "danger": [196, 202], "daniel": 241, "data": [0, 1, 2, 4, 11, 18, 23, 35, 40, 45, 87, 95, 103, 136, 143, 145, 152, 157, 170, 177, 184, 191, 193, 195, 197, 200, 203, 208, 209, 210, 211, 213, 214, 215, 216, 223, 228, 243], "data_a": 219, "david": [197, 203, 210, 213, 215, 216], "decemb": 197, "decis": 221, "decomposit": [227, 228, 233], "decor": 219, "deem": 235, "def": [196, 212, 219, 223, 237], "defalt": 209, "default": [0, 1, 2, 3, 4, 10, 11, 17, 18, 22, 23, 29, 30, 34, 35, 39, 40, 44, 45, 51, 52, 58, 59, 63, 64, 71, 78, 79, 86, 87, 94, 95, 97, 102, 103, 108, 114, 119, 122, 127, 128, 135, 136, 142, 143, 145, 146, 151, 152, 156, 157, 163, 169, 170, 176, 177, 183, 184, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 220, 222, 226, 227, 228, 229, 230, 232, 233, 239, 243], "default_rng": 243, "defin": [195, 196, 217, 235], "definit": [226, 227, 228], "degre": [230, 233], "delta": [5, 13, 66, 74, 81, 89, 97, 130, 138, 146], "delta_new": [97, 146], "demonstr": [212, 238], "densiti": 209, "depend": [195, 204, 206, 219, 227, 239], "deprec": [0, 2, 3, 193, 195, 199, 200, 207, 208, 210, 213, 214, 215, 216, 217, 221, 242], "deprecationwarn": [217, 221], "deriv": [115, 120, 197, 205, 206], "dervi": 1, "describ": [12, 19, 24, 31, 36, 41, 46, 53, 60, 65, 73, 80, 88, 96, 104, 110, 116, 121, 129, 137, 144, 153, 158, 171, 178, 185, 192, 231], "descript": 227, "design": [0, 1, 2, 203, 204, 208, 210, 223], "desir": 229, "detail": [11, 18, 23, 52, 72, 103, 136, 152, 177, 209, 226, 235], "detect": [204, 239], "determin": [203, 204, 210, 228, 229, 233], "determinist": [204, 217], "dev": [0, 1, 2, 3, 4, 11, 18, 23, 30, 35, 40, 45, 59, 64, 87, 95, 103, 128, 136, 143, 145, 152, 157, 170, 177, 184, 191, 193, 195, 197, 198, 199, 200, 203, 207, 208, 209, 210, 211, 213, 214, 215, 216, 219, 220, 237, 238], "develop": [193, 204], "deviat": [226, 228, 243], "df": [230, 233], "di": [197, 213, 214, 215, 216], "diag": 227, "diagon": 228, "dict": [12, 19, 24, 31, 36, 41, 46, 53, 60, 65, 73, 80, 88, 96, 104, 110, 116, 121, 129, 137, 144, 153, 158, 171, 178, 185, 192, 219, 231], "dictionari": [12, 19, 24, 31, 36, 41, 46, 53, 60, 65, 73, 80, 88, 96, 104, 110, 116, 121, 129, 137, 144, 153, 158, 171, 178, 185, 192, 231], "did": 217, "differ": [0, 1, 2, 5, 66, 74, 81, 89, 97, 130, 145, 146, 196, 200, 201, 202, 203, 206, 208, 209, 210, 211, 215, 216, 219, 239], "difficult": 239, "digit": 204, "dim": [230, 233], "dimens": [228, 230, 233], "dimension": [199, 227, 228], "direct": 238, "directli": [0, 1, 2, 3, 4, 10, 11, 17, 18, 22, 23, 29, 34, 39, 44, 51, 58, 63, 71, 78, 86, 94, 102, 103, 114, 119, 127, 135, 142, 151, 152, 156, 163, 169, 176, 183, 190, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 213, 214, 215, 216, 217, 219, 223, 230, 231, 233, 235, 237], "discuss": [4, 196], "disjoint": 57, "distinct": [0, 1, 2, 3, 122, 145, 193, 195, 197, 198, 203, 205, 206, 207, 208, 210, 213, 214, 215, 216, 217, 235, 240, 243], "distribut": [0, 1, 2, 5, 66, 74, 81, 89, 97, 130, 146, 208, 217, 221, 223, 224, 226, 227, 228, 229, 230, 233, 235, 237, 238, 239, 240], "distutil": 217, "divid": [69, 70, 77, 84, 85, 93, 141], "dk": 233, "dll": [219, 223], "do": [0, 2, 3, 193, 194, 195, 199, 200, 207, 208, 210, 213, 214, 215, 216, 217, 237, 240], "doc": 217, "docstr": [10, 17, 22, 29, 34, 39, 44, 51, 58, 63, 71, 78, 86, 94, 102, 114, 119, 127, 135, 142, 151, 156, 163, 169, 176, 183, 190, 217], "document": [161, 162, 212, 217, 235], "doe": [204, 217, 219, 220, 231, 237, 239, 242], "doi": [145, 209, 211], "done": 217, "dongarra": 211, "doti": [4, 206], "doubl": [0, 1, 2, 4, 6, 7, 14, 15, 20, 21, 25, 26, 32, 33, 37, 38, 42, 43, 47, 48, 54, 55, 61, 62, 67, 68, 75, 76, 82, 83, 90, 91, 98, 99, 105, 106, 112, 113, 117, 118, 123, 124, 131, 132, 139, 140, 147, 148, 154, 155, 159, 160, 161, 162, 165, 166, 172, 173, 179, 180, 186, 187, 193, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 218, 219, 223, 228, 233], "dougla": 208, "draw": [0, 1, 2, 5, 66, 74, 81, 89, 97, 122, 130, 146, 208, 209, 217, 226, 227, 228, 230, 233, 235, 239], "drawn": [10, 17, 22, 29, 34, 39, 44, 51, 58, 63, 71, 78, 86, 94, 102, 108, 114, 119, 127, 135, 142, 151, 156, 163, 169, 176, 183, 190, 220, 226, 227, 228, 229, 230, 232, 239], "drng": 204, "dror": [203, 210], "dsfmt": [194, 217, 235, 238, 239, 240, 243], "dsfmt\u2074": 243, "dtype": [145, 212, 217, 219, 229, 239], "duda": 228, "due": [237, 243], "dure": 204, "dxsm": [194, 196, 201, 217, 222, 235, 238, 240, 243], "dxsm_mult": 196, "dxsm_multipli": 196, "d\u0131az": [230, 233], "e": [10, 17, 22, 29, 34, 39, 44, 51, 58, 63, 71, 78, 86, 94, 102, 108, 114, 119, 127, 135, 142, 151, 156, 163, 169, 176, 183, 190, 194, 195, 196, 200, 201, 202, 203, 204, 206, 209, 210, 219, 220, 221, 226, 227, 228, 229, 230, 232, 236, 238], "each": [0, 1, 2, 3, 145, 197, 198, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 216, 219, 227, 228, 230, 233, 237, 243], "easi": [203, 210], "ecrypt": 193, "ecuy": [3, 57, 196, 198, 207], "ed": [211, 228], "edg": 217, "edu": 193, "effect": [220, 232], "effici": [3, 57, 194, 196, 198, 200, 201, 202, 207], "efiix64": [4, 194, 211, 217, 235, 240, 243], "efiix64x384": 4, "eg": [217, 222, 227], "eigen": [227, 228, 233], "eigenvalu": 233, "eigh": [227, 228, 233], "either": [0, 1, 2, 3, 11, 18, 23, 103, 122, 145, 152, 193, 195, 198, 199, 201, 203, 204, 205, 207, 208, 210, 212, 213, 214, 215, 216, 223, 232, 243], "element": [0, 1, 2, 3, 4, 11, 18, 23, 97, 103, 136, 145, 146, 152, 193, 195, 197, 198, 199, 203, 207, 208, 210, 213, 214, 215, 216, 228], "elif": 243, "els": [87, 95, 219, 243], "empti": [217, 223, 237], "en": [0, 1, 204, 209, 226, 227], "enabl": [235, 239], "encod": [203, 210, 239], "encount": 217, "encrypt": [0, 193, 208], "end": [195, 227], "enhanc": [197, 217], "enough": 239, "ensur": [0, 1, 2, 3, 5, 8, 49, 74, 81, 84, 89, 100, 111, 130, 133, 149, 167, 174, 181, 188, 197, 198, 203, 204, 207, 208, 210, 213, 214, 215, 216, 219, 239, 243], "entri": 228, "entropi": [0, 1, 2, 3, 35, 52, 72, 79, 87, 95, 115, 120, 128, 136, 143, 145, 152, 157, 170, 177, 184, 191, 196, 197, 198, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 235, 239, 243], "equal": [228, 240], "equidistribut": 199, "erg": 228, "erron": 217, "error": 204, "escap": 243, "especi": 205, "essenti": [212, 239], "estream": 193, "eu": 193, "eugen": 197, "even": [1, 2, 110, 197, 203, 206, 210, 237], "ever": 204, "everi": [203, 210], "evolut": 235, "evolv": 219, "exact": [5, 8, 49, 74, 81, 84, 89, 100, 130, 133, 149, 167, 174, 181, 188, 239], "exactli": [198, 201, 203], "examin": [219, 223, 243], "exampl": [0, 1, 2, 4, 5, 66, 74, 81, 89, 97, 122, 130, 145, 146, 161, 162, 193, 195, 196, 197, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 222, 223, 226, 227, 228, 229, 233, 237, 238, 239], "exce": 204, "excel": [215, 216, 240], "except": [201, 204, 212, 217, 219, 221, 227, 243], "excess": 243, "exclud": [209, 230], "execut": 204, "executor": 237, "exhaust": 217, "exist": [212, 223, 224, 237], "exit": 204, "exot": 235, "expand": [204, 243], "expect": [193, 206, 230], "expens": [145, 239], "experi": [235, 238], "experiment": [214, 235], "explor": 214, "expon": 240, "exponenti": 217, "export": 223, "expos": [10, 17, 22, 29, 34, 39, 44, 51, 58, 63, 71, 78, 86, 94, 102, 114, 119, 127, 135, 142, 151, 156, 163, 169, 176, 183, 190, 219, 222, 232, 235], "extend": [217, 224, 235, 243], "extendedgener": [217, 221, 222, 224, 235], "extern": [196, 201, 202, 219], "extra": 243, "extrem": 205, "ey": [227, 230], "f": [209, 211, 219, 223, 229], "f2": [57, 198], "face": 221, "factor": [227, 228, 233], "fail": [108, 204, 217, 220, 243], "failur": [111, 204, 217, 243], "fall": [220, 226, 227], "fallback": [217, 220], "fals": [97, 111, 145, 146, 198, 201, 203, 206, 211, 213, 219, 223, 230, 237, 243], "famili": [1, 2, 196, 200, 201, 202, 203, 210, 240, 243], "fast": [3, 4, 193, 196, 198, 200, 201, 202, 205, 206, 211, 212, 215, 216, 217, 219, 221, 235, 237, 238, 240, 241], "faster": [4, 203, 210, 214, 227, 228, 233, 240], "fastest": [193, 217, 227, 228, 233, 240], "favor": 217, "featur": [0, 1, 2, 3, 4, 193, 196, 197, 198, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 221], "feiveson": [230, 233], "few": [206, 217, 219, 221], "fewer": [206, 239, 243], "file": [219, 223], "fill": [110, 223, 237], "filler": 217, "final": [1, 2, 122, 197, 204, 209, 217, 219, 223, 228, 233, 239], "finalist": 193, "fine": 205, "first": [0, 1, 122, 197, 204, 206, 209, 219, 223, 237, 239, 243], "five": [235, 239], "fix": [0, 1, 2, 3, 4, 69, 84, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 238, 239], "flag": [97, 111, 146, 204, 219, 230], "flaw": 217, "float": [217, 219, 229, 233], "float128": 217, "float32": [219, 229], "float64": 229, "fold": 243, "folder": 223, "follow": [145, 228, 240], "form": [239, 243], "fortran": 217, "forum": [226, 227], "found": 217, "four": 237, "frac": 227, "fran\u00e7oi": [57, 198], "freedom": [230, 233], "frequenc": 213, "fresh": [115, 120, 205, 206], "from": [0, 1, 2, 3, 5, 11, 18, 23, 30, 35, 40, 45, 57, 59, 64, 66, 74, 81, 87, 89, 95, 97, 103, 115, 120, 122, 128, 130, 136, 143, 145, 146, 152, 157, 161, 162, 170, 177, 184, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 220, 222, 223, 226, 227, 228, 229, 230, 233, 235, 237, 239, 240, 242, 243], "from_cfunc": 219, "full": [197, 223, 228, 236, 239], "fulli": 217, "func": 202, "function": [0, 1, 2, 3, 4, 6, 7, 14, 15, 20, 21, 25, 26, 32, 33, 37, 38, 42, 43, 47, 48, 54, 55, 61, 62, 67, 68, 75, 76, 82, 83, 90, 91, 98, 99, 105, 106, 109, 112, 113, 117, 118, 123, 124, 131, 132, 139, 140, 145, 147, 148, 154, 155, 159, 160, 161, 162, 164, 165, 166, 172, 173, 179, 180, 186, 187, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 223, 231, 233, 235, 239], "further": 214, "futur": [194, 202, 217, 235, 237, 242], "futurewarn": 221, "g": [10, 17, 22, 29, 34, 39, 44, 51, 58, 63, 71, 78, 86, 94, 102, 108, 114, 119, 127, 135, 142, 151, 156, 163, 169, 176, 183, 190, 194, 195, 204, 219, 220, 221, 223, 226, 228, 229, 230, 232, 233, 236, 238], "g1": 227, "g2": 227, "gahtan": 1, "gain": [217, 237], "gamma": [217, 226, 227, 240], "garc\u0131a": [230, 233], "gaussian": [226, 227, 228, 238], "gb": 243, "gb\u00b9": 243, "gen": [204, 219, 222, 240], "gener": [2, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 199, 211, 217, 218, 219, 220, 221, 224, 238, 240, 241, 243], "generate_kei": [209, 217], "genrat": 219, "geometr": [228, 240], "georg": [197, 214], "get": [12, 19, 24, 31, 36, 41, 46, 53, 60, 65, 73, 80, 88, 96, 104, 110, 111, 116, 121, 129, 137, 144, 153, 158, 161, 162, 164, 171, 178, 185, 192, 194, 212, 219, 225, 231], "getter": 219, "gil": 204, "git": [0, 1, 2, 3, 4, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 213, 214, 215, 216], "github": [1, 196, 202, 208], "given": [5, 10, 17, 22, 29, 34, 39, 44, 51, 58, 63, 66, 71, 74, 78, 81, 86, 89, 94, 97, 102, 108, 114, 119, 127, 130, 135, 142, 146, 151, 156, 163, 169, 176, 183, 190, 220, 226, 227, 228, 229, 230, 232, 233, 239], "gj": 227, "go": 217, "goal": [224, 235], "golden": [77, 84, 85, 93, 141, 239], "good": [196, 200, 201, 202, 240], "gov": 197, "guarante": [0, 1, 2, 3, 4, 145, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 228, 243], "gui": 197, "guid": [204, 208], "gumbel": 217, "h": [1, 230, 233], "ha": [0, 1, 2, 57, 97, 122, 146, 196, 197, 200, 201, 202, 203, 204, 205, 206, 208, 210, 213, 214, 215, 216, 217, 221, 224, 228, 230, 233, 234, 235, 236, 237, 243], "half": [196, 217, 219, 229], "halliwel": [226, 227], "handcraft": 213, "handl": 217, "happen": [111, 204], "haramoto": [3, 57, 198, 207], "hardwar": [238, 239, 240], "hart": 228, "has_uint": 219, "has_uint32": 219, "hash": [0, 2, 3, 4, 11, 18, 23, 30, 35, 40, 45, 59, 64, 87, 95, 103, 128, 136, 143, 152, 157, 170, 177, 184, 191, 193, 195, 196, 197, 198, 199, 200, 203, 207, 208, 210, 213, 214, 215, 216, 217, 220], "hash_funct": 1, "have": [0, 1, 2, 3, 5, 9, 16, 27, 28, 49, 50, 56, 57, 66, 69, 70, 74, 77, 81, 84, 85, 89, 93, 97, 100, 101, 125, 126, 130, 134, 141, 146, 149, 150, 167, 168, 174, 175, 181, 182, 188, 189, 196, 197, 198, 203, 204, 206, 207, 208, 210, 213, 214, 215, 216, 217, 220, 221, 223, 224, 227, 228, 229, 230, 233, 235, 236, 239, 240, 243], "hc": 40, "hc128": [193, 194, 235, 238, 239, 240, 243], "hc128_p3": 193, "he": 197, "heavili": 204, "heidelberg": 211, "held": [204, 219], "helper": [217, 239], "here": [3, 207, 219], "hex": 145, "hi": 196, "high": [1, 2, 203, 205, 210, 217, 219, 223, 235], "higher": [195, 219, 228], "hill": 228, "hiroshi": [3, 57, 198, 207], "hiroshima": 57, "hold": [0, 1, 2, 3, 4, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 213, 214, 215, 216], "home": 193, "hongjun": 193, "hood": 219, "horner": 57, "how": [219, 223, 235, 239], "howev": [204, 239], "html": [2, 193, 195, 197, 204, 206], "http": [0, 1, 2, 4, 57, 145, 193, 195, 196, 197, 200, 201, 202, 204, 205, 206, 208, 209, 211, 213, 214, 215, 216, 226, 227, 241], "humphrei": [4, 206], "hypergeometr": 217, "i": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 16, 17, 18, 22, 23, 28, 29, 30, 34, 35, 39, 40, 44, 45, 49, 50, 51, 52, 57, 58, 59, 63, 64, 66, 69, 70, 71, 72, 74, 77, 78, 79, 81, 84, 85, 86, 87, 89, 93, 94, 95, 97, 100, 101, 102, 103, 107, 108, 109, 110, 111, 114, 115, 119, 120, 122, 126, 127, 128, 130, 133, 134, 135, 136, 141, 142, 143, 145, 146, 149, 150, 151, 152, 156, 157, 163, 167, 168, 169, 170, 174, 175, 176, 177, 181, 182, 183, 184, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 237, 238, 239, 240, 242, 243], "ia": 209, "id": [0, 2, 3, 4, 11, 18, 23, 30, 35, 40, 45, 59, 64, 87, 95, 103, 128, 136, 143, 152, 157, 170, 177, 184, 191, 193, 195, 197, 198, 199, 200, 203, 207, 208, 210, 213, 214, 215, 216, 220], "idea": 1, "ident": [201, 203, 219, 227, 228, 230, 235, 243], "identifi": [227, 230, 233], "idx": [211, 212], "ignor": [107, 212], "ii": [227, 228], "iii": 197, "ij": 228, "im": [226, 227], "imaginari": [226, 227], "immateri": 217, "immedi": 243, "impact": 221, "implement": [1, 3, 57, 92, 195, 196, 200, 201, 202, 204, 206, 207, 208, 211, 212, 214, 217, 219, 223, 227, 239], "implementationguide1": 208, "implemnt": 219, "impli": [226, 227], "implrment": 1, "import": [0, 1, 2, 3, 4, 122, 145, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 222, 223, 227, 228, 235, 237, 239, 242, 243], "impress": 219, "improv": [1, 2, 197, 208, 213, 217, 235], "inbound": 217, "inc": [72, 79, 87, 95, 196, 200, 201, 202, 203, 217, 219], "includ": [145, 194, 196, 217, 223, 228, 235, 238, 239, 243], "inclus": [3, 30, 59, 64, 128, 197, 198, 199, 207, 235], "incorpor": [206, 235], "incorrect": [212, 217], "increas": [195, 217], "increment": [0, 1, 2, 69, 72, 79, 84, 87, 95, 122, 196, 200, 201, 202, 203, 206, 208, 210, 213, 214, 215, 216, 217, 219, 238, 239, 240, 243], "incuffici": 145, "independ": 235, "index": [193, 198, 199, 211, 235, 239], "indic": [3, 97, 111, 146, 207, 219, 228, 230, 239, 243], "individu": 217, "ineffici": 217, "inform": [12, 19, 24, 31, 36, 41, 46, 53, 57, 60, 65, 73, 80, 88, 96, 104, 110, 116, 121, 129, 137, 144, 153, 158, 171, 178, 185, 192, 198, 217, 223, 228, 230, 231, 233, 235], "inher": 223, "inherit": 217, "initi": [0, 1, 2, 3, 4, 11, 18, 23, 30, 35, 40, 45, 52, 59, 64, 72, 79, 87, 95, 103, 115, 120, 128, 136, 143, 145, 152, 157, 170, 177, 184, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 239, 240, 243], "inlin": 219, "inner": [230, 233], "innov": 235, "input": [0, 1, 2, 3, 52, 161, 162, 193, 198, 199, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 219, 227, 228, 230, 233, 235, 239], "insid": 223, "inspect": 204, "instanc": [0, 1, 2, 3, 4, 9, 11, 16, 18, 23, 28, 30, 35, 40, 50, 52, 57, 59, 64, 70, 77, 79, 85, 87, 93, 95, 101, 103, 107, 115, 120, 126, 128, 134, 136, 141, 143, 145, 150, 152, 157, 168, 175, 177, 182, 184, 189, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 221, 222, 225, 239], "instant": [219, 222], "instead": [204, 217, 228, 242], "instruct": [108, 204, 239], "int": [0, 1, 2, 11, 18, 23, 103, 115, 120, 152, 196, 201, 202, 203, 205, 206, 208, 210, 212, 218, 219, 220, 232, 237, 239], "int64": 217, "int_": 219, "integ": [0, 1, 2, 3, 4, 5, 6, 7, 11, 14, 15, 18, 20, 21, 23, 25, 26, 30, 32, 33, 35, 37, 38, 40, 42, 43, 45, 47, 48, 52, 54, 55, 59, 61, 62, 64, 66, 67, 68, 72, 74, 75, 76, 79, 81, 82, 83, 87, 89, 90, 91, 95, 97, 98, 99, 103, 105, 106, 112, 113, 117, 118, 122, 123, 124, 128, 130, 131, 132, 136, 138, 139, 140, 143, 145, 146, 147, 148, 152, 154, 155, 157, 159, 160, 165, 166, 170, 172, 173, 177, 179, 180, 184, 186, 187, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 220, 221, 223, 232, 238, 239, 241], "integr": 217, "intel": [204, 217, 240], "interact": 218, "interest": 224, "interfac": [6, 7, 14, 15, 20, 21, 25, 26, 32, 33, 37, 38, 42, 43, 47, 48, 54, 55, 61, 62, 67, 68, 75, 76, 82, 83, 90, 91, 98, 99, 105, 106, 112, 113, 117, 118, 123, 124, 131, 132, 139, 140, 147, 148, 154, 155, 159, 160, 162, 165, 166, 172, 173, 179, 180, 186, 187, 217, 218, 219, 223, 235], "intern": [203, 210, 217], "intertwin": 243, "interv": [217, 229, 241], "intervent": 204, "intrins": 204, "intrinsicsguid": 204, "introduc": 235, "invalid": [204, 217, 223], "invert": 206, "involv": [212, 219], "io": 208, "irrespect": [10, 17, 22, 29, 34, 39, 44, 51, 58, 63, 71, 78, 86, 94, 102, 114, 119, 127, 135, 142, 151, 156, 163, 169, 176, 183, 190], "isinst": 219, "issu": [122, 196, 202, 204, 217, 219, 221, 243], "iter": [8, 9, 16, 27, 28, 49, 50, 56, 57, 69, 70, 77, 84, 85, 92, 93, 100, 101, 107, 125, 126, 133, 134, 141, 149, 150, 167, 168, 174, 175, 181, 182, 188, 189, 195, 205, 206, 223], "its": [224, 228], "itself": 243, "ivi": 204, "j": [2, 209, 211, 226, 227, 228, 230, 233], "januari": 208, "jason": 208, "java": [197, 217], "jep": 197, "jit": [219, 223], "john": [203, 210], "jour": [230, 233], "journal": [57, 197, 198, 214, 230, 233], "jp": [1, 57], "jsf": [194, 195, 219, 235, 238, 240, 243], "jsf32": 240, "jsf_next": 219, "jsf_next_sig": 219, "jsf_state": 219, "jsf_ubg": 219, "juli": 204, "jump": [0, 1, 2, 3, 194, 197, 198, 203, 207, 208, 210, 213, 214, 215, 216, 217, 221, 235, 237, 243], "june": [0, 4, 196, 197, 202, 205], "j\u00e1imez": [230, 233], "k": [10, 17, 22, 29, 34, 39, 44, 51, 58, 63, 71, 78, 86, 94, 102, 108, 114, 119, 122, 127, 135, 142, 145, 151, 156, 163, 169, 176, 183, 190, 203, 206, 210, 211, 219, 220, 226, 227, 228, 229, 230, 232, 233, 239, 240, 243], "karczewski": 211, "kei": [0, 1, 2, 11, 18, 23, 40, 103, 136, 145, 152, 193, 203, 208, 210, 212, 217, 219, 223, 235, 240], "keystream": 193, "keyword": [217, 237, 243], "known": [4, 221, 243], "l": [3, 57, 196, 198, 207, 230, 233], "lake": 240, "landingpag": 204, "laplac": 217, "larg": [122, 205, 208, 217, 237, 239, 240, 243], "larger": [205, 213, 237], "largest": 233, "last": [204, 206, 237], "last_bg": 237, "last_rng": 239, "later": [1, 204], "latest": 217, "latter": 243, "lattic": 196, "lcg": [72, 79, 87, 95, 194, 197, 200, 201, 202, 217, 219, 235], "lcg128mix": [196, 202, 217, 235, 238, 239, 243], "lcg_mult": 196, "lead": [212, 217, 219, 228], "least": [145, 206, 217], "lectur": 211, "left": [195, 227], "legaci": [217, 221, 235], "legacygener": 217, "leigh": [226, 227], "lemir": [217, 241], "len": 239, "length": [193, 206, 243], "less": [66, 74, 81, 89, 97, 146, 204, 227, 228, 233], "let": 223, "level": [0, 1, 2, 3, 4, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 213, 214, 215, 216, 228], "libnpyrandom": 217, "librari": 219, "like": [122, 202, 217, 220, 221, 228, 233, 235], "limit": [233, 238, 239, 243], "line": [204, 217], "linear": [3, 57, 197, 198, 207, 213, 215, 216, 219], "linux": 240, "list": [195, 196, 206, 228, 235, 239, 243], "liter": 219, "littl": 219, "live": 237, "llnl": 197, "lnc": 193, "lo": 196, "loc": [226, 227], "local": 239, "locat": [0, 208, 219, 228], "lock": [0, 1, 2, 3, 4, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 213, 214, 215, 216], "log": [223, 235, 238], "logist": 217, "logseri": 217, "long": [217, 223, 237, 239], "longdoubl": [217, 229], "longer": 217, "look": 219, "loop": [219, 237], "loui": 208, "low": [0, 1, 2, 3, 4, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 213, 214, 215, 216, 217, 223, 243], "lower": [40, 193, 196, 204, 219], "lxm": [194, 217, 235, 238, 239, 240, 243], "m": [10, 17, 22, 29, 34, 39, 44, 51, 57, 58, 63, 71, 78, 86, 94, 102, 108, 114, 119, 127, 135, 142, 151, 156, 163, 169, 176, 183, 190, 196, 199, 201, 202, 203, 205, 210, 219, 220, 226, 227, 228, 229, 230, 232, 233, 237], "m1": [227, 228], "m2": [227, 228], "machin": 220, "made": [5, 66, 74, 81, 89, 97, 130, 146, 235, 239], "magnitud": 219, "mai": [57, 115, 120, 122, 194, 205, 206, 224, 227], "main": [3, 198, 199, 207, 217, 221, 235], "maintain": [221, 224], "mainten": 221, "make": [0, 1, 2, 3, 4, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 220, 237, 243], "makoto": [3, 57, 198, 207], "manag": 219, "mani": [122, 195, 204, 217, 221, 235, 239, 243], "manipul": 231, "manual": [111, 204], "manylinux": 217, "map": [203, 206, 210, 238], "mardia": [230, 233], "mark": [203, 205, 210, 243], "marsaglia": [197, 214], "massiv": 204, "master": 1, "mat": 57, "match": [57, 198, 201, 203, 217, 219, 229], "math": 57, "mathemat": [196, 211, 227], "mathrm": 227, "matplotlib": 228, "matrix": [226, 227, 228, 230, 233], "matsumoto": [3, 57, 198, 199, 207, 214], "max_bit": 122, "maximum": [122, 204, 243], "mcgraw": 228, "mean": [204, 206, 219, 226, 227, 228, 237, 240], "mechan": [198, 201, 203, 206], "melissa": [196, 200, 201, 202], "member": [223, 243], "memori": [6, 7, 14, 15, 20, 21, 25, 26, 32, 33, 37, 38, 42, 43, 47, 48, 54, 55, 61, 62, 67, 68, 75, 76, 82, 83, 90, 91, 98, 99, 105, 106, 112, 113, 117, 118, 123, 124, 131, 132, 139, 140, 147, 148, 154, 155, 159, 160, 165, 166, 172, 173, 179, 180, 186, 187, 212, 219], "memoti": 218, "merg": [224, 235], "mersenn": [217, 238, 240, 243], "method": [0, 1, 2, 3, 5, 10, 11, 17, 18, 22, 23, 29, 34, 35, 39, 40, 44, 45, 51, 52, 57, 58, 63, 66, 71, 72, 74, 78, 79, 81, 86, 87, 89, 94, 95, 97, 102, 103, 114, 115, 119, 120, 122, 127, 130, 135, 136, 142, 143, 146, 151, 152, 156, 157, 163, 169, 170, 176, 177, 183, 184, 190, 191, 194, 196, 197, 198, 200, 201, 202, 203, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 222, 224, 227, 228, 230, 232, 233, 235, 239, 243], "middl": [145, 217], "might": [206, 208], "migrat": 224, "min_bit": 122, "minim": 223, "minimum": [122, 206, 217], "mix": [194, 197, 201, 205, 206, 217, 235], "mixer": [1, 2, 196, 201], "mk": [227, 228], "mod": [196, 197, 201, 202], "mode": [0, 1, 2, 3, 4, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219], "model": [199, 240], "moder": [237, 239], "modern": [217, 235], "modifi": 57, "modul": [3, 198, 199, 207, 235], "modulo": [97, 146], "modulu": 219, "mont": [3, 207], "mora": [203, 210], "more": [1, 2, 5, 66, 74, 81, 89, 97, 130, 146, 204, 212, 217, 221, 223, 228, 230, 233, 235, 239], "most": [122, 145, 204, 212, 217, 228, 232, 235, 239, 243], "move": [217, 221], "mrng": 237, "mt": [57, 243], "mt19937": [194, 217, 222, 235, 238, 239, 240, 243], "mt19937\u2074": 243, "mt64": [194, 199, 217, 235, 238, 240], "mu": 227, "much": 204, "muller": 223, "mult": 202, "multibuild": 217, "multidimension": 217, "multinomi": 217, "multinorm": 228, "multipl": [0, 1, 2, 3, 4, 57, 122, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 221, 228, 235, 237, 239, 243], "multipli": [194, 196, 201, 217, 219, 229, 235, 239], "multiprocess": 237, "multithread": 235, "multithreadedrng": 237, "multivari": [227, 228, 230, 233, 238], "multivariate_complex_norm": 217, "multivariate_norm": [217, 221, 227, 238], "murmur3": [196, 197], "murmur3_mix": 196, "murmurhash3": 197, "must": [0, 1, 2, 3, 4, 66, 74, 79, 81, 89, 97, 109, 122, 138, 145, 146, 161, 162, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 219, 223, 226, 227, 228, 229, 233, 236, 239], "mutsuo": [3, 207], "n": [0, 10, 17, 22, 29, 34, 39, 44, 51, 58, 63, 71, 78, 86, 94, 97, 100, 102, 108, 114, 119, 122, 127, 135, 142, 145, 146, 149, 151, 156, 163, 169, 176, 183, 190, 196, 201, 202, 203, 210, 219, 220, 223, 226, 227, 228, 229, 230, 232, 233, 237, 240], "nahdi": 1, "name": [6, 7, 14, 15, 20, 21, 25, 26, 32, 33, 37, 38, 42, 43, 47, 48, 54, 55, 61, 62, 67, 68, 75, 76, 82, 83, 90, 91, 98, 99, 105, 106, 112, 113, 117, 118, 123, 124, 131, 132, 139, 140, 147, 148, 154, 155, 159, 160, 165, 166, 172, 173, 179, 180, 186, 187, 196, 201, 203, 210, 217, 219, 221, 229], "nan": 217, "nation": 208, "nativ": 219, "natur": 243, "nb": 223, "ndarrai": [10, 17, 22, 29, 34, 39, 44, 51, 58, 63, 71, 78, 86, 94, 102, 108, 114, 119, 122, 127, 135, 142, 145, 151, 156, 163, 169, 176, 183, 190, 220, 226, 227, 228, 229, 230, 232, 233], "necessari": 204, "necessarili": 212, "need": [204, 217, 219, 223, 237, 239, 240], "neg": [97, 146, 228], "neglig": 239, "neill": [196, 200, 201, 202], "net": [4, 195, 197, 206], "network": [203, 210], "neve": [211, 217], "never": 110, "new": [1, 9, 16, 28, 50, 57, 70, 77, 85, 93, 101, 107, 126, 134, 141, 150, 168, 175, 182, 189, 197, 203, 210, 217, 219, 221, 228, 239], "new_kei": 239, "newer": 240, "next": [0, 161, 162, 196, 204, 208, 209, 212, 217, 219, 223, 240], "next_32": [161, 162, 212, 219], "next_64": [161, 162, 212, 219], "next_doubl": [6, 7, 14, 15, 20, 21, 25, 26, 32, 33, 37, 38, 42, 43, 47, 48, 54, 55, 61, 62, 67, 68, 75, 76, 82, 83, 90, 91, 98, 99, 105, 106, 112, 113, 117, 118, 123, 124, 131, 132, 139, 140, 147, 148, 154, 155, 159, 160, 161, 162, 165, 166, 172, 173, 179, 180, 186, 187, 212, 218, 219, 223], "next_gen": 239, "next_raw": [161, 162, 212, 219, 223], "next_uint32": [6, 7, 14, 15, 20, 21, 25, 26, 32, 33, 37, 38, 42, 43, 47, 48, 54, 55, 61, 62, 67, 68, 75, 76, 82, 83, 90, 91, 98, 99, 105, 106, 112, 113, 117, 118, 123, 124, 131, 132, 139, 140, 147, 148, 154, 155, 159, 160, 165, 166, 172, 173, 179, 180, 186, 187, 218, 223], "next_uint64": [6, 7, 14, 15, 20, 21, 25, 26, 32, 33, 37, 38, 42, 43, 47, 48, 54, 55, 61, 62, 67, 68, 75, 76, 82, 83, 90, 91, 98, 99, 105, 106, 112, 113, 117, 118, 123, 124, 131, 132, 139, 140, 147, 148, 154, 155, 159, 160, 165, 166, 172, 173, 179, 180, 186, 187, 218, 223], "next_valu": 219, "nextgen": 224, "nishimura": [57, 198, 199], "njsf": 219, "node4": 197, "nois": 217, "non": [0, 1, 2, 122, 200, 201, 202, 203, 208, 210, 213, 214, 215, 216, 228, 230, 235, 243], "noncryptograph": 195, "none": [0, 1, 2, 3, 4, 10, 11, 17, 18, 22, 23, 29, 30, 34, 35, 39, 40, 44, 45, 51, 52, 58, 59, 63, 64, 71, 72, 78, 79, 86, 87, 94, 95, 97, 102, 103, 108, 109, 114, 115, 119, 120, 122, 127, 128, 135, 136, 142, 143, 145, 146, 151, 152, 156, 157, 161, 162, 163, 169, 170, 176, 177, 183, 184, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 219, 220, 222, 226, 227, 228, 229, 230, 232, 233, 237, 243], "nonlinear": [205, 211], "nonneg": 228, "nopython": 223, "normal": [217, 219, 221, 223, 226, 227, 228, 230, 233, 237, 238, 240], "normals_zig": 223, "normalsj": 223, "note": [0, 1, 2, 3, 4, 5, 8, 10, 11, 17, 18, 22, 23, 29, 34, 39, 44, 49, 51, 57, 58, 63, 66, 69, 70, 71, 74, 77, 78, 81, 84, 85, 86, 89, 93, 94, 97, 100, 102, 103, 107, 110, 111, 114, 119, 122, 127, 130, 133, 135, 136, 141, 142, 145, 146, 149, 151, 152, 156, 161, 162, 163, 167, 169, 174, 176, 181, 183, 188, 190, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 220, 226, 227, 228, 230, 231, 232, 233, 239], "notebook": [212, 238], "notic": 219, "notimplementederror": [161, 162, 164, 212, 217, 219, 221], "novel": 224, "now": [217, 219, 221, 242], "np": [145, 206, 212, 217, 219, 223, 226, 227, 229, 237, 239, 243], "nsacyb": 208, "ntu": 193, "nuclear": 197, "null": 212, "num_stream": [205, 206, 239, 243], "numba": [161, 194, 196, 212, 217, 235, 238], "numbajsf": 219, "number": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 13, 16, 17, 18, 22, 23, 27, 28, 29, 30, 34, 35, 39, 40, 44, 45, 49, 50, 51, 52, 56, 57, 58, 59, 63, 64, 66, 69, 70, 71, 74, 77, 78, 79, 81, 84, 85, 86, 87, 89, 93, 94, 95, 97, 100, 101, 102, 103, 114, 119, 122, 125, 126, 127, 128, 130, 133, 134, 135, 136, 138, 141, 142, 143, 145, 146, 149, 150, 151, 152, 156, 157, 163, 167, 168, 169, 170, 174, 175, 176, 177, 181, 182, 183, 184, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 224, 229, 232, 235, 237, 243], "numer": [230, 233], "numpi": [0, 1, 2, 3, 4, 122, 145, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243], "numpy_se": [198, 201, 203, 206], "ny": [203, 210], "nz_bit": 122, "o": [115, 120, 196, 200, 201, 202, 203, 205, 206, 210, 228], "object": [0, 1, 2, 3, 4, 193, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 213, 214, 215, 216, 223, 237, 243], "observ": 145, "occur": [5, 66, 74, 81, 89, 97, 130, 146, 204, 217, 239], "odd": [122, 145, 196, 197, 206, 209, 239], "odel": [230, 233], "offici": [208, 217, 219, 221], "offset": [0, 208], "onc": [111, 145], "one": [5, 66, 74, 81, 89, 97, 130, 145, 146, 162, 206, 212, 217, 219, 223, 228, 235, 239, 240], "ones": [224, 227], "onli": [0, 1, 2, 3, 97, 122, 145, 146, 193, 194, 195, 197, 198, 199, 203, 204, 207, 208, 210, 211, 213, 214, 215, 216, 217, 228, 237, 243], "onlin": [4, 57, 196, 197, 202, 204, 214], "opaqu": 223, "open": [4, 217, 229], "openjdk": 197, "openrand": [211, 217], "oper": [204, 209, 211, 217, 219, 221], "option": [18, 23, 115, 120, 196, 197, 206, 209, 223, 235, 238], "order": 219, "org": [0, 1, 145, 193, 196, 200, 201, 202, 205, 206, 209, 211, 212, 219, 226, 227, 241, 243], "orient": [3, 228], "origin": [3, 57, 195, 197, 198, 201, 207, 211, 213, 214, 215, 216, 217, 240], "other": [3, 30, 59, 64, 109, 128, 195, 198, 199, 204, 206, 207, 217, 223, 228, 232, 235, 238, 243], "otherwis": [226, 228, 229, 230, 233], "oubl": 219, "out": [10, 11, 17, 18, 22, 23, 29, 30, 34, 35, 39, 40, 44, 45, 51, 52, 58, 59, 63, 64, 71, 72, 78, 86, 87, 94, 95, 102, 103, 108, 114, 115, 119, 120, 127, 128, 135, 136, 142, 143, 151, 152, 156, 157, 163, 169, 170, 176, 177, 183, 184, 190, 191, 212, 217, 219, 223, 226, 227, 228, 229, 232, 237], "outcom": 219, "output": [0, 1, 2, 3, 5, 10, 17, 22, 29, 34, 39, 44, 51, 58, 63, 66, 71, 74, 78, 81, 86, 89, 94, 97, 102, 108, 114, 119, 127, 130, 135, 142, 146, 151, 156, 163, 169, 176, 183, 190, 193, 194, 195, 197, 198, 199, 201, 207, 208, 212, 213, 214, 215, 216, 217, 219, 220, 226, 227, 228, 229, 230, 232, 233, 235, 237, 239, 240, 243], "outsid": [97, 146], "over": 229, "overal": 240, "overhead": 237, "overlap": [0, 1, 2, 200, 201, 202, 203, 205, 208, 210, 213, 214, 215, 216, 239], "overrid": 209, "overton": 205, "p": [4, 193, 195, 196, 219, 228, 230, 233], "p3cipher": 193, "pack": [227, 228, 233], "packag": 235, "page": 235, "panneton": [57, 198], "paper": [2, 217], "papouli": 228, "parallel": [2, 4, 107, 193, 205, 211, 217], "paramet": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 13, 16, 17, 22, 27, 28, 29, 30, 34, 35, 39, 40, 44, 45, 49, 50, 51, 52, 56, 57, 58, 59, 63, 64, 66, 69, 70, 71, 72, 74, 77, 78, 79, 81, 84, 85, 86, 87, 89, 93, 94, 95, 97, 100, 101, 102, 103, 107, 108, 109, 114, 119, 122, 125, 126, 127, 128, 130, 133, 134, 135, 136, 138, 141, 142, 143, 145, 146, 149, 150, 151, 152, 156, 157, 161, 162, 163, 167, 168, 169, 170, 174, 175, 176, 177, 181, 182, 183, 184, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 222, 226, 227, 228, 229, 230, 232, 233], "parameter": [195, 226, 227], "parametr": 217, "particular": [5, 66, 74, 81, 89, 97, 130, 146, 220, 239], "pass": [4, 52, 109, 115, 120, 161, 162, 164, 204, 205, 206, 212, 219, 222, 223, 231, 235, 239, 243], "path": 217, "pattern": [97, 146, 228, 239], "paus": [204, 217], "pcg": [196, 200, 201, 202, 206, 217, 219, 222, 235, 239], "pcg32": [194, 217, 235, 238, 239], "pcg4": 238, "pcg64": [72, 194, 196, 200, 202, 217, 219, 221, 222, 235, 238, 239, 240, 243], "pcg64dxsm": [202, 217, 240, 243], "pcg64dxsm\u00b2": 243, "pcg64\u2075": 243, "pcg_default_multipli": 219, "pdf": [193, 208], "peak": 228, "per": [219, 237], "percentag": 240, "perform": [2, 10, 17, 22, 29, 34, 39, 44, 51, 57, 58, 63, 71, 78, 86, 94, 102, 108, 114, 119, 127, 135, 142, 151, 156, 163, 169, 176, 183, 190, 203, 204, 208, 210, 212, 217, 223, 233, 235, 239, 243], "period": [0, 1, 2, 69, 70, 77, 196, 200, 201, 203, 206, 208, 210, 213, 214, 215, 216, 217, 235, 237, 239], "perman": 194, "permut": [145, 196, 217, 238], "phi": [69, 70, 77, 84, 85, 93, 141, 217, 239], "philox": [0, 194, 208, 210, 217, 235, 238, 239, 240], "philoxnxw": 203, "philox\u2075": 243, "pickl": 217, "pierr": [3, 57, 198, 207], "place": [217, 219, 221, 229], "plan": [221, 235], "platform": 204, "plot": 228, "plt": 228, "plu": [3, 198, 199, 207], "plusplu": 213, "point": [228, 233], "pointer": [0, 1, 2, 3, 4, 6, 7, 14, 15, 20, 21, 25, 26, 32, 33, 37, 38, 42, 43, 47, 48, 54, 55, 61, 62, 67, 68, 75, 76, 82, 83, 90, 91, 98, 99, 105, 106, 112, 113, 117, 118, 123, 124, 131, 132, 139, 140, 147, 148, 154, 155, 159, 160, 161, 162, 165, 166, 172, 173, 179, 180, 186, 187, 193, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 218, 219, 223], "polynomi": [3, 57, 198, 207], "pool": [0, 1, 2, 220], "popular": 228, "portion": 224, "posit": [0, 1, 2, 3, 97, 136, 145, 146, 198, 199, 203, 207, 208, 209, 210, 226, 227, 228, 233], "possibl": [0, 1, 2, 3, 111, 122, 198, 199, 203, 204, 207, 208, 210, 213, 214, 215, 216, 219, 221, 222, 224, 235], "post": [196, 206, 217], "pp": [3, 57, 193, 197, 198, 207, 214], "ppam": 211, "pracrand": [4, 206], "practic": [4, 122, 204, 206, 232, 243], "practrand": [206, 217, 243], "pre": [5, 8, 49, 74, 81, 84, 89, 100, 130, 133, 145, 149, 167, 174, 181, 188, 202, 209, 217, 228, 233, 239], "precis": [217, 233], "precomput": 57, "predecessor": 224, "predefin": 196, "prefer": [196, 213, 217, 221], "prepar": 221, "present": [221, 222, 240], "prevent": 217, "previou": [217, 238], "previous": 122, "primari": 222, "print": [145, 219, 223, 237], "prng": [0, 1, 2, 4, 8, 10, 11, 12, 17, 18, 19, 22, 23, 24, 27, 29, 30, 31, 34, 35, 36, 39, 40, 41, 44, 45, 46, 49, 51, 52, 53, 56, 58, 59, 60, 63, 64, 65, 71, 72, 73, 78, 80, 86, 87, 88, 94, 95, 96, 100, 102, 103, 104, 110, 114, 115, 116, 119, 120, 121, 125, 127, 128, 129, 133, 135, 136, 137, 138, 142, 143, 144, 145, 149, 151, 152, 153, 156, 157, 158, 161, 162, 163, 167, 169, 170, 171, 174, 176, 177, 178, 181, 183, 184, 185, 188, 190, 191, 192, 193, 195, 197, 200, 203, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 235, 237, 240], "probabl": [217, 228, 239], "problem": 4, "procedur": [230, 233], "proceed": [203, 210], "process": [0, 2, 3, 4, 11, 18, 23, 30, 35, 40, 45, 59, 64, 87, 95, 103, 128, 136, 143, 152, 157, 170, 177, 184, 191, 193, 195, 197, 198, 199, 200, 203, 205, 206, 207, 208, 210, 211, 213, 214, 215, 216, 220, 228, 239], "processor": 204, "produc": [0, 1, 2, 3, 4, 6, 7, 10, 14, 15, 17, 20, 21, 22, 25, 26, 29, 32, 33, 34, 37, 38, 39, 42, 43, 44, 47, 48, 51, 52, 54, 55, 57, 58, 61, 62, 63, 67, 68, 71, 75, 76, 78, 82, 83, 86, 90, 91, 94, 98, 99, 102, 105, 106, 112, 113, 114, 117, 118, 119, 122, 123, 124, 127, 131, 132, 135, 139, 140, 142, 147, 148, 151, 154, 155, 156, 159, 160, 163, 165, 166, 169, 172, 173, 176, 179, 180, 183, 186, 187, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 223, 227, 232, 235, 237, 238, 239, 240, 243], "product": [226, 230, 233], "project": [224, 235], "proof": 217, "propag": 204, "proper": 228, "properti": [2, 161, 162, 196, 201, 202, 204, 212, 219, 228], "propos": [197, 217], "prototyp": 223, "provid": [0, 1, 2, 3, 4, 11, 18, 23, 79, 103, 107, 110, 152, 161, 162, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 227, 229, 238, 242], "pseudo": [0, 1, 2, 3, 4, 10, 11, 17, 18, 22, 23, 29, 30, 34, 35, 39, 40, 44, 45, 51, 52, 58, 59, 63, 64, 71, 78, 79, 86, 87, 94, 95, 102, 103, 114, 119, 127, 128, 135, 136, 142, 143, 145, 151, 152, 156, 157, 163, 169, 170, 176, 177, 183, 184, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 207, 208, 209, 210, 211, 213, 214, 215, 216, 219, 221, 230, 232, 233, 235, 239], "pseudorandom": [3, 57, 207, 211], "psuedo": 218, "pull": [115, 120, 205, 206, 217, 224], "pure": [219, 223], "put": 224, "py_ssize_t": 223, "pycapsul": [204, 223], "pycapsule_getpoint": 223, "pycapsule_isvalid": 223, "pyerr_occur": 204, "pyplot": 228, "python": [0, 1, 2, 3, 4, 11, 18, 23, 103, 152, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 221, 235, 237, 238], "python_pcg": 219, "pythonpcg64": 219, "pyx": [219, 223], "q": [193, 195, 219], "quad": 205, "qualifi": 217, "qualiti": [4, 193, 205, 213, 215, 216, 217, 235], "quasi": [3, 207], "quickli": 204, "r": [3, 195, 197, 198, 207, 211, 219, 228, 230, 233], "r1": 227, "r2": [223, 227], "rai": 208, "rais": [11, 18, 23, 30, 35, 40, 45, 52, 59, 64, 72, 87, 95, 103, 108, 109, 115, 120, 128, 136, 143, 152, 157, 161, 162, 164, 170, 177, 184, 191, 204, 212, 217, 219, 220, 221, 223, 227], "raisinglock": 204, "rand": 195, "randint": [217, 221], "random": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 16, 17, 18, 22, 23, 27, 28, 29, 30, 34, 35, 39, 40, 44, 45, 49, 50, 51, 52, 56, 57, 58, 59, 63, 64, 66, 69, 70, 71, 74, 77, 78, 79, 81, 84, 85, 86, 87, 89, 93, 94, 95, 97, 100, 101, 102, 103, 108, 114, 119, 125, 126, 127, 128, 130, 133, 134, 135, 136, 141, 142, 143, 145, 146, 149, 150, 151, 152, 156, 157, 161, 162, 163, 167, 168, 169, 170, 174, 175, 176, 177, 181, 182, 183, 184, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 232, 233, 237, 238, 240, 241, 243], "random123": [217, 235], "random_entropi": [3, 198, 207, 220, 235, 238, 239], "random_gauss_zig": 223, "random_integ": [217, 221], "random_raw": [204, 205, 206, 217, 219], "random_sampl": [217, 221], "random_st": 237, "random_uinteg": 217, "random_valu": 223, "randomgen": [0, 1, 2, 3, 4, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 234, 236, 237, 239, 242, 243], "randomgener": [217, 221], "randomli": 145, "randomst": [217, 221, 224, 235, 236, 240], "rang": [0, 1, 2, 3, 11, 18, 23, 30, 35, 40, 45, 52, 59, 64, 72, 87, 95, 97, 103, 115, 120, 128, 136, 138, 143, 146, 152, 157, 170, 177, 184, 191, 193, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 213, 214, 215, 216, 219, 223, 237, 238, 239, 243], "rank": 233, "rapidli": 223, "rare": 217, "rather": [193, 201], "ratio": [77, 84, 85, 93, 141, 239], "raw": [10, 17, 22, 29, 34, 39, 44, 51, 58, 63, 71, 78, 86, 94, 102, 114, 119, 127, 135, 142, 151, 156, 161, 162, 163, 169, 176, 183, 190, 219, 223, 232], "rdrand": [194, 217, 235, 238, 239, 240], "re": [11, 18, 23, 35, 40, 45, 52, 72, 79, 87, 95, 103, 115, 120, 136, 143, 152, 157, 170, 177, 184, 191, 226, 227], "read": [0, 1, 2, 3, 4, 11, 18, 23, 30, 35, 40, 45, 59, 64, 87, 95, 103, 128, 136, 143, 145, 152, 157, 170, 177, 184, 191, 193, 195, 197, 198, 199, 200, 203, 207, 208, 209, 210, 211, 213, 214, 215, 216, 219, 220, 235], "real": [226, 227], "realist": 212, "realli": 4, "reason": [5, 66, 74, 81, 89, 97, 130, 146, 237, 239, 240, 243], "receiv": 221, "recent": 235, "recogn": 217, "recommend": [204, 206, 217, 235, 243], "recurr": [3, 198, 207], "redirect": 217, "reduc": [2, 208], "refactor": 217, "refer": [0, 1, 2, 3, 4, 57, 145, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 226, 227, 228, 230, 233, 235], "refil": 217, "reflect": 221, "regard": 209, "regener": 145, "regist": 217, "reimplement": 1, "reject": [5, 66, 74, 81, 89, 97, 122, 130, 146, 239], "rel": [122, 227, 240, 243], "relat": [0, 1, 2, 11, 18, 23, 103, 136, 152, 193, 203, 208, 210, 213, 215, 216, 226, 227], "relationship": [5, 66, 74, 81, 89, 97, 130, 146, 239], "releas": [194, 217, 238], "relev": 243, "reli": [204, 217], "remain": [111, 209], "remov": [213, 217, 221, 223, 224, 234, 236, 242], "renam": [217, 221], "repeat": [145, 237, 239], "repetit": 209, "replac": [122, 201, 209, 217, 221], "replic": 217, "report": [204, 243], "repositori": [196, 202], "repres": [196, 200, 201, 202, 228], "represent": [11, 18, 23, 103, 136, 152], "reproduc": [5, 8, 49, 74, 79, 81, 84, 89, 100, 130, 133, 149, 167, 174, 181, 188, 204, 220, 235, 237], "request": 224, "requir": [5, 8, 12, 19, 24, 31, 36, 41, 46, 49, 53, 60, 65, 66, 73, 74, 80, 81, 84, 88, 89, 96, 97, 100, 104, 110, 116, 121, 129, 130, 133, 137, 144, 145, 146, 149, 153, 158, 167, 171, 174, 178, 181, 185, 188, 192, 209, 217, 223, 231, 237, 239, 240, 243], "rescal": 230, "research": 193, "resembl": 243, "reset": [5, 8, 49, 74, 81, 84, 89, 97, 100, 111, 130, 133, 146, 149, 167, 174, 181, 188, 217, 239], "reshap": 239, "restor": [110, 217], "result": [204, 212, 217, 229, 235, 239], "retain": 235, "retri": [108, 204, 217], "retriev": [0, 197, 205], "return": [5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 192, 195, 196, 201, 212, 217, 218, 219, 220, 221, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 239], "revamp": 224, "rg": [0, 1, 2, 4, 193, 195, 197, 200, 201, 202, 203, 204, 208, 209, 210, 211, 213, 214, 215, 216, 222, 235, 237, 243], "rho": 227, "right": 227, "rng": [3, 5, 8, 11, 18, 23, 49, 66, 69, 74, 81, 84, 89, 97, 100, 103, 130, 133, 145, 146, 149, 152, 167, 174, 181, 188, 196, 197, 200, 201, 202, 207, 209, 214, 217, 219, 221, 223, 235, 239], "rng_engin": 206, "rngman": 197, "robust": [227, 228, 233], "romu": [194, 217, 235, 240, 243], "ron": [203, 210], "rot": 219, "rotat": [195, 201, 211, 212, 213, 219, 235, 238], "rotate64": 219, "rotate64_sig": 219, "rotl": 195, "rotr_64": 219, "roughli": 228, "round": [1, 2, 208, 217, 240, 243], "rq": 227, "rr": [196, 201, 203, 219], "rsa": 220, "rue": 209, "rule": 145, "run": [0, 1, 2, 11, 18, 23, 103, 152, 203, 204, 206, 208, 209, 210, 212, 219, 237, 240], "runtimeerror": [108, 204, 220], "runtimerror": 204, "rv": 212, "s_": [196, 201, 202, 219], "sai": 239, "said": 239, "saito": [3, 207, 214], "salmon": [203, 210], "salsa20": 2, "same": [0, 1, 2, 3, 4, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 229, 235, 237, 239, 243], "sampl": [10, 17, 22, 29, 34, 39, 44, 51, 58, 63, 71, 78, 86, 94, 102, 108, 114, 119, 122, 127, 135, 142, 151, 156, 163, 169, 176, 183, 190, 217, 220, 226, 227, 228, 229, 230, 232, 233, 243], "sampler": 122, "satisfi": [209, 237], "save": 219, "sc11": [203, 210], "scalar": [220, 221, 226, 227, 229], "scale": [230, 233, 237, 240], "scheme": [203, 210], "sci": 57, "scienc": 211, "scrambl": 214, "search": 235, "sebastiano": [213, 214, 215, 216], "second": [0, 1, 2, 196, 197, 201, 202, 203, 204, 208, 210, 217, 239, 243], "secur": [1, 2, 204, 208], "see": [0, 1, 2, 10, 11, 17, 18, 22, 23, 29, 34, 39, 44, 51, 52, 58, 63, 71, 72, 78, 86, 94, 102, 103, 114, 119, 127, 135, 136, 142, 151, 152, 156, 161, 162, 163, 169, 176, 177, 183, 190, 193, 195, 196, 200, 203, 204, 208, 210, 212, 213, 214, 215, 216, 217, 219, 228, 235, 238, 243], "seed": [145, 194, 217, 219, 220, 235, 237, 239], "seed_seq": [0, 1, 2, 3, 4, 122, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 239, 243], "seed_sequ": [217, 221], "seed_siz": [195, 219, 243], "seedsequ": [0, 1, 2, 3, 4, 11, 18, 23, 30, 35, 40, 45, 52, 59, 64, 79, 87, 95, 103, 115, 120, 122, 128, 136, 143, 145, 152, 157, 170, 177, 184, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 221, 235, 240, 242, 243], "seedseuqnc": 202, "seen": 228, "segment": [0, 1, 2, 3, 197, 198, 203, 207, 208, 210, 213, 214, 215, 216], "select": [145, 195, 209, 211, 227, 228, 233], "self": [5, 8, 27, 49, 56, 66, 69, 74, 81, 84, 89, 97, 100, 125, 130, 133, 138, 146, 149, 167, 174, 181, 188, 196, 202, 219, 237], "semi": [226, 227], "semidefinit": [227, 228, 233], "sens": 237, "sensit": 243, "sent": 217, "separ": 243, "septemb": 197, "sequenc": [0, 1, 2, 3, 4, 30, 57, 59, 64, 79, 128, 145, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 235, 238, 243], "servic": 220, "set": [0, 1, 2, 4, 11, 12, 18, 19, 23, 24, 31, 36, 41, 46, 53, 60, 65, 73, 79, 80, 88, 96, 103, 104, 110, 111, 116, 121, 122, 129, 136, 137, 144, 152, 153, 158, 161, 162, 164, 171, 178, 185, 192, 193, 194, 197, 198, 201, 203, 204, 206, 208, 209, 210, 211, 212, 217, 219, 220, 223, 227, 231, 233, 239, 243], "seta": [3, 198, 207], "settabl": 197, "setter": 219, "setup": [217, 223], "setuptool": 217, "sfc": [206, 217], "sfc64": [194, 217, 235, 238, 239, 240, 243], "sfc64\u2075": 243, "sfmt": [194, 217, 235, 238, 239, 240, 243], "sfmt\u2074": 243, "sg": 193, "shape": [10, 17, 22, 29, 34, 39, 44, 51, 58, 63, 71, 78, 86, 94, 102, 108, 114, 119, 127, 135, 142, 151, 156, 163, 169, 176, 183, 190, 217, 220, 226, 227, 228, 229, 230, 232, 233], "share": [0, 1, 2, 3, 4, 79, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 213, 214, 215, 216, 222, 235, 243], "shaw": [203, 210], "shift": [213, 217, 235, 238], "shootout": [197, 213, 214, 215, 216], "shor": 208, "short": [204, 243], "should": [0, 1, 2, 3, 4, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 232, 234, 236, 243], "show": [0, 208, 219, 223, 228, 237, 239], "shutdown": 237, "sig": 219, "signatur": [161, 196, 212], "signature_or_funct": 219, "signific": [196, 202], "silent": 212, "sim": 227, "simd": 217, "similar": [0, 1, 2, 3, 4, 193, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 213, 214, 215, 216, 238], "similarli": 217, "simon": 208, "simpl": [193, 196, 197, 200, 201, 202, 213, 214, 215, 216, 217, 219, 232], "simpler": [122, 219], "simplest": 223, "simpli": 243, "simplifi": 217, "simul": [5, 66, 74, 81, 89, 97, 130, 146, 199, 211, 230, 238, 239], "sinc": [10, 17, 22, 29, 34, 39, 44, 51, 58, 63, 71, 78, 86, 94, 102, 108, 114, 119, 127, 135, 142, 151, 156, 163, 169, 176, 183, 190, 197, 204, 217, 219, 232, 235, 238, 239, 240, 242, 243], "singl": [0, 1, 2, 3, 5, 10, 17, 22, 29, 34, 39, 44, 51, 58, 63, 66, 71, 74, 78, 81, 86, 89, 94, 97, 102, 108, 114, 119, 127, 130, 135, 142, 146, 151, 156, 161, 162, 163, 169, 176, 183, 190, 193, 195, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 212, 213, 214, 215, 216, 219, 220, 226, 227, 228, 229, 230, 232, 233, 237, 239, 240, 243], "singular": [227, 228, 230, 233], "site": 204, "size": [10, 17, 22, 29, 34, 39, 44, 45, 51, 58, 63, 66, 69, 70, 71, 74, 77, 78, 81, 84, 85, 86, 89, 93, 94, 97, 102, 108, 114, 119, 127, 135, 141, 142, 146, 151, 156, 163, 169, 176, 183, 190, 195, 196, 204, 213, 215, 216, 217, 219, 220, 226, 227, 228, 229, 230, 232, 233, 239, 243], "skip": 217, "skylak": 204, "slow": [122, 212, 219, 235, 238], "slower": [204, 205, 219, 227, 228, 233, 240], "slowest": [227, 228, 233], "small": [0, 1, 2, 3, 122, 198, 199, 203, 205, 206, 207, 208, 210, 211, 213, 214, 215, 216, 217, 222, 223], "smaller": [2, 200, 214, 226], "smallprng": 195, "smith": 208, "so": [0, 1, 2, 3, 4, 5, 66, 74, 81, 89, 97, 107, 122, 130, 146, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 220, 223, 224, 226, 228, 233, 235, 237, 239, 243], "societi": [226, 227], "softwar": [193, 197, 204, 214], "some": [204, 213, 217, 219, 222, 224, 230, 233, 235, 239, 243], "somewhat": 205, "sourc": [209, 219, 220, 222, 238], "sourceforg": [4, 206], "space": [3, 195, 196, 198, 200, 201, 202, 207, 228], "spars": 239, "spawn": [4, 196, 205, 209, 211, 239, 240, 243], "special": 204, "specif": [204, 217, 222, 239, 240, 243], "specifi": [217, 227, 228, 233], "speck128": [194, 208, 235, 238, 239, 240, 243], "spectral": [196, 201, 202], "spectrum": 223, "speed": [213, 217, 238], "spheric": 228, "sphinx": 217, "split": [3, 197, 198, 207, 213, 214, 215, 216], "splitmix64": [0, 2, 193, 208, 213, 214, 215, 216], "spread": 228, "springer": [3, 193, 207, 211], "sqrt": [223, 239], "squar": [4, 194, 217, 228, 235, 240], "square_method": 209, "ss": [4, 145, 196, 209, 211], "sse2": 235, "st": [219, 223], "stabil": 236, "stabl": [235, 243], "stafford": 197, "standard": [0, 1, 2, 197, 217, 219, 223, 226, 227, 228, 230, 233, 235, 243], "standard_exponenti": 217, "standard_gamma": 217, "standard_norm": [0, 1, 2, 4, 193, 195, 197, 203, 204, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 223, 237], "standard_wishart": [217, 233], "start": [204, 206, 209, 219], "stat": [230, 233], "state": [5, 6, 7, 8, 9, 11, 13, 14, 15, 16, 18, 20, 21, 23, 25, 26, 27, 28, 32, 33, 37, 38, 42, 43, 47, 48, 49, 50, 52, 54, 55, 56, 57, 61, 62, 66, 67, 68, 69, 70, 74, 75, 76, 77, 81, 82, 83, 84, 85, 89, 90, 91, 93, 97, 98, 99, 100, 101, 103, 105, 106, 112, 113, 115, 117, 118, 120, 123, 124, 125, 126, 130, 131, 132, 133, 134, 138, 139, 140, 141, 146, 147, 148, 149, 150, 152, 154, 155, 159, 160, 161, 162, 165, 166, 167, 168, 172, 173, 174, 175, 179, 180, 181, 182, 186, 187, 188, 189, 194, 217, 218, 219, 220, 223, 229, 235, 237, 243], "state_addr": 223, "state_address": [6, 7, 14, 15, 20, 21, 25, 26, 32, 33, 37, 38, 42, 43, 47, 48, 54, 55, 61, 62, 67, 68, 75, 76, 82, 83, 90, 91, 98, 99, 105, 106, 112, 113, 117, 118, 123, 124, 131, 132, 139, 140, 147, 148, 154, 155, 159, 160, 165, 166, 172, 173, 179, 180, 186, 187, 218, 219, 223], "state_gett": [161, 162, 164, 212, 219], "state_sett": [161, 162, 164, 212, 219], "stateless": [107, 204], "statist": [4, 196, 197, 200, 201, 202, 206, 208, 213, 214, 215, 216, 230, 233, 235], "statu": [111, 204], "std": [219, 237], "stdlib": [3, 198, 199, 207], "steel": 197, "stefan": 208, "step": [0, 1, 2, 5, 13, 57, 66, 69, 70, 74, 77, 81, 84, 85, 89, 93, 97, 130, 138, 141, 146, 196, 200, 201, 202, 203, 208, 210, 217, 219, 235, 237, 239, 240], "still": [204, 223], "stochast": 228, "storag": [203, 210], "store": [97, 146, 203, 210, 219, 239], "stork": 228, "strategi": 239, "stream": [0, 1, 2, 3, 4, 57, 122, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 235, 239, 240, 243], "struct": [6, 7, 14, 15, 20, 21, 25, 26, 32, 33, 37, 38, 42, 43, 47, 48, 54, 55, 61, 62, 67, 68, 75, 76, 82, 83, 90, 91, 98, 99, 105, 106, 112, 113, 117, 118, 123, 124, 131, 132, 139, 140, 147, 148, 154, 155, 159, 160, 165, 166, 172, 173, 179, 180, 186, 187, 218, 219, 223], "structur": [196, 204, 217, 219, 223], "studi": 243, "subject": 239, "submit": 237, "subsampl": 145, "subsequ": [215, 216, 219], "substanti": [224, 235, 237], "subtract": 211, "succe": 235, "succeed": [111, 204, 224], "success": 204, "successor": 213, "suggest": 197, "suit": 195, "suitabl": [193, 238, 239], "sum": [4, 197], "summer": [57, 198], "suppli": [217, 235], "support": [0, 1, 2, 3, 4, 193, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 213, 214, 215, 216, 217, 219, 221, 224, 230, 237, 238, 239], "svd": [227, 228, 233], "swap": 217, "swift": 1, "switch": 217, "syarif": 1, "symmetr": [227, 228, 233], "sync": 217, "synchron": 217, "system": [79, 195, 196, 201, 202, 217, 235, 238, 239], "t": [199, 227, 228, 233], "tabl": [4, 196, 199, 240, 243], "take": [97, 146, 161, 162, 204, 212, 219], "taken": [221, 240, 243], "takuji": [57, 198], "tb\u00b9": 243, "te": 243, "temp": 219, "templat": 243, "test": [10, 17, 22, 29, 34, 39, 44, 51, 58, 63, 71, 78, 86, 94, 102, 108, 110, 114, 119, 127, 135, 142, 151, 156, 163, 169, 176, 183, 190, 194, 217, 223, 235, 236, 238], "text": 204, "tf": 243, "than": [5, 66, 74, 81, 89, 97, 130, 146, 193, 201, 204, 219, 226, 227, 228, 233, 238, 239], "thei": [204, 221], "theme": 217, "theoret": 235, "theori": [230, 233], "thi": [0, 1, 2, 3, 4, 5, 8, 10, 11, 17, 18, 22, 23, 29, 34, 35, 39, 40, 44, 45, 49, 51, 52, 58, 63, 66, 71, 72, 74, 78, 79, 81, 84, 86, 87, 89, 94, 95, 97, 100, 102, 103, 107, 110, 111, 114, 115, 119, 120, 122, 127, 130, 133, 135, 136, 142, 143, 145, 146, 149, 151, 152, 156, 157, 162, 163, 167, 169, 170, 174, 176, 177, 181, 183, 184, 188, 190, 191, 193, 196, 197, 198, 201, 202, 203, 204, 207, 208, 209, 212, 213, 214, 215, 216, 217, 219, 220, 223, 224, 227, 228, 231, 232, 233, 235, 237, 239, 243], "those": 243, "thread": [0, 1, 2, 3, 4, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 213, 214, 215, 216, 237], "threadpoolexecutor": 237, "three": [195, 206, 223, 229, 243], "threefri": [0, 194, 203, 208, 217, 221, 235, 238, 239, 240, 243], "threefrynxw": 210, "through": [0, 1, 2, 11, 18, 23, 103, 136, 152, 164, 203, 208, 210, 219, 223, 231], "time": [0, 2, 3, 4, 8, 9, 11, 16, 18, 23, 27, 28, 30, 35, 40, 45, 49, 50, 56, 57, 59, 64, 69, 70, 77, 84, 85, 87, 93, 95, 100, 101, 103, 107, 125, 126, 128, 133, 134, 136, 141, 143, 149, 150, 152, 157, 167, 168, 170, 174, 175, 177, 181, 182, 184, 188, 189, 191, 193, 195, 197, 198, 199, 200, 203, 204, 205, 206, 207, 208, 210, 213, 214, 215, 216, 217, 219, 220, 221, 235, 237, 239], "timeit": [219, 223, 237], "times2": 243, "tini": 205, "togeth": 228, "tol": [227, 228, 233], "toler": [227, 228, 233], "tolist": 239, "too": [4, 217, 235], "tool": 223, "trail": 230, "transact": 199, "transform": [198, 201, 203, 209, 213, 215, 216, 219, 228, 233, 243], "translat": [209, 211, 219], "treat": 217, "treatman": 208, "trio": [205, 240, 243], "trivari": 227, "trivial": 231, "true": [10, 17, 22, 29, 34, 39, 44, 51, 58, 63, 71, 78, 86, 94, 97, 102, 108, 111, 114, 119, 127, 135, 142, 145, 146, 151, 156, 163, 169, 176, 183, 190, 196, 198, 201, 203, 204, 206, 211, 213, 219, 223, 228, 230], "truncat": 232, "trust": 201, "try": [87, 95, 200], "tupl": [6, 7, 14, 15, 20, 21, 25, 26, 32, 33, 37, 38, 42, 43, 47, 48, 54, 55, 61, 62, 67, 68, 75, 76, 82, 83, 90, 91, 98, 99, 105, 106, 112, 113, 117, 118, 123, 124, 131, 132, 139, 140, 147, 148, 154, 155, 159, 160, 165, 166, 172, 173, 179, 180, 186, 187, 239], "twice": 228, "twister": [217, 238, 240, 243], "two": [0, 5, 11, 18, 23, 66, 74, 81, 89, 97, 103, 130, 136, 146, 152, 197, 217, 219, 226, 227, 228, 229, 233, 239, 243], "txt": 206, "tych": [194, 217, 235, 240], "tyche": 211, "tycheopenrand": 240, "type": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 158, 159, 160, 163, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233], "typedef": 223, "typeerror": 109, "typic": [1, 2], "u": [57, 204], "uhlig": [230, 233], "uint": 219, "uint32": [2, 161, 195, 218, 219, 240], "uint32_t": 223, "uint64": [0, 1, 2, 10, 11, 17, 18, 22, 23, 29, 34, 39, 44, 51, 58, 63, 71, 78, 86, 94, 102, 103, 108, 114, 119, 127, 135, 136, 142, 145, 151, 152, 156, 161, 163, 169, 176, 183, 190, 195, 196, 203, 208, 210, 212, 217, 218, 219, 239, 240], "uint64_t": 223, "uint8": [0, 219, 239], "uinteg": [219, 221, 238], "unavail": [0, 2, 3, 4, 11, 18, 23, 30, 35, 40, 45, 59, 64, 87, 95, 103, 128, 136, 143, 152, 157, 170, 177, 184, 191, 193, 195, 197, 198, 199, 200, 203, 207, 208, 210, 213, 214, 215, 216], "undefin": 228, "under": [219, 237], "underli": [5, 10, 17, 22, 29, 34, 39, 44, 51, 58, 63, 66, 71, 74, 78, 81, 86, 89, 94, 97, 102, 108, 114, 119, 127, 130, 135, 142, 146, 151, 156, 161, 162, 163, 169, 176, 183, 190, 201, 219, 221, 232, 237, 239], "understand": 219, "unif": 229, "uniform": [199, 217, 221, 223, 229, 240], "uniformli": 122, "unimi": [197, 213, 214, 215, 216], "uniqu": [145, 204, 217, 239], "univari": 228, "univers": 239, "unix": [220, 238], "unless": [111, 145, 229, 240], "unlik": [0, 1, 2, 11, 18, 23, 103, 152, 203, 208, 210, 217], "unpack": 223, "unpickl": [110, 217], "unpredict": [115, 120, 205, 206], "unqiu": 145, "unsid": 195, "unsign": [0, 1, 2, 3, 4, 10, 17, 22, 29, 30, 34, 39, 44, 51, 58, 59, 63, 64, 71, 78, 86, 94, 102, 114, 119, 127, 128, 135, 142, 151, 156, 163, 169, 176, 183, 190, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 220, 223, 232, 238, 239], "unspecifi": 206, "untest": 208, "up": [204, 217, 219, 223], "updat": [4, 5, 66, 74, 81, 89, 97, 130, 146, 196, 197, 202, 217, 219, 239], "upper": [40, 193, 196, 219, 233, 243], "upstream": 217, "urandom": [0, 1, 2, 3, 4, 11, 18, 23, 30, 35, 40, 45, 59, 64, 87, 95, 103, 128, 136, 143, 145, 152, 157, 170, 177, 184, 191, 193, 195, 197, 198, 199, 200, 203, 207, 208, 209, 210, 211, 213, 214, 215, 216, 220, 238], "us": [0, 1, 2, 3, 4, 5, 10, 11, 17, 18, 22, 23, 29, 30, 34, 35, 39, 40, 44, 45, 51, 52, 57, 58, 59, 63, 64, 66, 71, 74, 78, 79, 81, 86, 87, 89, 92, 94, 95, 97, 102, 103, 107, 108, 109, 110, 114, 119, 122, 127, 128, 130, 135, 136, 142, 143, 145, 146, 151, 152, 156, 157, 161, 162, 163, 169, 170, 176, 177, 183, 184, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 227, 228, 230, 232, 233, 234, 235, 236, 237, 238, 240, 242, 243], "user": [0, 1, 2, 196, 204, 217, 219, 223, 235], "userbitgener": [212, 217, 219, 223, 235, 238], "usign": 1, "usual": [2, 219, 223], "util": [204, 223], "v": [230, 233], "v1": [221, 235], "v2": 235, "valid": [217, 219], "valu": [0, 1, 2, 3, 4, 5, 10, 11, 17, 18, 22, 23, 29, 30, 34, 35, 39, 40, 44, 45, 51, 52, 58, 59, 63, 64, 66, 71, 72, 74, 78, 81, 86, 87, 89, 94, 95, 97, 102, 103, 108, 109, 110, 114, 115, 119, 120, 122, 127, 128, 130, 135, 136, 142, 143, 145, 146, 151, 152, 156, 157, 161, 162, 163, 169, 170, 176, 177, 183, 184, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 232, 233, 237, 238, 239, 240, 243], "valueerror": [11, 18, 23, 30, 35, 40, 45, 52, 59, 64, 72, 87, 95, 103, 115, 120, 128, 136, 143, 152, 157, 170, 177, 184, 191, 219, 223], "var": 223, "vari": [0, 208, 228, 239], "variabl": [66, 74, 81, 89, 97, 146, 226, 227, 228], "varianc": [209, 226, 228], "variant": [2, 201, 202, 203, 205, 208, 209, 210, 217, 219, 222, 235, 238, 240, 243], "variat": [161, 162, 196, 201, 202, 217, 222, 223, 230, 233], "varieti": 235, "vector": [0, 1, 2, 3, 4, 193, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 211, 213, 214, 215, 216], "vendor": [217, 242], "veorq": 1, "veri": [122, 217, 240], "verifi": [57, 111], "verlag": 193, "version": [1, 57, 203, 210, 213, 217, 219, 235, 238, 242, 243], "view": [219, 239], "vigna": [213, 214, 215, 216], "virtual": 221, "void": [161, 162, 212, 218, 219, 223], "void_p": 219, "voidp": 212, "vol": [57, 198, 211], "w": [97, 100, 101, 146, 149, 150, 203, 206, 210, 240], "wa": [1, 193, 204, 217, 224, 235, 243], "wai": [201, 203, 223, 235, 239], "wait": [204, 237], "warm": 223, "warn": [221, 227, 228, 233, 237], "wast": 122, "wa\u015bniewski": 211, "we": [219, 228], "weaker": [203, 210], "weakli": 226, "week": 208, "welcom": 224, "well": [208, 237], "were": [217, 221, 235, 240, 243], "weyl": [122, 145, 206, 217, 235, 238, 240, 243], "weyl_inc": [206, 239], "weyl_incr": [206, 217, 239], "wheel": 217, "when": [0, 1, 2, 4, 11, 18, 23, 52, 69, 70, 72, 77, 84, 85, 93, 97, 103, 110, 122, 136, 141, 146, 152, 161, 162, 177, 193, 201, 203, 204, 205, 206, 208, 209, 210, 211, 212, 217, 219, 227, 228, 230, 233, 237, 238, 239, 243], "where": [0, 1, 2, 97, 145, 146, 195, 196, 197, 201, 202, 203, 204, 208, 210, 217, 219, 221, 226, 227, 228, 233, 239, 243], "whether": [97, 146, 196, 213, 230], "which": [0, 1, 2, 3, 4, 10, 11, 17, 18, 22, 23, 29, 34, 39, 44, 51, 52, 58, 63, 71, 78, 79, 86, 94, 97, 102, 103, 108, 114, 119, 127, 135, 142, 145, 146, 151, 152, 156, 163, 169, 176, 183, 190, 195, 196, 197, 198, 201, 202, 203, 204, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 223, 227, 228, 229, 230, 232, 237, 238, 239, 243], "while": [2, 197, 204, 212, 219, 223, 227, 228, 233, 239, 243], "wider": [235, 238], "width": [203, 210, 228], "widynski": [145, 209, 217], "wiki": [0, 1, 209, 226, 227], "wikipedia": [0, 1, 209, 226, 227], "wilei": 228, "window": [0, 2, 3, 4, 11, 18, 23, 30, 35, 40, 45, 59, 64, 87, 95, 103, 128, 136, 143, 145, 152, 157, 170, 177, 184, 191, 193, 195, 197, 198, 199, 200, 203, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 220], "winger": 208, "wire": 219, "wishart": [217, 230], "wit": 243, "within": [3, 198, 199, 207], "without": [0, 1, 2, 3, 4, 122, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 239], "word": [145, 209, 228], "work": 209, "worker": [3, 197, 198, 207, 213, 214, 215, 216], "worri": 243, "would": [145, 219, 227, 228], "wrap": [204, 212, 219, 223], "wraparound": 223, "wrapper": [6, 7, 14, 15, 20, 21, 25, 26, 32, 33, 37, 38, 42, 43, 47, 48, 54, 55, 61, 62, 67, 68, 75, 76, 82, 83, 90, 91, 98, 99, 105, 106, 112, 113, 117, 118, 123, 124, 131, 132, 139, 140, 147, 148, 154, 155, 165, 166, 172, 173, 179, 180, 186, 187, 194, 212, 217, 219], "writabl": 237, "write": [196, 204, 223, 235, 236], "written": [4, 161, 162, 212, 213, 215, 216, 217, 238], "wrong": 217, "wu": 193, "wuhj": 193, "www": [57, 193, 196, 200, 201, 202, 204, 205, 206], "wyrzykowski": 211, "x": [195, 208, 219, 221, 223, 227, 228], "x1": 223, "x2": 223, "x_1": 228, "x_2": 228, "x_i": 228, "x_j": 228, "x_n": 228, "xl": 219, "xor": [201, 211, 219, 235], "xoroshiro": [213, 215, 216, 235], "xoroshiro1024": 214, "xoroshiro120": 217, "xoroshiro128": [194, 214, 217, 223, 235, 238, 239], "xorshift": [197, 201, 202, 213, 214, 215, 216, 217, 235], "xorshift1024": [194, 213, 215, 216, 217, 235, 238, 239], "xorshift128": [213, 235], "xorshift256": 237, "xorshiro256": 235, "xorshiro512": 235, "xoshiro": 235, "xoshiro256": [194, 217, 235, 237, 238, 239, 240, 243], "xoshiro256starstar": 217, "xoshiro512": [194, 217, 235, 238, 239, 240, 243], "xoshiro512starstar": 217, "xsadd": [214, 235], "xsl": [196, 201, 203, 219], "y": [195, 227, 228], "york": [203, 210, 228], "you": [204, 221, 234, 236, 240], "your": 204, "yp": 2, "z": [196, 219, 227], "zero": [122, 219, 226, 227, 237, 239], "ziggurat": 223, "zimbri": 197, "zipf": 217, "\u00b2": 243, "\u00b3": 243, "\u00b5": [219, 237], "\u00b9": 243, "\u03c6": [194, 235], "\u2074": 243, "\u2075": 243}, "titles": ["AES Counter-based RNG", "BLAKE2b hash-based RNG", "ChaCha cipher-based RNG", "Double SIMD Mersenne Twister (dSFMT)", "Entropy From Iteration, Indirection, Xor (EFIIX)  Generator", "randomgen.aes.AESCounter.advance", "randomgen.aes.AESCounter.cffi", "randomgen.aes.AESCounter.ctypes", "randomgen.aes.AESCounter.jump", "randomgen.aes.AESCounter.jumped", "randomgen.aes.AESCounter.random_raw", "randomgen.aes.AESCounter.seed", "randomgen.aes.AESCounter.state", "randomgen.blabla.BlaBla.advance", "randomgen.blabla.BlaBla.cffi", "randomgen.blabla.BlaBla.ctypes", "randomgen.blabla.BlaBla.jumped", "randomgen.blabla.BlaBla.random_raw", "randomgen.blabla.BlaBla.seed", "randomgen.blabla.BlaBla.state", "randomgen.chacha.ChaCha.cffi", "randomgen.chacha.ChaCha.ctypes", "randomgen.chacha.ChaCha.random_raw", "randomgen.chacha.ChaCha.seed", "randomgen.chacha.ChaCha.state", "randomgen.dsfmt.DSFMT.cffi", "randomgen.dsfmt.DSFMT.ctypes", "randomgen.dsfmt.DSFMT.jump", "randomgen.dsfmt.DSFMT.jumped", "randomgen.dsfmt.DSFMT.random_raw", "randomgen.dsfmt.DSFMT.seed", "randomgen.dsfmt.DSFMT.state", "randomgen.efiix64.EFIIX64.cffi", "randomgen.efiix64.EFIIX64.ctypes", "randomgen.efiix64.EFIIX64.random_raw", "randomgen.efiix64.EFIIX64.seed", "randomgen.efiix64.EFIIX64.state", "randomgen.hc128.HC128.cffi", "randomgen.hc128.HC128.ctypes", "randomgen.hc128.HC128.random_raw", "randomgen.hc128.HC128.seed", "randomgen.hc128.HC128.state", "randomgen.jsf.JSF.cffi", "randomgen.jsf.JSF.ctypes", "randomgen.jsf.JSF.random_raw", "randomgen.jsf.JSF.seed", "randomgen.jsf.JSF.state", "randomgen.lxm.LXM.cffi", "randomgen.lxm.LXM.ctypes", "randomgen.lxm.LXM.jump", "randomgen.lxm.LXM.jumped", "randomgen.lxm.LXM.random_raw", "randomgen.lxm.LXM.seed", "randomgen.lxm.LXM.state", "randomgen.mt19937.MT19937.cffi", "randomgen.mt19937.MT19937.ctypes", "randomgen.mt19937.MT19937.jump", "randomgen.mt19937.MT19937.jumped", "randomgen.mt19937.MT19937.random_raw", "randomgen.mt19937.MT19937.seed", "randomgen.mt19937.MT19937.state", "randomgen.mt64.MT64.cffi", "randomgen.mt64.MT64.ctypes", "randomgen.mt64.MT64.random_raw", "randomgen.mt64.MT64.seed", "randomgen.mt64.MT64.state", "randomgen.pcg32.PCG32.advance", "randomgen.pcg32.PCG32.cffi", "randomgen.pcg32.PCG32.ctypes", "randomgen.pcg32.PCG32.jump", "randomgen.pcg32.PCG32.jumped", "randomgen.pcg32.PCG32.random_raw", "randomgen.pcg32.PCG32.seed", "randomgen.pcg32.PCG32.state", "randomgen.pcg64.LCG128Mix.advance", "randomgen.pcg64.LCG128Mix.cffi", "randomgen.pcg64.LCG128Mix.ctypes", "randomgen.pcg64.LCG128Mix.jumped", "randomgen.pcg64.LCG128Mix.random_raw", "randomgen.pcg64.LCG128Mix.seed", "randomgen.pcg64.LCG128Mix.state", "randomgen.pcg64.PCG64.advance", "randomgen.pcg64.PCG64.cffi", "randomgen.pcg64.PCG64.ctypes", "randomgen.pcg64.PCG64.jump", "randomgen.pcg64.PCG64.jumped", "randomgen.pcg64.PCG64.random_raw", "randomgen.pcg64.PCG64.seed", "randomgen.pcg64.PCG64.state", "randomgen.pcg64.PCG64DXSM.advance", "randomgen.pcg64.PCG64DXSM.cffi", "randomgen.pcg64.PCG64DXSM.ctypes", "randomgen.pcg64.PCG64DXSM.jump", "randomgen.pcg64.PCG64DXSM.jumped", "randomgen.pcg64.PCG64DXSM.random_raw", "randomgen.pcg64.PCG64DXSM.seed", "randomgen.pcg64.PCG64DXSM.state", "randomgen.philox.Philox.advance", "randomgen.philox.Philox.cffi", "randomgen.philox.Philox.ctypes", "randomgen.philox.Philox.jump", "randomgen.philox.Philox.jumped", "randomgen.philox.Philox.random_raw", "randomgen.philox.Philox.seed", "randomgen.philox.Philox.state", "randomgen.rdrand.RDRAND.cffi", "randomgen.rdrand.RDRAND.ctypes", "randomgen.rdrand.RDRAND.jumped", "randomgen.rdrand.RDRAND.random_raw", "randomgen.rdrand.RDRAND.seed", "randomgen.rdrand.RDRAND.state", "randomgen.rdrand.RDRAND.success", "randomgen.romu.Romu.cffi", "randomgen.romu.Romu.ctypes", "randomgen.romu.Romu.random_raw", "randomgen.romu.Romu.seed", "randomgen.romu.Romu.state", "randomgen.sfc.SFC64.cffi", "randomgen.sfc.SFC64.ctypes", "randomgen.sfc.SFC64.random_raw", "randomgen.sfc.SFC64.seed", "randomgen.sfc.SFC64.state", "randomgen.sfc.SFC64.weyl_increments", "randomgen.sfmt.SFMT.cffi", "randomgen.sfmt.SFMT.ctypes", "randomgen.sfmt.SFMT.jump", "randomgen.sfmt.SFMT.jumped", "randomgen.sfmt.SFMT.random_raw", "randomgen.sfmt.SFMT.seed", "randomgen.sfmt.SFMT.state", "randomgen.speck128.SPECK128.advance", "randomgen.speck128.SPECK128.cffi", "randomgen.speck128.SPECK128.ctypes", "randomgen.speck128.SPECK128.jump", "randomgen.speck128.SPECK128.jumped", "randomgen.speck128.SPECK128.random_raw", "randomgen.speck128.SPECK128.seed", "randomgen.speck128.SPECK128.state", "randomgen.squares.Squares.advance", "randomgen.squares.Squares.cffi", "randomgen.squares.Squares.ctypes", "randomgen.squares.Squares.jumped", "randomgen.squares.Squares.random_raw", "randomgen.squares.Squares.seed", "randomgen.squares.Squares.state", "randomgen.squares.generate_keys", "randomgen.threefry.ThreeFry.advance", "randomgen.threefry.ThreeFry.cffi", "randomgen.threefry.ThreeFry.ctypes", "randomgen.threefry.ThreeFry.jump", "randomgen.threefry.ThreeFry.jumped", "randomgen.threefry.ThreeFry.random_raw", "randomgen.threefry.ThreeFry.seed", "randomgen.threefry.ThreeFry.state", "randomgen.tyche.Tyche.cffi", "randomgen.tyche.Tyche.ctypes", "randomgen.tyche.Tyche.random_raw", "randomgen.tyche.Tyche.seed", "randomgen.tyche.Tyche.state", "randomgen.wrapper.UserBitGenerator.cffi", "randomgen.wrapper.UserBitGenerator.ctypes", "randomgen.wrapper.UserBitGenerator.from_cfunc", "randomgen.wrapper.UserBitGenerator.from_ctypes", "randomgen.wrapper.UserBitGenerator.random_raw", "randomgen.wrapper.UserBitGenerator.state", "randomgen.xoroshiro128.Xoroshiro128.cffi", "randomgen.xoroshiro128.Xoroshiro128.ctypes", "randomgen.xoroshiro128.Xoroshiro128.jump", "randomgen.xoroshiro128.Xoroshiro128.jumped", "randomgen.xoroshiro128.Xoroshiro128.random_raw", "randomgen.xoroshiro128.Xoroshiro128.seed", "randomgen.xoroshiro128.Xoroshiro128.state", "randomgen.xorshift1024.Xorshift1024.cffi", "randomgen.xorshift1024.Xorshift1024.ctypes", "randomgen.xorshift1024.Xorshift1024.jump", "randomgen.xorshift1024.Xorshift1024.jumped", "randomgen.xorshift1024.Xorshift1024.random_raw", "randomgen.xorshift1024.Xorshift1024.seed", "randomgen.xorshift1024.Xorshift1024.state", "randomgen.xoshiro256.Xoshiro256.cffi", "randomgen.xoshiro256.Xoshiro256.ctypes", "randomgen.xoshiro256.Xoshiro256.jump", "randomgen.xoshiro256.Xoshiro256.jumped", "randomgen.xoshiro256.Xoshiro256.random_raw", "randomgen.xoshiro256.Xoshiro256.seed", "randomgen.xoshiro256.Xoshiro256.state", "randomgen.xoshiro512.Xoshiro512.cffi", "randomgen.xoshiro512.Xoshiro512.ctypes", "randomgen.xoshiro512.Xoshiro512.jump", "randomgen.xoshiro512.Xoshiro512.jumped", "randomgen.xoshiro512.Xoshiro512.random_raw", "randomgen.xoshiro512.Xoshiro512.seed", "randomgen.xoshiro512.Xoshiro512.state", "HC-128 Cipher Generator", "Bit Generators", "Jenkins Small Fast Generator", "128-bit Linear Congruential Generator (LCG) with Output Mixing", "LXM Generator", "Mersenne Twister (MT19937)", "64-bit Mersenne Twister", "Permuted Congruential Generator (32-bit, PCG32)", "Permuted Congruential Generator (64-bit, PCG64)", "Permuted Congruential Generator 2.0 (64-bit Multiplier, DXSM Output)", "Philox Counter-based RNG", "Hardware-based Random Number Generator (RDRAND)", "Rotate-Multiply (Romu) Generators", "SFC64 Generator", "SIMD-oriented Fast Mersenne Twister (SFMT)", "SPECK Counter-based RNG", "Middle Square with Weyl increment (64-bit, Squares)", "ThreeFry Counter-based RNG", "Tyche PRNG", "User-defined Bit Generators", "Xoroshiro128+", "Xorshift1024*\u03c6", "Xoshiro256**", "Xoshiro512**", "Change Log", "Shared functionality", "Writing a BitGenerator", "System Entropy", "Evolution of randomgen", "Extended Generator", "Extending", "Future Plans", "randomgen.generator.ExtendedGenerator.bit_generator", "randomgen.generator.ExtendedGenerator.complex_normal", "randomgen.generator.ExtendedGenerator.multivariate_complex_normal", "randomgen.generator.ExtendedGenerator.multivariate_normal", "randomgen.generator.ExtendedGenerator.random", "randomgen.generator.ExtendedGenerator.standard_wishart", "randomgen.generator.ExtendedGenerator.state", "randomgen.generator.ExtendedGenerator.uintegers", "randomgen.generator.ExtendedGenerator.wishart", "Random Generator", "RandomGen", "Legacy Random Generation", "Multithreaded Generation", "What\u2019s New or Different", "Parallel Random Number Generation", "Performance", "References", "Seed Sequences", "Quality Assurance"], "titleterms": {"": [235, 238, 239], "0": [202, 217, 243], "1": [217, 221, 238], "128": [193, 196], "15": 217, "16": [217, 221], "17": [217, 238], "18": [217, 221], "19": [217, 221], "2": [202, 217], "20": 217, "23": [217, 221], "26": 217, "3": 217, "32": 200, "4": 217, "5": 217, "6": 217, "64": [199, 201, 202, 209], "addit": 243, "advanc": [5, 13, 66, 74, 81, 89, 97, 130, 138, 146, 239], "ae": [0, 5, 6, 7, 8, 9, 10, 11, 12], "aescount": [5, 6, 7, 8, 9, 10, 11, 12], "also": [145, 202, 209, 222, 226, 227, 230, 233], "assur": 243, "base": [0, 1, 2, 203, 204, 208, 210], "between": 221, "bit": [194, 196, 199, 200, 201, 202, 209, 212, 223, 235], "bit_gener": 225, "bitgener": [219, 223], "blabla": [13, 14, 15, 16, 17, 18, 19], "blake2b": 1, "cffi": [6, 14, 20, 25, 32, 37, 42, 47, 54, 61, 67, 75, 82, 90, 98, 105, 112, 117, 123, 131, 139, 147, 154, 159, 165, 172, 179, 186], "chacha": [2, 20, 21, 22, 23, 24], "chang": [217, 221, 235], "cipher": [2, 193], "complex_norm": 226, "configur": 243, "congruenti": [196, 200, 201, 202], "core": 243, "correl": 243, "counter": [0, 203, 208, 210], "cryptograph": 239, "ctype": [7, 15, 21, 26, 33, 38, 43, 48, 55, 62, 68, 76, 83, 91, 99, 106, 113, 118, 124, 132, 140, 148, 155, 160, 166, 173, 180, 187], "custom": 204, "cython": 223, "danger": [234, 235, 236], "defin": [194, 212], "differ": [235, 238], "distinct": 239, "distribut": 222, "doubl": 3, "dsfmt": [3, 25, 26, 27, 28, 29, 30, 31], "dxsm": 202, "efiix": 4, "efiix64": [32, 33, 34, 35, 36], "entropi": [4, 220], "evolut": 221, "exampl": 243, "experi": 243, "experiment": 194, "extend": [0, 1, 2, 3, 4, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 222, 223], "extendedgener": [225, 226, 227, 228, 229, 230, 231, 232, 233], "fast": [195, 207], "featur": 235, "from": [4, 212, 238], "from_cfunc": 161, "from_ctyp": 162, "function": 218, "futur": 224, "gener": [0, 1, 3, 4, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239], "generate_kei": 145, "hardwar": 204, "hash": 1, "hc": 193, "hc128": [37, 38, 39, 40, 41], "histori": 235, "increment": 209, "indic": 235, "indirect": 4, "introduct": 235, "iter": 4, "jenkin": 195, "jsf": [42, 43, 44, 45, 46], "jump": [8, 9, 16, 27, 28, 49, 50, 56, 57, 69, 70, 77, 84, 85, 92, 93, 100, 101, 107, 125, 126, 133, 134, 141, 149, 150, 167, 168, 174, 175, 181, 182, 188, 189, 239], "kei": [209, 239], "lcg": 196, "lcg128mix": [74, 75, 76, 77, 78, 79, 80], "legaci": 236, "level": 212, "linear": 196, "lock": 204, "log": 217, "low": 212, "lxm": [47, 48, 49, 50, 51, 52, 53, 197], "manipul": 222, "mersenn": [3, 198, 199, 207], "middl": 209, "mix": 196, "mt19937": [54, 55, 56, 57, 58, 59, 60, 198], "mt64": [61, 62, 63, 64, 65], "multipli": [202, 205], "multithread": 237, "multivariate_complex_norm": 227, "multivariate_norm": 228, "new": [223, 235, 238], "non": 239, "note": [240, 242, 243], "numba": [219, 223], "number": [204, 239], "numpi": 238, "object": 212, "orient": 207, "output": [196, 202], "parallel": [0, 1, 3, 196, 197, 198, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 216, 235, 239], "pcg32": [66, 67, 68, 69, 70, 71, 72, 73, 200], "pcg64": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 201], "pcg64dxsm": [89, 90, 91, 92, 93, 94, 95, 96], "perform": [219, 240], "permut": [200, 201, 202], "philox": [97, 98, 99, 100, 101, 102, 103, 104, 203], "plan": 224, "prng": [211, 239], "python": [219, 223], "qualiti": 243, "random": [204, 229, 234, 235, 236, 239], "random_raw": [10, 17, 22, 29, 34, 39, 44, 51, 58, 63, 71, 78, 86, 94, 102, 108, 114, 119, 127, 135, 142, 151, 156, 163, 169, 176, 183, 190], "randomgen": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235], "rdrand": [105, 106, 107, 108, 109, 110, 111, 204], "recommend": 240, "refer": 241, "remov": 235, "reproduc": 239, "rng": [0, 1, 2, 194, 203, 208, 210], "romu": [112, 113, 114, 115, 116, 205], "rotat": 205, "see": [145, 202, 209, 222, 226, 227, 230, 233], "seed": [0, 1, 2, 3, 4, 11, 18, 23, 30, 35, 40, 45, 52, 59, 64, 72, 79, 87, 95, 103, 109, 115, 120, 128, 136, 143, 152, 157, 170, 177, 184, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 222, 242, 243], "seedsequ": 239, "sequenc": [239, 242], "sequenti": 243, "sfc": [117, 118, 119, 120, 121, 122], "sfc64": [117, 118, 119, 120, 121, 122, 206], "sfmt": [123, 124, 125, 126, 127, 128, 129, 207], "share": 218, "simd": [3, 207], "small": 195, "speck": 208, "speck128": [130, 131, 132, 133, 134, 135, 136, 137], "squar": [138, 139, 140, 141, 142, 143, 144, 145, 209], "stabl": 194, "standard_wishart": 230, "state": [0, 1, 2, 3, 4, 12, 19, 24, 31, 36, 41, 46, 53, 60, 65, 73, 80, 88, 96, 104, 110, 116, 121, 129, 137, 144, 153, 158, 164, 171, 178, 185, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 222, 231, 239], "success": 111, "support": 235, "system": 220, "tabl": 235, "test": [0, 1, 2, 3, 4, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 243], "threefri": [146, 147, 148, 149, 150, 151, 152, 153, 210], "time": 240, "twister": [3, 198, 199, 207], "tych": [154, 155, 156, 157, 158, 211], "uinteg": 232, "us": [219, 239], "user": [194, 212], "userbitgener": [159, 160, 161, 162, 163, 164], "v1": 217, "v2": 217, "warn": 212, "weyl": [209, 239], "weyl_incr": 122, "what": [235, 238], "wishart": 233, "wrapper": [159, 160, 161, 162, 163, 164], "write": 219, "xor": 4, "xoroshiro128": [165, 166, 167, 168, 169, 170, 171, 213], "xorshift1024": [172, 173, 174, 175, 176, 177, 178, 214], "xoshiro256": [179, 180, 181, 182, 183, 184, 185, 215], "xoshiro512": [186, 187, 188, 189, 190, 191, 192, 216], "zero": 243, "\u03c6": 214}})