Search.setIndex({"alltitles": {"128-bit Linear Congruential Generator (LCG) with Output Mixing": [[178, null]], "64-bit Mersenne Twister": [[181, null]], "AES Counter-based RNG": [[0, null]], "Additional Experiments": [[225, "additional-experiments"]], "Advancing the PRNG\u2019s state": [[221, "advancing-the-prng-s-state"]], "Bit Generators": [[176, null], [217, "bit-generators"]], "ChaCha Cipher-based RNG": [[1, null]], "Change Log": [[197, null]], "Changes": [[217, "changes"]], "Changes between 1.16 and 1.18": [[200, "changes-between-1-16-and-1-18"]], "Changes in 1.19": [[200, "changes-in-1-19"]], "Changes in 1.23": [[200, "changes-in-1-23"]], "Core Testing": [[225, "core-testing"]], "Correlated Seeds": [[225, "correlated-seeds"]], "Custom Lock": [[186, "custom-lock"]], "Cython": [[202, "cython"]], "Danger": [[216, null], [217, null], [218, null]], "Differences from NumPy (1.17+)": [[220, "differences-from-numpy-1-17"]], "Differences from NumPy before 1.17": [[220, "differences-from-numpy-before-1-17"]], "Distinct Keys in Cryptographic Generators": [[221, "distinct-keys-in-cryptographic-generators"]], "Distributions": [[201, "distributions"]], "Double SIMD Mersenne Twister (dSFMT)": [[2, null]], "Entropy From Iteration, Indirection, Xor (EFIIX)  Generator": [[3, null]], "Evolution of randomgen": [[200, null]], "Example Configuration": [[225, "example-configuration"]], "Experimental RNGs": [[176, "experimental-rngs"]], "Extended Generator": [[201, null]], "Extending": [[0, "extending"], [1, "extending"], [2, "extending"], [3, "extending"], [175, "extending"], [177, "extending"], [178, "extending"], [179, "extending"], [180, "extending"], [181, "extending"], [182, "extending"], [183, "extending"], [184, "extending"], [185, "extending"], [186, "extending"], [187, "extending"], [188, "extending"], [189, "extending"], [190, "extending"], [191, "extending"], [192, "extending"], [193, "extending"], [194, "extending"], [195, "extending"], [196, "extending"], [202, null]], "From Low-level Objects": [[192, "from-low-level-objects"]], "Future Plans": [[203, null]], "HC-128 Cipher Generator": [[175, null]], "Hardware-based Random Number Generator (RDRAND)": [[186, null]], "History": [[217, "history"]], "Indices and tables": [[217, "indices-and-tables"]], "Introduction": [[217, "introduction"]], "Jenkins Small Fast Generator": [[177, null]], "Jumping the PRNG state": [[221, "jumping-the-prng-state"]], "LXM Generator": [[179, null]], "Legacy Random Generation": [[218, null]], "Mersenne Twister (MT19937)": [[180, null]], "Multithreaded Generation": [[219, null]], "New Bit Generators": [[202, "new-bit-generators"]], "New Features": [[217, "new-features"]], "Non-reproducible Sequences": [[221, "non-reproducible-sequences"]], "Note": [[222, null], [224, null]], "Notes": [[225, "notes"]], "Numba": [[202, "numba"]], "Parallel Generation": [[217, "parallel-generation"]], "Parallel Random Number Generation": [[221, null]], "Parallel generation": [[0, "parallel-generation"], [1, "parallel-generation"], [2, "parallel-generation"], [178, "parallel-generation"], [179, "parallel-generation"], [180, "parallel-generation"], [182, "parallel-generation"], [183, "parallel-generation"], [184, "parallel-generation"], [185, "parallel-generation"], [186, "parallel-generation"], [189, "parallel-generation"], [190, "parallel-generation"], [191, "parallel-generation"], [193, "parallel-generation"], [194, "parallel-generation"], [195, "parallel-generation"], [196, "parallel-generation"]], "Parallelization": [[188, "parallelization"]], "Performance": [[198, "Performance"], [198, "id1"], [222, null]], "Permuted Congruential Generator (32-bit, PCG32)": [[182, null]], "Permuted Congruential Generator (64-bit, PCG64)": [[183, null]], "Permuted Congruential Generator 2.0 (64-bit Multiplier, DXSM Output)": [[184, null]], "Philox Counter-based RNG": [[185, null]], "Python BitGenerators": [[202, "python-bitgenerators"]], "Quality Assurance": [[225, null]], "Random Generator": [[216, null], [217, "random-generator"]], "RandomGen": [[217, "randomgen"]], "Recommendation": [[222, "recommendation"]], "References": [[223, null]], "Removed Features": [[217, "removed-features"]], "Rotate-Multiply (Romu) Generators": [[187, null]], "SFC64 Generator": [[188, null]], "SIMD-oriented Fast Mersenne Twister (SFMT)": [[189, null]], "SPECK Counter-based RNG": [[190, null]], "See also": [[184, null], [201, null], [208, null], [209, null], [212, null], [215, null]], "Seed Sequences": [[224, null]], "Seed and State Manipulation": [[201, "seed-and-state-manipulation"]], "Seeding and State": [[0, "seeding-and-state"], [1, "seeding-and-state"], [2, "seeding-and-state"], [3, "seeding-and-state"], [175, "seeding-and-state"], [177, "seeding-and-state"], [178, "seeding-and-state"], [179, "seeding-and-state"], [180, "seeding-and-state"], [181, "seeding-and-state"], [182, "seeding-and-state"], [183, "seeding-and-state"], [184, "seeding-and-state"], [185, "seeding-and-state"], [186, "seeding-and-state"], [187, "seeding-and-state"], [188, "seeding-and-state"], [189, "seeding-and-state"], [190, "seeding-and-state"], [191, "seeding-and-state"], [193, "seeding-and-state"], [194, "seeding-and-state"], [195, "seeding-and-state"], [196, "seeding-and-state"]], "Sequential Seeds": [[225, "sequential-seeds"]], "Stable RNGs": [[176, "stable-rngs"]], "State": [[192, "state"], [224, "state"]], "Supported Generators": [[217, "supported-generators"]], "System Entropy": [[199, null]], "Testing": [[0, "testing"], [1, "testing"], [2, "testing"], [3, "testing"], [175, "testing"], [177, "testing"], [178, "testing"], [179, "testing"], [180, "testing"], [181, "testing"], [182, "testing"], [183, "testing"], [184, "testing"], [185, "testing"], [186, "testing"], [187, "testing"], [188, "testing"], [189, "testing"], [190, "testing"], [191, "testing"], [192, "testing"], [193, "testing"], [194, "testing"], [195, "testing"], [196, "testing"]], "ThreeFry Counter-based RNG": [[191, null]], "Timings": [[222, "timings"]], "User-defined Bit Generators": [[176, "user-defined-bit-generators"], [192, null]], "Using Python": [[198, "Using-Python"]], "Using a SeedSequence": [[221, "using-a-seedsequence"], [224, "using-a-seedsequence"]], "Using numba": [[198, "Using-numba"]], "Weyl Sequences": [[221, "weyl-sequences"]], "What\u2019s New or Different": [[217, "what-s-new-or-different"], [220, null]], "Writing a BitGenerator": [[198, null]], "Xoroshiro128+": [[193, null]], "Xorshift1024*\u03c6": [[194, null]], "Xoshiro256**": [[195, null]], "Xoshiro512**": [[196, null]], "Zero (0) Seeding": [[225, "zero-0-seeding"]], "randomgen._seed_sequence.SeedSequence.generate_state": [[204, null]], "randomgen._seed_sequence.SeedSequence.spawn": [[205, null]], "randomgen._seed_sequence.SeedSequence.state": [[206, null]], "randomgen.aes.AESCounter.advance": [[4, null]], "randomgen.aes.AESCounter.cffi": [[5, null]], "randomgen.aes.AESCounter.ctypes": [[6, null]], "randomgen.aes.AESCounter.jump": [[7, null]], "randomgen.aes.AESCounter.jumped": [[8, null]], "randomgen.aes.AESCounter.random_raw": [[9, null]], "randomgen.aes.AESCounter.seed": [[10, null]], "randomgen.aes.AESCounter.state": [[11, null]], "randomgen.chacha.ChaCha.advance": [[12, null]], "randomgen.chacha.ChaCha.cffi": [[13, null]], "randomgen.chacha.ChaCha.ctypes": [[14, null]], "randomgen.chacha.ChaCha.jump": [[15, null]], "randomgen.chacha.ChaCha.jumped": [[16, null]], "randomgen.chacha.ChaCha.random_raw": [[17, null]], "randomgen.chacha.ChaCha.seed": [[18, null]], "randomgen.chacha.ChaCha.state": [[19, null]], "randomgen.dsfmt.DSFMT.cffi": [[20, null]], "randomgen.dsfmt.DSFMT.ctypes": [[21, null]], "randomgen.dsfmt.DSFMT.jump": [[22, null]], "randomgen.dsfmt.DSFMT.jumped": [[23, null]], "randomgen.dsfmt.DSFMT.random_raw": [[24, null]], "randomgen.dsfmt.DSFMT.seed": [[25, null]], "randomgen.dsfmt.DSFMT.state": [[26, null]], "randomgen.efiix64.EFIIX64.cffi": [[27, null]], "randomgen.efiix64.EFIIX64.ctypes": [[28, null]], "randomgen.efiix64.EFIIX64.random_raw": [[29, null]], "randomgen.efiix64.EFIIX64.seed": [[30, null]], "randomgen.efiix64.EFIIX64.state": [[31, null]], "randomgen.generator.ExtendedGenerator.bit_generator": [[207, null]], "randomgen.generator.ExtendedGenerator.complex_normal": [[208, null]], "randomgen.generator.ExtendedGenerator.multivariate_complex_normal": [[209, null]], "randomgen.generator.ExtendedGenerator.multivariate_normal": [[210, null]], "randomgen.generator.ExtendedGenerator.random": [[211, null]], "randomgen.generator.ExtendedGenerator.standard_wishart": [[212, null]], "randomgen.generator.ExtendedGenerator.state": [[213, null]], "randomgen.generator.ExtendedGenerator.uintegers": [[214, null]], "randomgen.generator.ExtendedGenerator.wishart": [[215, null]], "randomgen.hc128.HC128.cffi": [[32, null]], "randomgen.hc128.HC128.ctypes": [[33, null]], "randomgen.hc128.HC128.random_raw": [[34, null]], "randomgen.hc128.HC128.seed": [[35, null]], "randomgen.hc128.HC128.state": [[36, null]], "randomgen.jsf.JSF.cffi": [[37, null]], "randomgen.jsf.JSF.ctypes": [[38, null]], "randomgen.jsf.JSF.random_raw": [[39, null]], "randomgen.jsf.JSF.seed": [[40, null]], "randomgen.jsf.JSF.state": [[41, null]], "randomgen.lxm.LXM.cffi": [[42, null]], "randomgen.lxm.LXM.ctypes": [[43, null]], "randomgen.lxm.LXM.jump": [[44, null]], "randomgen.lxm.LXM.jumped": [[45, null]], "randomgen.lxm.LXM.random_raw": [[46, null]], "randomgen.lxm.LXM.seed": [[47, null]], "randomgen.lxm.LXM.state": [[48, null]], "randomgen.mt19937.MT19937.cffi": [[49, null]], "randomgen.mt19937.MT19937.ctypes": [[50, null]], "randomgen.mt19937.MT19937.jump": [[51, null]], "randomgen.mt19937.MT19937.jumped": [[52, null]], "randomgen.mt19937.MT19937.random_raw": [[53, null]], "randomgen.mt19937.MT19937.seed": [[54, null]], "randomgen.mt19937.MT19937.state": [[55, null]], "randomgen.mt64.MT64.cffi": [[56, null]], "randomgen.mt64.MT64.ctypes": [[57, null]], "randomgen.mt64.MT64.random_raw": [[58, null]], "randomgen.mt64.MT64.seed": [[59, null]], "randomgen.mt64.MT64.state": [[60, null]], "randomgen.pcg32.PCG32.advance": [[61, null]], "randomgen.pcg32.PCG32.cffi": [[62, null]], "randomgen.pcg32.PCG32.ctypes": [[63, null]], "randomgen.pcg32.PCG32.jump": [[64, null]], "randomgen.pcg32.PCG32.jumped": [[65, null]], "randomgen.pcg32.PCG32.random_raw": [[66, null]], "randomgen.pcg32.PCG32.seed": [[67, null]], "randomgen.pcg32.PCG32.state": [[68, null]], "randomgen.pcg64.LCG128Mix.advance": [[69, null]], "randomgen.pcg64.LCG128Mix.cffi": [[70, null]], "randomgen.pcg64.LCG128Mix.ctypes": [[71, null]], "randomgen.pcg64.LCG128Mix.jumped": [[72, null]], "randomgen.pcg64.LCG128Mix.random_raw": [[73, null]], "randomgen.pcg64.LCG128Mix.seed": [[74, null]], "randomgen.pcg64.LCG128Mix.state": [[75, null]], "randomgen.pcg64.PCG64.advance": [[76, null]], "randomgen.pcg64.PCG64.cffi": [[77, null]], "randomgen.pcg64.PCG64.ctypes": [[78, null]], "randomgen.pcg64.PCG64.jump": [[79, null]], "randomgen.pcg64.PCG64.jumped": [[80, null]], "randomgen.pcg64.PCG64.random_raw": [[81, null]], "randomgen.pcg64.PCG64.seed": [[82, null]], "randomgen.pcg64.PCG64.state": [[83, null]], "randomgen.pcg64.PCG64DXSM.advance": [[84, null]], "randomgen.pcg64.PCG64DXSM.cffi": [[85, null]], "randomgen.pcg64.PCG64DXSM.ctypes": [[86, null]], "randomgen.pcg64.PCG64DXSM.jump": [[87, null]], "randomgen.pcg64.PCG64DXSM.jumped": [[88, null]], "randomgen.pcg64.PCG64DXSM.random_raw": [[89, null]], "randomgen.pcg64.PCG64DXSM.seed": [[90, null]], "randomgen.pcg64.PCG64DXSM.state": [[91, null]], "randomgen.philox.Philox.advance": [[92, null]], "randomgen.philox.Philox.cffi": [[93, null]], "randomgen.philox.Philox.ctypes": [[94, null]], "randomgen.philox.Philox.jump": [[95, null]], "randomgen.philox.Philox.jumped": [[96, null]], "randomgen.philox.Philox.random_raw": [[97, null]], "randomgen.philox.Philox.seed": [[98, null]], "randomgen.philox.Philox.state": [[99, null]], "randomgen.rdrand.RDRAND.cffi": [[100, null]], "randomgen.rdrand.RDRAND.ctypes": [[101, null]], "randomgen.rdrand.RDRAND.jumped": [[102, null]], "randomgen.rdrand.RDRAND.random_raw": [[103, null]], "randomgen.rdrand.RDRAND.seed": [[104, null]], "randomgen.rdrand.RDRAND.state": [[105, null]], "randomgen.rdrand.RDRAND.success": [[106, null]], "randomgen.romu.Romu.cffi": [[107, null]], "randomgen.romu.Romu.ctypes": [[108, null]], "randomgen.romu.Romu.random_raw": [[109, null]], "randomgen.romu.Romu.seed": [[110, null]], "randomgen.romu.Romu.state": [[111, null]], "randomgen.sfc.SFC64.cffi": [[112, null]], "randomgen.sfc.SFC64.ctypes": [[113, null]], "randomgen.sfc.SFC64.random_raw": [[114, null]], "randomgen.sfc.SFC64.seed": [[115, null]], "randomgen.sfc.SFC64.state": [[116, null]], "randomgen.sfc.SFC64.weyl_increments": [[117, null]], "randomgen.sfmt.SFMT.cffi": [[118, null]], "randomgen.sfmt.SFMT.ctypes": [[119, null]], "randomgen.sfmt.SFMT.jump": [[120, null]], "randomgen.sfmt.SFMT.jumped": [[121, null]], "randomgen.sfmt.SFMT.random_raw": [[122, null]], "randomgen.sfmt.SFMT.seed": [[123, null]], "randomgen.sfmt.SFMT.state": [[124, null]], "randomgen.speck128.SPECK128.advance": [[125, null]], "randomgen.speck128.SPECK128.cffi": [[126, null]], "randomgen.speck128.SPECK128.ctypes": [[127, null]], "randomgen.speck128.SPECK128.jump": [[128, null]], "randomgen.speck128.SPECK128.jumped": [[129, null]], "randomgen.speck128.SPECK128.random_raw": [[130, null]], "randomgen.speck128.SPECK128.seed": [[131, null]], "randomgen.speck128.SPECK128.state": [[132, null]], "randomgen.threefry.ThreeFry.advance": [[133, null]], "randomgen.threefry.ThreeFry.cffi": [[134, null]], "randomgen.threefry.ThreeFry.ctypes": [[135, null]], "randomgen.threefry.ThreeFry.jump": [[136, null]], "randomgen.threefry.ThreeFry.jumped": [[137, null]], "randomgen.threefry.ThreeFry.random_raw": [[138, null]], "randomgen.threefry.ThreeFry.seed": [[139, null]], "randomgen.threefry.ThreeFry.state": [[140, null]], "randomgen.wrapper.UserBitGenerator.cffi": [[141, null]], "randomgen.wrapper.UserBitGenerator.ctypes": [[142, null]], "randomgen.wrapper.UserBitGenerator.from_cfunc": [[143, null]], "randomgen.wrapper.UserBitGenerator.from_ctypes": [[144, null]], "randomgen.wrapper.UserBitGenerator.random_raw": [[145, null]], "randomgen.wrapper.UserBitGenerator.state": [[146, null]], "randomgen.xoroshiro128.Xoroshiro128.cffi": [[147, null]], "randomgen.xoroshiro128.Xoroshiro128.ctypes": [[148, null]], "randomgen.xoroshiro128.Xoroshiro128.jump": [[149, null]], "randomgen.xoroshiro128.Xoroshiro128.jumped": [[150, null]], "randomgen.xoroshiro128.Xoroshiro128.random_raw": [[151, null]], "randomgen.xoroshiro128.Xoroshiro128.seed": [[152, null]], "randomgen.xoroshiro128.Xoroshiro128.state": [[153, null]], "randomgen.xorshift1024.Xorshift1024.cffi": [[154, null]], "randomgen.xorshift1024.Xorshift1024.ctypes": [[155, null]], "randomgen.xorshift1024.Xorshift1024.jump": [[156, null]], "randomgen.xorshift1024.Xorshift1024.jumped": [[157, null]], "randomgen.xorshift1024.Xorshift1024.random_raw": [[158, null]], "randomgen.xorshift1024.Xorshift1024.seed": [[159, null]], "randomgen.xorshift1024.Xorshift1024.state": [[160, null]], "randomgen.xoshiro256.Xoshiro256.cffi": [[161, null]], "randomgen.xoshiro256.Xoshiro256.ctypes": [[162, null]], "randomgen.xoshiro256.Xoshiro256.jump": [[163, null]], "randomgen.xoshiro256.Xoshiro256.jumped": [[164, null]], "randomgen.xoshiro256.Xoshiro256.random_raw": [[165, null]], "randomgen.xoshiro256.Xoshiro256.seed": [[166, null]], "randomgen.xoshiro256.Xoshiro256.state": [[167, null]], "randomgen.xoshiro512.Xoshiro512.cffi": [[168, null]], "randomgen.xoshiro512.Xoshiro512.ctypes": [[169, null]], "randomgen.xoshiro512.Xoshiro512.jump": [[170, null]], "randomgen.xoshiro512.Xoshiro512.jumped": [[171, null]], "randomgen.xoshiro512.Xoshiro512.random_raw": [[172, null]], "randomgen.xoshiro512.Xoshiro512.seed": [[173, null]], "randomgen.xoshiro512.Xoshiro512.state": [[174, null]], "v1.15": [[197, "v1-15"]], "v1.15.1": [[197, "v1-15-1"]], "v1.16.0": [[197, "v1-16-0"]], "v1.16.1": [[197, "v1-16-1"]], "v1.16.2": [[197, "v1-16-2"]], "v1.16.3": [[197, "v1-16-3"]], "v1.16.4": [[197, "v1-16-4"]], "v1.16.5": [[197, "v1-16-5"]], "v1.16.6": [[197, "v1-16-6"]], "v1.17.0": [[197, "v1-17-0"]], "v1.18.0": [[197, "v1-18-0"]], "v1.19.0": [[197, "v1-19-0"]], "v1.19.1": [[197, "v1-19-1"]], "v1.19.2": [[197, "v1-19-2"]], "v1.19.3": [[197, "v1-19-3"]], "v1.20.0": [[197, "v1-20-0"]], "v1.20.1": [[197, "v1-20-1"]], "v1.20.2": [[197, "v1-20-2"]], "v1.23.0": [[197, "v1-23-0"]], "v1.23.1": [[197, "v1-23-1"]], "v1.26.0": [[197, "v1-26-0"]], "v1.26.1": [[197, "v1-26-1"]]}, "docurls": ["bit_generators/aesctr.html", "bit_generators/chacha.html", "bit_generators/dsfmt.html", "bit_generators/efiix64.html", "bit_generators/generated/randomgen.aes.AESCounter.advance.html", "bit_generators/generated/randomgen.aes.AESCounter.cffi.html", "bit_generators/generated/randomgen.aes.AESCounter.ctypes.html", "bit_generators/generated/randomgen.aes.AESCounter.jump.html", "bit_generators/generated/randomgen.aes.AESCounter.jumped.html", "bit_generators/generated/randomgen.aes.AESCounter.random_raw.html", "bit_generators/generated/randomgen.aes.AESCounter.seed.html", "bit_generators/generated/randomgen.aes.AESCounter.state.html", "bit_generators/generated/randomgen.chacha.ChaCha.advance.html", "bit_generators/generated/randomgen.chacha.ChaCha.cffi.html", "bit_generators/generated/randomgen.chacha.ChaCha.ctypes.html", "bit_generators/generated/randomgen.chacha.ChaCha.jump.html", "bit_generators/generated/randomgen.chacha.ChaCha.jumped.html", "bit_generators/generated/randomgen.chacha.ChaCha.random_raw.html", "bit_generators/generated/randomgen.chacha.ChaCha.seed.html", "bit_generators/generated/randomgen.chacha.ChaCha.state.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.cffi.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.ctypes.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.jump.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.jumped.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.random_raw.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.seed.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.state.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.cffi.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.ctypes.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.random_raw.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.seed.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.state.html", "bit_generators/generated/randomgen.hc128.HC128.cffi.html", "bit_generators/generated/randomgen.hc128.HC128.ctypes.html", "bit_generators/generated/randomgen.hc128.HC128.random_raw.html", "bit_generators/generated/randomgen.hc128.HC128.seed.html", "bit_generators/generated/randomgen.hc128.HC128.state.html", "bit_generators/generated/randomgen.jsf.JSF.cffi.html", "bit_generators/generated/randomgen.jsf.JSF.ctypes.html", "bit_generators/generated/randomgen.jsf.JSF.random_raw.html", "bit_generators/generated/randomgen.jsf.JSF.seed.html", "bit_generators/generated/randomgen.jsf.JSF.state.html", "bit_generators/generated/randomgen.lxm.LXM.cffi.html", "bit_generators/generated/randomgen.lxm.LXM.ctypes.html", "bit_generators/generated/randomgen.lxm.LXM.jump.html", "bit_generators/generated/randomgen.lxm.LXM.jumped.html", "bit_generators/generated/randomgen.lxm.LXM.random_raw.html", "bit_generators/generated/randomgen.lxm.LXM.seed.html", "bit_generators/generated/randomgen.lxm.LXM.state.html", "bit_generators/generated/randomgen.mt19937.MT19937.cffi.html", "bit_generators/generated/randomgen.mt19937.MT19937.ctypes.html", "bit_generators/generated/randomgen.mt19937.MT19937.jump.html", "bit_generators/generated/randomgen.mt19937.MT19937.jumped.html", "bit_generators/generated/randomgen.mt19937.MT19937.random_raw.html", "bit_generators/generated/randomgen.mt19937.MT19937.seed.html", "bit_generators/generated/randomgen.mt19937.MT19937.state.html", "bit_generators/generated/randomgen.mt64.MT64.cffi.html", "bit_generators/generated/randomgen.mt64.MT64.ctypes.html", "bit_generators/generated/randomgen.mt64.MT64.random_raw.html", "bit_generators/generated/randomgen.mt64.MT64.seed.html", "bit_generators/generated/randomgen.mt64.MT64.state.html", "bit_generators/generated/randomgen.pcg32.PCG32.advance.html", "bit_generators/generated/randomgen.pcg32.PCG32.cffi.html", "bit_generators/generated/randomgen.pcg32.PCG32.ctypes.html", "bit_generators/generated/randomgen.pcg32.PCG32.jump.html", "bit_generators/generated/randomgen.pcg32.PCG32.jumped.html", "bit_generators/generated/randomgen.pcg32.PCG32.random_raw.html", "bit_generators/generated/randomgen.pcg32.PCG32.seed.html", "bit_generators/generated/randomgen.pcg32.PCG32.state.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.advance.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.cffi.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.ctypes.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.jumped.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.random_raw.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.seed.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.state.html", "bit_generators/generated/randomgen.pcg64.PCG64.advance.html", "bit_generators/generated/randomgen.pcg64.PCG64.cffi.html", "bit_generators/generated/randomgen.pcg64.PCG64.ctypes.html", "bit_generators/generated/randomgen.pcg64.PCG64.jump.html", "bit_generators/generated/randomgen.pcg64.PCG64.jumped.html", "bit_generators/generated/randomgen.pcg64.PCG64.random_raw.html", "bit_generators/generated/randomgen.pcg64.PCG64.seed.html", "bit_generators/generated/randomgen.pcg64.PCG64.state.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.advance.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.cffi.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.ctypes.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.jump.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.jumped.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.random_raw.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.seed.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.state.html", "bit_generators/generated/randomgen.philox.Philox.advance.html", "bit_generators/generated/randomgen.philox.Philox.cffi.html", "bit_generators/generated/randomgen.philox.Philox.ctypes.html", "bit_generators/generated/randomgen.philox.Philox.jump.html", "bit_generators/generated/randomgen.philox.Philox.jumped.html", "bit_generators/generated/randomgen.philox.Philox.random_raw.html", "bit_generators/generated/randomgen.philox.Philox.seed.html", "bit_generators/generated/randomgen.philox.Philox.state.html", "bit_generators/generated/randomgen.rdrand.RDRAND.cffi.html", "bit_generators/generated/randomgen.rdrand.RDRAND.ctypes.html", "bit_generators/generated/randomgen.rdrand.RDRAND.jumped.html", "bit_generators/generated/randomgen.rdrand.RDRAND.random_raw.html", "bit_generators/generated/randomgen.rdrand.RDRAND.seed.html", "bit_generators/generated/randomgen.rdrand.RDRAND.state.html", "bit_generators/generated/randomgen.rdrand.RDRAND.success.html", "bit_generators/generated/randomgen.romu.Romu.cffi.html", "bit_generators/generated/randomgen.romu.Romu.ctypes.html", "bit_generators/generated/randomgen.romu.Romu.random_raw.html", "bit_generators/generated/randomgen.romu.Romu.seed.html", "bit_generators/generated/randomgen.romu.Romu.state.html", "bit_generators/generated/randomgen.sfc.SFC64.cffi.html", "bit_generators/generated/randomgen.sfc.SFC64.ctypes.html", "bit_generators/generated/randomgen.sfc.SFC64.random_raw.html", "bit_generators/generated/randomgen.sfc.SFC64.seed.html", "bit_generators/generated/randomgen.sfc.SFC64.state.html", "bit_generators/generated/randomgen.sfc.SFC64.weyl_increments.html", "bit_generators/generated/randomgen.sfmt.SFMT.cffi.html", "bit_generators/generated/randomgen.sfmt.SFMT.ctypes.html", "bit_generators/generated/randomgen.sfmt.SFMT.jump.html", "bit_generators/generated/randomgen.sfmt.SFMT.jumped.html", "bit_generators/generated/randomgen.sfmt.SFMT.random_raw.html", "bit_generators/generated/randomgen.sfmt.SFMT.seed.html", "bit_generators/generated/randomgen.sfmt.SFMT.state.html", "bit_generators/generated/randomgen.speck128.SPECK128.advance.html", "bit_generators/generated/randomgen.speck128.SPECK128.cffi.html", "bit_generators/generated/randomgen.speck128.SPECK128.ctypes.html", "bit_generators/generated/randomgen.speck128.SPECK128.jump.html", "bit_generators/generated/randomgen.speck128.SPECK128.jumped.html", "bit_generators/generated/randomgen.speck128.SPECK128.random_raw.html", "bit_generators/generated/randomgen.speck128.SPECK128.seed.html", "bit_generators/generated/randomgen.speck128.SPECK128.state.html", "bit_generators/generated/randomgen.threefry.ThreeFry.advance.html", "bit_generators/generated/randomgen.threefry.ThreeFry.cffi.html", "bit_generators/generated/randomgen.threefry.ThreeFry.ctypes.html", "bit_generators/generated/randomgen.threefry.ThreeFry.jump.html", "bit_generators/generated/randomgen.threefry.ThreeFry.jumped.html", "bit_generators/generated/randomgen.threefry.ThreeFry.random_raw.html", "bit_generators/generated/randomgen.threefry.ThreeFry.seed.html", "bit_generators/generated/randomgen.threefry.ThreeFry.state.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.cffi.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.ctypes.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.from_cfunc.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.from_ctypes.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.random_raw.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.state.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.cffi.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.ctypes.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.jump.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.jumped.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.random_raw.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.seed.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.state.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.cffi.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.ctypes.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.jump.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.jumped.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.random_raw.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.seed.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.state.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.cffi.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.ctypes.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.jump.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.jumped.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.random_raw.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.seed.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.state.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.cffi.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.ctypes.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.jump.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.jumped.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.random_raw.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.seed.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.state.html", "bit_generators/hc128.html", "bit_generators/index.html", "bit_generators/jsf.html", "bit_generators/lcg128mix.html", "bit_generators/lxm.html", "bit_generators/mt19937.html", "bit_generators/mt64.html", "bit_generators/pcg32.html", "bit_generators/pcg64.html", "bit_generators/pcg64dxsm.html", "bit_generators/philox.html", "bit_generators/rdrand.html", "bit_generators/romu.html", "bit_generators/sfc.html", "bit_generators/sfmt.html", "bit_generators/speck128.html", "bit_generators/threefry.html", "bit_generators/userbitgenerator.html", "bit_generators/xoroshiro128.html", "bit_generators/xorshift1024.html", "bit_generators/xoshiro256.html", "bit_generators/xoshiro512.html", "change-log.html", "custom-bit-generators.html", "entropy.html", "evolution.html", "extended-generator.html", "extending.html", "future.html", "generated/randomgen._seed_sequence.SeedSequence.generate_state.html", "generated/randomgen._seed_sequence.SeedSequence.spawn.html", "generated/randomgen._seed_sequence.SeedSequence.state.html", "generated/randomgen.generator.ExtendedGenerator.bit_generator.html", "generated/randomgen.generator.ExtendedGenerator.complex_normal.html", "generated/randomgen.generator.ExtendedGenerator.multivariate_complex_normal.html", "generated/randomgen.generator.ExtendedGenerator.multivariate_normal.html", "generated/randomgen.generator.ExtendedGenerator.random.html", "generated/randomgen.generator.ExtendedGenerator.standard_wishart.html", "generated/randomgen.generator.ExtendedGenerator.state.html", "generated/randomgen.generator.ExtendedGenerator.uintegers.html", "generated/randomgen.generator.ExtendedGenerator.wishart.html", "generator.html", "index.html", "legacy.html", "multithreading.html", "new-or-different.html", "parallel.html", "performance.html", "references.html", "seed_sequence.html", "testing.html"], "envversion": {"nbsphinx": 4, "sphinx": 63, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1}, "indexentries": {"advance() (randomgen.aes.aescounter method)": [[4, "randomgen.aes.AESCounter.advance", false]], "advance() (randomgen.chacha.chacha method)": [[12, "randomgen.chacha.ChaCha.advance", false]], "advance() (randomgen.pcg32.pcg32 method)": [[61, "randomgen.pcg32.PCG32.advance", false]], "advance() (randomgen.pcg64.lcg128mix method)": [[69, "randomgen.pcg64.LCG128Mix.advance", false]], "advance() (randomgen.pcg64.pcg64 method)": [[76, "randomgen.pcg64.PCG64.advance", false]], "advance() (randomgen.pcg64.pcg64dxsm method)": [[84, "randomgen.pcg64.PCG64DXSM.advance", false]], "advance() (randomgen.philox.philox method)": [[92, "randomgen.philox.Philox.advance", false]], "advance() (randomgen.speck128.speck128 method)": [[125, "randomgen.speck128.SPECK128.advance", false]], "advance() (randomgen.threefry.threefry method)": [[133, "randomgen.threefry.ThreeFry.advance", false]], "aescounter (class in randomgen.aes)": [[0, "randomgen.aes.AESCounter", false]], "bit_generator (randomgen.generator.extendedgenerator attribute)": [[207, "randomgen.generator.ExtendedGenerator.bit_generator", false]], "cffi (randomgen.aes.aescounter attribute)": [[5, "randomgen.aes.AESCounter.cffi", false]], "cffi (randomgen.chacha.chacha attribute)": [[13, "randomgen.chacha.ChaCha.cffi", false]], "cffi (randomgen.dsfmt.dsfmt attribute)": [[20, "randomgen.dsfmt.DSFMT.cffi", false]], "cffi (randomgen.efiix64.efiix64 attribute)": [[27, "randomgen.efiix64.EFIIX64.cffi", false]], "cffi (randomgen.hc128.hc128 attribute)": [[32, "randomgen.hc128.HC128.cffi", false]], "cffi (randomgen.jsf.jsf attribute)": [[37, "randomgen.jsf.JSF.cffi", false]], "cffi (randomgen.lxm.lxm attribute)": [[42, "randomgen.lxm.LXM.cffi", false]], "cffi (randomgen.mt19937.mt19937 attribute)": [[49, "randomgen.mt19937.MT19937.cffi", false]], "cffi (randomgen.mt64.mt64 attribute)": [[56, "randomgen.mt64.MT64.cffi", false]], "cffi (randomgen.pcg32.pcg32 attribute)": [[62, "randomgen.pcg32.PCG32.cffi", false]], "cffi (randomgen.pcg64.lcg128mix attribute)": [[70, "randomgen.pcg64.LCG128Mix.cffi", false]], "cffi (randomgen.pcg64.pcg64 attribute)": [[77, "randomgen.pcg64.PCG64.cffi", false]], "cffi (randomgen.pcg64.pcg64dxsm attribute)": [[85, "randomgen.pcg64.PCG64DXSM.cffi", false]], "cffi (randomgen.philox.philox attribute)": [[93, "randomgen.philox.Philox.cffi", false]], "cffi (randomgen.rdrand.rdrand attribute)": [[100, "randomgen.rdrand.RDRAND.cffi", false]], "cffi (randomgen.romu.romu attribute)": [[107, "randomgen.romu.Romu.cffi", false]], "cffi (randomgen.sfc.sfc64 attribute)": [[112, "randomgen.sfc.SFC64.cffi", false]], "cffi (randomgen.sfmt.sfmt attribute)": [[118, "randomgen.sfmt.SFMT.cffi", false]], "cffi (randomgen.speck128.speck128 attribute)": [[126, "randomgen.speck128.SPECK128.cffi", false]], "cffi (randomgen.threefry.threefry attribute)": [[134, "randomgen.threefry.ThreeFry.cffi", false]], "cffi (randomgen.wrapper.userbitgenerator attribute)": [[141, "randomgen.wrapper.UserBitGenerator.cffi", false]], "cffi (randomgen.xoroshiro128.xoroshiro128 attribute)": [[147, "randomgen.xoroshiro128.Xoroshiro128.cffi", false]], "cffi (randomgen.xorshift1024.xorshift1024 attribute)": [[154, "randomgen.xorshift1024.Xorshift1024.cffi", false]], "cffi (randomgen.xoshiro256.xoshiro256 attribute)": [[161, "randomgen.xoshiro256.Xoshiro256.cffi", false]], "cffi (randomgen.xoshiro512.xoshiro512 attribute)": [[168, "randomgen.xoshiro512.Xoshiro512.cffi", false]], "chacha (class in randomgen.chacha)": [[1, "randomgen.chacha.ChaCha", false]], "complex_normal() (randomgen.generator.extendedgenerator method)": [[208, "randomgen.generator.ExtendedGenerator.complex_normal", false]], "ctypes (randomgen.aes.aescounter attribute)": [[6, "randomgen.aes.AESCounter.ctypes", false]], "ctypes (randomgen.chacha.chacha attribute)": [[14, "randomgen.chacha.ChaCha.ctypes", false]], "ctypes (randomgen.dsfmt.dsfmt attribute)": [[21, "randomgen.dsfmt.DSFMT.ctypes", false]], "ctypes (randomgen.efiix64.efiix64 attribute)": [[28, "randomgen.efiix64.EFIIX64.ctypes", false]], "ctypes (randomgen.hc128.hc128 attribute)": [[33, "randomgen.hc128.HC128.ctypes", false]], "ctypes (randomgen.jsf.jsf attribute)": [[38, "randomgen.jsf.JSF.ctypes", false]], "ctypes (randomgen.lxm.lxm attribute)": [[43, "randomgen.lxm.LXM.ctypes", false]], "ctypes (randomgen.mt19937.mt19937 attribute)": [[50, "randomgen.mt19937.MT19937.ctypes", false]], "ctypes (randomgen.mt64.mt64 attribute)": [[57, "randomgen.mt64.MT64.ctypes", false]], "ctypes (randomgen.pcg32.pcg32 attribute)": [[63, "randomgen.pcg32.PCG32.ctypes", false]], "ctypes (randomgen.pcg64.lcg128mix attribute)": [[71, "randomgen.pcg64.LCG128Mix.ctypes", false]], "ctypes (randomgen.pcg64.pcg64 attribute)": [[78, "randomgen.pcg64.PCG64.ctypes", false]], "ctypes (randomgen.pcg64.pcg64dxsm attribute)": [[86, "randomgen.pcg64.PCG64DXSM.ctypes", false]], "ctypes (randomgen.philox.philox attribute)": [[94, "randomgen.philox.Philox.ctypes", false]], "ctypes (randomgen.rdrand.rdrand attribute)": [[101, "randomgen.rdrand.RDRAND.ctypes", false]], "ctypes (randomgen.romu.romu attribute)": [[108, "randomgen.romu.Romu.ctypes", false]], "ctypes (randomgen.sfc.sfc64 attribute)": [[113, "randomgen.sfc.SFC64.ctypes", false]], "ctypes (randomgen.sfmt.sfmt attribute)": [[119, "randomgen.sfmt.SFMT.ctypes", false]], "ctypes (randomgen.speck128.speck128 attribute)": [[127, "randomgen.speck128.SPECK128.ctypes", false]], "ctypes (randomgen.threefry.threefry attribute)": [[135, "randomgen.threefry.ThreeFry.ctypes", false]], "ctypes (randomgen.wrapper.userbitgenerator attribute)": [[142, "randomgen.wrapper.UserBitGenerator.ctypes", false]], "ctypes (randomgen.xoroshiro128.xoroshiro128 attribute)": [[148, "randomgen.xoroshiro128.Xoroshiro128.ctypes", false]], "ctypes (randomgen.xorshift1024.xorshift1024 attribute)": [[155, "randomgen.xorshift1024.Xorshift1024.ctypes", false]], "ctypes (randomgen.xoshiro256.xoshiro256 attribute)": [[162, "randomgen.xoshiro256.Xoshiro256.ctypes", false]], "ctypes (randomgen.xoshiro512.xoshiro512 attribute)": [[169, "randomgen.xoshiro512.Xoshiro512.ctypes", false]], "dsfmt (class in randomgen.dsfmt)": [[2, "randomgen.dsfmt.DSFMT", false]], "efiix64 (class in randomgen.efiix64)": [[3, "randomgen.efiix64.EFIIX64", false]], "extendedgenerator (class in randomgen.generator)": [[201, "randomgen.generator.ExtendedGenerator", false]], "from_cfunc() (randomgen.wrapper.userbitgenerator class method)": [[143, "randomgen.wrapper.UserBitGenerator.from_cfunc", false]], "from_ctypes() (randomgen.wrapper.userbitgenerator class method)": [[144, "randomgen.wrapper.UserBitGenerator.from_ctypes", false]], "generate_state() (randomgen._seed_sequence.seedsequence method)": [[204, "randomgen._seed_sequence.SeedSequence.generate_state", false]], "hc128 (class in randomgen.hc128)": [[175, "randomgen.hc128.HC128", false]], "jsf (class in randomgen.jsf)": [[177, "randomgen.jsf.JSF", false]], "jump() (randomgen.aes.aescounter method)": [[7, "randomgen.aes.AESCounter.jump", false]], "jump() (randomgen.chacha.chacha method)": [[15, "randomgen.chacha.ChaCha.jump", false]], "jump() (randomgen.dsfmt.dsfmt method)": [[22, "randomgen.dsfmt.DSFMT.jump", false]], "jump() (randomgen.lxm.lxm method)": [[44, "randomgen.lxm.LXM.jump", false]], "jump() (randomgen.mt19937.mt19937 method)": [[51, "randomgen.mt19937.MT19937.jump", false]], "jump() (randomgen.pcg32.pcg32 method)": [[64, "randomgen.pcg32.PCG32.jump", false]], "jump() (randomgen.pcg64.pcg64 method)": [[79, "randomgen.pcg64.PCG64.jump", false]], "jump() (randomgen.pcg64.pcg64dxsm method)": [[87, "randomgen.pcg64.PCG64DXSM.jump", false]], "jump() (randomgen.philox.philox method)": [[95, "randomgen.philox.Philox.jump", false]], "jump() (randomgen.sfmt.sfmt method)": [[120, "randomgen.sfmt.SFMT.jump", false]], "jump() (randomgen.speck128.speck128 method)": [[128, "randomgen.speck128.SPECK128.jump", false]], "jump() (randomgen.threefry.threefry method)": [[136, "randomgen.threefry.ThreeFry.jump", false]], "jump() (randomgen.xoroshiro128.xoroshiro128 method)": [[149, "randomgen.xoroshiro128.Xoroshiro128.jump", false]], "jump() (randomgen.xorshift1024.xorshift1024 method)": [[156, "randomgen.xorshift1024.Xorshift1024.jump", false]], "jump() (randomgen.xoshiro256.xoshiro256 method)": [[163, "randomgen.xoshiro256.Xoshiro256.jump", false]], "jump() (randomgen.xoshiro512.xoshiro512 method)": [[170, "randomgen.xoshiro512.Xoshiro512.jump", false]], "jumped() (randomgen.aes.aescounter method)": [[8, "randomgen.aes.AESCounter.jumped", false]], "jumped() (randomgen.chacha.chacha method)": [[16, "randomgen.chacha.ChaCha.jumped", false]], "jumped() (randomgen.dsfmt.dsfmt method)": [[23, "randomgen.dsfmt.DSFMT.jumped", false]], "jumped() (randomgen.lxm.lxm method)": [[45, "randomgen.lxm.LXM.jumped", false]], "jumped() (randomgen.mt19937.mt19937 method)": [[52, "randomgen.mt19937.MT19937.jumped", false]], "jumped() (randomgen.pcg32.pcg32 method)": [[65, "randomgen.pcg32.PCG32.jumped", false]], "jumped() (randomgen.pcg64.lcg128mix method)": [[72, "randomgen.pcg64.LCG128Mix.jumped", false]], "jumped() (randomgen.pcg64.pcg64 method)": [[80, "randomgen.pcg64.PCG64.jumped", false]], "jumped() (randomgen.pcg64.pcg64dxsm method)": [[88, "randomgen.pcg64.PCG64DXSM.jumped", false]], "jumped() (randomgen.philox.philox method)": [[96, "randomgen.philox.Philox.jumped", false]], "jumped() (randomgen.rdrand.rdrand method)": [[102, "randomgen.rdrand.RDRAND.jumped", false]], "jumped() (randomgen.sfmt.sfmt method)": [[121, "randomgen.sfmt.SFMT.jumped", false]], "jumped() (randomgen.speck128.speck128 method)": [[129, "randomgen.speck128.SPECK128.jumped", false]], "jumped() (randomgen.threefry.threefry method)": [[137, "randomgen.threefry.ThreeFry.jumped", false]], "jumped() (randomgen.xoroshiro128.xoroshiro128 method)": [[150, "randomgen.xoroshiro128.Xoroshiro128.jumped", false]], "jumped() (randomgen.xorshift1024.xorshift1024 method)": [[157, "randomgen.xorshift1024.Xorshift1024.jumped", false]], "jumped() (randomgen.xoshiro256.xoshiro256 method)": [[164, "randomgen.xoshiro256.Xoshiro256.jumped", false]], "jumped() (randomgen.xoshiro512.xoshiro512 method)": [[171, "randomgen.xoshiro512.Xoshiro512.jumped", false]], "lcg128mix (class in randomgen.pcg64)": [[178, "randomgen.pcg64.LCG128Mix", false]], "lock (randomgen.aes.aescounter attribute)": [[0, "randomgen.aes.AESCounter.lock", false]], "lock (randomgen.chacha.chacha attribute)": [[1, "randomgen.chacha.ChaCha.lock", false]], "lock (randomgen.dsfmt.dsfmt attribute)": [[2, "randomgen.dsfmt.DSFMT.lock", false]], "lock (randomgen.efiix64.efiix64 attribute)": [[3, "randomgen.efiix64.EFIIX64.lock", false]], "lock (randomgen.hc128.hc128 attribute)": [[175, "randomgen.hc128.HC128.lock", false]], "lock (randomgen.jsf.jsf attribute)": [[177, "randomgen.jsf.JSF.lock", false]], "lock (randomgen.lxm.lxm attribute)": [[179, "randomgen.lxm.LXM.lock", false]], "lock (randomgen.mt19937.mt19937 attribute)": [[180, "randomgen.mt19937.MT19937.lock", false]], "lock (randomgen.mt64.mt64 attribute)": [[181, "randomgen.mt64.MT64.lock", false]], "lock (randomgen.pcg32.pcg32 attribute)": [[182, "randomgen.pcg32.PCG32.lock", false]], "lock (randomgen.pcg64.lcg128mix attribute)": [[178, "randomgen.pcg64.LCG128Mix.lock", false]], "lock (randomgen.pcg64.pcg64 attribute)": [[183, "randomgen.pcg64.PCG64.lock", false]], "lock (randomgen.pcg64.pcg64dxsm attribute)": [[184, "randomgen.pcg64.PCG64DXSM.lock", false]], "lock (randomgen.philox.philox attribute)": [[185, "randomgen.philox.Philox.lock", false]], "lock (randomgen.rdrand.rdrand attribute)": [[186, "randomgen.rdrand.RDRAND.lock", false]], "lock (randomgen.sfmt.sfmt attribute)": [[189, "randomgen.sfmt.SFMT.lock", false]], "lock (randomgen.speck128.speck128 attribute)": [[190, "randomgen.speck128.SPECK128.lock", false]], "lock (randomgen.threefry.threefry attribute)": [[191, "randomgen.threefry.ThreeFry.lock", false]], "lock (randomgen.xoroshiro128.xoroshiro128 attribute)": [[193, "randomgen.xoroshiro128.Xoroshiro128.lock", false]], "lock (randomgen.xorshift1024.xorshift1024 attribute)": [[194, "randomgen.xorshift1024.Xorshift1024.lock", false]], "lock (randomgen.xoshiro256.xoshiro256 attribute)": [[195, "randomgen.xoshiro256.Xoshiro256.lock", false]], "lock (randomgen.xoshiro512.xoshiro512 attribute)": [[196, "randomgen.xoshiro512.Xoshiro512.lock", false]], "lxm (class in randomgen.lxm)": [[179, "randomgen.lxm.LXM", false]], "module": [[0, "module-randomgen.aes", false], [1, "module-randomgen.chacha", false], [2, "module-randomgen.dsfmt", false], [3, "module-randomgen.efiix64", false], [175, "module-randomgen.hc128", false], [177, "module-randomgen.jsf", false], [179, "module-randomgen.lxm", false], [180, "module-randomgen.mt19937", false], [181, "module-randomgen.mt64", false], [182, "module-randomgen.pcg32", false], [183, "module-randomgen.pcg64", false], [185, "module-randomgen.philox", false], [186, "module-randomgen.rdrand", false], [187, "module-randomgen.romu", false], [188, "module-randomgen.sfc", false], [189, "module-randomgen.sfmt", false], [190, "module-randomgen.speck128", false], [191, "module-randomgen.threefry", false], [192, "module-randomgen.wrapper", false], [193, "module-randomgen.xoroshiro128", false], [194, "module-randomgen.xorshift1024", false], [195, "module-randomgen.xoshiro256", false], [196, "module-randomgen.xoshiro512", false], [199, "module-randomgen.entropy", false], [222, "module-randomgen", false], [224, "module-randomgen._seed_sequence", false]], "mt19937 (class in randomgen.mt19937)": [[180, "randomgen.mt19937.MT19937", false]], "mt64 (class in randomgen.mt64)": [[181, "randomgen.mt64.MT64", false]], "multivariate_complex_normal() (randomgen.generator.extendedgenerator method)": [[209, "randomgen.generator.ExtendedGenerator.multivariate_complex_normal", false]], "multivariate_normal() (randomgen.generator.extendedgenerator method)": [[210, "randomgen.generator.ExtendedGenerator.multivariate_normal", false]], "pcg32 (class in randomgen.pcg32)": [[182, "randomgen.pcg32.PCG32", false]], "pcg64 (class in randomgen.pcg64)": [[183, "randomgen.pcg64.PCG64", false]], "pcg64dxsm (class in randomgen.pcg64)": [[184, "randomgen.pcg64.PCG64DXSM", false]], "philox (class in randomgen.philox)": [[185, "randomgen.philox.Philox", false]], "raisinglock (class in randomgen.rdrand)": [[186, "randomgen.rdrand.RaisingLock", false]], "random() (randomgen.generator.extendedgenerator method)": [[211, "randomgen.generator.ExtendedGenerator.random", false]], "random_entropy() (in module randomgen.entropy)": [[199, "randomgen.entropy.random_entropy", false]], "random_raw() (randomgen.aes.aescounter method)": [[9, "randomgen.aes.AESCounter.random_raw", false]], "random_raw() (randomgen.chacha.chacha method)": [[17, "randomgen.chacha.ChaCha.random_raw", false]], "random_raw() (randomgen.dsfmt.dsfmt method)": [[24, "randomgen.dsfmt.DSFMT.random_raw", false]], "random_raw() (randomgen.efiix64.efiix64 method)": [[29, "randomgen.efiix64.EFIIX64.random_raw", false]], "random_raw() (randomgen.hc128.hc128 method)": [[34, "randomgen.hc128.HC128.random_raw", false]], "random_raw() (randomgen.jsf.jsf method)": [[39, "randomgen.jsf.JSF.random_raw", false]], "random_raw() (randomgen.lxm.lxm method)": [[46, "randomgen.lxm.LXM.random_raw", false]], "random_raw() (randomgen.mt19937.mt19937 method)": [[53, "randomgen.mt19937.MT19937.random_raw", false]], "random_raw() (randomgen.mt64.mt64 method)": [[58, "randomgen.mt64.MT64.random_raw", false]], "random_raw() (randomgen.pcg32.pcg32 method)": [[66, "randomgen.pcg32.PCG32.random_raw", false]], "random_raw() (randomgen.pcg64.lcg128mix method)": [[73, "randomgen.pcg64.LCG128Mix.random_raw", false]], "random_raw() (randomgen.pcg64.pcg64 method)": [[81, "randomgen.pcg64.PCG64.random_raw", false]], "random_raw() (randomgen.pcg64.pcg64dxsm method)": [[89, "randomgen.pcg64.PCG64DXSM.random_raw", false]], "random_raw() (randomgen.philox.philox method)": [[97, "randomgen.philox.Philox.random_raw", false]], "random_raw() (randomgen.rdrand.rdrand method)": [[103, "randomgen.rdrand.RDRAND.random_raw", false]], "random_raw() (randomgen.romu.romu method)": [[109, "randomgen.romu.Romu.random_raw", false]], "random_raw() (randomgen.sfc.sfc64 method)": [[114, "randomgen.sfc.SFC64.random_raw", false]], "random_raw() (randomgen.sfmt.sfmt method)": [[122, "randomgen.sfmt.SFMT.random_raw", false]], "random_raw() (randomgen.speck128.speck128 method)": [[130, "randomgen.speck128.SPECK128.random_raw", false]], "random_raw() (randomgen.threefry.threefry method)": [[138, "randomgen.threefry.ThreeFry.random_raw", false]], "random_raw() (randomgen.wrapper.userbitgenerator method)": [[145, "randomgen.wrapper.UserBitGenerator.random_raw", false]], "random_raw() (randomgen.xoroshiro128.xoroshiro128 method)": [[151, "randomgen.xoroshiro128.Xoroshiro128.random_raw", false]], "random_raw() (randomgen.xorshift1024.xorshift1024 method)": [[158, "randomgen.xorshift1024.Xorshift1024.random_raw", false]], "random_raw() (randomgen.xoshiro256.xoshiro256 method)": [[165, "randomgen.xoshiro256.Xoshiro256.random_raw", false]], "random_raw() (randomgen.xoshiro512.xoshiro512 method)": [[172, "randomgen.xoshiro512.Xoshiro512.random_raw", false]], "randomgen": [[222, "module-randomgen", false]], "randomgen._seed_sequence": [[224, "module-randomgen._seed_sequence", false]], "randomgen.aes": [[0, "module-randomgen.aes", false]], "randomgen.chacha": [[1, "module-randomgen.chacha", false]], "randomgen.dsfmt": [[2, "module-randomgen.dsfmt", false]], "randomgen.efiix64": [[3, "module-randomgen.efiix64", false]], "randomgen.entropy": [[199, "module-randomgen.entropy", false]], "randomgen.hc128": [[175, "module-randomgen.hc128", false]], "randomgen.jsf": [[177, "module-randomgen.jsf", false]], "randomgen.lxm": [[179, "module-randomgen.lxm", false]], "randomgen.mt19937": [[180, "module-randomgen.mt19937", false]], "randomgen.mt64": [[181, "module-randomgen.mt64", false]], "randomgen.pcg32": [[182, "module-randomgen.pcg32", false]], "randomgen.pcg64": [[183, "module-randomgen.pcg64", false]], "randomgen.philox": [[185, "module-randomgen.philox", false]], "randomgen.rdrand": [[186, "module-randomgen.rdrand", false]], "randomgen.romu": [[187, "module-randomgen.romu", false]], "randomgen.sfc": [[188, "module-randomgen.sfc", false]], "randomgen.sfmt": [[189, "module-randomgen.sfmt", false]], "randomgen.speck128": [[190, "module-randomgen.speck128", false]], "randomgen.threefry": [[191, "module-randomgen.threefry", false]], "randomgen.wrapper": [[192, "module-randomgen.wrapper", false]], "randomgen.xoroshiro128": [[193, "module-randomgen.xoroshiro128", false]], "randomgen.xorshift1024": [[194, "module-randomgen.xorshift1024", false]], "randomgen.xoshiro256": [[195, "module-randomgen.xoshiro256", false]], "randomgen.xoshiro512": [[196, "module-randomgen.xoshiro512", false]], "rdrand (class in randomgen.rdrand)": [[186, "randomgen.rdrand.RDRAND", false]], "romu (class in randomgen.romu)": [[187, "randomgen.romu.Romu", false]], "seed() (randomgen.aes.aescounter method)": [[10, "randomgen.aes.AESCounter.seed", false]], "seed() (randomgen.chacha.chacha method)": [[18, "randomgen.chacha.ChaCha.seed", false]], "seed() (randomgen.dsfmt.dsfmt method)": [[25, "randomgen.dsfmt.DSFMT.seed", false]], "seed() (randomgen.efiix64.efiix64 method)": [[30, "randomgen.efiix64.EFIIX64.seed", false]], "seed() (randomgen.hc128.hc128 method)": [[35, "randomgen.hc128.HC128.seed", false]], "seed() (randomgen.jsf.jsf method)": [[40, "randomgen.jsf.JSF.seed", false]], "seed() (randomgen.lxm.lxm method)": [[47, "randomgen.lxm.LXM.seed", false]], "seed() (randomgen.mt19937.mt19937 method)": [[54, "randomgen.mt19937.MT19937.seed", false]], "seed() (randomgen.mt64.mt64 method)": [[59, "randomgen.mt64.MT64.seed", false]], "seed() (randomgen.pcg32.pcg32 method)": [[67, "randomgen.pcg32.PCG32.seed", false]], "seed() (randomgen.pcg64.lcg128mix method)": [[74, "randomgen.pcg64.LCG128Mix.seed", false]], "seed() (randomgen.pcg64.pcg64 method)": [[82, "randomgen.pcg64.PCG64.seed", false]], "seed() (randomgen.pcg64.pcg64dxsm method)": [[90, "randomgen.pcg64.PCG64DXSM.seed", false]], "seed() (randomgen.philox.philox method)": [[98, "randomgen.philox.Philox.seed", false]], "seed() (randomgen.rdrand.rdrand method)": [[104, "randomgen.rdrand.RDRAND.seed", false]], "seed() (randomgen.romu.romu method)": [[110, "randomgen.romu.Romu.seed", false]], "seed() (randomgen.sfc.sfc64 method)": [[115, "randomgen.sfc.SFC64.seed", false]], "seed() (randomgen.sfmt.sfmt method)": [[123, "randomgen.sfmt.SFMT.seed", false]], "seed() (randomgen.speck128.speck128 method)": [[131, "randomgen.speck128.SPECK128.seed", false]], "seed() (randomgen.threefry.threefry method)": [[139, "randomgen.threefry.ThreeFry.seed", false]], "seed() (randomgen.xoroshiro128.xoroshiro128 method)": [[152, "randomgen.xoroshiro128.Xoroshiro128.seed", false]], "seed() (randomgen.xorshift1024.xorshift1024 method)": [[159, "randomgen.xorshift1024.Xorshift1024.seed", false]], "seed() (randomgen.xoshiro256.xoshiro256 method)": [[166, "randomgen.xoshiro256.Xoshiro256.seed", false]], "seed() (randomgen.xoshiro512.xoshiro512 method)": [[173, "randomgen.xoshiro512.Xoshiro512.seed", false]], "seed_seq (randomgen.aes.aescounter attribute)": [[0, "randomgen.aes.AESCounter.seed_seq", false]], "seed_seq (randomgen.chacha.chacha attribute)": [[1, "randomgen.chacha.ChaCha.seed_seq", false]], "seed_seq (randomgen.dsfmt.dsfmt attribute)": [[2, "randomgen.dsfmt.DSFMT.seed_seq", false]], "seed_seq (randomgen.efiix64.efiix64 attribute)": [[3, "randomgen.efiix64.EFIIX64.seed_seq", false]], "seed_seq (randomgen.hc128.hc128 attribute)": [[175, "randomgen.hc128.HC128.seed_seq", false]], "seed_seq (randomgen.jsf.jsf attribute)": [[177, "randomgen.jsf.JSF.seed_seq", false]], "seed_seq (randomgen.lxm.lxm attribute)": [[179, "randomgen.lxm.LXM.seed_seq", false]], "seed_seq (randomgen.mt19937.mt19937 attribute)": [[180, "randomgen.mt19937.MT19937.seed_seq", false]], "seed_seq (randomgen.mt64.mt64 attribute)": [[181, "randomgen.mt64.MT64.seed_seq", false]], "seed_seq (randomgen.pcg32.pcg32 attribute)": [[182, "randomgen.pcg32.PCG32.seed_seq", false]], "seed_seq (randomgen.pcg64.lcg128mix attribute)": [[178, "randomgen.pcg64.LCG128Mix.seed_seq", false]], "seed_seq (randomgen.pcg64.pcg64 attribute)": [[183, "randomgen.pcg64.PCG64.seed_seq", false]], "seed_seq (randomgen.pcg64.pcg64dxsm attribute)": [[184, "randomgen.pcg64.PCG64DXSM.seed_seq", false]], "seed_seq (randomgen.philox.philox attribute)": [[185, "randomgen.philox.Philox.seed_seq", false]], "seed_seq (randomgen.rdrand.rdrand attribute)": [[186, "randomgen.rdrand.RDRAND.seed_seq", false]], "seed_seq (randomgen.sfmt.sfmt attribute)": [[189, "randomgen.sfmt.SFMT.seed_seq", false]], "seed_seq (randomgen.speck128.speck128 attribute)": [[190, "randomgen.speck128.SPECK128.seed_seq", false]], "seed_seq (randomgen.threefry.threefry attribute)": [[191, "randomgen.threefry.ThreeFry.seed_seq", false]], "seed_seq (randomgen.xoroshiro128.xoroshiro128 attribute)": [[193, "randomgen.xoroshiro128.Xoroshiro128.seed_seq", false]], "seed_seq (randomgen.xorshift1024.xorshift1024 attribute)": [[194, "randomgen.xorshift1024.Xorshift1024.seed_seq", false]], "seed_seq (randomgen.xoshiro256.xoshiro256 attribute)": [[195, "randomgen.xoshiro256.Xoshiro256.seed_seq", false]], "seed_seq (randomgen.xoshiro512.xoshiro512 attribute)": [[196, "randomgen.xoshiro512.Xoshiro512.seed_seq", false]], "seedsequence (class in randomgen._seed_sequence)": [[224, "randomgen._seed_sequence.SeedSequence", false]], "sfc64 (class in randomgen.sfc)": [[188, "randomgen.sfc.SFC64", false]], "sfmt (class in randomgen.sfmt)": [[189, "randomgen.sfmt.SFMT", false]], "spawn() (randomgen._seed_sequence.seedsequence method)": [[205, "randomgen._seed_sequence.SeedSequence.spawn", false]], "speck128 (class in randomgen.speck128)": [[190, "randomgen.speck128.SPECK128", false]], "standard_wishart() (randomgen.generator.extendedgenerator method)": [[212, "randomgen.generator.ExtendedGenerator.standard_wishart", false]], "state (randomgen._seed_sequence.seedsequence attribute)": [[206, "randomgen._seed_sequence.SeedSequence.state", false]], "state (randomgen.aes.aescounter attribute)": [[11, "randomgen.aes.AESCounter.state", false]], "state (randomgen.chacha.chacha attribute)": [[19, "randomgen.chacha.ChaCha.state", false]], "state (randomgen.dsfmt.dsfmt attribute)": [[26, "randomgen.dsfmt.DSFMT.state", false]], "state (randomgen.efiix64.efiix64 attribute)": [[31, "randomgen.efiix64.EFIIX64.state", false]], "state (randomgen.generator.extendedgenerator attribute)": [[213, "randomgen.generator.ExtendedGenerator.state", false]], "state (randomgen.hc128.hc128 attribute)": [[36, "randomgen.hc128.HC128.state", false]], "state (randomgen.jsf.jsf attribute)": [[41, "randomgen.jsf.JSF.state", false]], "state (randomgen.lxm.lxm attribute)": [[48, "randomgen.lxm.LXM.state", false]], "state (randomgen.mt19937.mt19937 attribute)": [[55, "randomgen.mt19937.MT19937.state", false]], "state (randomgen.mt64.mt64 attribute)": [[60, "randomgen.mt64.MT64.state", false]], "state (randomgen.pcg32.pcg32 attribute)": [[68, "randomgen.pcg32.PCG32.state", false]], "state (randomgen.pcg64.lcg128mix attribute)": [[75, "randomgen.pcg64.LCG128Mix.state", false]], "state (randomgen.pcg64.pcg64 attribute)": [[83, "randomgen.pcg64.PCG64.state", false]], "state (randomgen.pcg64.pcg64dxsm attribute)": [[91, "randomgen.pcg64.PCG64DXSM.state", false]], "state (randomgen.philox.philox attribute)": [[99, "randomgen.philox.Philox.state", false]], "state (randomgen.rdrand.rdrand attribute)": [[105, "randomgen.rdrand.RDRAND.state", false]], "state (randomgen.romu.romu attribute)": [[111, "randomgen.romu.Romu.state", false]], "state (randomgen.sfc.sfc64 attribute)": [[116, "randomgen.sfc.SFC64.state", false]], "state (randomgen.sfmt.sfmt attribute)": [[124, "randomgen.sfmt.SFMT.state", false]], "state (randomgen.speck128.speck128 attribute)": [[132, "randomgen.speck128.SPECK128.state", false]], "state (randomgen.threefry.threefry attribute)": [[140, "randomgen.threefry.ThreeFry.state", false]], "state (randomgen.wrapper.userbitgenerator attribute)": [[146, "randomgen.wrapper.UserBitGenerator.state", false]], "state (randomgen.xoroshiro128.xoroshiro128 attribute)": [[153, "randomgen.xoroshiro128.Xoroshiro128.state", false]], "state (randomgen.xorshift1024.xorshift1024 attribute)": [[160, "randomgen.xorshift1024.Xorshift1024.state", false]], "state (randomgen.xoshiro256.xoshiro256 attribute)": [[167, "randomgen.xoshiro256.Xoshiro256.state", false]], "state (randomgen.xoshiro512.xoshiro512 attribute)": [[174, "randomgen.xoshiro512.Xoshiro512.state", false]], "success (randomgen.rdrand.rdrand attribute)": [[106, "randomgen.rdrand.RDRAND.success", false]], "threefry (class in randomgen.threefry)": [[191, "randomgen.threefry.ThreeFry", false]], "uintegers() (randomgen.generator.extendedgenerator method)": [[214, "randomgen.generator.ExtendedGenerator.uintegers", false]], "userbitgenerator (class in randomgen.wrapper)": [[192, "randomgen.wrapper.UserBitGenerator", false]], "weyl_increments() (randomgen.sfc.sfc64 method)": [[117, "randomgen.sfc.SFC64.weyl_increments", false]], "wishart() (randomgen.generator.extendedgenerator method)": [[215, "randomgen.generator.ExtendedGenerator.wishart", false]], "xoroshiro128 (class in randomgen.xoroshiro128)": [[193, "randomgen.xoroshiro128.Xoroshiro128", false]], "xorshift1024 (class in randomgen.xorshift1024)": [[194, "randomgen.xorshift1024.Xorshift1024", false]], "xoshiro256 (class in randomgen.xoshiro256)": [[195, "randomgen.xoshiro256.Xoshiro256", false]], "xoshiro512 (class in randomgen.xoshiro512)": [[196, "randomgen.xoshiro512.Xoshiro512", false]]}, "objects": {"": [[222, 0, 0, 1, "randomgen", ""]], "randomgen": [[224, 0, 0, 1, "_seed_sequence", ""], [0, 0, 0, 1, "aes", ""], [1, 0, 0, 1, "chacha", ""], [2, 0, 0, 1, "dsfmt", ""], [3, 0, 0, 1, "efiix64", ""], [199, 0, 0, 1, "entropy", ""], [175, 0, 0, 1, "hc128", ""], [177, 0, 0, 1, "jsf", ""], [179, 0, 0, 1, "lxm", ""], [180, 0, 0, 1, "mt19937", ""], [181, 0, 0, 1, "mt64", ""], [182, 0, 0, 1, "pcg32", ""], [183, 0, 0, 1, "pcg64", ""], [185, 0, 0, 1, "philox", ""], [186, 0, 0, 1, "rdrand", ""], [187, 0, 0, 1, "romu", ""], [188, 0, 0, 1, "sfc", ""], [189, 0, 0, 1, "sfmt", ""], [190, 0, 0, 1, "speck128", ""], [191, 0, 0, 1, "threefry", ""], [192, 0, 0, 1, "wrapper", ""], [193, 0, 0, 1, "xoroshiro128", ""], [194, 0, 0, 1, "xorshift1024", ""], [195, 0, 0, 1, "xoshiro256", ""], [196, 0, 0, 1, "xoshiro512", ""]], "randomgen._seed_sequence": [[224, 1, 1, 0, "SeedSequence", "SeedSequence mixes sources of entropy in a reproducible way to set the initial state for independent and very probably non-overlapping BitGenerators."]], "randomgen._seed_sequence.SeedSequence": [[204, 3, 1, 0, "generate_state", "Return the requested number of words for PRNG seeding."], [205, 3, 1, 0, "spawn", "Spawn a number of child SeedSequence instances by extending the spawn_key."], [206, 4, 1, 0, "state", "Get the state of the SeedSequence"]], "randomgen._seed_sequence.SeedSequence.__init__": [[224, 2, 2, 0, "entropy", "The entropy for creating a SeedSequence."], [224, 2, 2, 0, "n_children_spawned", "The number of children already spawned."], [224, 2, 2, 0, "pool_size", "Size of the pooled entropy to store."], [224, 2, 2, 0, "spawn_key", "A third source of entropy, used internally when calling SeedSequence.spawn"]], "randomgen._seed_sequence.SeedSequence.generate_state": [[204, 2, 2, 0, "dtype", "The size of each word."], [204, 2, 2, 0, "n_words", ""]], "randomgen._seed_sequence.SeedSequence.spawn": [[205, 2, 2, 0, "n_children", "Number of child SeedSequences to create from the current instance"]], "randomgen.aes": [[0, 1, 1, 0, "AESCounter", "Container for the AES Counter pseudo-random number generator."]], "randomgen.aes.AESCounter": [[4, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [5, 4, 1, 0, "cffi", "CFFI interface"], [6, 4, 1, 0, "ctypes", "ctypes interface"], [7, 3, 1, 0, "jump", "Jumps the state as-if iter * 2**64 random numbers are generated"], [8, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [0, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [9, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [10, 3, 1, 0, "seed", "Seed the generator"], [0, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [11, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.aes.AESCounter.__init__": [[0, 2, 2, 0, "counter", "Counter to use in the AESCounter state."], [0, 2, 2, 0, "key", "Key to use in the AESCounter state."], [0, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**128), a SeedSequence instance or None (the default)."]], "randomgen.aes.AESCounter.advance": [[4, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.aes.AESCounter.jump": [[7, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.aes.AESCounter.jumped": [[8, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.aes.AESCounter.random_raw": [[9, 2, 2, 0, "output", "Output values."], [9, 2, 2, 0, "size", "Output shape."]], "randomgen.aes.AESCounter.seed": [[10, 2, 2, 0, "counter", "Counter to use in the AESCounter state."], [10, 2, 2, 0, "key", "Key to use in the AESCounter state."], [10, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**128), a SeedSequence instance or None (the default)."]], "randomgen.chacha": [[1, 1, 1, 0, "ChaCha", "Container for the ChaCha family of Counter pseudo-random number generators"]], "randomgen.chacha.ChaCha": [[12, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [13, 4, 1, 0, "cffi", "CFFI interface"], [14, 4, 1, 0, "ctypes", "ctypes interface"], [15, 3, 1, 0, "jump", "Jumps the state as-if 2**64 random numbers have been generated."], [16, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [1, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [17, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [18, 3, 1, 0, "seed", "Seed the generator"], [1, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [19, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.chacha.ChaCha.__init__": [[1, 2, 2, 0, "counter", "Counter to use in the ChaCha state."], [1, 2, 2, 0, "key", "Key to use in the ChaCha state."], [1, 2, 2, 0, "rounds", "Number of rounds to run the ChaCha mixer."], [1, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**256), an array of 4 uint64 values, a SeedSequence instance or None (the default)."]], "randomgen.chacha.ChaCha.advance": [[12, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.chacha.ChaCha.jump": [[15, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.chacha.ChaCha.jumped": [[16, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.chacha.ChaCha.random_raw": [[17, 2, 2, 0, "output", "Output values."], [17, 2, 2, 0, "size", "Output shape."]], "randomgen.chacha.ChaCha.seed": [[18, 2, 2, "randomgen.chacha.ChaCha.seed", "counter", "Seed the generator"], [18, 2, 2, "randomgen.chacha.ChaCha.seed", "key", "Seed the generator"], [18, 2, 2, "randomgen.chacha.ChaCha.seed", "seed", "Seed the generator"]], "randomgen.dsfmt": [[2, 1, 1, 0, "DSFMT", "Container for the SIMD-based Mersenne Twister pseudo RNG."]], "randomgen.dsfmt.DSFMT": [[20, 4, 1, 0, "cffi", "CFFI interface"], [21, 4, 1, 0, "ctypes", "ctypes interface"], [22, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated."], [23, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [2, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [24, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [25, 3, 1, 0, "seed", "Seed the generator"], [2, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [26, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.dsfmt.DSFMT.__init__": [[2, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator."]], "randomgen.dsfmt.DSFMT.jump": [[22, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator."]], "randomgen.dsfmt.DSFMT.jumped": [[23, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.dsfmt.DSFMT.random_raw": [[24, 2, 2, 0, "output", "Output values."], [24, 2, 2, 0, "size", "Output shape."]], "randomgen.dsfmt.DSFMT.seed": [[25, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator. Can be any integer between 0 and 2**32 - 1 inclusive, an array (or other sequence) of unsigned 32-bit integers, a SeedSequence instance or None (the default)."]], "randomgen.efiix64": [[3, 1, 1, 0, "EFIIX64", "Container for the EFIIX64x384 pseudo-random number generator."]], "randomgen.efiix64.EFIIX64": [[27, 4, 1, 0, "cffi", "CFFI interface"], [28, 4, 1, 0, "ctypes", "ctypes interface"], [3, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [29, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [30, 3, 1, 0, "seed", "Seed the generator"], [3, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [31, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.efiix64.EFIIX64.__init__": [[3, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.efiix64.EFIIX64.random_raw": [[29, 2, 2, 0, "output", "Output values."], [29, 2, 2, 0, "size", "Output shape."]], "randomgen.efiix64.EFIIX64.seed": [[30, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]], "randomgen.entropy": [[199, 5, 1, 0, "random_entropy", "Read entropy from the system cryptographic provider"]], "randomgen.entropy.random_entropy": [[199, 2, 2, 0, "size", "Output shape."], [199, 2, 2, 0, "source", "Source of entropy."]], "randomgen.generator": [[201, 1, 1, 0, "ExtendedGenerator", "Additional random value generator using a bit generator source."]], "randomgen.generator.ExtendedGenerator": [[207, 4, 1, 0, "bit_generator", "Gets the bit generator instance used by the generator"], [208, 3, 1, 0, "complex_normal", "Draw random samples from a complex normal (Gaussian) distribution."], [209, 3, 1, 0, "multivariate_complex_normal", "Draw random samples from a multivariate complex normal (Gaussian) distribution."], [210, 3, 1, 0, "multivariate_normal", "Draw random samples from a multivariate normal distribution."], [211, 3, 1, 0, "random", "Return random floats in the half-open interval [0.0, 1.0)."], [212, 3, 1, 0, "standard_wishart", "Draw samples from the Standard Wishart and Pseudo-Wishart distributions"], [213, 4, 1, 0, "state", "Get or set the bit generator's state"], [214, 3, 1, 0, "uintegers", "Return random unsigned integers"], [215, 3, 1, 0, "wishart", "Draw samples from the Wishart and pseudo-Wishart distributions."]], "randomgen.generator.ExtendedGenerator.__init__": [[201, 2, 2, 0, "bit_generator", "Bit generator to use as the core generator."]], "randomgen.generator.ExtendedGenerator.complex_normal": [[208, 2, 2, 0, "gamma", "Variance of the distribution"], [208, 2, 2, 0, "loc", "Mean of the distribution."], [208, 2, 2, 0, "relation", "Relation between the two component normals"], [208, 2, 2, 0, "size", "Output shape."]], "randomgen.generator.ExtendedGenerator.multivariate_complex_normal": [[209, 2, 2, 0, "check_valid", "Behavior when the covariance matrix implied by gamma and relation is not positive semidefinite."], [209, 2, 2, 0, "gamma", "Covariance of the real component of the distribution."], [209, 2, 2, 0, "loc", "Mean of the distribution."], [209, 2, 2, 0, "method", "The cov input is used to compute a factor matrix A such that A @ A.T = cov."], [209, 2, 2, 0, "relation", "Relation between the two component normals."], [209, 2, 2, 0, "size", "Given a shape of, for example, (m,n,k), m*n*k samples are generated, and packed in an m-by-n-by-k arrangement."], [209, 2, 2, 0, "tol", "Tolerance when checking the singular values in the covariance matrix implied by gamma and relation."]], "randomgen.generator.ExtendedGenerator.multivariate_normal": [[210, 2, 2, 0, "check_valid", "Behavior when the covariance matrix is not positive semidefinite."], [210, 2, 2, 0, "cov", "Covariance matrix of the distribution."], [210, 2, 2, 0, "mean", "Mean of the distribution."], [210, 2, 2, 0, "method", "The cov input is used to compute a factor matrix A such that A @ A.T = cov."], [210, 2, 2, 0, "size", "Given a shape of, for example, (m,n,k), m*n*k samples are generated, and packed in an m-by-n-by-k arrangement."], [210, 2, 2, 0, "tol", "Tolerance when checking the singular values in covariance matrix. cov is cast to double before the check."]], "randomgen.generator.ExtendedGenerator.random": [[211, 2, 2, 0, "dtype", "Desired dtype of the result."], [211, 2, 2, 0, "out", "Alternative output array in which to place the result."], [211, 2, 2, 0, "size", "Output shape."]], "randomgen.generator.ExtendedGenerator.standard_wishart": [[212, 2, 2, 0, "df", "The degree-of-freedom for the simulated Wishart variates."], [212, 2, 2, 0, "dim", "The dimension of the simulated Wishart variates."], [212, 2, 2, 0, "rescale", "Flag indicating whether to rescale the outputs to have expectation identity."], [212, 2, 2, 0, "size", "Output shape, excluding trailing dims."]], "randomgen.generator.ExtendedGenerator.uintegers": [[214, 2, 2, 0, "bits", "Size of the unsigned integer to return, either 32 bit or 64 bit."], [214, 2, 2, 0, "size", "Output shape."]], "randomgen.generator.ExtendedGenerator.wishart": [[215, 2, 2, 0, "check_valid", "Behavior when the covariance matrix has rank less than rank."], [215, 2, 2, 0, "df", "Degree-of-freedom values."], [215, 2, 2, 0, "method", "The cov input is used to compute a factor matrix A such that A @ A.T = cov."], [215, 2, 2, 0, "rank", "The rank of shape when generating from the Singular Wishart distribution."], [215, 2, 2, 0, "scale", "Shape matrix of the distribution."], [215, 2, 2, 0, "size", "Given a shape of, for example, (m,n,k), m*n*k samples are generated, and packed in an m-by-n-by-k arrangement."], [215, 2, 2, 0, "tol", "Tolerance when checking the rank of shape."]], "randomgen.hc128": [[175, 1, 1, 0, "HC128", "Container for the HC-128 cipher-based pseudo-random number generator"]], "randomgen.hc128.HC128": [[32, 4, 1, 0, "cffi", "CFFI interface"], [33, 4, 1, 0, "ctypes", "ctypes interface"], [175, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [34, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [35, 3, 1, 0, "seed", "Seed the generator"], [175, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [36, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.hc128.HC128.__init__": [[175, 2, 2, 0, "key", "Key for HC128."], [175, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.hc128.HC128.random_raw": [[34, 2, 2, 0, "output", "Output values."], [34, 2, 2, 0, "size", "Output shape."]], "randomgen.hc128.HC128.seed": [[35, 2, 2, 0, "key", "Key for HC128."], [35, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]], "randomgen.jsf": [[177, 1, 1, 0, "JSF", "Container for Jenkins's Fast Small (JSF) pseudo-random number generator"]], "randomgen.jsf.JSF": [[37, 4, 1, 0, "cffi", "CFFI interface"], [38, 4, 1, 0, "ctypes", "ctypes interface"], [177, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [39, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [40, 3, 1, 0, "seed", "Seed the generator"], [177, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [41, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.jsf.JSF.__init__": [[177, 2, 2, 0, "p", "One the the three parameters that defines JSF."], [177, 2, 2, 0, "q", "One the the three parameters that defines JSF."], [177, 2, 2, 0, "r", "One the the three parameters that defines JSF."], [177, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."], [177, 2, 2, 0, "seed_size", "Number of distinct seed values used to initialize JSF."], [177, 2, 2, 0, "size", "Output size of a single iteration of JSF."]], "randomgen.jsf.JSF.random_raw": [[39, 2, 2, 0, "output", "Output values."], [39, 2, 2, 0, "size", "Output shape."]], "randomgen.jsf.JSF.seed": [[40, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."]], "randomgen.lxm": [[179, 1, 1, 0, "LXM", "Container for the LXM pseudo-random number generator."]], "randomgen.lxm.LXM": [[42, 4, 1, 0, "cffi", "CFFI interface"], [43, 4, 1, 0, "ctypes", "ctypes interface"], [44, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated"], [45, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [179, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [46, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [47, 3, 1, 0, "seed", "Seed the generator"], [179, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [48, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.lxm.LXM.__init__": [[179, 2, 2, 0, "b", "The additive constant in the LCG update."], [179, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.lxm.LXM.jump": [[44, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.lxm.LXM.jumped": [[45, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.lxm.LXM.random_raw": [[46, 2, 2, 0, "output", "Output values."], [46, 2, 2, 0, "size", "Output shape."]], "randomgen.lxm.LXM.seed": [[47, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). The input is passed to SeedSequence which produces the values used to initialize the state."]], "randomgen.mt19937": [[180, 1, 1, 0, "MT19937", "Container for the Mersenne Twister pseudo-random number generator."]], "randomgen.mt19937.MT19937": [[49, 4, 1, 0, "cffi", "CFFI interface"], [50, 4, 1, 0, "ctypes", "ctypes interface"], [51, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated."], [52, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [180, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [53, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [54, 3, 1, 0, "seed", "Seed the generator"], [180, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [55, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.mt19937.MT19937.__init__": [[180, 2, 2, 0, "mode", "\"sequence\" uses a SeedSequence to transforms the seed into an initial state."], [180, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator."]], "randomgen.mt19937.MT19937.jump": [[51, 2, 2, 0, "jumps", "Number of times to jump the state of the bit generator."]], "randomgen.mt19937.MT19937.jumped": [[52, 2, 2, 0, "jumps", "Number of times to jump the state of the bit generator returned"]], "randomgen.mt19937.MT19937.random_raw": [[53, 2, 2, 0, "output", "Output values."], [53, 2, 2, 0, "size", "Output shape."]], "randomgen.mt19937.MT19937.seed": [[54, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator. Can be any integer between 0 and 2**32 - 1 inclusive, an array (or other sequence) of unsigned 32-bit integers, a SeedSequence instance or None (the default)."]], "randomgen.mt64": [[181, 1, 1, 0, "MT64", "Container for the 64-bit Mersenne Twister pseudo-random number generator"]], "randomgen.mt64.MT64": [[56, 4, 1, 0, "cffi", "CFFI interface"], [57, 4, 1, 0, "ctypes", "ctypes interface"], [181, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [58, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [59, 3, 1, 0, "seed", "Seed the generator"], [181, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [60, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.mt64.MT64.__init__": [[181, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator."]], "randomgen.mt64.MT64.random_raw": [[58, 2, 2, 0, "output", "Output values."], [58, 2, 2, 0, "size", "Output shape."]], "randomgen.mt64.MT64.seed": [[59, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator."]], "randomgen.pcg32": [[182, 1, 1, 0, "PCG32", "Container for the PCG-32 pseudo-random number generator."]], "randomgen.pcg32.PCG32": [[61, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [62, 4, 1, 0, "cffi", "CFFI interface"], [63, 4, 1, 0, "ctypes", "ctypes interface"], [64, 3, 1, 0, "jump", "Jump the state a fixed increment"], [65, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [182, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [66, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [67, 3, 1, 0, "seed", "Seed the generator"], [182, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [68, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.pcg32.PCG32.__init__": [[182, 2, 2, 0, "inc", "The increment in the LCG."], [182, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."]], "randomgen.pcg32.PCG32.advance": [[61, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.pcg32.PCG32.jump": [[64, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.pcg32.PCG32.jumped": [[65, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.pcg32.PCG32.random_raw": [[66, 2, 2, 0, "output", "Output values."], [66, 2, 2, 0, "size", "Output shape."]], "randomgen.pcg32.PCG32.seed": [[67, 2, 2, 0, "inc", "The increment in the LCG."], [67, 2, 2, 0, "seed", "Seed for PCG64."]], "randomgen.pcg64": [[178, 1, 1, 0, "LCG128Mix", "Customizable 128-bit LCG bit generator with output mixing"], [183, 1, 1, 0, "PCG64", "Container for the PCG-64 pseudo-random number generator."], [184, 1, 1, 0, "PCG64DXSM", "Container for the PCG-64 updated with a 64-bit mult using DXSM output func."]], "randomgen.pcg64.LCG128Mix": [[69, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [70, 4, 1, 0, "cffi", "CFFI interface"], [71, 4, 1, 0, "ctypes", "ctypes interface"], [72, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [178, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [73, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [74, 3, 1, 0, "seed", "Seed the generator"], [178, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [75, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.pcg64.LCG128Mix.__init__": [[178, 2, 2, 0, "dxsm_multiplier", "The multiplier to use in the DXSM output function."], [178, 2, 2, 0, "inc", "The increment in the LCG."], [178, 2, 2, 0, "multiplier", "The multipler to use in the LCG."], [178, 2, 2, 0, "output", "The name of the output function or a ctypes function or function pointer with a signature uint64(uint64, uint64)."], [178, 2, 2, 0, "post", "Whether the mix the output before or after the next increment of the LCG is computed."], [178, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer, a sequence of integers, a SeedSequence instance or None (the default)."]], "randomgen.pcg64.LCG128Mix.advance": [[69, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.pcg64.LCG128Mix.jumped": [[72, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.pcg64.LCG128Mix.random_raw": [[73, 2, 2, 0, "output", "Output values."], [73, 2, 2, 0, "size", "Output shape."]], "randomgen.pcg64.LCG128Mix.seed": [[74, 2, 2, 0, "inc", "The increment in the LCG."], [74, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."]], "randomgen.pcg64.PCG64": [[76, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [77, 4, 1, 0, "cffi", "CFFI interface"], [78, 4, 1, 0, "ctypes", "ctypes interface"], [79, 3, 1, 0, "jump", "Jump the state a fixed increment"], [80, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [183, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [81, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [82, 3, 1, 0, "seed", "Seed the generator"], [183, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [83, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.pcg64.PCG64.__init__": [[183, 2, 2, 0, "inc", "The increment in the LCG."], [183, 2, 2, 0, "mode", "\"sequence\" uses a SeedSequence to transforms the seed into an initial state."], [183, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**128), a SeedSequence instance or None (the default)."], [183, 2, 2, 0, "variant", "Name of PCG64 variant to use."]], "randomgen.pcg64.PCG64.advance": [[76, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.pcg64.PCG64.jump": [[79, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.pcg64.PCG64.jumped": [[80, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.pcg64.PCG64.random_raw": [[81, 2, 2, 0, "output", "Output values."], [81, 2, 2, 0, "size", "Output shape."]], "randomgen.pcg64.PCG64.seed": [[82, 2, 2, 0, "inc", "The increment in the LCG."], [82, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."]], "randomgen.pcg64.PCG64DXSM": [[84, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [85, 4, 1, 0, "cffi", "CFFI interface"], [86, 4, 1, 0, "ctypes", "ctypes interface"], [87, 3, 1, 0, "jump", "Not implemented. Use jumped."], [88, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [184, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [89, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [90, 3, 1, 0, "seed", "Seed the generator"], [184, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [91, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.pcg64.PCG64DXSM.__init__": [[184, 2, 2, 0, "inc", "The increment in the LCG."], [184, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**128), a SeedSequence instance or None (the default)."]], "randomgen.pcg64.PCG64DXSM.advance": [[84, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.pcg64.PCG64DXSM.jump": [[87, 2, 2, "randomgen.pcg64.PCG64DXSM.jump", "iter", "Not implemented. Use jumped."]], "randomgen.pcg64.PCG64DXSM.jumped": [[88, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.pcg64.PCG64DXSM.random_raw": [[89, 2, 2, 0, "output", "Output values."], [89, 2, 2, 0, "size", "Output shape."]], "randomgen.pcg64.PCG64DXSM.seed": [[90, 2, 2, 0, "inc", "The increment in the LCG."], [90, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."]], "randomgen.philox": [[185, 1, 1, 0, "Philox", "Container for the Philox family of pseudo-random number generators."]], "randomgen.philox.Philox": [[92, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [93, 4, 1, 0, "cffi", "CFFI interface"], [94, 4, 1, 0, "ctypes", "ctypes interface"], [95, 3, 1, 0, "jump", "Jumps the state as-if 2**(W*N/2) random numbers have been generated."], [96, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [185, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [97, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [98, 3, 1, 0, "seed", "Seed the generator"], [185, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [99, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.philox.Philox.__init__": [[185, 2, 2, 0, "counter", "Counter to use in the Philox state."], [185, 2, 2, 0, "key", "Key to use in the Philox state."], [185, 2, 2, 0, "mode", "\"sequence\" uses a SeedSequence to transforms the seed into an initial state."], [185, 2, 2, 0, "number", "Number of values to produce in a single call."], [185, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, data will be read from /dev/urandom (or the Windows analog) if available."], [185, 2, 2, 0, "width", "Bit width the values produced."]], "randomgen.philox.Philox.advance": [[92, 2, 2, 0, "counter", "Flag indicating whether the advance the counter only or both the counter and the buffer position."], [92, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.philox.Philox.jump": [[95, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.philox.Philox.jumped": [[96, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.philox.Philox.random_raw": [[97, 2, 2, 0, "output", "Output values."], [97, 2, 2, 0, "size", "Output shape."]], "randomgen.philox.Philox.seed": [[98, 2, 2, 0, "counter", "Counter to use in the Philox state."], [98, 2, 2, 0, "key", "Key to use in the Philox state."], [98, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, data will be read from /dev/urandom (or the Windows analog) if available."]], "randomgen.rdrand": [[186, 1, 1, 0, "RDRAND", "Container for the hardware RDRAND random number generator."], [186, 1, 1, 0, "RaisingLock", "A Lock that wraps threading.Lock can can raise errors."]], "randomgen.rdrand.RDRAND": [[100, 4, 1, 0, "cffi", "CFFI interface"], [101, 4, 1, 0, "ctypes", "ctypes interface"], [102, 3, 1, 0, "jumped", "Returns a new bit generator"], [186, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [103, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [104, 3, 1, 0, "seed", "Compatibility function. Not used."], [186, 4, 1, 0, "seed_seq", "Always None since RDRAND cannot be seeded."], [105, 4, 1, 0, "state", "Get or set the PRNG state"], [106, 4, 1, 0, "success", "Gets the flag indicating that all calls to RDRAND succeeded"]], "randomgen.rdrand.RDRAND.__init__": [[186, 2, 2, 0, "retries", "The number of times to retry."], [186, 2, 2, 0, "seed", "Must be None."]], "randomgen.rdrand.RDRAND.jumped": [[102, 2, 2, 0, "iter", "This parameter is ignored"]], "randomgen.rdrand.RDRAND.random_raw": [[103, 2, 2, 0, "output", "Output values."], [103, 2, 2, 0, "size", "Output shape."]], "randomgen.rdrand.RDRAND.seed": [[104, 2, 2, 0, "seed", "Must be None."]], "randomgen.romu": [[187, 1, 1, 0, "Romu", "Mark A. Overton's quad and trio rotate-multiply-based generators"]], "randomgen.romu.Romu": [[107, 4, 1, 0, "cffi", "CFFI interface"], [108, 4, 1, 0, "ctypes", "ctypes interface"], [109, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [110, 3, 1, 0, "seed", "Seed the generator"], [111, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.romu.Romu.__init__": [[187, 2, 2, 0, "seed", "A seed to initialize the BitGenerator."], [187, 2, 2, 0, "variant", "The variant to use."]], "randomgen.romu.Romu.random_raw": [[109, 2, 2, 0, "output", "Output values."], [109, 2, 2, 0, "size", "Output shape."]], "randomgen.romu.Romu.seed": [[110, 2, 2, "randomgen.romu.Romu.seed", "seed", "Seed the generator"]], "randomgen.sfc": [[188, 1, 1, 0, "SFC64", "Chris Doty-Humphrey's Small Fast Chaotic PRNG with optional Weyl Sequence"]], "randomgen.sfc.SFC64": [[112, 4, 1, 0, "cffi", "CFFI interface"], [113, 4, 1, 0, "ctypes", "ctypes interface"], [114, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [115, 3, 1, 0, "seed", "Seed the generator"], [116, 4, 1, 0, "state", "Get or set the PRNG state"], [117, 3, 1, 0, "weyl_increments", "Generate distinct Weyl increments to construct multiple streams"]], "randomgen.sfc.SFC64.__init__": [[188, 2, 2, 0, "k", "The increment to the Weyl sequence."], [188, 2, 2, 0, "mode", "The default uses a seed sequence to initialize all unspecified values. When using \"numpy\" uses the seed sequence to initialize three values and checks that both w and k are 1."], [188, 2, 2, 0, "seed", "A seed to initialize the BitGenerator."], [188, 2, 2, 0, "w", "The starting value of the Weyl sequence."]], "randomgen.sfc.SFC64.random_raw": [[114, 2, 2, 0, "output", "Output values."], [114, 2, 2, 0, "size", "Output shape."]], "randomgen.sfc.SFC64.seed": [[115, 2, 2, "randomgen.sfc.SFC64.seed", "seed", "Seed the generator"]], "randomgen.sfc.SFC64.weyl_increments": [[117, 2, 2, 0, "max_bits", "Maximum number of non-zero bits in the values returned."], [117, 2, 2, 0, "min_bits", "The minimum number of non-zero bits in the values returned."], [117, 2, 2, 0, "n", "Number of distinct values to generate."]], "randomgen.sfmt": [[189, 1, 1, 0, "SFMT", "Container for the SIMD-based Mersenne Twister pseudo RNG."]], "randomgen.sfmt.SFMT": [[118, 4, 1, 0, "cffi", "CFFI interface"], [119, 4, 1, 0, "ctypes", "ctypes interface"], [120, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated."], [121, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [189, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [122, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [123, 3, 1, 0, "seed", "Seed the generator"], [189, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [124, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.sfmt.SFMT.__init__": [[189, 2, 2, 0, "seed", "Entropy used to initialize the pseudo-random number generator."]], "randomgen.sfmt.SFMT.jump": [[120, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator."]], "randomgen.sfmt.SFMT.jumped": [[121, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.sfmt.SFMT.random_raw": [[122, 2, 2, 0, "output", "Output values."], [122, 2, 2, 0, "size", "Output shape."]], "randomgen.sfmt.SFMT.seed": [[123, 2, 2, 0, "seed", "Entropy used to initialize the pseudo-random number generator."]], "randomgen.speck128": [[190, 1, 1, 0, "SPECK128", "Container for the SPECK (128 x 256) pseudo-random number generator."]], "randomgen.speck128.SPECK128": [[125, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [126, 4, 1, 0, "cffi", "CFFI interface"], [127, 4, 1, 0, "ctypes", "ctypes interface"], [128, 3, 1, 0, "jump", "Jumps the state as-if iter * 2**64 random numbers are generated"], [129, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [190, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [130, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [131, 3, 1, 0, "seed", "Seed the generator"], [190, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [132, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.speck128.SPECK128.__init__": [[190, 2, 2, 0, "counter", "Counter to use in the SPECK128 state."], [190, 2, 2, 0, "key", "Key to use in the SPECK128 state."], [190, 2, 2, 0, "rounds", "Number of rounds of the SPECK algorithm to run."], [190, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**256), a SeedSequence instance or None (the default)."]], "randomgen.speck128.SPECK128.advance": [[125, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.speck128.SPECK128.jump": [[128, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.speck128.SPECK128.jumped": [[129, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.speck128.SPECK128.random_raw": [[130, 2, 2, 0, "output", "Output values."], [130, 2, 2, 0, "size", "Output shape."]], "randomgen.speck128.SPECK128.seed": [[131, 2, 2, 0, "counter", "Integer in [0,2**128) containing the counter position or a 2-element array of uint64 containing the counter"], [131, 2, 2, 0, "key", "Integer in [0,2**256) containing the key or a 4-element array of uint64 containing the key"], [131, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**256), a SeedSequence instance or None (the default)."]], "randomgen.threefry": [[191, 1, 1, 0, "ThreeFry", "Container for the ThreeFry family of pseudo-random number generators."]], "randomgen.threefry.ThreeFry": [[133, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [134, 4, 1, 0, "cffi", "CFFI interface"], [135, 4, 1, 0, "ctypes", "ctypes interface"], [136, 3, 1, 0, "jump", "Jumps the state as-if 2**(W*N/2) random numbers have been generated."], [137, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [191, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [138, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [139, 3, 1, 0, "seed", "Seed the generator"], [191, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [140, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.threefry.ThreeFry.__init__": [[191, 2, 2, 0, "counter", "Counter to use in the ThreeFry state."], [191, 2, 2, 0, "key", "Key to use in the ThreeFry state."], [191, 2, 2, 0, "number", "Number of values to produce in a single call."], [191, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, data will be read from /dev/urandom (or the Windows analog) if available."], [191, 2, 2, 0, "width", "Bit width the values produced."]], "randomgen.threefry.ThreeFry.advance": [[133, 2, 2, 0, "counter", "Flag indicating whether the advance the counter only or both the counter and the buffer position."], [133, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.threefry.ThreeFry.jump": [[136, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.threefry.ThreeFry.jumped": [[137, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.threefry.ThreeFry.random_raw": [[138, 2, 2, 0, "output", "Output values."], [138, 2, 2, 0, "size", "Output shape."]], "randomgen.threefry.ThreeFry.seed": [[139, 2, 2, 0, "counter", "Counter to use in the ThreeFry state."], [139, 2, 2, 0, "key", "Key to use in the ThreeFry state."], [139, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, data will be read from /dev/urandom (or the Windows analog) if available."]], "randomgen.wrapper": [[192, 1, 1, 0, "UserBitGenerator", "Construct a bit generator from  Python functions"]], "randomgen.wrapper.UserBitGenerator": [[141, 4, 1, 0, "cffi", "CFFI interface"], [142, 4, 1, 0, "ctypes", "ctypes interface"], [143, 3, 1, 0, "from_cfunc", "state_getter=None, state_setter=None)"], [144, 3, 1, 0, "from_ctypes", "state_getter=None, state_setter=None)"], [145, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [146, 4, 1, 0, "state", "Get or set the state"]], "randomgen.wrapper.UserBitGenerator.__init__": [[192, 2, 2, 0, "bits", "The number of bits output by the next_raw callable."], [192, 2, 2, 0, "next_32", "A callable with the same signature as as next_raw that always return 32 bits."], [192, 2, 2, 0, "next_64", "A callable with the same signature as as next_raw that always return 64 bits."], [192, 2, 2, 0, "next_double", "A callable with the same signature as as next_raw that always return a random double in [0,1)."], [192, 2, 2, 0, "next_raw", "A callable that returns either 64 or 32 random bits."], [192, 2, 2, 0, "state", "A ctypes pointer to pass into the next functions."], [192, 2, 2, 0, "state_getter", "A callable that returns the state of the bit generator."], [192, 2, 2, 0, "state_setter", "A callable that sets the state of the bit generator."]], "randomgen.wrapper.UserBitGenerator.from_cfunc": [[143, 2, 2, 0, "next_32", "A numba callback with a signature uint32(void) the return the next 32 bits from the underlying PRNG."], [143, 2, 2, 0, "next_64", "A numba callback with a signature uint64(void) the return the next 64 bits from the underlying PRNG."], [143, 2, 2, 0, "next_double", "A numba callback with a signature uint32(void) the return the next double in [0,1) from the underlying PRNG."], [143, 2, 2, 0, "next_raw", "A numba callback with a signature uint64(void) the return the next raw value from the underlying PRNG."], [143, 2, 2, 0, "state", "A void pointer to the state."], [143, 2, 2, 0, "state_getter", "A callable that returns the state of the bit generator."], [143, 2, 2, 0, "state_setter", "A callable that sets the state of the bit generator."]], "randomgen.wrapper.UserBitGenerator.from_ctypes": [[144, 2, 2, 0, "next_32", "A CFunctionType returning ctypes.c_uint64 and taking one ctypes.c_void_p input that returns the next 32 bits from the underlying PRNG."], [144, 2, 2, 0, "next_64", "A CFunctionType returning ctypes.c_uint64 and taking one ctypes.c_void_p input that returns the next 64 bits from the underlying PRNG."], [144, 2, 2, 0, "next_double", "A CFunctionType returning ctypes.c_uint64 and taking one ctypes.c_void_p input that returns the next double in [0,1) value from the underlying PRNG."], [144, 2, 2, 0, "next_raw", "A CFunctionType returning ctypes.c_uint64 and taking one ctypes.c_void_p input that returns the next raw value from the underlying PRNG."], [144, 2, 2, 0, "state", "A void pointer to the state."], [144, 2, 2, 0, "state_getter", "A callable that returns the state of the bit generator."], [144, 2, 2, 0, "state_setter", "A callable that sets the state of the bit generator."]], "randomgen.wrapper.UserBitGenerator.random_raw": [[145, 2, 2, 0, "output", "Output values."], [145, 2, 2, 0, "size", "Output shape."]], "randomgen.xoroshiro128": [[193, 1, 1, 0, "Xoroshiro128", "Container for the xoroshiro128+/++ pseudo-random number generator."]], "randomgen.xoroshiro128.Xoroshiro128": [[147, 4, 1, 0, "cffi", "CFFI interface"], [148, 4, 1, 0, "ctypes", "ctypes interface"], [149, 3, 1, 0, "jump", "Jumps the state as-if 2**64 random numbers have been generated."], [150, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [193, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [151, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [152, 3, 1, 0, "seed", "Seed the generator"], [193, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [153, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.xoroshiro128.Xoroshiro128.__init__": [[193, 2, 2, 0, "plusplus", "Whether to use the ++ version (xoroshiro128++)."], [193, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence, or None (the default)."]], "randomgen.xoroshiro128.Xoroshiro128.jump": [[149, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.xoroshiro128.Xoroshiro128.jumped": [[150, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.xoroshiro128.Xoroshiro128.random_raw": [[151, 2, 2, 0, "output", "Output values."], [151, 2, 2, 0, "size", "Output shape."]], "randomgen.xoroshiro128.Xoroshiro128.seed": [[152, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence, or None (the default)."]], "randomgen.xorshift1024": [[194, 1, 1, 0, "Xorshift1024", "Container for the xorshift1024*\u03c6 pseudo-random number generator."]], "randomgen.xorshift1024.Xorshift1024": [[154, 4, 1, 0, "cffi", "CFFI interface"], [155, 4, 1, 0, "ctypes", "ctypes interface"], [156, 3, 1, 0, "jump", "Jumps the state as-if 2**512 random numbers have been generated"], [157, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [194, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [158, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [159, 3, 1, 0, "seed", "Seed the generator"], [194, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [160, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.xorshift1024.Xorshift1024.__init__": [[194, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.xorshift1024.Xorshift1024.jump": [[156, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.xorshift1024.Xorshift1024.jumped": [[157, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.xorshift1024.Xorshift1024.random_raw": [[158, 2, 2, 0, "output", "Output values."], [158, 2, 2, 0, "size", "Output shape."]], "randomgen.xorshift1024.Xorshift1024.seed": [[159, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]], "randomgen.xoshiro256": [[195, 1, 1, 0, "Xoshiro256", "Container for the xoshiro256** pseudo-random number generator."]], "randomgen.xoshiro256.Xoshiro256": [[161, 4, 1, 0, "cffi", "CFFI interface"], [162, 4, 1, 0, "ctypes", "ctypes interface"], [163, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated."], [164, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [195, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [165, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [166, 3, 1, 0, "seed", "Seed the generator"], [195, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [167, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.xoshiro256.Xoshiro256.__init__": [[195, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.xoshiro256.Xoshiro256.jump": [[163, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.xoshiro256.Xoshiro256.jumped": [[164, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.xoshiro256.Xoshiro256.random_raw": [[165, 2, 2, 0, "output", "Output values."], [165, 2, 2, 0, "size", "Output shape."]], "randomgen.xoshiro256.Xoshiro256.seed": [[166, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]], "randomgen.xoshiro512": [[196, 1, 1, 0, "Xoshiro512", "Container for the xoshiro512** pseudo-random number generator."]], "randomgen.xoshiro512.Xoshiro512": [[168, 4, 1, 0, "cffi", "CFFI interface"], [169, 4, 1, 0, "ctypes", "ctypes interface"], [170, 3, 1, 0, "jump", "Jumps the state as-if 2**256 random numbers have been generated."], [171, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [196, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [172, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [173, 3, 1, 0, "seed", "Seed the generator"], [196, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [174, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.xoshiro512.Xoshiro512.__init__": [[196, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.xoshiro512.Xoshiro512.jump": [[170, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.xoshiro512.Xoshiro512.jumped": [[171, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.xoshiro512.Xoshiro512.random_raw": [[172, 2, 2, 0, "output", "Output values."], [172, 2, 2, 0, "size", "Output shape."]], "randomgen.xoshiro512.Xoshiro512.seed": [[173, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:parameter", "3": "py:method", "4": "py:attribute", "5": "py:function"}, "terms": {"": [0, 1, 2, 3, 52, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 208, 213, 222, 225], "0": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 47, 54, 59, 67, 74, 82, 90, 92, 98, 106, 117, 123, 131, 133, 139, 143, 144, 152, 159, 166, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 208, 209, 210, 211, 216, 217, 218, 219, 220, 221, 222, 224], "000": [198, 202, 222], "01": [1, 179], "01769784": 197, "04674949j": 209, "04682163j": 209, "04913229": 209, "06687298j": 209, "06912343j": 209, "08": 198, "09": 179, "0930": 194, "0j": 209, "0x0e": 198, "0x1": 198, "0x11": 198, "0x14": 198, "0x1da942042e4dd58b5": 178, "0x3f": 198, "0x5e": 198, "0x77": 198, "0x94d049bb133111eb": 178, "0xb7": 198, "0xbf58476d1ce4e5b9": 178, "0xd1": 198, "0xdead10cc": 178, "0xf1ea5e": 198, "0xff37f1f758180525": 178, "0xffffffff": 198, "0xffffffffffffffff": 198, "1": [0, 1, 2, 3, 7, 8, 15, 16, 22, 23, 25, 44, 45, 51, 52, 54, 59, 64, 65, 67, 72, 79, 80, 87, 88, 92, 95, 96, 102, 117, 120, 121, 123, 128, 129, 133, 136, 137, 143, 144, 149, 150, 156, 157, 163, 164, 170, 171, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 202, 203, 208, 209, 210, 211, 212, 215, 217, 218, 219, 221, 222, 225], "10": [0, 1, 2, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 197, 198, 202, 219, 220, 222, 224], "100": [186, 198, 210, 219, 222], "1000": [117, 198, 208, 221], "1000000": [198, 202], "10000000": 219, "1000x": [197, 198], "101": 222, "102": 222, "1024": [3, 175, 193, 194, 195, 196, 221], "104": 222, "105": 222, "108": 222, "109": 222, "10941": 223, "11": [0, 197, 198, 222], "110": 222, "111": 222, "112": 222, "114": 222, "11400714819323198486": [64, 65], "11659149": 211, "1167245051188668936": 198, "117": 222, "11749869230777074271": 198, "118": 222, "119": 222, "12": [1, 190, 198, 222], "120": 222, "121": 222, "12103276313412614439": 198, "122": [198, 222], "123": [0, 1, 3, 175, 177, 179, 185, 186, 190, 191, 193, 194, 195, 196], "1234": [0, 1, 3, 175, 177, 179, 182, 183, 184, 185, 190, 191, 193, 194, 195, 196], "12345": 217, "124": 222, "126": 222, "127": 222, "12712143389959007425": 198, "128": [0, 1, 2, 10, 18, 22, 23, 35, 44, 45, 51, 52, 72, 74, 79, 80, 82, 88, 90, 98, 120, 121, 131, 139, 163, 164, 176, 179, 180, 183, 184, 189, 190, 193, 195, 196, 197, 198, 217, 221, 222, 224, 225], "12803009197309261862": 187, "128bit": 0, "128gb": 225, "129": [0, 190, 222], "13": [177, 197, 198, 222, 223, 225], "130": 222, "13020151409549081939": 188, "131": 222, "132": [185, 191], "13259944246262022926": 198, "133411349017971402732463711865589153492": 198, "134": 222, "135": 222, "136": 222, "138": 222, "139": 222, "13933250373249421220": 188, "13952735719045862400": 198, "14": [179, 194, 198, 222], "140": 186, "1402": 194, "1403": 194, "14241860431798867506": 198, "143": 222, "14412717025735663865": 192, "145": 222, "14501513697102443756": 198, "147": 222, "149": 222, "15": [190, 198, 217, 222, 225], "15002187965291974971": 198, "15184288j": 209, "152": 222, "154": 222, "155": 222, "156": 222, "15715724510248929625": 198, "15750249268501108917": 178, "15780814468893899944": 198, "158": 222, "16": [1, 3, 4, 12, 61, 69, 76, 84, 92, 125, 133, 175, 178, 184, 194, 217, 221, 222, 225], "160": 222, "162": 222, "163": 222, "16313": [178, 184], "164": 222, "16430795192718506": 198, "165": 222, "1654503": 211, "167": 222, "168": 222, "17": [0, 1, 92, 133, 177, 185, 190, 191, 217, 218, 219, 222], "170": 222, "171": 219, "17190901158427765818": 198, "172": 222, "17233599j": 209, "17318243661941184039": 192, "174": 222, "17400468283504521969": 198, "175": 222, "176": 222, "177": 222, "178": 222, "17987378307908897868": 198, "18": [217, 222], "18011468": 209, "18034113569054765009": 198, "1805": 223, "181": 222, "182": 222, "183": 222, "18366146": 209, "184": 222, "18419364": 209, "185": 222, "186": 222, "1866397": 209, "189": 222, "19": [198, 217, 222, 225], "190": 222, "192": [187, 222], "193": 222, "195": [222, 225], "196": [185, 191, 222, 225], "1966": [212, 215], "197": 222, "19754723j": 209, "198": 222, "199": [212, 215, 222], "1991": 210, "19937": 221, "1994": [212, 215], "1997": [212, 215], "1998": 181, "1999": 178, "1e": [209, 210], "1ghz": 222, "1j": 209, "1tb": 197, "2": [0, 1, 2, 3, 7, 8, 10, 15, 16, 18, 22, 23, 25, 30, 35, 40, 44, 45, 47, 51, 52, 54, 59, 64, 65, 67, 72, 74, 79, 80, 82, 88, 90, 92, 95, 96, 98, 117, 120, 121, 123, 128, 129, 131, 133, 136, 137, 139, 149, 150, 152, 156, 157, 159, 163, 164, 166, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 198, 200, 202, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 225], "20": [1, 52, 180, 198, 217, 222, 225], "2000": [179, 181], "2001": 210, "2003": [179, 194], "2006": [2, 189], "2008": [1, 2, 52, 175, 180, 189], "2009": 177, "2011": [179, 185, 191], "2012": 186, "2014": 194, "2015": [186, 208, 209], "2018": 223, "2019": [0, 179, 190], "202": 222, "2020": [3, 52, 178, 179, 184, 186, 187], "20210501": 197, "203": [201, 212, 215], "205": 222, "206": 222, "208": [219, 222], "2080": 117, "21": [179, 198, 222, 225], "210": 222, "210306068529402873165736369884012333108": 79, "212": 222, "213": 222, "215": 222, "2156737186088199787": 187, "217": 222, "219": 222, "22": [0, 3, 212, 215, 222], "225": 178, "227": 222, "228": 222, "229": 222, "23": [203, 217, 222], "23204345": 211, "234": 222, "23587346j": 209, "24": [198, 222], "242": 222, "243799254704924441050048792905230269161": 224, "244": 222, "246": 222, "249": [178, 222], "250": 222, "2549297995355413924": 198, "255": 188, "256": [1, 18, 35, 98, 131, 139, 170, 171, 175, 187, 188, 190, 195, 196, 220, 221, 224, 225], "26": [187, 217], "260": 178, "264": 222, "27": [177, 178, 222], "2701576j": 209, "271": 222, "2740075917084007745": 198, "278": 222, "279": 222, "28": [1, 179, 222], "28036548": 209, "28145563": 209, "282": 222, "283": 222, "285": 222, "2862933555777941757": 179, "287": 222, "290": [2, 180, 189], "298": [2, 180, 189], "2nd": 210, "3": [3, 52, 117, 177, 178, 179, 180, 181, 184, 185, 187, 188, 191, 194, 198, 209, 210, 211, 212, 215, 217, 219, 222, 225], "30": [178, 181, 222], "30220482": 211, "3035725": 209, "3037000493": 179, "304881062738325533": 198, "31": [178, 198, 222], "312": [59, 181], "31483301": 209, "32": [0, 1, 2, 3, 4, 5, 6, 12, 13, 14, 20, 21, 25, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 54, 56, 57, 61, 62, 63, 69, 70, 71, 76, 77, 78, 84, 85, 86, 92, 93, 94, 100, 101, 107, 108, 112, 113, 117, 118, 119, 123, 125, 126, 127, 133, 134, 135, 141, 142, 143, 144, 147, 148, 154, 155, 161, 162, 168, 169, 175, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 214, 220, 221, 222, 225], "32361134": 209, "325874985469": 188, "32699266": 209, "32777": 175, "33": [0, 1, 185, 190, 191, 222], "3315941531": 198, "3394385948627484371": 225, "34": [190, 222], "348": 181, "35": 222, "35185607": 209, "35360097j": 209, "35399562948360463058890781895381311971": 198, "356": 179, "357": 181, "36": 222, "36159505490948474": 198, "366935": 3, "37": [177, 198, 225], "37548236789240574857439075": 178, "381": 197, "3814417803339974021": 198, "382": [2, 189], "384": 2, "385": [52, 180], "39": [175, 198, 222], "390": [52, 180], "395": [212, 215], "3rd": 210, "4": [0, 1, 3, 18, 98, 131, 139, 177, 178, 179, 185, 187, 188, 190, 191, 192, 194, 195, 196, 198, 209, 217, 219, 221, 222, 224, 225], "405": [212, 215], "4141": 186, "42551611": 209, "44163456j": 209, "44740101": 209, "45": 222, "46716898": 209, "47": 175, "47026247687942121848144207491837523525": 178, "47108547995356098": 211, "48": 222, "4865540595714422341": 198, "489048146361948": 187, "4893028492374823749823": 117, "49": 222, "4976686463289251617": 198, "4986": 175, "4j": 209, "4tb": [197, 225], "5": [179, 198, 202, 208, 209, 211, 217, 219, 221, 222], "50": [175, 188, 221, 225], "5000": 210, "50539209j": 209, "51": 222, "512": [156, 157, 175, 193, 194, 195, 196, 221], "521015634160378615": 192, "5228567175856316": 219, "52338984": 211, "5264292724725465572": 198, "53": [197, 198, 221], "530704699024515781": 198, "5336551313612926520": 198, "54": 222, "54323428": 211, "55": [198, 222], "5553417437478470678": 198, "56": 222, "56994348j": 209, "57": 222, "57787275j": 209, "5897100938578919857511": 225, "59": 222, "59809459": 209, "6": [52, 179, 190, 194, 198, 210, 217, 219, 222], "602963287911976729": 198, "603484028490308141": 221, "607": [2, 189], "61": [212, 215, 222], "62": [198, 222], "622": [2, 189], "623": 181, "624": [54, 123, 180, 189], "6246": 194, "63": [117, 198, 212, 215], "64": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 20, 21, 24, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 42, 43, 46, 47, 49, 50, 53, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 77, 78, 80, 81, 82, 85, 86, 88, 89, 90, 93, 94, 97, 98, 100, 101, 107, 108, 109, 112, 113, 114, 117, 118, 119, 122, 126, 127, 128, 129, 130, 131, 134, 135, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 154, 155, 158, 159, 161, 162, 165, 166, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 182, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 214, 217, 220, 221, 222, 225], "64185732j": 209, "64gb": 225, "65": [0, 1, 185, 190, 191], "66": [219, 222], "66462037": 209, "66851489": 197, "67": 222, "68": 178, "69": 222, "7": [177, 197, 198, 200, 209, 219, 222, 225], "71": 222, "72": 222, "73": [212, 215, 222], "73939778j": 209, "74": 222, "75": 222, "75224494": 211, "755828109848996024": 198, "76": 219, "764": [2, 25], "76788821": 209, "768": [180, 189], "77": 222, "7713239619832409074": 192, "78": 222, "79": 222, "79479508": 211, "7j": 209, "8": [0, 1, 179, 181, 187, 194, 197, 198, 209, 210, 222, 224, 225], "80": 222, "8062752282355435850": 188, "81": 222, "8192": 187, "8196": [188, 221, 225], "82": 222, "83": 222, "84": 222, "84832672j": 209, "85": [219, 222], "8509285875904376097169743623867": 3, "85384162": 197, "86316980830225721106033794313786972513572058861498566720023788662568817403978": 225, "86532386": 197, "86649667": 209, "86820401": 211, "87": [212, 215], "87136372517582989555478159403783844777": 198, "87316102": 197, "88380663j": 209, "88447445j": 209, "8870424784319794977": 198, "9": [0, 1, 185, 190, 191, 198, 219, 222], "9007199254740992": 198, "91": 222, "9130649916277841551": 187, "91476019": 209, "91802901j": 209, "93": [0, 1, 190], "936j": 201, "93782402j": 209, "9405893610231781608176235507540826829": 198, "95": 222, "9596734350428388680": 198, "96": [190, 221, 222], "9710": 197, "97279918": 209, "98": 222, "99": 222, "99091858": 211, "99149989": 211, "A": [2, 3, 110, 115, 143, 144, 177, 178, 180, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 198, 199, 200, 203, 204, 209, 210, 212, 215, 220, 221, 224, 225], "As": [185, 191], "By": [178, 184, 225], "For": [4, 10, 12, 18, 47, 61, 67, 69, 76, 84, 92, 98, 117, 125, 131, 133, 139, 159, 197, 220, 221, 222], "If": [0, 1, 2, 3, 9, 10, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 58, 59, 66, 67, 73, 74, 81, 82, 89, 90, 92, 97, 98, 103, 104, 109, 110, 114, 115, 117, 122, 123, 130, 131, 133, 138, 139, 143, 144, 145, 146, 151, 152, 158, 159, 165, 166, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 201, 208, 209, 210, 211, 212, 214, 215], "In": [0, 1, 2, 3, 4, 12, 61, 69, 76, 84, 92, 117, 125, 133, 175, 178, 180, 181, 183, 184, 186, 189, 190, 192, 193, 194, 195, 196, 197, 199, 210, 214, 215, 217, 219, 221], "It": [3, 10, 18, 30, 35, 40, 47, 67, 74, 82, 90, 98, 110, 115, 131, 139, 152, 159, 166, 173, 175, 178, 183, 186, 187, 192, 193, 195, 196, 197, 198, 200, 201, 210, 215, 217, 225], "NOT": [186, 199], "No": [52, 180, 186], "Not": [87, 104], "ON": [52, 180], "On": [186, 199, 212, 215], "One": [110, 115, 177, 185, 187, 188, 191, 211], "Such": 210, "The": [0, 1, 2, 3, 4, 8, 10, 12, 16, 18, 23, 35, 45, 47, 52, 61, 64, 65, 67, 69, 72, 74, 76, 79, 80, 82, 84, 88, 90, 92, 96, 98, 105, 117, 121, 125, 129, 131, 133, 137, 139, 150, 157, 164, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 215, 217, 219, 220, 221, 222, 224, 225], "Their": [2, 180, 189], "There": [177, 200, 221], "These": [0, 1, 2, 3, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 198, 200, 202, 210, 214, 220, 221, 225], "To": [92, 133, 186, 211, 225], "With": 186, "_": [0, 1, 2, 180, 185, 186, 189, 190, 191, 193, 194, 195, 196, 219, 221, 225], "__del__": 219, "__init__": [198, 219], "__name__": 198, "_fill": 219, "_has_uint32": 198, "_mm_paus": 186, "_next_32": 198, "_next_64": 198, "_next_doubl": 198, "_next_raw": 198, "_random_gener": 219, "_seed_sequ": [217, 224], "_state": 198, "_uinteg": 198, "ab": [194, 223], "abl": 186, "about": [175, 188, 197, 198, 200, 217, 225], "abov": 225, "abrupt": 197, "absolut": 188, "absolute_import": 197, "ac": 52, "acceler": 222, "accept": [192, 198, 220], "access": [0, 1, 2, 3, 52, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 201, 202, 214, 220], "accord": 198, "achiev": 224, "acm": [181, 185, 191], "acquir": 186, "across": [192, 197, 221, 225], "activ": 200, "actuari": [208, 209], "ad": [178, 179, 188, 197, 203, 220], "add": [178, 197, 203, 211, 217], "addit": [3, 175, 178, 179, 183, 184, 201, 217, 219, 220, 221], "addition": [183, 220, 221], "address": [5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 147, 148, 154, 155, 161, 162, 168, 169, 192, 198, 202], "advanc": [0, 1, 2, 176, 178, 179, 180, 182, 183, 184, 185, 189, 190, 191, 193, 194, 195, 196, 197, 198, 217, 219], "advanced_encryption_standard": 0, "ae": [176, 217], "aescount": [0, 1, 175, 190, 197, 200, 217, 220, 221, 222, 225], "aesni": 175, "affect": 197, "after": [103, 178, 198, 202, 219, 220], "again": [10, 18, 30, 35, 40, 47, 67, 74, 82, 90, 98, 110, 115, 131, 139, 152, 159, 166, 173], "against": 197, "agenc": 190, "ahead": [2, 52, 180, 189], "algorithm": [2, 177, 178, 180, 182, 183, 184, 187, 188, 189, 190, 199], "alia": [184, 197], "alias": 183, "align": [202, 219], "all": [0, 1, 2, 9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 106, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172, 179, 180, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 200, 202, 208, 211, 214, 215, 219, 220, 222, 224, 225], "allow": [0, 1, 2, 178, 179, 180, 185, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 202, 217, 219, 220], "along": [202, 210, 220, 221], "alongsid": 217, "alreadi": 224, "also": [2, 3, 74, 92, 110, 115, 133, 176, 177, 180, 181, 183, 186, 187, 188, 189, 194, 197, 200, 202, 217, 221, 222], "alter": 179, "altern": [0, 1, 175, 185, 190, 191, 211, 217, 222], "although": [186, 203, 222], "alwai": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 203, 210, 225], "ambigu": 197, "amd": 186, "amer": [212, 215], "among": 197, "amount": [217, 220], "an": [0, 1, 2, 3, 4, 10, 12, 18, 25, 30, 35, 40, 47, 54, 59, 61, 69, 74, 76, 82, 84, 90, 92, 98, 110, 115, 117, 123, 125, 131, 133, 139, 143, 144, 152, 159, 166, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 204, 209, 210, 215, 217, 219, 220, 221, 222, 223, 224, 225], "analog": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 54, 59, 82, 90, 98, 123, 131, 139, 152, 159, 166, 173, 175, 177, 179, 180, 181, 182, 185, 189, 190, 191, 193, 194, 195, 196, 210], "analysi": [185, 191, 212, 215], "ani": [0, 1, 2, 4, 7, 12, 15, 25, 44, 54, 59, 69, 76, 79, 84, 92, 95, 104, 123, 125, 128, 133, 136, 149, 156, 163, 170, 180, 181, 185, 186, 189, 190, 191, 198, 200, 203, 219, 221, 222, 225], "annal": [212, 215], "anon_func_st": 202, "anoth": [0, 1, 10, 18, 98, 139, 175, 185, 190, 191, 193, 194, 195, 196, 224], "api": [102, 197, 200], "appear": [179, 197], "append": [179, 219, 221, 225], "appli": [178, 197, 198, 202, 210, 215], "applic": [0, 1, 2, 102, 175, 179, 180, 182, 183, 184, 185, 186, 187, 189, 190, 191, 193, 194, 195, 196, 197, 212, 215, 217, 220, 221, 222], "appropri": [178, 204, 224], "approxim": 210, "april": 187, "ar": [0, 1, 2, 3, 4, 7, 9, 10, 12, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 58, 59, 61, 66, 67, 69, 73, 76, 81, 82, 84, 89, 90, 92, 97, 98, 103, 105, 109, 110, 114, 115, 117, 122, 123, 125, 128, 130, 131, 133, 138, 139, 145, 146, 151, 152, 158, 159, 165, 166, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 214, 215, 217, 219, 220, 221, 222, 225], "arbitrari": [0, 1, 178, 182, 183, 184, 185, 190, 191, 217, 220, 221], "arg": 219, "argument": [209, 210, 215, 219, 220, 225], "around": [202, 221], "arrai": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 47, 54, 59, 98, 117, 123, 131, 139, 152, 159, 166, 173, 175, 177, 179, 180, 181, 185, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 202, 204, 209, 211, 212, 215, 219, 220, 221], "arrang": [209, 210, 215], "array_lik": [18, 110, 115, 187, 188, 204], "articl": 186, "arxiv": 223, "asarrai": 202, "assert": 186, "assertionerror": 186, "assess": 198, "assoc": [212, 215], "associ": 215, "assum": [178, 210, 215], "assur": [197, 217], "astyp": 219, "attach": 186, "attempt": 199, "attribut": [177, 219, 225], "audit": 186, "aug": 223, "augment": [2, 189], "author": [197, 217], "auto": 199, "automat": [186, 199, 215], "avail": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 52, 54, 59, 82, 90, 98, 117, 123, 131, 139, 146, 152, 159, 166, 173, 175, 177, 178, 179, 180, 181, 182, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 197, 198, 217, 220, 224], "averag": [4, 12, 61, 69, 76, 84, 92, 125, 133, 175, 210, 221], "avoid": [197, 220], "axi": [210, 220], "b": [177, 179, 198, 211], "back": [199, 224], "backward": [92, 133, 197, 210, 218, 222, 225], "bad": 225, "base": [2, 4, 12, 61, 69, 76, 84, 92, 125, 133, 175, 178, 187, 189, 193, 197, 202, 217, 220, 221, 222], "base_gen": 225, "basic": [197, 200, 217], "basic_rng": 200, "beaulieu": 190, "becaus": [209, 210, 215], "beck": 179, "becom": [184, 197], "been": [0, 1, 2, 4, 8, 12, 15, 16, 22, 23, 44, 45, 51, 52, 61, 64, 65, 69, 72, 76, 79, 80, 84, 88, 92, 95, 96, 117, 120, 121, 125, 129, 133, 136, 137, 149, 150, 156, 157, 163, 164, 170, 171, 178, 179, 180, 185, 186, 189, 190, 191, 193, 194, 195, 196, 197, 200, 202, 203, 210, 215, 216, 217, 218, 221, 225], "befor": [0, 1, 10, 18, 98, 139, 178, 183, 185, 186, 190, 191, 197, 198, 199, 210, 215, 218, 219, 225], "began": 217, "begin": [198, 209, 225], "behav": 219, "behavior": [209, 210, 215], "being": [197, 200, 217], "bell": 210, "below": [198, 221, 222, 225], "bernstein": 1, "best": [192, 198, 221, 224, 225], "beta": [212, 215], "better": [177, 178, 179, 182, 183, 184, 217], "between": [0, 2, 4, 12, 25, 54, 59, 61, 67, 69, 76, 84, 92, 117, 123, 125, 133, 177, 180, 181, 189, 190, 197, 208, 209, 217, 220, 221], "bg": [187, 192], "big": [8, 16, 23, 45, 52, 65, 72, 80, 88, 96, 121, 129, 137, 150, 157, 164, 171, 178], "bit": [0, 1, 2, 3, 4, 5, 6, 8, 9, 12, 13, 14, 16, 17, 20, 21, 22, 23, 24, 25, 27, 28, 29, 32, 33, 34, 35, 37, 38, 39, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 65, 66, 69, 70, 71, 72, 73, 76, 77, 78, 80, 81, 82, 84, 85, 86, 88, 89, 90, 92, 93, 94, 96, 97, 100, 101, 102, 107, 108, 109, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 129, 130, 133, 134, 135, 137, 138, 141, 142, 143, 144, 145, 147, 148, 150, 151, 154, 155, 157, 158, 161, 162, 164, 165, 168, 169, 171, 172, 175, 177, 179, 180, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 207, 213, 214, 220, 221, 222, 224, 225], "bit_gen": [3, 117, 178, 187, 188, 198, 225], "bit_gen_st": 198, "bit_gener": [0, 1, 2, 8, 16, 23, 45, 52, 65, 72, 80, 88, 96, 102, 121, 129, 137, 150, 157, 164, 171, 180, 182, 183, 184, 185, 189, 190, 191, 193, 194, 195, 196, 198, 200, 201], "bit_generator_kwarg": 225, "bitgen": [5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 147, 148, 154, 155, 161, 162, 168, 169, 186, 200, 202], "bitgen_st": 202, "bitgen_t": [197, 202], "bitgener": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 103, 109, 110, 114, 115, 122, 130, 138, 145, 151, 158, 165, 172, 186, 187, 188, 197, 200, 204, 207, 217, 224], "bivari": [208, 209], "blackman": [193, 195, 196], "block": [175, 198, 215, 221], "blocked_rng": 221, "blogspot": 179, "bob": 177, "bool": 106, "both": [0, 1, 10, 18, 35, 74, 92, 98, 131, 133, 139, 175, 185, 188, 190, 191, 193, 197, 198, 202, 208, 222], "bound": [197, 202, 214, 220], "boundscheck": 202, "box": [202, 220], "brank": 225, "break": 197, "bret": 179, "bridg": 186, "bring": 197, "brng": [197, 200], "brng_t": 197, "broadcast": [197, 200, 208, 209, 210, 215, 220], "brook": 179, "bryan": 190, "bt": 225, "buffer": [0, 1, 92, 105, 133, 175, 190, 197], "bug": 197, "buggi": 197, "build": 197, "built": 198, "burtleburtl": 177, "byte": [197, 225], "c": [144, 177, 192, 197, 198, 200, 202, 209, 220], "c1": [210, 215], "c2": [210, 215], "c73ddb7b": 3, "c_": 210, "c_uint64": 144, "c_void_p": [144, 198], "call": [0, 1, 2, 4, 10, 12, 18, 30, 35, 40, 47, 61, 67, 69, 74, 76, 82, 84, 90, 92, 98, 106, 110, 115, 125, 131, 133, 139, 144, 146, 152, 159, 166, 173, 179, 180, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 197, 198, 202, 204, 219, 221, 224], "callabl": [143, 144, 192, 198], "callback": [143, 198], "can": [0, 1, 2, 3, 4, 10, 12, 18, 25, 30, 35, 40, 47, 54, 59, 61, 67, 69, 74, 76, 82, 84, 90, 92, 98, 102, 110, 115, 123, 125, 131, 133, 139, 152, 159, 166, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 210, 217, 219, 220, 221, 224], "cannot": [0, 1, 10, 18, 35, 98, 139, 175, 185, 186, 190, 191, 221], "canon": 197, "capabl": [203, 217], "capac": 187, "capsul": [0, 1, 2, 3, 175, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 202], "capsule_nam": 202, "captur": [0, 1, 190], "carefulli": [193, 195, 196], "carlo": [2, 189], "carrai": 198, "cascad": 222, "case": [0, 1, 2, 9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 103, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172, 175, 180, 181, 183, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 211, 212, 214, 221], "cast": [198, 202, 210, 215], "casualti": [208, 209], "caveat": 202, "cc": 209, "cdef": 202, "ceil": 219, "center": [209, 210], "cffi": [197, 202, 220], "cfunc": [178, 198], "cfunctiontyp": 144, "chacha": [175, 176, 202, 217, 220, 221, 222, 225], "chanc": 187, "chang": [92, 133, 178, 193, 198, 201, 220, 225], "chaotic": [186, 188, 220], "char": 202, "cheap": 183, "check": [183, 186, 188, 197, 202, 209, 210, 215, 225], "check_valid": [209, 210, 215], "chi": 3, "child": [3, 178, 187, 205, 221, 225], "children": [178, 221, 224], "choic": [197, 220, 222, 224], "choleski": [209, 210, 215], "choos": 197, "chose": [183, 188], "chosen": [117, 178], "chri": [3, 188], "chunk": 220, "cimport": 202, "cipher": [35, 220, 221], "circularli": 209, "circumst": [197, 219], "cj": [210, 215], "clark": 190, "class": [0, 1, 2, 3, 9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 211, 217, 219, 224, 225], "classif": 210, "classmethod": [143, 144], "clear": [179, 186, 198], "clone": [197, 198], "close": [117, 185, 191, 197, 220, 222], "closur": 198, "cm": [183, 201, 220], "cnp": 179, "code": [0, 1, 2, 3, 52, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 198, 202, 225], "coeffici": 188, "collis": 221, "com": [178, 179, 184, 186], "combin": [3, 179, 222], "come": [0, 1, 2, 179, 180, 185, 189, 190, 191, 193, 194, 195, 196], "command": [186, 199], "common": [202, 219, 225], "commonli": 225, "compar": [198, 217, 219], "compat": [0, 1, 2, 3, 92, 102, 104, 133, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 210, 218, 222, 225], "compil": [197, 198, 202, 220], "complet": [197, 198, 216, 217, 218], "complex": [200, 208, 209, 220], "complex_norm": [200, 201, 209, 220], "complex_normal_distribut": [208, 209], "complic": 202, "compon": [208, 209, 217], "comput": [4, 7, 12, 15, 44, 52, 69, 76, 79, 84, 95, 125, 128, 136, 149, 156, 163, 170, 178, 179, 180, 181, 185, 191, 209, 210, 215, 221, 222], "concern": 221, "concurr": 219, "condit": 197, "confer": [185, 191], "configur": [117, 184, 185, 217, 221], "congruenti": [179, 198, 220], "conjunct": 200, "consider": 197, "consist": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197], "const": 202, "constant": [3, 179, 197], "constraint": [179, 200], "construct": [117, 143, 144, 192, 195, 196, 225], "constructor": [204, 219], "consum": [0, 1, 2, 3, 175, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196], "consumpt": 176, "contain": [0, 1, 2, 3, 5, 6, 11, 13, 14, 19, 20, 21, 26, 27, 28, 31, 32, 33, 35, 36, 37, 38, 41, 42, 43, 48, 49, 50, 55, 56, 57, 60, 62, 63, 68, 70, 71, 75, 77, 78, 83, 85, 86, 91, 93, 94, 99, 100, 101, 105, 107, 108, 111, 112, 113, 116, 117, 118, 119, 124, 126, 127, 131, 132, 134, 135, 140, 141, 142, 147, 148, 153, 154, 155, 160, 161, 162, 167, 168, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 202, 213, 217], "content": 186, "contigu": [197, 219], "continu": [211, 220], "conveni": [204, 220], "convert": [92, 133], "coordin": 210, "copi": [197, 224], "core": [4, 12, 61, 69, 76, 84, 92, 125, 133, 186, 200, 201, 217, 219, 220, 221], "corner": 221, "corr": [194, 223], "correct": [197, 224], "correl": [178, 184, 193, 209, 221], "correspond": 183, "corrupt": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196], "could": 197, "counter": [1, 3, 10, 18, 92, 98, 131, 133, 139, 176, 188, 197, 217, 221], "coupl": 178, "cov": [209, 210, 215], "covari": [208, 209, 210, 212, 215], "cpcg": 178, "cpointer": 198, "cpu": 186, "cpu_count": 219, "cpython": 202, "cr": 1, "creat": [178, 179, 198, 205, 219, 221, 224], "creation": 219, "cryptograph": [0, 3, 175, 185, 190, 191, 199, 217, 220], "cryptographi": [217, 222], "ctype": [143, 144, 178, 192, 197, 198, 202, 220], "current": [2, 176, 180, 181, 189, 197, 202, 205], "curv": 210, "custom": 178, "customiz": 178, "cycl": [175, 179, 186, 188], "cython": [192, 197, 198, 217, 220], "d": [0, 1, 177, 179, 198, 209, 210, 211], "d0fc": 3, "d1": 215, "d2": 215, "danger": [178, 184], "daniel": 223, "data": [0, 1, 3, 10, 18, 30, 35, 40, 82, 90, 98, 131, 139, 152, 159, 166, 173, 175, 177, 179, 182, 185, 190, 191, 193, 194, 195, 196, 202, 210, 225], "data_a": 198, "david": [179, 185, 191, 193, 195, 196], "decemb": 179, "decis": 200, "decomposit": [209, 210, 215], "decor": 198, "deem": 217, "def": [178, 192, 198, 202, 219], "default": [0, 1, 2, 3, 9, 10, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 58, 59, 66, 73, 74, 81, 82, 89, 90, 92, 97, 98, 103, 109, 114, 117, 122, 123, 130, 131, 133, 138, 139, 145, 151, 152, 158, 159, 165, 166, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 201, 208, 209, 210, 211, 212, 214, 215, 220, 221, 224, 225], "default_rng": 225, "defin": [177, 178, 197, 217], "definit": [208, 209, 210], "degre": [212, 215], "delta": [4, 12, 61, 69, 76, 84, 92, 125, 133], "delta_new": [92, 133], "demonstr": [192, 220], "depend": [177, 186, 188, 198, 209, 221], "deprec": [197, 200, 220], "deprecationwarn": [197, 200], "deriv": [110, 115, 179, 187, 188], "describ": [11, 19, 26, 31, 36, 41, 48, 55, 60, 68, 75, 83, 91, 99, 105, 111, 116, 124, 132, 140, 153, 160, 167, 174, 213], "design": [0, 1, 185, 186, 190, 191, 202], "desir": 211, "detail": [10, 18, 47, 67, 98, 131, 139, 159, 217], "detect": [186, 221], "determin": [185, 186, 191, 210, 211, 215], "determinist": [186, 197], "dev": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 54, 59, 82, 90, 98, 123, 131, 139, 152, 159, 166, 173, 175, 177, 179, 180, 181, 182, 185, 189, 190, 191, 193, 194, 195, 196, 198, 199, 219, 220], "develop": [175, 186], "deviat": [208, 210, 225], "df": [212, 215], "di": [179, 193, 194, 195, 196], "diag": 209, "diagon": 210, "dict": [11, 19, 26, 31, 36, 41, 48, 55, 60, 68, 75, 83, 91, 99, 105, 111, 116, 124, 132, 140, 153, 160, 167, 174, 198, 213], "dictionari": [11, 19, 26, 31, 36, 41, 48, 55, 60, 68, 75, 83, 91, 99, 105, 111, 116, 124, 132, 140, 153, 160, 167, 174, 213], "did": 197, "differ": [0, 1, 4, 12, 61, 69, 76, 84, 92, 125, 133, 178, 182, 183, 184, 185, 188, 190, 191, 195, 196, 198, 221, 224], "difficult": 221, "digit": 186, "dim": [212, 215], "dimens": [210, 212, 215], "dimension": [181, 209, 210], "direct": 220, "directli": [0, 1, 2, 3, 9, 10, 17, 18, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 98, 109, 114, 122, 130, 138, 139, 145, 151, 158, 165, 172, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 202, 212, 213, 215, 217, 219], "discuss": [3, 178], "disjoint": 52, "distinct": [0, 1, 2, 117, 175, 177, 179, 180, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 217, 222, 225], "distribut": [0, 1, 4, 12, 61, 69, 76, 84, 92, 125, 133, 190, 197, 200, 202, 203, 208, 209, 210, 211, 212, 215, 217, 219, 220, 221, 222], "distutil": 197, "divid": [64, 65, 72, 79, 80, 88], "dk": 215, "dll": [198, 202], "do": [176, 197, 219, 222], "doc": 197, "docstr": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172, 197], "document": [143, 144, 192, 197, 217], "doe": [186, 197, 198, 199, 213, 219, 221], "done": 197, "doti": [3, 188], "doubl": [0, 1, 3, 5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 143, 144, 147, 148, 154, 155, 161, 162, 168, 169, 175, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 202, 210, 215, 220], "dougla": 190, "downstream": 220, "draw": [0, 1, 4, 12, 61, 69, 76, 84, 92, 117, 125, 133, 190, 197, 204, 208, 209, 210, 212, 215, 217, 220, 221], "drawn": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 103, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172, 199, 208, 209, 210, 211, 212, 214, 221], "drng": 186, "dror": [185, 191], "dsfmt": [176, 197, 217, 220, 221, 222, 225], "dsfmt\u2074": 225, "dtype": [192, 197, 198, 204, 211, 220, 221], "duda": 210, "due": [219, 225], "dure": 186, "dxsm": [176, 178, 183, 197, 201, 217, 220, 222, 225], "dxsm_mult": 178, "dxsm_multipli": 178, "d\u0131az": [212, 215], "e": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 103, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172, 176, 177, 178, 182, 183, 184, 185, 186, 188, 191, 198, 199, 200, 208, 209, 210, 211, 212, 214, 218, 220, 224], "each": [0, 1, 2, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 193, 194, 195, 196, 198, 204, 209, 210, 212, 215, 219, 225], "easi": [185, 191], "ecrypt": 175, "ecuy": [2, 52, 178, 180, 189], "ed": 210, "edg": 197, "edu": 175, "effect": [199, 214], "effici": [2, 52, 176, 178, 180, 182, 183, 184, 189], "efiix64": [3, 176, 197, 217, 222, 225], "efiix64x384": 3, "eg": [197, 201, 209], "eigen": [209, 210, 215], "eigenvalu": 215, "eigh": [209, 210, 215], "either": [0, 1, 2, 10, 18, 98, 117, 139, 175, 177, 180, 181, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 202, 204, 214, 220, 225], "element": [0, 1, 2, 3, 10, 18, 92, 98, 131, 133, 139, 175, 177, 179, 180, 181, 185, 189, 190, 191, 193, 194, 195, 196, 210], "elif": 225, "els": [82, 90, 198, 225], "empti": [197, 202, 219], "en": [0, 186, 208, 209], "enabl": [217, 221], "encod": [185, 191, 221], "encount": 197, "encrypt": [0, 175, 190], "end": [177, 209], "endpoint": 220, "enhanc": [179, 197], "enough": 221, "ensur": [0, 1, 2, 4, 7, 12, 15, 44, 69, 76, 79, 84, 95, 106, 125, 128, 136, 149, 156, 163, 170, 179, 180, 185, 186, 189, 190, 191, 193, 194, 195, 196, 198, 221, 225], "entri": 210, "entropi": [0, 1, 2, 30, 47, 67, 74, 82, 90, 110, 115, 123, 131, 139, 152, 159, 166, 173, 178, 179, 180, 182, 183, 184, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 217, 221, 224, 225], "equal": [210, 222], "equidistribut": 181, "erg": 210, "erron": 197, "error": 186, "escap": 225, "especi": 187, "essenti": 221, "estream": 175, "eu": 175, "eugen": 179, "even": [1, 105, 179, 185, 188, 191, 219], "ever": 186, "everi": [185, 191], "evolut": 217, "evolv": 198, "exact": [4, 7, 12, 15, 44, 69, 76, 79, 84, 95, 125, 128, 136, 149, 156, 163, 170, 221], "exactli": 180, "examin": [198, 202, 225], "exampl": [0, 1, 3, 4, 12, 61, 69, 76, 84, 92, 117, 125, 133, 143, 144, 175, 177, 178, 179, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 208, 209, 210, 211, 215, 219, 220, 221], "exce": 186, "excel": [195, 196, 222], "except": [183, 186, 197, 198, 200, 209, 225], "excess": 225, "exclud": 212, "execut": 186, "executor": 219, "exhaust": 197, "exist": [192, 202, 203, 219, 220], "exit": 186, "exot": 217, "expand": [186, 225], "expect": [175, 188, 212], "expens": 221, "experi": [217, 220], "experiment": [194, 217], "explor": 194, "expon": 222, "exponenti": [197, 220], "export": 202, "expos": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172, 198, 201, 214, 217, 220], "express": 204, "extend": [197, 203, 205, 217, 225], "extendedgener": [197, 200, 201, 203, 217], "extern": [178, 183, 184, 198], "extra": 225, "extrem": 187, "ey": [209, 212], "f": [198, 202, 211], "f2": [52, 180], "face": 200, "factor": [209, 210, 215], "fail": [103, 186, 197, 199, 225], "failur": [106, 186, 197, 225], "fall": [199, 208, 209, 224], "fallback": [197, 199], "fals": [92, 106, 133, 193, 198, 202, 212, 219, 225], "famili": [1, 178, 182, 183, 184, 185, 191, 222, 225], "fast": [2, 3, 175, 178, 180, 182, 183, 184, 187, 188, 192, 195, 196, 197, 198, 200, 217, 219, 220, 222, 223], "faster": [3, 185, 191, 194, 209, 210, 215, 220, 222], "fastest": [175, 197, 209, 210, 215, 222], "featur": [0, 1, 2, 3, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 197, 200], "feiveson": [212, 215], "few": [188, 197, 198, 200], "fewer": [188, 221, 225], "file": [198, 202], "fill": [105, 202, 219, 220], "filler": 197, "final": [1, 117, 179, 186, 198, 202, 210, 215, 221], "finalist": 175, "fine": [187, 204], "first": [0, 117, 179, 186, 188, 198, 202, 219, 221, 225], "five": [217, 221], "fix": [0, 1, 2, 3, 64, 79, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 220, 221], "flag": [92, 106, 133, 186, 198, 212], "flaw": 197, "float": [197, 198, 211, 215], "float128": 197, "float32": [198, 211, 220], "float64": [211, 220], "fold": 225, "folder": 202, "follow": [210, 222], "form": [221, 224, 225], "fortran": 197, "forum": [208, 209], "four": 219, "frac": 209, "fran\u00e7oi": [52, 180], "freedom": [212, 215], "frequenc": 193, "fresh": [110, 115, 187, 188], "from": [0, 1, 2, 4, 10, 12, 18, 25, 30, 35, 40, 54, 59, 61, 69, 76, 82, 84, 90, 92, 98, 110, 115, 117, 123, 125, 131, 133, 139, 143, 144, 152, 159, 166, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 201, 202, 205, 208, 209, 210, 211, 212, 215, 217, 219, 221, 222, 224, 225], "from_cfunc": 198, "full": [179, 202, 210, 218, 220, 221], "fulli": 197, "func": 184, "function": [0, 1, 2, 3, 5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 104, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 143, 144, 146, 147, 148, 154, 155, 161, 162, 168, 169, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 213, 215, 217, 220, 221], "further": 194, "futur": [176, 184, 197, 217, 219], "futurewarn": 200, "g": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 103, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172, 176, 177, 186, 198, 199, 200, 202, 208, 210, 211, 212, 214, 215, 218, 220], "g1": 209, "g2": 209, "gain": [197, 219, 224], "gamma": [197, 208, 209, 220, 222], "garc\u0131a": [212, 215], "gaussian": [208, 209, 210, 220], "gb": 225, "gb\u00b9": 225, "gen": [186, 198, 201, 222], "gener": [4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 181, 197, 198, 199, 200, 203, 220, 222, 223, 225], "generate_st": [217, 224], "genrat": 198, "geometr": [210, 222], "georg": [179, 194], "get": [11, 19, 26, 31, 36, 41, 48, 55, 60, 68, 75, 83, 91, 99, 105, 106, 111, 116, 124, 132, 140, 143, 144, 146, 153, 160, 167, 174, 176, 192, 198, 206, 207, 213, 220, 224], "getter": 198, "gil": 186, "git": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196], "github": [178, 184, 190], "give": 224, "given": [4, 9, 12, 17, 24, 29, 34, 39, 46, 53, 58, 61, 66, 69, 73, 76, 81, 84, 89, 92, 97, 103, 109, 114, 122, 125, 130, 133, 138, 145, 151, 158, 165, 172, 185, 199, 208, 209, 210, 211, 212, 214, 215, 220, 221], "gj": 209, "go": 197, "goal": [203, 217], "golden": [72, 79, 80, 88, 221], "good": [178, 182, 183, 184, 222], "gov": 179, "guarante": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 210, 225], "gui": 179, "guid": [186, 190], "gumbel": 197, "h": [212, 215], "ha": [0, 1, 52, 92, 117, 133, 178, 179, 182, 183, 184, 185, 186, 187, 188, 190, 191, 193, 194, 195, 196, 197, 200, 203, 210, 212, 215, 216, 217, 218, 219, 225], "half": [178, 197, 198, 211], "halliwel": [208, 209], "handcraft": 193, "handl": [197, 224], "happen": [106, 186], "haramoto": [2, 52, 180, 189], "hardwar": [220, 221, 222], "hart": 210, "has_uint": 198, "has_uint32": 198, "hash": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 54, 59, 82, 90, 98, 123, 131, 139, 152, 159, 166, 173, 175, 177, 178, 179, 180, 181, 182, 185, 189, 190, 191, 193, 194, 195, 196, 197, 199], "have": [0, 1, 2, 4, 8, 12, 15, 16, 22, 23, 44, 45, 51, 52, 61, 64, 65, 69, 72, 76, 79, 80, 84, 88, 92, 95, 96, 120, 121, 125, 129, 133, 136, 137, 149, 150, 156, 157, 163, 164, 170, 171, 178, 179, 180, 185, 186, 188, 189, 190, 191, 193, 194, 195, 196, 197, 199, 200, 202, 203, 209, 210, 211, 212, 215, 217, 218, 221, 222, 225], "hc": 35, "hc128": [175, 176, 217, 220, 221, 222, 225], "hc128_p3": 175, "he": 179, "heavili": 186, "held": [186, 198], "help": 220, "helper": 221, "here": [2, 189, 198], "hi": 178, "high": [1, 185, 187, 191, 197, 198, 202, 217, 220], "higher": [177, 198, 210], "hill": 210, "hiroshi": [2, 52, 180, 189], "hiroshima": 52, "hold": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196], "home": 175, "hongjun": 175, "hood": 198, "horner": 52, "how": [198, 202, 217, 221], "howev": [186, 221], "html": [1, 175, 177, 179, 186, 188], "http": [0, 1, 3, 52, 175, 177, 178, 179, 182, 183, 184, 186, 187, 188, 190, 193, 194, 195, 196, 208, 209, 223], "humphrei": [3, 188], "hypergeometr": 197, "i": [0, 1, 2, 3, 4, 7, 8, 9, 10, 12, 15, 16, 17, 18, 23, 24, 25, 29, 30, 34, 35, 39, 40, 44, 45, 46, 47, 52, 53, 54, 58, 59, 61, 64, 65, 66, 67, 69, 72, 73, 74, 76, 79, 80, 81, 82, 84, 88, 89, 90, 92, 95, 96, 97, 98, 102, 103, 104, 105, 106, 109, 110, 114, 115, 117, 121, 122, 123, 125, 128, 129, 130, 131, 133, 136, 137, 138, 139, 145, 149, 150, 151, 152, 156, 157, 158, 159, 163, 164, 165, 166, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 217, 219, 220, 221, 222, 224, 225], "id": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 54, 59, 82, 90, 98, 123, 131, 139, 152, 159, 166, 173, 175, 177, 179, 180, 181, 182, 185, 189, 190, 191, 193, 194, 195, 196, 199], "ident": [183, 198, 209, 210, 212, 217, 225], "identifi": [209, 212, 215], "idx": 192, "ignor": 102, "ii": [209, 210], "iii": 179, "ij": 210, "im": [208, 209], "imaginari": [208, 209], "immateri": 197, "immedi": 225, "impact": 200, "implement": [2, 52, 87, 177, 178, 182, 183, 184, 186, 188, 189, 190, 192, 194, 197, 198, 202, 220, 221], "implementationguide1": 190, "implemnt": 198, "impli": [208, 209], "import": [0, 1, 2, 3, 117, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 209, 210, 217, 219, 221, 224, 225], "impress": 198, "improv": [1, 179, 190, 193, 197, 217], "inbound": 197, "inc": [67, 74, 82, 90, 178, 182, 183, 184, 198], "includ": [176, 178, 197, 202, 210, 217, 220, 221, 225], "inclus": [2, 25, 54, 59, 123, 179, 180, 181, 189, 217], "incorpor": [188, 217], "incorrect": 197, "increas": [177, 197], "increment": [0, 1, 64, 67, 74, 79, 82, 90, 117, 178, 182, 183, 184, 185, 188, 190, 191, 193, 194, 195, 196, 197, 198, 205, 220, 221, 222, 225], "independ": [217, 224], "index": [175, 180, 181, 217, 221], "indic": [2, 92, 106, 133, 189, 198, 210, 212, 221, 225], "individu": 197, "ineffici": 197, "inform": [11, 19, 26, 31, 36, 41, 48, 52, 55, 60, 68, 75, 83, 91, 99, 105, 111, 116, 124, 132, 140, 153, 160, 167, 174, 180, 197, 202, 213, 217], "inher": 202, "initi": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 47, 54, 59, 67, 74, 82, 90, 98, 110, 115, 123, 131, 139, 152, 159, 166, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 221, 222, 224, 225], "inlin": 198, "inner": [212, 215], "innov": 217, "input": [0, 1, 2, 47, 143, 144, 175, 180, 181, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 209, 210, 212, 215, 217, 220, 221], "insid": 202, "inspect": 186, "instanc": [0, 1, 2, 3, 8, 10, 16, 18, 23, 25, 30, 35, 45, 47, 52, 54, 59, 65, 72, 74, 80, 82, 88, 90, 96, 98, 102, 110, 115, 121, 123, 129, 131, 137, 139, 150, 157, 159, 164, 166, 171, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 200, 201, 205, 207, 221], "instant": [198, 201], "instanti": 224, "instead": [186, 197, 210], "instruct": [103, 186, 221], "int": [0, 1, 10, 18, 98, 110, 115, 139, 178, 183, 184, 185, 187, 188, 190, 191, 192, 198, 199, 219, 220, 221], "int64": 197, "int_": 198, "integ": [0, 1, 2, 3, 4, 5, 6, 10, 12, 13, 14, 18, 20, 21, 25, 27, 28, 30, 32, 33, 35, 37, 38, 40, 42, 43, 47, 49, 50, 54, 56, 57, 59, 61, 62, 63, 67, 69, 70, 71, 74, 76, 77, 78, 82, 84, 85, 86, 90, 92, 93, 94, 98, 100, 101, 107, 108, 112, 113, 117, 118, 119, 123, 125, 126, 127, 131, 133, 134, 135, 139, 141, 142, 147, 148, 152, 154, 155, 159, 161, 162, 166, 168, 169, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 202, 214, 220, 221, 223], "integr": 197, "intel": [186, 197, 222], "interest": 203, "interfac": [5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 144, 147, 148, 154, 155, 161, 162, 168, 169, 197, 198, 202], "intern": [185, 191, 197, 224], "intertwin": 225, "interv": [197, 211, 220, 223], "intervent": 186, "intrins": 186, "intrinsicsguid": 186, "introduc": 217, "invalid": [186, 197, 202], "invert": 188, "involv": [192, 198], "io": 190, "irrespect": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172], "isinst": 198, "issu": [117, 178, 184, 186, 197, 198, 200, 225], "iter": [7, 8, 15, 16, 22, 23, 44, 45, 64, 65, 72, 79, 80, 87, 88, 95, 96, 102, 120, 121, 128, 129, 136, 137, 149, 150, 156, 157, 163, 164, 170, 171, 177, 187, 188, 202], "its": [203, 204, 210], "itself": [204, 225], "ivi": 186, "j": [1, 208, 209, 210, 212, 215], "januari": 190, "jason": 190, "java": [179, 197], "jep": 179, "jit": [198, 202], "john": [185, 191], "jour": [212, 215], "journal": [52, 179, 180, 194, 212, 215], "jp": 52, "jsf": [176, 177, 198, 217, 220, 222, 225], "jsf32": 222, "jsf_next": 198, "jsf_next_sig": 198, "jsf_state": 198, "jsf_ubg": 198, "juli": 186, "jump": [0, 1, 2, 176, 179, 180, 185, 189, 190, 191, 193, 194, 195, 196, 197, 200, 217, 219, 225], "june": [0, 3, 178, 179, 184, 187], "j\u00e1imez": [212, 215], "k": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 103, 109, 114, 117, 122, 130, 138, 145, 151, 158, 165, 172, 185, 188, 191, 198, 199, 208, 209, 210, 211, 212, 214, 215, 221, 222, 225], "kei": [0, 1, 10, 18, 35, 98, 131, 139, 175, 185, 190, 191, 197, 198, 202, 217, 222], "keystream": 175, "keyword": [197, 219, 220, 225], "known": [3, 200, 225], "l": [2, 52, 178, 180, 189, 212, 215], "lake": 222, "landingpag": 186, "laplac": 197, "larg": [117, 187, 190, 197, 219, 220, 221, 222, 225], "larger": [187, 193, 219, 224], "largest": 215, "last": [186, 188, 219], "last_bg": 219, "last_rng": 221, "later": 186, "latest": 197, "latter": 225, "lattic": 178, "lcg": [67, 74, 82, 90, 176, 179, 182, 183, 184, 197, 198, 217], "lcg128mix": [178, 184, 197, 217, 220, 221, 225], "lcg_mult": 178, "lead": [192, 197, 198, 210], "least": [188, 197], "left": [177, 209], "legaci": [197, 200, 217, 220], "legacygener": 197, "leigh": [208, 209], "lemir": [197, 220, 223], "len": 221, "length": [175, 188, 225], "less": [61, 69, 76, 84, 92, 133, 186, 209, 210, 215], "let": 202, "level": [0, 1, 2, 3, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 210, 220], "librari": 198, "like": [117, 184, 197, 199, 200, 210, 215, 217], "limit": [215, 220, 221, 225], "line": [186, 197], "linear": [2, 52, 179, 180, 189, 193, 195, 196, 198], "linux": 222, "list": [177, 178, 188, 205, 210, 217, 221, 225], "liter": 198, "littl": [198, 224], "live": 219, "llnl": 179, "lnc": 175, "lo": 178, "loc": [208, 209], "local": 221, "locat": [0, 190, 198, 210, 224], "lock": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 189, 190, 191, 193, 194, 195, 196], "log": [202, 217, 220, 224], "logist": 197, "logseri": 197, "long": [197, 202, 219, 221], "longdoubl": [197, 211], "longer": [197, 220], "look": 198, "loop": [198, 219], "loui": 190, "low": [0, 1, 2, 3, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 202, 220, 225], "lower": [35, 175, 178, 186, 198], "lxm": [176, 197, 217, 220, 221, 222, 225], "m": [9, 17, 24, 29, 34, 39, 46, 52, 53, 58, 66, 73, 81, 89, 97, 103, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172, 178, 181, 183, 184, 185, 187, 191, 198, 199, 208, 209, 210, 211, 212, 214, 215, 219], "m1": [209, 210], "m2": [209, 210], "machin": 199, "made": [4, 12, 61, 69, 76, 84, 92, 125, 133, 217, 221], "magnitud": 198, "mai": [52, 110, 115, 117, 176, 187, 188, 203, 209, 220], "main": [2, 180, 181, 189, 197, 200, 217], "maintain": [197, 200, 203], "mainten": 200, "make": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 199, 219, 225], "makoto": [2, 52, 180, 189], "manag": 198, "mani": [117, 177, 186, 197, 200, 204, 217, 221, 225], "manipul": 213, "manual": [106, 186], "manylinux": 197, "map": [185, 188, 191, 220], "mardia": [212, 215], "mark": [185, 187, 191, 225], "marsaglia": [179, 194], "mask": 220, "massiv": 186, "mat": 52, "match": [52, 180, 183, 197, 198, 211], "math": 52, "mathemat": 178, "mathrm": 209, "matplotlib": 210, "matrix": [208, 209, 210, 212, 215], "matsumoto": [2, 52, 180, 181, 189, 194], "max_bit": 117, "maximum": [117, 186, 220, 225], "mcgraw": 210, "mean": [186, 188, 198, 208, 209, 210, 219, 222], "mechan": 180, "melissa": [178, 182, 183, 184], "member": [202, 225], "memori": [5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 147, 148, 154, 155, 161, 162, 168, 169, 192, 198], "merg": [203, 217, 220], "mersenn": [197, 220, 222, 225], "method": [0, 1, 2, 4, 9, 10, 12, 17, 18, 24, 29, 30, 34, 35, 39, 40, 46, 47, 52, 53, 58, 61, 66, 67, 69, 73, 74, 76, 81, 82, 84, 89, 90, 92, 97, 98, 109, 110, 114, 115, 117, 122, 125, 130, 131, 133, 138, 139, 145, 151, 152, 158, 159, 165, 166, 172, 173, 176, 178, 179, 180, 182, 183, 184, 185, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 203, 204, 209, 210, 212, 214, 215, 217, 220, 221, 224, 225], "might": [188, 190], "migrat": 203, "min_bit": 117, "minim": 202, "minimum": [117, 188, 197], "mix": [176, 179, 183, 187, 188, 197, 217, 224], "mixer": [1, 178, 183], "mk": [209, 210], "mod": [178, 179, 183, 184], "mode": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198], "model": [181, 222], "moder": [219, 221], "modern": [217, 220], "modifi": 52, "modul": [2, 180, 181, 189, 217], "modulo": [92, 133], "modulu": 198, "mont": [2, 189], "mora": [185, 191], "more": [1, 4, 12, 61, 69, 76, 84, 92, 125, 133, 186, 192, 197, 200, 202, 217, 221], "most": [117, 186, 192, 197, 210, 214, 217, 221, 225], "move": [197, 200], "mrng": 219, "mt": [52, 225], "mt19937": [176, 197, 201, 217, 220, 221, 222, 225], "mt19937\u2074": 225, "mt64": [176, 181, 197, 217, 220, 222], "mu": 209, "much": [186, 220], "muller": [202, 220], "mult": 184, "multibuild": 197, "multidimension": [197, 220], "multinomi": [197, 220], "multinorm": 210, "multipl": [0, 1, 2, 3, 52, 117, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 197, 200, 210, 217, 219, 221, 225], "multipli": [176, 178, 183, 197, 198, 211, 217, 221], "multiprocess": 219, "multithread": [217, 220], "multithreadedrng": 219, "multivari": [209, 210, 212, 215, 220], "multivariate_complex_norm": 197, "multivariate_hypergeometr": 220, "multivariate_norm": [197, 200, 209, 220], "murmur3": [178, 179], "murmur3_mix": 178, "murmurhash3": 179, "must": [0, 1, 2, 3, 61, 69, 74, 76, 84, 92, 104, 117, 133, 143, 144, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 202, 208, 209, 210, 211, 215, 218, 221], "mutsuo": [2, 189], "n": [0, 9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 92, 95, 97, 103, 109, 114, 117, 122, 130, 133, 136, 138, 145, 151, 158, 165, 172, 178, 183, 184, 185, 191, 198, 199, 202, 208, 209, 210, 211, 212, 214, 215, 219, 220, 222, 224], "n_children": 205, "n_children_spawn": 224, "n_word": 204, "name": [5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 147, 148, 154, 155, 161, 162, 168, 169, 178, 183, 185, 191, 197, 198, 200, 211], "namedtupl": [5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 147, 148, 154, 155, 161, 162, 168, 169], "nan": 197, "nation": 190, "nativ": 198, "natur": 225, "nb": 202, "ndarrai": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 103, 109, 114, 117, 122, 130, 138, 145, 151, 158, 165, 172, 199, 208, 209, 210, 211, 212, 214, 215], "necessari": 186, "necessarili": 192, "need": [186, 197, 198, 202, 219, 221, 222], "neg": [92, 133, 210], "neglig": 221, "neill": [178, 182, 183, 184], "net": [3, 177, 179, 188], "network": [185, 191], "never": 105, "new": [8, 16, 23, 45, 52, 65, 72, 80, 88, 96, 102, 121, 129, 137, 150, 157, 164, 171, 179, 185, 191, 197, 198, 200, 210, 221], "new_kei": 221, "newer": 222, "next": [0, 143, 144, 178, 186, 190, 192, 197, 198, 202, 222], "next_32": [143, 144, 192, 198], "next_64": [143, 144, 192, 198], "next_doubl": [5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 143, 144, 147, 148, 154, 155, 161, 162, 168, 169, 192, 198, 202], "next_gen": 221, "next_raw": [143, 144, 192, 198, 202], "next_uint32": [5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 147, 148, 154, 155, 161, 162, 168, 169, 202], "next_uint64": [5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 147, 148, 154, 155, 161, 162, 168, 169, 202], "next_valu": 198, "nextgen": 203, "nishimura": [52, 180, 181], "njsf": 198, "node4": 179, "nois": 197, "non": [0, 1, 117, 182, 183, 184, 185, 190, 191, 193, 194, 195, 196, 210, 212, 217, 224, 225], "noncryptograph": 177, "none": [0, 1, 2, 3, 9, 10, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 58, 59, 66, 67, 73, 74, 81, 82, 89, 90, 92, 97, 98, 103, 104, 109, 110, 114, 115, 117, 122, 123, 130, 131, 133, 138, 139, 143, 144, 145, 151, 152, 158, 159, 165, 166, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 201, 208, 209, 210, 211, 212, 214, 215, 219, 224, 225], "nonlinear": 187, "nonneg": 210, "nopython": 202, "normal": [197, 198, 200, 202, 208, 209, 210, 212, 215, 219, 220, 222], "normals_zig": 202, "normalsj": 202, "note": [0, 1, 2, 3, 4, 7, 9, 10, 12, 15, 17, 18, 24, 29, 34, 39, 44, 46, 52, 53, 58, 61, 64, 65, 66, 69, 72, 73, 76, 79, 80, 81, 84, 88, 89, 92, 95, 97, 98, 102, 105, 106, 109, 114, 117, 122, 125, 128, 130, 131, 133, 136, 138, 139, 143, 144, 145, 149, 151, 156, 158, 163, 165, 170, 172, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 199, 204, 208, 209, 210, 212, 213, 214, 215, 220, 221], "notebook": [192, 220], "notic": 198, "notimplementederror": [143, 144, 146, 192, 197, 198, 200], "novel": 203, "now": [198, 200], "np": [188, 192, 197, 198, 202, 204, 208, 209, 211, 219, 220, 221, 224, 225], "nsacyb": 190, "ntu": 175, "nuclear": 179, "null": 192, "num_stream": [187, 188, 221, 225], "numba": [143, 176, 178, 192, 197, 217, 220], "numbajsf": 198, "number": [0, 1, 2, 3, 4, 7, 8, 9, 10, 12, 15, 16, 17, 18, 22, 23, 24, 25, 29, 30, 34, 35, 39, 40, 44, 45, 46, 47, 51, 52, 53, 54, 58, 59, 61, 64, 65, 66, 69, 72, 73, 74, 76, 79, 80, 81, 82, 84, 88, 89, 90, 92, 95, 96, 97, 98, 109, 114, 117, 120, 121, 122, 123, 125, 128, 129, 130, 131, 133, 136, 137, 138, 139, 145, 149, 150, 151, 152, 156, 157, 158, 159, 163, 164, 165, 166, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 211, 214, 217, 219, 224, 225], "numer": [212, 215], "numpi": [0, 1, 2, 3, 117, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225], "ny": [185, 191], "nz_bit": 117, "o": [110, 115, 178, 182, 183, 184, 185, 187, 188, 191, 210], "object": [0, 1, 2, 3, 175, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 202, 219, 220, 225], "occur": [4, 12, 61, 69, 76, 84, 92, 125, 133, 186, 197, 221], "odd": [117, 178, 179, 188, 221], "odel": [212, 215], "offici": [190, 197, 198, 200], "offset": [0, 190], "onc": [106, 224], "one": [4, 12, 61, 69, 76, 84, 92, 125, 133, 144, 188, 197, 198, 202, 210, 217, 221, 222], "ones": [203, 209], "onli": [0, 1, 2, 92, 117, 133, 175, 176, 177, 179, 180, 181, 185, 186, 189, 190, 191, 193, 194, 195, 196, 197, 204, 210, 219, 224, 225], "onlin": [3, 52, 178, 179, 184, 186, 194], "opaqu": 202, "open": [3, 197, 211, 220], "openjdk": 179, "oper": [186, 197, 198, 200, 220], "option": [18, 110, 115, 178, 179, 188, 202, 217, 220], "order": 198, "org": [0, 175, 178, 182, 183, 184, 187, 188, 192, 198, 208, 209, 223, 225], "orient": [2, 210], "origin": [2, 52, 177, 179, 180, 183, 189, 193, 194, 195, 196, 197, 222], "other": [2, 25, 54, 59, 104, 123, 177, 180, 181, 186, 188, 189, 197, 202, 210, 214, 217, 220, 225], "otherwis": [208, 210, 211, 212, 215], "oubl": 198, "out": [9, 10, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 58, 59, 66, 67, 73, 81, 82, 89, 90, 97, 98, 103, 109, 110, 114, 115, 122, 123, 130, 131, 138, 139, 145, 151, 152, 158, 159, 165, 166, 172, 173, 192, 197, 198, 202, 208, 209, 210, 211, 214, 219, 220], "outcom": 198, "output": [0, 1, 2, 4, 9, 12, 17, 24, 29, 34, 39, 46, 53, 58, 61, 66, 69, 73, 76, 81, 84, 89, 92, 97, 103, 109, 114, 122, 125, 130, 133, 138, 145, 151, 158, 165, 172, 175, 176, 177, 179, 180, 181, 183, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 208, 209, 210, 211, 212, 214, 215, 217, 219, 221, 222, 225], "outsid": [92, 133], "over": [211, 220], "overal": 222, "overhead": 219, "overlap": [0, 1, 182, 183, 184, 185, 187, 190, 191, 193, 194, 195, 196, 221, 224], "overton": 187, "p": [3, 175, 177, 178, 198, 210, 212, 215], "p3cipher": 175, "pack": [209, 210, 215], "packag": 217, "page": 217, "panneton": [52, 180], "paper": 1, "papouli": 210, "parallel": [3, 102, 175, 187, 197, 220], "paramet": [0, 1, 2, 3, 4, 7, 8, 9, 10, 12, 15, 16, 17, 22, 23, 24, 25, 29, 30, 34, 35, 39, 40, 44, 45, 46, 47, 51, 52, 53, 54, 58, 59, 61, 64, 65, 66, 67, 69, 72, 73, 74, 76, 79, 80, 81, 82, 84, 88, 89, 90, 92, 95, 96, 97, 98, 102, 103, 104, 109, 114, 117, 120, 121, 122, 123, 125, 128, 129, 130, 131, 133, 136, 137, 138, 139, 143, 144, 145, 149, 150, 151, 152, 156, 157, 158, 159, 163, 164, 165, 166, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 204, 205, 208, 209, 210, 211, 212, 214, 215, 217, 224], "parameter": [177, 208, 209], "parametr": 197, "part": 220, "particular": [4, 12, 61, 69, 76, 84, 92, 125, 133, 199, 221], "particularli": 220, "pass": [3, 47, 104, 110, 115, 143, 144, 146, 186, 187, 188, 192, 198, 201, 202, 213, 217, 221, 224, 225], "path": 197, "pattern": [92, 133, 210, 221], "paus": [186, 197], "pcg": [178, 182, 183, 184, 188, 197, 198, 201, 217, 221], "pcg32": [176, 197, 217, 220, 221], "pcg4": 220, "pcg64": [67, 176, 178, 182, 184, 197, 198, 200, 201, 217, 220, 221, 222, 225], "pcg64dxsm": [184, 197, 222, 225], "pcg64dxsm\u00b2": 225, "pcg64\u2075": 225, "pcg_default_multipli": 198, "pdf": [175, 190], "peak": 210, "per": [198, 219], "percentag": 222, "perform": [1, 9, 17, 24, 29, 34, 39, 46, 52, 53, 58, 66, 73, 81, 89, 97, 103, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172, 185, 186, 190, 191, 192, 197, 202, 215, 217, 221, 225], "period": [0, 1, 64, 65, 72, 178, 182, 183, 185, 188, 190, 191, 193, 194, 195, 196, 197, 217, 219, 221], "perman": 176, "permut": [178, 197, 220], "phi": [64, 65, 72, 79, 80, 88, 197, 221], "philox": [0, 176, 190, 191, 197, 217, 220, 221, 222], "philoxnxw": 185, "philox\u2075": 225, "pickl": [197, 224], "pierr": [2, 52, 180, 189], "place": [197, 198, 200, 211], "plan": [200, 217], "platform": 186, "plot": 210, "plt": 210, "plu": [2, 180, 181, 189], "plusplu": 193, "point": [210, 215], "pointer": [0, 1, 2, 3, 5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 143, 144, 147, 148, 154, 155, 161, 162, 168, 169, 175, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 202], "polynomi": [2, 52, 180, 189], "pool": [0, 1, 199, 224], "pool_siz": 224, "popular": 210, "port": 220, "portion": 203, "posit": [0, 1, 2, 92, 131, 133, 180, 181, 185, 189, 190, 191, 208, 209, 210, 215], "possibl": [0, 1, 2, 106, 117, 180, 181, 185, 186, 189, 190, 191, 193, 194, 195, 196, 198, 200, 201, 203, 217], "post": [178, 188, 197], "pp": [2, 52, 175, 179, 180, 189, 194], "pracrand": [3, 188], "practic": [3, 117, 186, 188, 214, 224, 225], "practrand": [188, 197, 225], "pre": [4, 7, 12, 15, 44, 69, 76, 79, 84, 95, 125, 128, 136, 149, 156, 163, 170, 184, 197, 210, 215, 221], "precis": [197, 215], "precomput": 52, "predecessor": 203, "predefin": 178, "prefer": [178, 193, 197, 200, 220], "prepar": 200, "present": [200, 201, 222], "prevent": 197, "previou": [197, 220], "previous": 117, "previs": 220, "primari": 201, "print": [198, 202, 219], "prng": [0, 1, 3, 7, 9, 10, 11, 15, 17, 18, 19, 22, 24, 25, 26, 29, 30, 31, 34, 35, 36, 39, 40, 41, 44, 46, 47, 48, 51, 53, 54, 55, 58, 59, 60, 66, 67, 68, 73, 75, 81, 82, 83, 89, 90, 91, 95, 97, 98, 99, 105, 109, 110, 111, 114, 115, 116, 120, 122, 123, 124, 128, 130, 131, 132, 136, 138, 139, 140, 143, 144, 145, 149, 151, 152, 153, 156, 158, 159, 160, 163, 165, 166, 167, 170, 172, 173, 174, 175, 177, 179, 182, 185, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 217, 219, 220, 222, 224], "probabl": [197, 210, 221, 224], "problem": 3, "procedur": [212, 215], "proceed": [185, 191], "process": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 54, 59, 82, 90, 98, 123, 131, 139, 152, 159, 166, 173, 175, 177, 179, 180, 181, 182, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 199, 210, 221], "processor": 186, "produc": [0, 1, 2, 3, 5, 6, 9, 13, 14, 17, 20, 21, 24, 27, 28, 29, 32, 33, 34, 37, 38, 39, 42, 43, 46, 47, 49, 50, 52, 53, 56, 57, 58, 62, 63, 66, 70, 71, 73, 77, 78, 81, 85, 86, 89, 93, 94, 97, 100, 101, 107, 108, 109, 112, 113, 114, 117, 118, 119, 122, 126, 127, 130, 134, 135, 138, 141, 142, 145, 147, 148, 151, 154, 155, 158, 161, 162, 165, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 202, 209, 214, 217, 219, 220, 221, 222, 225], "product": [208, 212, 215], "project": [203, 217, 220], "proof": 197, "propag": 186, "proper": 210, "properli": 204, "properti": [1, 143, 144, 178, 183, 184, 186, 192, 198, 210, 220], "propos": [179, 197], "prototyp": 202, "provid": [0, 1, 2, 3, 10, 18, 74, 98, 102, 105, 139, 143, 144, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 209, 211, 220], "pseudo": [0, 1, 2, 3, 9, 10, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 58, 59, 66, 73, 74, 81, 82, 89, 90, 97, 98, 109, 114, 122, 123, 130, 131, 138, 139, 145, 151, 152, 158, 159, 165, 166, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 191, 193, 194, 195, 196, 198, 200, 212, 214, 215, 217, 221], "pseudorandom": [2, 52, 189], "pull": [110, 115, 187, 188, 197, 203], "pure": [198, 202], "put": 203, "py_ssize_t": 202, "pycapsul": [186, 202], "pycapsule_getpoint": 202, "pycapsule_isvalid": 202, "pyerr_occur": 186, "pyplot": 210, "python": [0, 1, 2, 3, 10, 18, 98, 139, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 217, 219, 220], "python_pcg": 198, "pythonpcg64": 198, "pyx": [198, 202], "q": [175, 177, 198], "quad": 187, "qualifi": 197, "qualiti": [3, 175, 187, 193, 195, 196, 197, 217], "quasi": [2, 189], "quickli": 186, "r": [2, 177, 179, 180, 189, 198, 210, 212, 215], "r1": 209, "r2": [202, 209], "rai": 190, "rais": [10, 18, 25, 30, 35, 40, 47, 54, 59, 67, 82, 90, 98, 103, 104, 110, 115, 123, 131, 139, 143, 144, 146, 152, 159, 166, 173, 186, 192, 197, 198, 199, 200, 202, 209], "raisinglock": 186, "rand": [177, 220], "randint": [197, 200, 220], "randn": 220, "random": [0, 1, 2, 3, 4, 7, 8, 9, 10, 12, 15, 16, 17, 18, 22, 23, 24, 25, 29, 30, 34, 35, 39, 40, 44, 45, 46, 47, 51, 52, 53, 54, 58, 59, 61, 64, 65, 66, 69, 72, 73, 74, 76, 79, 80, 81, 82, 84, 88, 89, 90, 92, 95, 96, 97, 98, 103, 109, 114, 120, 121, 122, 123, 125, 128, 129, 130, 131, 133, 136, 137, 138, 139, 143, 144, 145, 149, 150, 151, 152, 156, 157, 158, 159, 163, 164, 165, 166, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 207, 208, 209, 210, 212, 214, 215, 219, 220, 222, 223, 224, 225], "random123": [197, 217], "random_entropi": [2, 180, 189, 199, 217, 220, 221], "random_gauss_zig": 202, "random_integ": [197, 200, 220], "random_raw": [186, 187, 188, 197, 198], "random_sampl": [197, 200, 220], "random_st": 219, "random_uinteg": 197, "random_valu": 202, "randomgen": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 216, 218, 219, 220, 221, 224, 225], "randomgener": [197, 200], "randomst": [197, 200, 203, 217, 218, 222], "rang": [0, 1, 2, 10, 18, 25, 30, 35, 40, 47, 54, 59, 67, 82, 90, 92, 98, 110, 115, 123, 131, 133, 139, 152, 159, 166, 173, 175, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 198, 202, 219, 220, 221, 225], "rank": 215, "rapidli": 202, "rare": 197, "rather": [175, 183], "ratio": [72, 79, 80, 88, 221], "raw": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 109, 114, 122, 130, 138, 143, 144, 145, 151, 158, 165, 172, 198, 202, 214], "rdrand": [176, 197, 217, 220, 221, 222], "re": [10, 18, 30, 35, 40, 47, 67, 74, 82, 90, 98, 110, 115, 131, 139, 152, 159, 166, 173, 208, 209], "read": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 54, 59, 82, 90, 98, 123, 131, 139, 152, 159, 166, 173, 175, 177, 179, 180, 181, 182, 185, 189, 190, 191, 193, 194, 195, 196, 198, 199, 217], "real": [208, 209], "realist": 192, "realiz": 185, "realli": 3, "reason": [4, 12, 61, 69, 76, 84, 92, 125, 133, 219, 221, 222, 224, 225], "receiv": 200, "recent": 217, "recommend": [186, 188, 197, 217, 225], "reconstruct": 224, "recurr": [2, 180, 189], "redirect": 197, "reduc": [1, 190], "refactor": 197, "refer": [0, 1, 2, 3, 52, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 208, 209, 210, 212, 215, 217], "refil": 197, "reflect": 200, "regist": 197, "reject": [4, 12, 61, 69, 76, 84, 92, 117, 125, 133, 221], "rel": [117, 209, 222, 225], "relat": [0, 1, 10, 18, 98, 131, 139, 175, 185, 190, 191, 193, 195, 196, 208, 209], "relationship": [4, 12, 61, 69, 76, 84, 92, 125, 133, 221], "releas": [176, 197, 220], "relev": 225, "reli": [186, 197], "remain": [106, 220], "remov": [193, 197, 200, 202, 203, 216, 218], "renam": [197, 200], "repeat": [219, 221], "replac": [117, 183, 197, 200, 220], "replic": 197, "report": [186, 225], "repositori": [178, 184], "repres": [178, 182, 183, 184, 210], "represent": [10, 18, 98, 131, 139], "reproduc": [4, 7, 12, 15, 44, 69, 74, 76, 79, 84, 95, 125, 128, 136, 149, 156, 163, 170, 186, 199, 217, 219, 224], "request": [203, 204], "requir": [4, 7, 11, 12, 15, 19, 26, 31, 36, 41, 44, 48, 55, 60, 61, 68, 69, 75, 76, 79, 83, 84, 91, 92, 95, 99, 105, 111, 116, 124, 125, 128, 132, 133, 136, 140, 149, 153, 156, 160, 163, 167, 170, 174, 185, 197, 202, 213, 219, 221, 222, 225], "rescal": 212, "research": 175, "resembl": 225, "reset": [4, 7, 12, 15, 44, 69, 76, 79, 84, 92, 95, 106, 125, 128, 133, 136, 149, 156, 163, 170, 197, 221], "reshap": 221, "restor": [105, 197], "result": [186, 197, 211, 217, 221], "retain": 217, "retri": [103, 186, 197], "retriev": [0, 179, 187], "return": [4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 177, 178, 183, 192, 197, 198, 199, 200, 202, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 221], "revamp": 203, "rg": [0, 1, 3, 175, 177, 179, 182, 183, 184, 185, 186, 190, 191, 193, 194, 195, 196, 201, 217, 219, 225], "rho": 209, "right": 209, "rng": [2, 4, 7, 10, 12, 15, 18, 44, 61, 64, 69, 76, 79, 84, 92, 95, 98, 125, 128, 133, 136, 139, 149, 156, 163, 170, 178, 179, 182, 183, 184, 189, 194, 197, 198, 200, 202, 217, 221], "rng_engin": 188, "rngman": 179, "robust": [209, 210, 215], "romu": [176, 197, 217, 222, 225], "ron": [185, 191], "rot": 198, "rotat": [177, 183, 192, 193, 198, 217, 220], "rotate64": 198, "rotate64_sig": 198, "rotl": 177, "rotr_64": 198, "roughli": 210, "round": [1, 190, 222, 225], "rq": 209, "rr": [178, 183, 198], "rsa": 199, "run": [0, 1, 10, 18, 98, 139, 185, 186, 188, 190, 191, 198, 219, 222], "runtimeerror": [103, 186, 199], "runtimerror": 186, "rv": 192, "s_": [178, 183, 184, 198], "sai": 221, "said": 221, "saito": [2, 189, 194], "salmon": [185, 191], "salsa20": 1, "same": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 211, 217, 219, 221, 225], "sampl": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 103, 109, 114, 117, 122, 130, 138, 145, 151, 158, 165, 172, 197, 199, 208, 209, 210, 211, 212, 214, 215, 220, 225], "sampler": 117, "satisfi": 219, "save": 198, "sc11": [185, 191], "scalar": [199, 200, 208, 209, 211], "scale": [212, 215, 219, 222], "scheme": [185, 191], "sci": 52, "scrambl": 194, "search": 217, "sebastiano": [193, 194, 195, 196], "second": [0, 1, 178, 179, 183, 184, 185, 186, 190, 191, 221, 225], "secur": [1, 186, 190], "see": [0, 1, 9, 10, 17, 18, 24, 29, 34, 39, 46, 47, 53, 58, 66, 67, 73, 81, 89, 97, 98, 109, 114, 122, 130, 131, 138, 139, 143, 144, 145, 151, 158, 159, 165, 172, 175, 177, 178, 182, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 217, 220, 225], "seed": [176, 197, 198, 199, 204, 217, 219, 220, 221], "seed_seq": [0, 1, 2, 3, 117, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 221, 225], "seed_sequ": 224, "seed_siz": [177, 198, 225], "seedabl": 220, "seedsequ": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 47, 54, 59, 74, 82, 90, 98, 110, 115, 117, 123, 131, 139, 152, 159, 166, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 200, 217, 222, 225], "seedsequec": 224, "seedseuqnc": 184, "seen": 210, "segment": [0, 1, 2, 179, 180, 185, 189, 190, 191, 193, 194, 195, 196], "select": [177, 209, 210, 215, 220, 224], "self": [4, 7, 12, 15, 22, 44, 51, 61, 64, 69, 76, 79, 84, 92, 95, 120, 125, 128, 133, 136, 149, 156, 163, 170, 178, 184, 198, 219], "semi": [208, 209], "semidefinit": [209, 210, 215], "sens": 219, "sensit": 225, "sent": 197, "separ": 225, "septemb": 179, "seq": 205, "sequenc": [0, 1, 2, 3, 25, 52, 54, 59, 74, 123, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 217, 220, 225], "serial": 224, "servic": 199, "set": [0, 1, 3, 10, 11, 18, 19, 26, 31, 36, 41, 48, 55, 60, 68, 74, 75, 83, 91, 98, 99, 105, 106, 111, 116, 117, 124, 131, 132, 139, 140, 143, 144, 146, 153, 160, 167, 174, 175, 176, 179, 185, 186, 188, 190, 191, 192, 197, 198, 199, 202, 209, 213, 215, 220, 221, 224, 225], "seta": [2, 180, 189], "settabl": 179, "setter": 198, "setup": [197, 202], "setuptool": 197, "sfc": [188, 197], "sfc64": [176, 197, 217, 220, 221, 222, 225], "sfc64\u2075": 225, "sfmt": [176, 197, 217, 220, 221, 222, 225], "sfmt\u2074": 225, "sg": 175, "shape": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 103, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172, 197, 199, 204, 208, 209, 210, 211, 212, 214, 215], "share": [0, 1, 2, 3, 74, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 201, 225], "shaw": [185, 191], "shift": [193, 197, 217, 220], "shootout": [179, 193, 194, 195, 196], "shor": 190, "short": [186, 225], "should": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 204, 214, 216, 218, 220, 225], "show": [0, 190, 198, 202, 210, 219, 221], "shuffl": 220, "shutdown": 219, "sig": 198, "signatur": [143, 178, 192], "signature_or_funct": 198, "signific": [178, 184], "sim": 209, "simd": 197, "similar": [0, 1, 2, 3, 175, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 220], "similarli": 197, "simon": 190, "simpl": [175, 178, 179, 182, 183, 184, 193, 194, 195, 196, 197, 198, 214], "simpler": [117, 198, 220], "simplest": 202, "simpli": 225, "simplifi": 197, "simul": [4, 12, 61, 69, 76, 84, 92, 125, 133, 181, 212, 220, 221], "sinc": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 103, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172, 179, 186, 197, 198, 214, 217, 220, 221, 222, 225], "singl": [0, 1, 2, 4, 9, 12, 17, 24, 29, 34, 39, 46, 53, 58, 61, 66, 69, 73, 76, 81, 84, 89, 92, 97, 103, 109, 114, 122, 125, 130, 133, 138, 143, 144, 145, 151, 158, 165, 172, 175, 177, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 208, 209, 210, 211, 212, 214, 215, 219, 220, 221, 222, 225], "singular": [209, 210, 212, 215], "site": 186, "size": [9, 17, 24, 29, 34, 39, 40, 46, 53, 58, 61, 64, 65, 66, 69, 72, 73, 76, 79, 80, 81, 84, 88, 89, 92, 97, 103, 109, 114, 122, 130, 133, 138, 145, 151, 158, 165, 172, 177, 178, 186, 193, 195, 196, 197, 198, 199, 204, 208, 209, 210, 211, 212, 214, 215, 221, 224, 225], "skip": 197, "skylak": 186, "slow": [117, 192, 198, 217, 220], "slower": [186, 187, 198, 209, 210, 215, 222], "slowest": [209, 210, 215], "small": [0, 1, 2, 117, 180, 181, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 201, 202, 220], "smaller": [1, 182, 194, 208], "smallprng": 177, "smith": 190, "so": [0, 1, 2, 3, 4, 12, 61, 69, 76, 84, 92, 102, 117, 125, 133, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 202, 203, 208, 210, 215, 217, 219, 221, 225], "societi": [208, 209], "softwar": [175, 179, 186, 194], "some": [186, 193, 198, 201, 203, 212, 215, 217, 221, 225], "somewhat": 187, "sourc": [198, 199, 201, 220, 224], "sourceforg": [3, 188], "space": [2, 177, 178, 180, 182, 183, 184, 189, 210], "spars": 221, "spawn": [3, 178, 187, 217, 221, 222, 224, 225], "spawn_kei": [205, 224], "special": 186, "specif": [186, 197, 201, 221, 222, 225], "specifi": [197, 209, 210, 215], "speck128": [176, 190, 217, 220, 221, 222, 225], "spectral": [178, 183, 184], "spectrum": 202, "speed": [193, 197, 220], "spheric": 210, "sphinx": 197, "split": [2, 179, 180, 189, 193, 194, 195, 196], "splitmix64": [0, 1, 175, 190, 193, 194, 195, 196], "spread": 210, "springer": [2, 175, 189], "sq1": 224, "sq2": 224, "sqrt": [202, 221], "squar": [3, 210], "ss": [3, 178], "sse2": 217, "st": [198, 202], "stabil": 218, "stabl": [217, 225], "stafford": 179, "standard": [0, 1, 179, 197, 198, 202, 208, 209, 210, 212, 215, 217, 220, 225], "standard_exponenti": [197, 220], "standard_gamma": [197, 220], "standard_norm": [0, 1, 3, 175, 177, 179, 185, 186, 190, 191, 193, 194, 195, 196, 197, 198, 202, 219, 220], "standard_wishart": [197, 215], "start": [186, 188, 198], "stat": [212, 215], "state": [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 21, 22, 23, 27, 28, 32, 33, 37, 38, 42, 43, 44, 45, 47, 49, 50, 51, 52, 56, 57, 61, 62, 63, 64, 65, 69, 70, 71, 72, 76, 77, 78, 79, 80, 84, 85, 86, 88, 92, 93, 94, 95, 96, 98, 100, 101, 107, 108, 110, 112, 113, 115, 118, 119, 120, 121, 125, 126, 127, 128, 129, 133, 134, 135, 136, 137, 139, 141, 142, 143, 144, 147, 148, 149, 150, 154, 155, 156, 157, 161, 162, 163, 164, 168, 169, 170, 171, 176, 197, 198, 199, 202, 204, 211, 217, 219, 220, 225], "state_addr": 202, "state_address": [5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 147, 148, 154, 155, 161, 162, 168, 169, 198, 202], "state_gett": [143, 144, 146, 192, 198], "state_sett": [143, 144, 146, 192, 198], "stateless": [102, 186], "statist": [3, 178, 179, 182, 183, 184, 188, 190, 193, 194, 195, 196, 212, 215, 217], "statu": [106, 186], "std": [198, 219], "stdlib": [2, 180, 181, 189], "steel": 179, "stefan": 190, "step": [0, 1, 4, 12, 52, 61, 64, 65, 69, 72, 76, 79, 80, 84, 88, 92, 125, 133, 178, 182, 183, 184, 185, 190, 191, 197, 198, 217, 219, 220, 221, 222], "still": [186, 202], "stochast": 210, "storag": [185, 191], "store": [92, 133, 185, 191, 198, 221, 224], "stork": 210, "strategi": 221, "stream": [0, 1, 2, 3, 52, 117, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 217, 221, 222, 224, 225], "string": 204, "struct": [5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 147, 148, 154, 155, 161, 162, 168, 169, 198, 202], "structur": [178, 186, 197, 198, 202], "studi": 225, "subject": 221, "submit": 219, "subsequ": [195, 196, 198], "substanti": [203, 217, 219], "succe": 217, "succeed": [106, 186, 203], "success": 186, "successor": 193, "suggest": 179, "suit": 177, "suitabl": [175, 220, 221], "sum": [3, 179], "summer": [52, 180], "superior": 220, "suppli": [197, 217], "support": [0, 1, 2, 3, 175, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 200, 203, 212, 219, 220, 221], "svd": [209, 210, 215], "swap": 197, "switch": [197, 220], "symmetr": [209, 210, 215], "sync": 197, "synchron": 197, "system": [74, 177, 178, 183, 184, 197, 217, 220, 221], "t": [181, 209, 210, 215], "tabl": [3, 178, 181, 222, 225], "take": [92, 133, 143, 144, 186, 192, 198], "taken": [200, 222, 225], "takuji": [52, 180], "tb\u00b9": 225, "te": 225, "temp": 198, "templat": 225, "test": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 103, 105, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172, 176, 197, 202, 217, 218, 220], "text": 186, "tf": 225, "than": [4, 12, 61, 69, 76, 84, 92, 125, 133, 175, 183, 186, 198, 208, 209, 210, 215, 220, 221], "thei": [186, 200], "theme": 197, "theoret": 217, "theori": [212, 215], "thi": [0, 1, 2, 3, 4, 7, 9, 10, 12, 15, 17, 18, 24, 29, 30, 34, 35, 39, 40, 44, 46, 47, 53, 58, 61, 66, 67, 69, 73, 74, 76, 79, 81, 82, 84, 89, 90, 92, 95, 97, 98, 102, 105, 106, 109, 110, 114, 115, 117, 122, 125, 128, 130, 131, 133, 136, 138, 139, 144, 145, 149, 151, 152, 156, 158, 159, 163, 165, 166, 170, 172, 173, 175, 178, 179, 180, 183, 184, 186, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 209, 210, 213, 214, 215, 217, 219, 220, 221, 224, 225], "third": 224, "those": 225, "thread": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 219, 224], "threadpoolexecutor": 219, "three": [177, 188, 202, 211, 225], "threefri": [0, 176, 185, 190, 197, 200, 217, 220, 221, 222, 225], "threefrynxw": 191, "through": [0, 1, 10, 18, 98, 131, 139, 146, 185, 190, 191, 198, 202, 213], "time": [0, 1, 2, 3, 7, 8, 10, 15, 16, 18, 22, 23, 25, 30, 35, 40, 44, 45, 51, 52, 54, 59, 64, 65, 72, 79, 80, 82, 88, 90, 95, 96, 98, 102, 120, 121, 123, 128, 129, 131, 136, 137, 139, 149, 150, 152, 156, 157, 159, 163, 164, 166, 170, 171, 173, 175, 177, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 217, 219, 220, 221], "timeit": [198, 202, 219], "times2": 225, "tini": 187, "togeth": 210, "tol": [209, 210, 215], "toler": [209, 210, 215], "tolist": 221, "tomaxint": 220, "too": [3, 197, 217], "tool": 202, "trail": 212, "transact": 181, "transform": [180, 183, 185, 193, 195, 196, 198, 210, 215, 225], "translat": 198, "treat": 197, "treatman": 190, "trio": [187, 222, 225], "trivari": 209, "trivial": 213, "true": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 92, 97, 103, 106, 109, 114, 122, 130, 133, 138, 145, 151, 158, 165, 172, 178, 186, 193, 198, 202, 210, 212, 220, 224], "truncat": 214, "trust": 183, "try": [82, 90, 182], "tupl": [5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 147, 148, 154, 155, 161, 162, 168, 169, 221], "twice": [204, 210], "twister": [197, 220, 222, 225], "two": [0, 4, 10, 12, 18, 61, 69, 76, 84, 92, 98, 125, 131, 133, 139, 179, 197, 198, 208, 209, 210, 211, 215, 221, 225], "txt": 188, "type": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 202, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220], "typedef": 202, "typeerror": 104, "typic": 1, "u": [52, 186], "uhlig": [212, 215], "uint": 198, "uint32": [1, 143, 177, 198, 204, 220, 222], "uint32_t": 202, "uint64": [0, 1, 9, 10, 17, 18, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 98, 103, 109, 114, 122, 130, 131, 138, 139, 143, 145, 151, 158, 165, 172, 177, 178, 185, 190, 191, 192, 197, 198, 204, 220, 221, 222], "uint64_t": 202, "uint8": [0, 198, 221], "uinteg": [198, 200, 220], "unavail": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 54, 59, 82, 90, 98, 123, 131, 139, 152, 159, 166, 173, 175, 177, 179, 180, 181, 182, 185, 189, 190, 191, 193, 194, 195, 196], "undefin": 210, "under": [198, 219], "underli": [4, 9, 12, 17, 24, 29, 34, 39, 46, 53, 58, 61, 66, 69, 73, 76, 81, 84, 89, 92, 97, 103, 109, 114, 122, 125, 130, 133, 138, 143, 144, 145, 151, 158, 165, 172, 183, 198, 200, 214, 219, 220, 221], "understand": 198, "unif": 211, "uniform": [181, 197, 200, 202, 211, 220, 222], "uniformli": 117, "unimi": [179, 193, 194, 195, 196], "uniqu": [186, 197, 221], "univari": 210, "univers": 221, "unix": [199, 220], "unless": [106, 211, 222], "unlik": [0, 1, 10, 18, 98, 139, 185, 190, 191, 197], "unpack": 202, "unpickl": [105, 197], "unpredict": [110, 115, 187, 188], "unsid": 177, "unsign": [0, 1, 2, 3, 9, 17, 24, 25, 29, 34, 39, 46, 53, 54, 58, 59, 66, 73, 81, 89, 97, 109, 114, 122, 123, 130, 138, 145, 151, 158, 165, 172, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 202, 214, 220, 221], "unspecifi": 188, "untest": 190, "up": [186, 197, 198, 202], "updat": [3, 4, 12, 61, 69, 76, 84, 92, 125, 133, 178, 179, 184, 197, 198, 221], "upper": [35, 175, 178, 198, 215, 225], "upstream": 197, "urandom": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 54, 59, 82, 90, 98, 123, 131, 139, 152, 159, 166, 173, 175, 177, 179, 180, 181, 182, 185, 189, 190, 191, 193, 194, 195, 196, 199, 220], "us": [0, 1, 2, 3, 4, 9, 10, 12, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 52, 53, 54, 58, 59, 61, 66, 69, 73, 74, 76, 81, 82, 84, 87, 89, 90, 92, 97, 98, 102, 103, 104, 105, 109, 114, 117, 122, 123, 125, 130, 131, 133, 138, 139, 143, 144, 145, 151, 152, 158, 159, 165, 166, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 207, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 222, 225], "use_mask": 220, "user": [0, 1, 178, 186, 197, 198, 202, 217], "userbitgener": [192, 197, 198, 202, 217, 220], "usual": [1, 198, 202], "util": [186, 202], "v": [212, 215], "v1": [200, 217], "valid": [197, 198], "valu": [0, 1, 2, 3, 4, 9, 10, 12, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 58, 59, 61, 66, 67, 69, 73, 76, 81, 82, 84, 89, 90, 92, 97, 98, 103, 104, 105, 109, 110, 114, 115, 117, 122, 123, 125, 130, 131, 133, 138, 139, 143, 144, 145, 151, 152, 158, 159, 165, 166, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 208, 209, 210, 211, 212, 214, 215, 219, 220, 221, 222, 224, 225], "valueerror": [10, 18, 25, 30, 35, 40, 47, 54, 59, 67, 82, 90, 98, 110, 115, 123, 131, 139, 152, 159, 166, 173, 198, 202], "var": 202, "vari": [0, 190, 210, 221], "variabl": [61, 69, 76, 84, 92, 133, 208, 209, 210, 220], "varianc": [208, 210], "variant": [1, 183, 184, 185, 187, 190, 191, 197, 198, 201, 217, 220, 222, 225], "variat": [143, 144, 178, 183, 184, 197, 201, 202, 212, 215], "varieti": 217, "vector": [0, 1, 2, 3, 175, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196], "vendor": 224, "veri": [117, 197, 222, 224], "verifi": [52, 106], "verlag": 175, "version": [52, 185, 191, 193, 197, 198, 217, 220, 225], "via": 220, "view": [198, 221], "vigna": [193, 194, 195, 196], "virtual": 200, "void": [143, 144, 192, 198, 202], "void_p": 198, "voidp": 192, "vol": [52, 180], "w": [92, 95, 96, 133, 136, 137, 185, 188, 191, 222], "wa": [175, 186, 197, 203, 217, 220, 225], "wai": [183, 202, 217, 221, 224], "wait": [186, 219], "warm": 202, "warn": [200, 209, 210, 215, 219], "wast": 117, "we": [198, 210], "weaker": [185, 191], "weakli": 208, "week": 190, "welcom": 203, "well": [190, 219], "were": [197, 200, 217, 222, 225], "weyl": [117, 188, 197, 217, 220, 222, 225], "weyl_inc": [188, 221], "weyl_incr": [188, 197, 221], "wheel": 197, "when": [0, 1, 3, 10, 18, 47, 64, 65, 67, 72, 79, 80, 88, 92, 98, 105, 117, 131, 133, 139, 143, 144, 159, 175, 183, 185, 186, 187, 188, 190, 191, 197, 198, 209, 210, 212, 215, 219, 220, 221, 224, 225], "where": [0, 1, 92, 133, 177, 178, 179, 183, 184, 185, 186, 190, 191, 197, 198, 200, 208, 209, 210, 215, 221, 225], "whether": [92, 133, 178, 193, 212], "which": [0, 1, 2, 3, 9, 10, 17, 18, 24, 29, 34, 39, 46, 47, 53, 58, 66, 73, 74, 81, 89, 92, 97, 98, 103, 109, 114, 122, 130, 133, 138, 139, 145, 151, 158, 165, 172, 177, 178, 179, 180, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 209, 210, 211, 212, 214, 219, 220, 221, 224, 225], "while": [1, 179, 186, 192, 198, 202, 209, 210, 215, 221, 225], "wider": [217, 220], "width": [185, 191, 210], "wiki": [0, 208, 209], "wikipedia": [0, 208, 209], "wilei": 210, "window": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 54, 59, 82, 90, 98, 123, 131, 139, 152, 159, 166, 173, 175, 177, 179, 180, 181, 182, 185, 189, 190, 191, 193, 194, 195, 196, 197, 199], "winger": 190, "wire": 198, "wishart": [197, 212], "wit": 225, "within": [2, 180, 181, 189], "without": [0, 1, 2, 3, 117, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 197, 198, 221], "word": [204, 210], "work": [220, 224], "worker": [2, 179, 180, 189, 193, 194, 195, 196], "worri": 225, "would": [198, 209, 210], "wrap": [186, 192, 198, 202], "wraparound": 202, "wrapper": [5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 147, 148, 154, 155, 161, 162, 168, 169, 176, 192, 197, 198], "writabl": 219, "write": [178, 186, 202, 217, 218], "written": [3, 143, 144, 192, 193, 195, 196, 197, 220], "wrong": 197, "wu": 175, "wuhj": 175, "www": [52, 175, 178, 182, 183, 184, 186, 187, 188], "x": [177, 190, 198, 200, 202, 209, 210], "x1": 202, "x2": 202, "x_1": 210, "x_2": 210, "x_i": 210, "x_j": 210, "x_n": 210, "xl": 198, "xor": [183, 198, 217], "xoroshiro": [193, 195, 196, 217], "xoroshiro1024": 194, "xoroshiro120": 197, "xoroshiro128": [176, 194, 197, 202, 217, 220, 221], "xorshift": [179, 183, 184, 193, 194, 195, 196, 197, 217], "xorshift1024": [176, 193, 195, 196, 197, 217, 220, 221], "xorshift128": [193, 217], "xorshift256": 219, "xorshiro256": 217, "xorshiro512": 217, "xoshiro": 217, "xoshiro256": [176, 197, 217, 219, 220, 221, 222, 225], "xoshiro256starstar": 197, "xoshiro512": [176, 197, 217, 220, 221, 222, 225], "xoshiro512starstar": 197, "xsadd": [194, 217], "xsl": [178, 183, 198], "y": [177, 209, 210], "york": [185, 191, 210], "you": [186, 197, 200, 216, 218, 220, 222, 224], "your": 186, "yp": 1, "z": [178, 198, 209], "zero": [117, 198, 208, 209, 219, 221], "ziggurat": [202, 220], "zimbri": 179, "zipf": 197, "\u00b2": 225, "\u00b3": 225, "\u00b5": [198, 219], "\u00b9": 225, "\u03c6": [176, 217], "\u2074": 225, "\u2075": 225}, "titles": ["AES Counter-based RNG", "ChaCha Cipher-based RNG", "Double SIMD Mersenne Twister (dSFMT)", "Entropy From Iteration, Indirection, Xor (EFIIX)  Generator", "randomgen.aes.AESCounter.advance", "randomgen.aes.AESCounter.cffi", "randomgen.aes.AESCounter.ctypes", "randomgen.aes.AESCounter.jump", "randomgen.aes.AESCounter.jumped", "randomgen.aes.AESCounter.random_raw", "randomgen.aes.AESCounter.seed", "randomgen.aes.AESCounter.state", "randomgen.chacha.ChaCha.advance", "randomgen.chacha.ChaCha.cffi", "randomgen.chacha.ChaCha.ctypes", "randomgen.chacha.ChaCha.jump", "randomgen.chacha.ChaCha.jumped", "randomgen.chacha.ChaCha.random_raw", "randomgen.chacha.ChaCha.seed", "randomgen.chacha.ChaCha.state", "randomgen.dsfmt.DSFMT.cffi", "randomgen.dsfmt.DSFMT.ctypes", "randomgen.dsfmt.DSFMT.jump", "randomgen.dsfmt.DSFMT.jumped", "randomgen.dsfmt.DSFMT.random_raw", "randomgen.dsfmt.DSFMT.seed", "randomgen.dsfmt.DSFMT.state", "randomgen.efiix64.EFIIX64.cffi", "randomgen.efiix64.EFIIX64.ctypes", "randomgen.efiix64.EFIIX64.random_raw", "randomgen.efiix64.EFIIX64.seed", "randomgen.efiix64.EFIIX64.state", "randomgen.hc128.HC128.cffi", "randomgen.hc128.HC128.ctypes", "randomgen.hc128.HC128.random_raw", "randomgen.hc128.HC128.seed", "randomgen.hc128.HC128.state", "randomgen.jsf.JSF.cffi", "randomgen.jsf.JSF.ctypes", "randomgen.jsf.JSF.random_raw", "randomgen.jsf.JSF.seed", "randomgen.jsf.JSF.state", "randomgen.lxm.LXM.cffi", "randomgen.lxm.LXM.ctypes", "randomgen.lxm.LXM.jump", "randomgen.lxm.LXM.jumped", "randomgen.lxm.LXM.random_raw", "randomgen.lxm.LXM.seed", "randomgen.lxm.LXM.state", "randomgen.mt19937.MT19937.cffi", "randomgen.mt19937.MT19937.ctypes", "randomgen.mt19937.MT19937.jump", "randomgen.mt19937.MT19937.jumped", "randomgen.mt19937.MT19937.random_raw", "randomgen.mt19937.MT19937.seed", "randomgen.mt19937.MT19937.state", "randomgen.mt64.MT64.cffi", "randomgen.mt64.MT64.ctypes", "randomgen.mt64.MT64.random_raw", "randomgen.mt64.MT64.seed", "randomgen.mt64.MT64.state", "randomgen.pcg32.PCG32.advance", "randomgen.pcg32.PCG32.cffi", "randomgen.pcg32.PCG32.ctypes", "randomgen.pcg32.PCG32.jump", "randomgen.pcg32.PCG32.jumped", "randomgen.pcg32.PCG32.random_raw", "randomgen.pcg32.PCG32.seed", "randomgen.pcg32.PCG32.state", "randomgen.pcg64.LCG128Mix.advance", "randomgen.pcg64.LCG128Mix.cffi", "randomgen.pcg64.LCG128Mix.ctypes", "randomgen.pcg64.LCG128Mix.jumped", "randomgen.pcg64.LCG128Mix.random_raw", "randomgen.pcg64.LCG128Mix.seed", "randomgen.pcg64.LCG128Mix.state", "randomgen.pcg64.PCG64.advance", "randomgen.pcg64.PCG64.cffi", "randomgen.pcg64.PCG64.ctypes", "randomgen.pcg64.PCG64.jump", "randomgen.pcg64.PCG64.jumped", "randomgen.pcg64.PCG64.random_raw", "randomgen.pcg64.PCG64.seed", "randomgen.pcg64.PCG64.state", "randomgen.pcg64.PCG64DXSM.advance", "randomgen.pcg64.PCG64DXSM.cffi", "randomgen.pcg64.PCG64DXSM.ctypes", "randomgen.pcg64.PCG64DXSM.jump", "randomgen.pcg64.PCG64DXSM.jumped", "randomgen.pcg64.PCG64DXSM.random_raw", "randomgen.pcg64.PCG64DXSM.seed", "randomgen.pcg64.PCG64DXSM.state", "randomgen.philox.Philox.advance", "randomgen.philox.Philox.cffi", "randomgen.philox.Philox.ctypes", "randomgen.philox.Philox.jump", "randomgen.philox.Philox.jumped", "randomgen.philox.Philox.random_raw", "randomgen.philox.Philox.seed", "randomgen.philox.Philox.state", "randomgen.rdrand.RDRAND.cffi", "randomgen.rdrand.RDRAND.ctypes", "randomgen.rdrand.RDRAND.jumped", "randomgen.rdrand.RDRAND.random_raw", "randomgen.rdrand.RDRAND.seed", "randomgen.rdrand.RDRAND.state", "randomgen.rdrand.RDRAND.success", "randomgen.romu.Romu.cffi", "randomgen.romu.Romu.ctypes", "randomgen.romu.Romu.random_raw", "randomgen.romu.Romu.seed", "randomgen.romu.Romu.state", "randomgen.sfc.SFC64.cffi", "randomgen.sfc.SFC64.ctypes", "randomgen.sfc.SFC64.random_raw", "randomgen.sfc.SFC64.seed", "randomgen.sfc.SFC64.state", "randomgen.sfc.SFC64.weyl_increments", "randomgen.sfmt.SFMT.cffi", "randomgen.sfmt.SFMT.ctypes", "randomgen.sfmt.SFMT.jump", "randomgen.sfmt.SFMT.jumped", "randomgen.sfmt.SFMT.random_raw", "randomgen.sfmt.SFMT.seed", "randomgen.sfmt.SFMT.state", "randomgen.speck128.SPECK128.advance", "randomgen.speck128.SPECK128.cffi", "randomgen.speck128.SPECK128.ctypes", "randomgen.speck128.SPECK128.jump", "randomgen.speck128.SPECK128.jumped", "randomgen.speck128.SPECK128.random_raw", "randomgen.speck128.SPECK128.seed", "randomgen.speck128.SPECK128.state", "randomgen.threefry.ThreeFry.advance", "randomgen.threefry.ThreeFry.cffi", "randomgen.threefry.ThreeFry.ctypes", "randomgen.threefry.ThreeFry.jump", "randomgen.threefry.ThreeFry.jumped", "randomgen.threefry.ThreeFry.random_raw", "randomgen.threefry.ThreeFry.seed", "randomgen.threefry.ThreeFry.state", "randomgen.wrapper.UserBitGenerator.cffi", "randomgen.wrapper.UserBitGenerator.ctypes", "randomgen.wrapper.UserBitGenerator.from_cfunc", "randomgen.wrapper.UserBitGenerator.from_ctypes", "randomgen.wrapper.UserBitGenerator.random_raw", "randomgen.wrapper.UserBitGenerator.state", "randomgen.xoroshiro128.Xoroshiro128.cffi", "randomgen.xoroshiro128.Xoroshiro128.ctypes", "randomgen.xoroshiro128.Xoroshiro128.jump", "randomgen.xoroshiro128.Xoroshiro128.jumped", "randomgen.xoroshiro128.Xoroshiro128.random_raw", "randomgen.xoroshiro128.Xoroshiro128.seed", "randomgen.xoroshiro128.Xoroshiro128.state", "randomgen.xorshift1024.Xorshift1024.cffi", "randomgen.xorshift1024.Xorshift1024.ctypes", "randomgen.xorshift1024.Xorshift1024.jump", "randomgen.xorshift1024.Xorshift1024.jumped", "randomgen.xorshift1024.Xorshift1024.random_raw", "randomgen.xorshift1024.Xorshift1024.seed", "randomgen.xorshift1024.Xorshift1024.state", "randomgen.xoshiro256.Xoshiro256.cffi", "randomgen.xoshiro256.Xoshiro256.ctypes", "randomgen.xoshiro256.Xoshiro256.jump", "randomgen.xoshiro256.Xoshiro256.jumped", "randomgen.xoshiro256.Xoshiro256.random_raw", "randomgen.xoshiro256.Xoshiro256.seed", "randomgen.xoshiro256.Xoshiro256.state", "randomgen.xoshiro512.Xoshiro512.cffi", "randomgen.xoshiro512.Xoshiro512.ctypes", "randomgen.xoshiro512.Xoshiro512.jump", "randomgen.xoshiro512.Xoshiro512.jumped", "randomgen.xoshiro512.Xoshiro512.random_raw", "randomgen.xoshiro512.Xoshiro512.seed", "randomgen.xoshiro512.Xoshiro512.state", "HC-128 Cipher Generator", "Bit Generators", "Jenkins Small Fast Generator", "128-bit Linear Congruential Generator (LCG) with Output Mixing", "LXM Generator", "Mersenne Twister (MT19937)", "64-bit Mersenne Twister", "Permuted Congruential Generator (32-bit, PCG32)", "Permuted Congruential Generator (64-bit, PCG64)", "Permuted Congruential Generator 2.0 (64-bit Multiplier, DXSM Output)", "Philox Counter-based RNG", "Hardware-based Random Number Generator (RDRAND)", "Rotate-Multiply (Romu) Generators", "SFC64 Generator", "SIMD-oriented Fast Mersenne Twister (SFMT)", "SPECK Counter-based RNG", "ThreeFry Counter-based RNG", "User-defined Bit Generators", "Xoroshiro128+", "Xorshift1024*\u03c6", "Xoshiro256**", "Xoshiro512**", "Change Log", "Writing a BitGenerator", "System Entropy", "Evolution of randomgen", "Extended Generator", "Extending", "Future Plans", "randomgen._seed_sequence.SeedSequence.generate_state", "randomgen._seed_sequence.SeedSequence.spawn", "randomgen._seed_sequence.SeedSequence.state", "randomgen.generator.ExtendedGenerator.bit_generator", "randomgen.generator.ExtendedGenerator.complex_normal", "randomgen.generator.ExtendedGenerator.multivariate_complex_normal", "randomgen.generator.ExtendedGenerator.multivariate_normal", "randomgen.generator.ExtendedGenerator.random", "randomgen.generator.ExtendedGenerator.standard_wishart", "randomgen.generator.ExtendedGenerator.state", "randomgen.generator.ExtendedGenerator.uintegers", "randomgen.generator.ExtendedGenerator.wishart", "Random Generator", "RandomGen", "Legacy Random Generation", "Multithreaded Generation", "What\u2019s New or Different", "Parallel Random Number Generation", "Performance", "References", "Seed Sequences", "Quality Assurance"], "titleterms": {"": [217, 220, 221], "0": [184, 197, 225], "1": [197, 200, 220], "128": [175, 178], "15": 197, "16": [197, 200], "17": [197, 220], "18": [197, 200], "19": [197, 200], "2": [184, 197], "20": 197, "23": [197, 200], "26": 197, "3": 197, "32": 182, "4": 197, "5": 197, "6": 197, "64": [181, 183, 184], "_seed_sequ": [204, 205, 206], "addit": 225, "advanc": [4, 12, 61, 69, 76, 84, 92, 125, 133, 221], "ae": [0, 4, 5, 6, 7, 8, 9, 10, 11], "aescount": [4, 5, 6, 7, 8, 9, 10, 11], "also": [184, 201, 208, 209, 212, 215], "assur": 225, "base": [0, 1, 185, 186, 190, 191], "befor": 220, "between": 200, "bit": [176, 178, 181, 182, 183, 184, 192, 202, 217], "bit_gener": 207, "bitgener": [198, 202], "cffi": [5, 13, 20, 27, 32, 37, 42, 49, 56, 62, 70, 77, 85, 93, 100, 107, 112, 118, 126, 134, 141, 147, 154, 161, 168], "chacha": [1, 12, 13, 14, 15, 16, 17, 18, 19], "chang": [197, 200, 217], "cipher": [1, 175], "complex_norm": 208, "configur": 225, "congruenti": [178, 182, 183, 184], "core": 225, "correl": 225, "counter": [0, 185, 190, 191], "cryptograph": 221, "ctype": [6, 14, 21, 28, 33, 38, 43, 50, 57, 63, 71, 78, 86, 94, 101, 108, 113, 119, 127, 135, 142, 148, 155, 162, 169], "custom": 186, "cython": 202, "danger": [216, 217, 218], "defin": [176, 192], "differ": [217, 220], "distinct": 221, "distribut": 201, "doubl": 2, "dsfmt": [2, 20, 21, 22, 23, 24, 25, 26], "dxsm": 184, "efiix": 3, "efiix64": [27, 28, 29, 30, 31], "entropi": [3, 199], "evolut": 200, "exampl": 225, "experi": 225, "experiment": 176, "extend": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 201, 202], "extendedgener": [207, 208, 209, 210, 211, 212, 213, 214, 215], "fast": [177, 189], "featur": 217, "from": [3, 192, 220], "from_cfunc": 143, "from_ctyp": 144, "futur": 203, "gener": [0, 1, 2, 3, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 201, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221], "generate_st": 204, "hardwar": 186, "hc": 175, "hc128": [32, 33, 34, 35, 36], "histori": 217, "indic": 217, "indirect": 3, "introduct": 217, "iter": 3, "jenkin": 177, "jsf": [37, 38, 39, 40, 41], "jump": [7, 8, 15, 16, 22, 23, 44, 45, 51, 52, 64, 65, 72, 79, 80, 87, 88, 95, 96, 102, 120, 121, 128, 129, 136, 137, 149, 150, 156, 157, 163, 164, 170, 171, 221], "kei": 221, "lcg": 178, "lcg128mix": [69, 70, 71, 72, 73, 74, 75], "legaci": 218, "level": 192, "linear": 178, "lock": 186, "log": 197, "low": 192, "lxm": [42, 43, 44, 45, 46, 47, 48, 179], "manipul": 201, "mersenn": [2, 180, 181, 189], "mix": 178, "mt19937": [49, 50, 51, 52, 53, 54, 55, 180], "mt64": [56, 57, 58, 59, 60], "multipli": [184, 187], "multithread": 219, "multivariate_complex_norm": 209, "multivariate_norm": 210, "new": [202, 217, 220], "non": 221, "note": [222, 224, 225], "numba": [198, 202], "number": [186, 221], "numpi": 220, "object": 192, "orient": 189, "output": [178, 184], "parallel": [0, 1, 2, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 193, 194, 195, 196, 217, 221], "pcg32": [61, 62, 63, 64, 65, 66, 67, 68, 182], "pcg64": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 183], "pcg64dxsm": [84, 85, 86, 87, 88, 89, 90, 91], "perform": [198, 222], "permut": [182, 183, 184], "philox": [92, 93, 94, 95, 96, 97, 98, 99, 185], "plan": 203, "prng": 221, "python": [198, 202], "qualiti": 225, "random": [186, 211, 216, 217, 218, 221], "random_raw": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 103, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172], "randomgen": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 200, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217], "rdrand": [100, 101, 102, 103, 104, 105, 106, 186], "recommend": 222, "refer": 223, "remov": 217, "reproduc": 221, "rng": [0, 1, 176, 185, 190, 191], "romu": [107, 108, 109, 110, 111, 187], "rotat": 187, "see": [184, 201, 208, 209, 212, 215], "seed": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 47, 54, 59, 67, 74, 82, 90, 98, 104, 110, 115, 123, 131, 139, 152, 159, 166, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 201, 224, 225], "seedsequ": [204, 205, 206, 221, 224], "sequenc": [221, 224], "sequenti": 225, "sfc": [112, 113, 114, 115, 116, 117], "sfc64": [112, 113, 114, 115, 116, 117, 188], "sfmt": [118, 119, 120, 121, 122, 123, 124, 189], "simd": [2, 189], "small": 177, "spawn": 205, "speck": 190, "speck128": [125, 126, 127, 128, 129, 130, 131, 132], "stabl": 176, "standard_wishart": 212, "state": [0, 1, 2, 3, 11, 19, 26, 31, 36, 41, 48, 55, 60, 68, 75, 83, 91, 99, 105, 111, 116, 124, 132, 140, 146, 153, 160, 167, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 201, 206, 213, 221, 224], "success": 106, "support": 217, "system": 199, "tabl": 217, "test": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 225], "threefri": [133, 134, 135, 136, 137, 138, 139, 140, 191], "time": 222, "twister": [2, 180, 181, 189], "uinteg": 214, "us": [198, 221, 224], "user": [176, 192], "userbitgener": [141, 142, 143, 144, 145, 146], "v1": 197, "weyl": 221, "weyl_incr": 117, "what": [217, 220], "wishart": 215, "wrapper": [141, 142, 143, 144, 145, 146], "write": 198, "xor": 3, "xoroshiro128": [147, 148, 149, 150, 151, 152, 153, 193], "xorshift1024": [154, 155, 156, 157, 158, 159, 160, 194], "xoshiro256": [161, 162, 163, 164, 165, 166, 167, 195], "xoshiro512": [168, 169, 170, 171, 172, 173, 174, 196], "zero": 225, "\u03c6": 194}})