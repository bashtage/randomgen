Search.setIndex({"alltitles": {"128-bit Linear Congruential Generator (LCG) with Output Mixing": [[180, null]], "64-bit Mersenne Twister": [[183, null]], "AES Counter-based RNG": [[0, null]], "Additional Experiments": [[225, "additional-experiments"]], "Advancing the PRNG\u2019s state": [[221, "advancing-the-prng-s-state"]], "Bit Generators": [[178, null], [217, "bit-generators"]], "ChaCha Cipher-based RNG": [[1, null]], "Change Log": [[200, null]], "Changes": [[217, "changes"]], "Changes between 1.16 and 1.18": [[203, "changes-between-1-16-and-1-18"]], "Changes in 1.19": [[203, "changes-in-1-19"]], "Changes in 1.23": [[203, "changes-in-1-23"]], "Core Testing": [[225, "core-testing"]], "Correlated Seeds": [[225, "correlated-seeds"]], "Custom Lock": [[188, "custom-lock"]], "Cython": [[205, "cython"]], "Danger": [[216, null], [217, null], [218, null]], "Differences from NumPy (1.17+)": [[220, "differences-from-numpy-1-17"]], "Distinct Keys in Cryptographic Generators": [[221, "distinct-keys-in-cryptographic-generators"]], "Distributions": [[204, "distributions"]], "Double SIMD Mersenne Twister (dSFMT)": [[2, null]], "Entropy From Iteration, Indirection, Xor (EFIIX)  Generator": [[3, null]], "Evolution of randomgen": [[203, null]], "Example Configuration": [[225, "example-configuration"]], "Experimental RNGs": [[178, "experimental-rngs"]], "Extended Generator": [[204, null]], "Extending": [[0, "extending"], [1, "extending"], [2, "extending"], [3, "extending"], [177, "extending"], [179, "extending"], [180, "extending"], [181, "extending"], [182, "extending"], [183, "extending"], [184, "extending"], [185, "extending"], [186, "extending"], [187, "extending"], [188, "extending"], [189, "extending"], [190, "extending"], [191, "extending"], [192, "extending"], [193, "extending"], [194, "extending"], [195, "extending"], [196, "extending"], [197, "extending"], [198, "extending"], [199, "extending"], [205, null]], "From Low-level Objects": [[195, "from-low-level-objects"]], "Future Plans": [[206, null]], "HC-128 Cipher Generator": [[177, null]], "Hardware-based Random Number Generator (RDRAND)": [[188, null]], "History": [[217, "history"]], "Indices and tables": [[217, "indices-and-tables"]], "Introduction": [[217, "introduction"]], "Jenkins Small Fast Generator": [[179, null]], "Jumping the PRNG state": [[221, "jumping-the-prng-state"]], "LXM Generator": [[181, null]], "Legacy Random Generation": [[218, null]], "Mersenne Twister (MT19937)": [[182, null]], "Multithreaded Generation": [[219, null]], "New Bit Generators": [[205, "new-bit-generators"]], "New Features": [[217, "new-features"]], "Non-reproducible Sequences": [[221, "non-reproducible-sequences"]], "Note": [[222, null], [224, null]], "Notes": [[225, "notes"]], "Numba": [[205, "numba"]], "Parallel Generation": [[217, "parallel-generation"]], "Parallel Random Number Generation": [[221, null]], "Parallel generation": [[0, "parallel-generation"], [2, "parallel-generation"], [180, "parallel-generation"], [181, "parallel-generation"], [182, "parallel-generation"], [184, "parallel-generation"], [185, "parallel-generation"], [186, "parallel-generation"], [187, "parallel-generation"], [188, "parallel-generation"], [191, "parallel-generation"], [192, "parallel-generation"], [193, "parallel-generation"], [196, "parallel-generation"], [197, "parallel-generation"], [198, "parallel-generation"], [199, "parallel-generation"]], "Parallelization": [[190, "parallelization"]], "Performance": [[201, "Performance"], [201, "id1"], [222, null]], "Permuted Congruential Generator (32-bit, PCG32)": [[184, null]], "Permuted Congruential Generator (64-bit, PCG64)": [[185, null]], "Permuted Congruential Generator 2.0 (64-bit Multiplier, DXSM Output)": [[186, null]], "Philox Counter-based RNG": [[187, null]], "Python BitGenerators": [[205, "python-bitgenerators"]], "Quality Assurance": [[225, null]], "Random Generator": [[216, null], [217, "random-generator"]], "RandomGen": [[217, "randomgen"]], "Recommendation": [[222, "recommendation"]], "References": [[223, null]], "Removed Features": [[217, "removed-features"]], "Rotate-Multiply (Romu) Generators": [[189, null]], "SFC64 Generator": [[190, null]], "SIMD-oriented Fast Mersenne Twister (SFMT)": [[191, null]], "SPECK Counter-based RNG": [[192, null]], "See also": [[186, null], [204, null], [208, null], [209, null], [212, null], [215, null]], "Seed Sequences": [[224, null]], "Seed and State Manipulation": [[204, "seed-and-state-manipulation"]], "Seeding and State": [[0, "seeding-and-state"], [1, "seeding-and-state"], [2, "seeding-and-state"], [3, "seeding-and-state"], [177, "seeding-and-state"], [179, "seeding-and-state"], [180, "seeding-and-state"], [181, "seeding-and-state"], [182, "seeding-and-state"], [183, "seeding-and-state"], [184, "seeding-and-state"], [185, "seeding-and-state"], [186, "seeding-and-state"], [187, "seeding-and-state"], [188, "seeding-and-state"], [189, "seeding-and-state"], [190, "seeding-and-state"], [191, "seeding-and-state"], [192, "seeding-and-state"], [193, "seeding-and-state"], [194, "seeding-and-state"], [196, "seeding-and-state"], [197, "seeding-and-state"], [198, "seeding-and-state"], [199, "seeding-and-state"]], "Sequential Seeds": [[225, "sequential-seeds"]], "Stable RNGs": [[178, "stable-rngs"]], "State": [[195, "state"]], "Supported Generators": [[217, "supported-generators"]], "System Entropy": [[202, null]], "Testing": [[0, "testing"], [1, "testing"], [2, "testing"], [3, "testing"], [177, "testing"], [179, "testing"], [180, "testing"], [181, "testing"], [182, "testing"], [183, "testing"], [184, "testing"], [185, "testing"], [186, "testing"], [187, "testing"], [188, "testing"], [189, "testing"], [190, "testing"], [191, "testing"], [192, "testing"], [193, "testing"], [194, "testing"], [195, "testing"], [196, "testing"], [197, "testing"], [198, "testing"], [199, "testing"]], "ThreeFry Counter-based RNG": [[193, null]], "Timings": [[222, "timings"]], "Tyche PRNG": [[194, null]], "User-defined Bit Generators": [[178, "user-defined-bit-generators"], [195, null]], "Using Python": [[201, "Using-Python"]], "Using a SeedSequence": [[221, "using-a-seedsequence"]], "Using numba": [[201, "Using-numba"]], "Weyl Sequences": [[221, "weyl-sequences"]], "What\u2019s New or Different": [[217, "what-s-new-or-different"], [220, null]], "Writing a BitGenerator": [[201, null]], "Xoroshiro128+": [[196, null]], "Xorshift1024*\u03c6": [[197, null]], "Xoshiro256**": [[198, null]], "Xoshiro512**": [[199, null]], "Zero (0) Seeding": [[225, "zero-0-seeding"]], "randomgen.aes.AESCounter.advance": [[4, null]], "randomgen.aes.AESCounter.cffi": [[5, null]], "randomgen.aes.AESCounter.ctypes": [[6, null]], "randomgen.aes.AESCounter.jump": [[7, null]], "randomgen.aes.AESCounter.jumped": [[8, null]], "randomgen.aes.AESCounter.random_raw": [[9, null]], "randomgen.aes.AESCounter.seed": [[10, null]], "randomgen.aes.AESCounter.state": [[11, null]], "randomgen.chacha.ChaCha.cffi": [[12, null]], "randomgen.chacha.ChaCha.ctypes": [[13, null]], "randomgen.chacha.ChaCha.random_raw": [[14, null]], "randomgen.chacha.ChaCha.seed": [[15, null]], "randomgen.chacha.ChaCha.state": [[16, null]], "randomgen.dsfmt.DSFMT.cffi": [[17, null]], "randomgen.dsfmt.DSFMT.ctypes": [[18, null]], "randomgen.dsfmt.DSFMT.jump": [[19, null]], "randomgen.dsfmt.DSFMT.jumped": [[20, null]], "randomgen.dsfmt.DSFMT.random_raw": [[21, null]], "randomgen.dsfmt.DSFMT.seed": [[22, null]], "randomgen.dsfmt.DSFMT.state": [[23, null]], "randomgen.efiix64.EFIIX64.cffi": [[24, null]], "randomgen.efiix64.EFIIX64.ctypes": [[25, null]], "randomgen.efiix64.EFIIX64.random_raw": [[26, null]], "randomgen.efiix64.EFIIX64.seed": [[27, null]], "randomgen.efiix64.EFIIX64.state": [[28, null]], "randomgen.generator.ExtendedGenerator.bit_generator": [[207, null]], "randomgen.generator.ExtendedGenerator.complex_normal": [[208, null]], "randomgen.generator.ExtendedGenerator.multivariate_complex_normal": [[209, null]], "randomgen.generator.ExtendedGenerator.multivariate_normal": [[210, null]], "randomgen.generator.ExtendedGenerator.random": [[211, null]], "randomgen.generator.ExtendedGenerator.standard_wishart": [[212, null]], "randomgen.generator.ExtendedGenerator.state": [[213, null]], "randomgen.generator.ExtendedGenerator.uintegers": [[214, null]], "randomgen.generator.ExtendedGenerator.wishart": [[215, null]], "randomgen.hc128.HC128.cffi": [[29, null]], "randomgen.hc128.HC128.ctypes": [[30, null]], "randomgen.hc128.HC128.random_raw": [[31, null]], "randomgen.hc128.HC128.seed": [[32, null]], "randomgen.hc128.HC128.state": [[33, null]], "randomgen.jsf.JSF.cffi": [[34, null]], "randomgen.jsf.JSF.ctypes": [[35, null]], "randomgen.jsf.JSF.random_raw": [[36, null]], "randomgen.jsf.JSF.seed": [[37, null]], "randomgen.jsf.JSF.state": [[38, null]], "randomgen.lxm.LXM.cffi": [[39, null]], "randomgen.lxm.LXM.ctypes": [[40, null]], "randomgen.lxm.LXM.jump": [[41, null]], "randomgen.lxm.LXM.jumped": [[42, null]], "randomgen.lxm.LXM.random_raw": [[43, null]], "randomgen.lxm.LXM.seed": [[44, null]], "randomgen.lxm.LXM.state": [[45, null]], "randomgen.mt19937.MT19937.cffi": [[46, null]], "randomgen.mt19937.MT19937.ctypes": [[47, null]], "randomgen.mt19937.MT19937.jump": [[48, null]], "randomgen.mt19937.MT19937.jumped": [[49, null]], "randomgen.mt19937.MT19937.random_raw": [[50, null]], "randomgen.mt19937.MT19937.seed": [[51, null]], "randomgen.mt19937.MT19937.state": [[52, null]], "randomgen.mt64.MT64.cffi": [[53, null]], "randomgen.mt64.MT64.ctypes": [[54, null]], "randomgen.mt64.MT64.random_raw": [[55, null]], "randomgen.mt64.MT64.seed": [[56, null]], "randomgen.mt64.MT64.state": [[57, null]], "randomgen.pcg32.PCG32.advance": [[58, null]], "randomgen.pcg32.PCG32.cffi": [[59, null]], "randomgen.pcg32.PCG32.ctypes": [[60, null]], "randomgen.pcg32.PCG32.jump": [[61, null]], "randomgen.pcg32.PCG32.jumped": [[62, null]], "randomgen.pcg32.PCG32.random_raw": [[63, null]], "randomgen.pcg32.PCG32.seed": [[64, null]], "randomgen.pcg32.PCG32.state": [[65, null]], "randomgen.pcg64.LCG128Mix.advance": [[66, null]], "randomgen.pcg64.LCG128Mix.cffi": [[67, null]], "randomgen.pcg64.LCG128Mix.ctypes": [[68, null]], "randomgen.pcg64.LCG128Mix.jumped": [[69, null]], "randomgen.pcg64.LCG128Mix.random_raw": [[70, null]], "randomgen.pcg64.LCG128Mix.seed": [[71, null]], "randomgen.pcg64.LCG128Mix.state": [[72, null]], "randomgen.pcg64.PCG64.advance": [[73, null]], "randomgen.pcg64.PCG64.cffi": [[74, null]], "randomgen.pcg64.PCG64.ctypes": [[75, null]], "randomgen.pcg64.PCG64.jump": [[76, null]], "randomgen.pcg64.PCG64.jumped": [[77, null]], "randomgen.pcg64.PCG64.random_raw": [[78, null]], "randomgen.pcg64.PCG64.seed": [[79, null]], "randomgen.pcg64.PCG64.state": [[80, null]], "randomgen.pcg64.PCG64DXSM.advance": [[81, null]], "randomgen.pcg64.PCG64DXSM.cffi": [[82, null]], "randomgen.pcg64.PCG64DXSM.ctypes": [[83, null]], "randomgen.pcg64.PCG64DXSM.jump": [[84, null]], "randomgen.pcg64.PCG64DXSM.jumped": [[85, null]], "randomgen.pcg64.PCG64DXSM.random_raw": [[86, null]], "randomgen.pcg64.PCG64DXSM.seed": [[87, null]], "randomgen.pcg64.PCG64DXSM.state": [[88, null]], "randomgen.philox.Philox.advance": [[89, null]], "randomgen.philox.Philox.cffi": [[90, null]], "randomgen.philox.Philox.ctypes": [[91, null]], "randomgen.philox.Philox.jump": [[92, null]], "randomgen.philox.Philox.jumped": [[93, null]], "randomgen.philox.Philox.random_raw": [[94, null]], "randomgen.philox.Philox.seed": [[95, null]], "randomgen.philox.Philox.state": [[96, null]], "randomgen.rdrand.RDRAND.cffi": [[97, null]], "randomgen.rdrand.RDRAND.ctypes": [[98, null]], "randomgen.rdrand.RDRAND.jumped": [[99, null]], "randomgen.rdrand.RDRAND.random_raw": [[100, null]], "randomgen.rdrand.RDRAND.seed": [[101, null]], "randomgen.rdrand.RDRAND.state": [[102, null]], "randomgen.rdrand.RDRAND.success": [[103, null]], "randomgen.romu.Romu.cffi": [[104, null]], "randomgen.romu.Romu.ctypes": [[105, null]], "randomgen.romu.Romu.random_raw": [[106, null]], "randomgen.romu.Romu.seed": [[107, null]], "randomgen.romu.Romu.state": [[108, null]], "randomgen.sfc.SFC64.cffi": [[109, null]], "randomgen.sfc.SFC64.ctypes": [[110, null]], "randomgen.sfc.SFC64.random_raw": [[111, null]], "randomgen.sfc.SFC64.seed": [[112, null]], "randomgen.sfc.SFC64.state": [[113, null]], "randomgen.sfc.SFC64.weyl_increments": [[114, null]], "randomgen.sfmt.SFMT.cffi": [[115, null]], "randomgen.sfmt.SFMT.ctypes": [[116, null]], "randomgen.sfmt.SFMT.jump": [[117, null]], "randomgen.sfmt.SFMT.jumped": [[118, null]], "randomgen.sfmt.SFMT.random_raw": [[119, null]], "randomgen.sfmt.SFMT.seed": [[120, null]], "randomgen.sfmt.SFMT.state": [[121, null]], "randomgen.speck128.SPECK128.advance": [[122, null]], "randomgen.speck128.SPECK128.cffi": [[123, null]], "randomgen.speck128.SPECK128.ctypes": [[124, null]], "randomgen.speck128.SPECK128.jump": [[125, null]], "randomgen.speck128.SPECK128.jumped": [[126, null]], "randomgen.speck128.SPECK128.random_raw": [[127, null]], "randomgen.speck128.SPECK128.seed": [[128, null]], "randomgen.speck128.SPECK128.state": [[129, null]], "randomgen.threefry.ThreeFry.advance": [[130, null]], "randomgen.threefry.ThreeFry.cffi": [[131, null]], "randomgen.threefry.ThreeFry.ctypes": [[132, null]], "randomgen.threefry.ThreeFry.jump": [[133, null]], "randomgen.threefry.ThreeFry.jumped": [[134, null]], "randomgen.threefry.ThreeFry.random_raw": [[135, null]], "randomgen.threefry.ThreeFry.seed": [[136, null]], "randomgen.threefry.ThreeFry.state": [[137, null]], "randomgen.tyche.Tyche.cffi": [[138, null]], "randomgen.tyche.Tyche.ctypes": [[139, null]], "randomgen.tyche.Tyche.random_raw": [[140, null]], "randomgen.tyche.Tyche.seed": [[141, null]], "randomgen.tyche.Tyche.state": [[142, null]], "randomgen.wrapper.UserBitGenerator.cffi": [[143, null]], "randomgen.wrapper.UserBitGenerator.ctypes": [[144, null]], "randomgen.wrapper.UserBitGenerator.from_cfunc": [[145, null]], "randomgen.wrapper.UserBitGenerator.from_ctypes": [[146, null]], "randomgen.wrapper.UserBitGenerator.random_raw": [[147, null]], "randomgen.wrapper.UserBitGenerator.state": [[148, null]], "randomgen.xoroshiro128.Xoroshiro128.cffi": [[149, null]], "randomgen.xoroshiro128.Xoroshiro128.ctypes": [[150, null]], "randomgen.xoroshiro128.Xoroshiro128.jump": [[151, null]], "randomgen.xoroshiro128.Xoroshiro128.jumped": [[152, null]], "randomgen.xoroshiro128.Xoroshiro128.random_raw": [[153, null]], "randomgen.xoroshiro128.Xoroshiro128.seed": [[154, null]], "randomgen.xoroshiro128.Xoroshiro128.state": [[155, null]], "randomgen.xorshift1024.Xorshift1024.cffi": [[156, null]], "randomgen.xorshift1024.Xorshift1024.ctypes": [[157, null]], "randomgen.xorshift1024.Xorshift1024.jump": [[158, null]], "randomgen.xorshift1024.Xorshift1024.jumped": [[159, null]], "randomgen.xorshift1024.Xorshift1024.random_raw": [[160, null]], "randomgen.xorshift1024.Xorshift1024.seed": [[161, null]], "randomgen.xorshift1024.Xorshift1024.state": [[162, null]], "randomgen.xoshiro256.Xoshiro256.cffi": [[163, null]], "randomgen.xoshiro256.Xoshiro256.ctypes": [[164, null]], "randomgen.xoshiro256.Xoshiro256.jump": [[165, null]], "randomgen.xoshiro256.Xoshiro256.jumped": [[166, null]], "randomgen.xoshiro256.Xoshiro256.random_raw": [[167, null]], "randomgen.xoshiro256.Xoshiro256.seed": [[168, null]], "randomgen.xoshiro256.Xoshiro256.state": [[169, null]], "randomgen.xoshiro512.Xoshiro512.cffi": [[170, null]], "randomgen.xoshiro512.Xoshiro512.ctypes": [[171, null]], "randomgen.xoshiro512.Xoshiro512.jump": [[172, null]], "randomgen.xoshiro512.Xoshiro512.jumped": [[173, null]], "randomgen.xoshiro512.Xoshiro512.random_raw": [[174, null]], "randomgen.xoshiro512.Xoshiro512.seed": [[175, null]], "randomgen.xoshiro512.Xoshiro512.state": [[176, null]], "v1.15": [[200, "v1-15"]], "v1.15.1": [[200, "v1-15-1"]], "v1.16.0": [[200, "v1-16-0"]], "v1.16.1": [[200, "v1-16-1"]], "v1.16.2": [[200, "v1-16-2"]], "v1.16.3": [[200, "v1-16-3"]], "v1.16.4": [[200, "v1-16-4"]], "v1.16.5": [[200, "v1-16-5"]], "v1.16.6": [[200, "v1-16-6"]], "v1.17.0": [[200, "v1-17-0"]], "v1.18.0": [[200, "v1-18-0"]], "v1.19.0": [[200, "v1-19-0"]], "v1.19.1": [[200, "v1-19-1"]], "v1.19.2": [[200, "v1-19-2"]], "v1.19.3": [[200, "v1-19-3"]], "v1.20.0": [[200, "v1-20-0"]], "v1.20.1": [[200, "v1-20-1"]], "v1.20.2": [[200, "v1-20-2"]], "v1.23.0": [[200, "v1-23-0"]], "v1.23.1": [[200, "v1-23-1"]], "v1.26.0": [[200, "v1-26-0"]], "v1.26.1": [[200, "v1-26-1"]], "v2.0.0": [[200, "v2-0-0"]], "v2.1.0 (Unreleased)": [[200, "v2-1-0-unreleased"]]}, "docurls": ["bit_generators/aesctr.html", "bit_generators/chacha.html", "bit_generators/dsfmt.html", "bit_generators/efiix64.html", "bit_generators/generated/randomgen.aes.AESCounter.advance.html", "bit_generators/generated/randomgen.aes.AESCounter.cffi.html", "bit_generators/generated/randomgen.aes.AESCounter.ctypes.html", "bit_generators/generated/randomgen.aes.AESCounter.jump.html", "bit_generators/generated/randomgen.aes.AESCounter.jumped.html", "bit_generators/generated/randomgen.aes.AESCounter.random_raw.html", "bit_generators/generated/randomgen.aes.AESCounter.seed.html", "bit_generators/generated/randomgen.aes.AESCounter.state.html", "bit_generators/generated/randomgen.chacha.ChaCha.cffi.html", "bit_generators/generated/randomgen.chacha.ChaCha.ctypes.html", "bit_generators/generated/randomgen.chacha.ChaCha.random_raw.html", "bit_generators/generated/randomgen.chacha.ChaCha.seed.html", "bit_generators/generated/randomgen.chacha.ChaCha.state.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.cffi.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.ctypes.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.jump.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.jumped.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.random_raw.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.seed.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.state.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.cffi.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.ctypes.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.random_raw.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.seed.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.state.html", "bit_generators/generated/randomgen.hc128.HC128.cffi.html", "bit_generators/generated/randomgen.hc128.HC128.ctypes.html", "bit_generators/generated/randomgen.hc128.HC128.random_raw.html", "bit_generators/generated/randomgen.hc128.HC128.seed.html", "bit_generators/generated/randomgen.hc128.HC128.state.html", "bit_generators/generated/randomgen.jsf.JSF.cffi.html", "bit_generators/generated/randomgen.jsf.JSF.ctypes.html", "bit_generators/generated/randomgen.jsf.JSF.random_raw.html", "bit_generators/generated/randomgen.jsf.JSF.seed.html", "bit_generators/generated/randomgen.jsf.JSF.state.html", "bit_generators/generated/randomgen.lxm.LXM.cffi.html", "bit_generators/generated/randomgen.lxm.LXM.ctypes.html", "bit_generators/generated/randomgen.lxm.LXM.jump.html", "bit_generators/generated/randomgen.lxm.LXM.jumped.html", "bit_generators/generated/randomgen.lxm.LXM.random_raw.html", "bit_generators/generated/randomgen.lxm.LXM.seed.html", "bit_generators/generated/randomgen.lxm.LXM.state.html", "bit_generators/generated/randomgen.mt19937.MT19937.cffi.html", "bit_generators/generated/randomgen.mt19937.MT19937.ctypes.html", "bit_generators/generated/randomgen.mt19937.MT19937.jump.html", "bit_generators/generated/randomgen.mt19937.MT19937.jumped.html", "bit_generators/generated/randomgen.mt19937.MT19937.random_raw.html", "bit_generators/generated/randomgen.mt19937.MT19937.seed.html", "bit_generators/generated/randomgen.mt19937.MT19937.state.html", "bit_generators/generated/randomgen.mt64.MT64.cffi.html", "bit_generators/generated/randomgen.mt64.MT64.ctypes.html", "bit_generators/generated/randomgen.mt64.MT64.random_raw.html", "bit_generators/generated/randomgen.mt64.MT64.seed.html", "bit_generators/generated/randomgen.mt64.MT64.state.html", "bit_generators/generated/randomgen.pcg32.PCG32.advance.html", "bit_generators/generated/randomgen.pcg32.PCG32.cffi.html", "bit_generators/generated/randomgen.pcg32.PCG32.ctypes.html", "bit_generators/generated/randomgen.pcg32.PCG32.jump.html", "bit_generators/generated/randomgen.pcg32.PCG32.jumped.html", "bit_generators/generated/randomgen.pcg32.PCG32.random_raw.html", "bit_generators/generated/randomgen.pcg32.PCG32.seed.html", "bit_generators/generated/randomgen.pcg32.PCG32.state.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.advance.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.cffi.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.ctypes.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.jumped.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.random_raw.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.seed.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.state.html", "bit_generators/generated/randomgen.pcg64.PCG64.advance.html", "bit_generators/generated/randomgen.pcg64.PCG64.cffi.html", "bit_generators/generated/randomgen.pcg64.PCG64.ctypes.html", "bit_generators/generated/randomgen.pcg64.PCG64.jump.html", "bit_generators/generated/randomgen.pcg64.PCG64.jumped.html", "bit_generators/generated/randomgen.pcg64.PCG64.random_raw.html", "bit_generators/generated/randomgen.pcg64.PCG64.seed.html", "bit_generators/generated/randomgen.pcg64.PCG64.state.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.advance.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.cffi.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.ctypes.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.jump.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.jumped.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.random_raw.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.seed.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.state.html", "bit_generators/generated/randomgen.philox.Philox.advance.html", "bit_generators/generated/randomgen.philox.Philox.cffi.html", "bit_generators/generated/randomgen.philox.Philox.ctypes.html", "bit_generators/generated/randomgen.philox.Philox.jump.html", "bit_generators/generated/randomgen.philox.Philox.jumped.html", "bit_generators/generated/randomgen.philox.Philox.random_raw.html", "bit_generators/generated/randomgen.philox.Philox.seed.html", "bit_generators/generated/randomgen.philox.Philox.state.html", "bit_generators/generated/randomgen.rdrand.RDRAND.cffi.html", "bit_generators/generated/randomgen.rdrand.RDRAND.ctypes.html", "bit_generators/generated/randomgen.rdrand.RDRAND.jumped.html", "bit_generators/generated/randomgen.rdrand.RDRAND.random_raw.html", "bit_generators/generated/randomgen.rdrand.RDRAND.seed.html", "bit_generators/generated/randomgen.rdrand.RDRAND.state.html", "bit_generators/generated/randomgen.rdrand.RDRAND.success.html", "bit_generators/generated/randomgen.romu.Romu.cffi.html", "bit_generators/generated/randomgen.romu.Romu.ctypes.html", "bit_generators/generated/randomgen.romu.Romu.random_raw.html", "bit_generators/generated/randomgen.romu.Romu.seed.html", "bit_generators/generated/randomgen.romu.Romu.state.html", "bit_generators/generated/randomgen.sfc.SFC64.cffi.html", "bit_generators/generated/randomgen.sfc.SFC64.ctypes.html", "bit_generators/generated/randomgen.sfc.SFC64.random_raw.html", "bit_generators/generated/randomgen.sfc.SFC64.seed.html", "bit_generators/generated/randomgen.sfc.SFC64.state.html", "bit_generators/generated/randomgen.sfc.SFC64.weyl_increments.html", "bit_generators/generated/randomgen.sfmt.SFMT.cffi.html", "bit_generators/generated/randomgen.sfmt.SFMT.ctypes.html", "bit_generators/generated/randomgen.sfmt.SFMT.jump.html", "bit_generators/generated/randomgen.sfmt.SFMT.jumped.html", "bit_generators/generated/randomgen.sfmt.SFMT.random_raw.html", "bit_generators/generated/randomgen.sfmt.SFMT.seed.html", "bit_generators/generated/randomgen.sfmt.SFMT.state.html", "bit_generators/generated/randomgen.speck128.SPECK128.advance.html", "bit_generators/generated/randomgen.speck128.SPECK128.cffi.html", "bit_generators/generated/randomgen.speck128.SPECK128.ctypes.html", "bit_generators/generated/randomgen.speck128.SPECK128.jump.html", "bit_generators/generated/randomgen.speck128.SPECK128.jumped.html", "bit_generators/generated/randomgen.speck128.SPECK128.random_raw.html", "bit_generators/generated/randomgen.speck128.SPECK128.seed.html", "bit_generators/generated/randomgen.speck128.SPECK128.state.html", "bit_generators/generated/randomgen.threefry.ThreeFry.advance.html", "bit_generators/generated/randomgen.threefry.ThreeFry.cffi.html", "bit_generators/generated/randomgen.threefry.ThreeFry.ctypes.html", "bit_generators/generated/randomgen.threefry.ThreeFry.jump.html", "bit_generators/generated/randomgen.threefry.ThreeFry.jumped.html", "bit_generators/generated/randomgen.threefry.ThreeFry.random_raw.html", "bit_generators/generated/randomgen.threefry.ThreeFry.seed.html", "bit_generators/generated/randomgen.threefry.ThreeFry.state.html", "bit_generators/generated/randomgen.tyche.Tyche.cffi.html", "bit_generators/generated/randomgen.tyche.Tyche.ctypes.html", "bit_generators/generated/randomgen.tyche.Tyche.random_raw.html", "bit_generators/generated/randomgen.tyche.Tyche.seed.html", "bit_generators/generated/randomgen.tyche.Tyche.state.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.cffi.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.ctypes.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.from_cfunc.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.from_ctypes.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.random_raw.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.state.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.cffi.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.ctypes.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.jump.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.jumped.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.random_raw.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.seed.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.state.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.cffi.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.ctypes.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.jump.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.jumped.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.random_raw.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.seed.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.state.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.cffi.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.ctypes.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.jump.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.jumped.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.random_raw.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.seed.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.state.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.cffi.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.ctypes.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.jump.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.jumped.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.random_raw.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.seed.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.state.html", "bit_generators/hc128.html", "bit_generators/index.html", "bit_generators/jsf.html", "bit_generators/lcg128mix.html", "bit_generators/lxm.html", "bit_generators/mt19937.html", "bit_generators/mt64.html", "bit_generators/pcg32.html", "bit_generators/pcg64.html", "bit_generators/pcg64dxsm.html", "bit_generators/philox.html", "bit_generators/rdrand.html", "bit_generators/romu.html", "bit_generators/sfc.html", "bit_generators/sfmt.html", "bit_generators/speck128.html", "bit_generators/threefry.html", "bit_generators/tyche.html", "bit_generators/userbitgenerator.html", "bit_generators/xoroshiro128.html", "bit_generators/xorshift1024.html", "bit_generators/xoshiro256.html", "bit_generators/xoshiro512.html", "change-log.html", "custom-bit-generators.html", "entropy.html", "evolution.html", "extended-generator.html", "extending.html", "future.html", "generated/randomgen.generator.ExtendedGenerator.bit_generator.html", "generated/randomgen.generator.ExtendedGenerator.complex_normal.html", "generated/randomgen.generator.ExtendedGenerator.multivariate_complex_normal.html", "generated/randomgen.generator.ExtendedGenerator.multivariate_normal.html", "generated/randomgen.generator.ExtendedGenerator.random.html", "generated/randomgen.generator.ExtendedGenerator.standard_wishart.html", "generated/randomgen.generator.ExtendedGenerator.state.html", "generated/randomgen.generator.ExtendedGenerator.uintegers.html", "generated/randomgen.generator.ExtendedGenerator.wishart.html", "generator.html", "index.html", "legacy.html", "multithreading.html", "new-or-different.html", "parallel.html", "performance.html", "references.html", "seed_sequence.html", "testing.html"], "envversion": {"nbsphinx": 4, "sphinx": 63, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1}, "indexentries": {"advance() (randomgen.aes.aescounter method)": [[4, "randomgen.aes.AESCounter.advance", false]], "advance() (randomgen.pcg32.pcg32 method)": [[58, "randomgen.pcg32.PCG32.advance", false]], "advance() (randomgen.pcg64.lcg128mix method)": [[66, "randomgen.pcg64.LCG128Mix.advance", false]], "advance() (randomgen.pcg64.pcg64 method)": [[73, "randomgen.pcg64.PCG64.advance", false]], "advance() (randomgen.pcg64.pcg64dxsm method)": [[81, "randomgen.pcg64.PCG64DXSM.advance", false]], "advance() (randomgen.philox.philox method)": [[89, "randomgen.philox.Philox.advance", false]], "advance() (randomgen.speck128.speck128 method)": [[122, "randomgen.speck128.SPECK128.advance", false]], "advance() (randomgen.threefry.threefry method)": [[130, "randomgen.threefry.ThreeFry.advance", false]], "aescounter (class in randomgen.aes)": [[0, "randomgen.aes.AESCounter", false]], "bit_generator (randomgen.generator.extendedgenerator attribute)": [[207, "randomgen.generator.ExtendedGenerator.bit_generator", false]], "cffi (randomgen.aes.aescounter attribute)": [[5, "randomgen.aes.AESCounter.cffi", false]], "cffi (randomgen.chacha.chacha attribute)": [[12, "randomgen.chacha.ChaCha.cffi", false]], "cffi (randomgen.dsfmt.dsfmt attribute)": [[17, "randomgen.dsfmt.DSFMT.cffi", false]], "cffi (randomgen.efiix64.efiix64 attribute)": [[24, "randomgen.efiix64.EFIIX64.cffi", false]], "cffi (randomgen.hc128.hc128 attribute)": [[29, "randomgen.hc128.HC128.cffi", false]], "cffi (randomgen.jsf.jsf attribute)": [[34, "randomgen.jsf.JSF.cffi", false]], "cffi (randomgen.lxm.lxm attribute)": [[39, "randomgen.lxm.LXM.cffi", false]], "cffi (randomgen.mt19937.mt19937 attribute)": [[46, "randomgen.mt19937.MT19937.cffi", false]], "cffi (randomgen.mt64.mt64 attribute)": [[53, "randomgen.mt64.MT64.cffi", false]], "cffi (randomgen.pcg32.pcg32 attribute)": [[59, "randomgen.pcg32.PCG32.cffi", false]], "cffi (randomgen.pcg64.lcg128mix attribute)": [[67, "randomgen.pcg64.LCG128Mix.cffi", false]], "cffi (randomgen.pcg64.pcg64 attribute)": [[74, "randomgen.pcg64.PCG64.cffi", false]], "cffi (randomgen.pcg64.pcg64dxsm attribute)": [[82, "randomgen.pcg64.PCG64DXSM.cffi", false]], "cffi (randomgen.philox.philox attribute)": [[90, "randomgen.philox.Philox.cffi", false]], "cffi (randomgen.rdrand.rdrand attribute)": [[97, "randomgen.rdrand.RDRAND.cffi", false]], "cffi (randomgen.romu.romu attribute)": [[104, "randomgen.romu.Romu.cffi", false]], "cffi (randomgen.sfc.sfc64 attribute)": [[109, "randomgen.sfc.SFC64.cffi", false]], "cffi (randomgen.sfmt.sfmt attribute)": [[115, "randomgen.sfmt.SFMT.cffi", false]], "cffi (randomgen.speck128.speck128 attribute)": [[123, "randomgen.speck128.SPECK128.cffi", false]], "cffi (randomgen.threefry.threefry attribute)": [[131, "randomgen.threefry.ThreeFry.cffi", false]], "cffi (randomgen.tyche.tyche attribute)": [[138, "randomgen.tyche.Tyche.cffi", false]], "cffi (randomgen.wrapper.userbitgenerator attribute)": [[143, "randomgen.wrapper.UserBitGenerator.cffi", false]], "cffi (randomgen.xoroshiro128.xoroshiro128 attribute)": [[149, "randomgen.xoroshiro128.Xoroshiro128.cffi", false]], "cffi (randomgen.xorshift1024.xorshift1024 attribute)": [[156, "randomgen.xorshift1024.Xorshift1024.cffi", false]], "cffi (randomgen.xoshiro256.xoshiro256 attribute)": [[163, "randomgen.xoshiro256.Xoshiro256.cffi", false]], "cffi (randomgen.xoshiro512.xoshiro512 attribute)": [[170, "randomgen.xoshiro512.Xoshiro512.cffi", false]], "chacha (class in randomgen.chacha)": [[1, "randomgen.chacha.ChaCha", false]], "complex_normal() (randomgen.generator.extendedgenerator method)": [[208, "randomgen.generator.ExtendedGenerator.complex_normal", false]], "ctypes (randomgen.aes.aescounter attribute)": [[6, "randomgen.aes.AESCounter.ctypes", false]], "ctypes (randomgen.chacha.chacha attribute)": [[13, "randomgen.chacha.ChaCha.ctypes", false]], "ctypes (randomgen.dsfmt.dsfmt attribute)": [[18, "randomgen.dsfmt.DSFMT.ctypes", false]], "ctypes (randomgen.efiix64.efiix64 attribute)": [[25, "randomgen.efiix64.EFIIX64.ctypes", false]], "ctypes (randomgen.hc128.hc128 attribute)": [[30, "randomgen.hc128.HC128.ctypes", false]], "ctypes (randomgen.jsf.jsf attribute)": [[35, "randomgen.jsf.JSF.ctypes", false]], "ctypes (randomgen.lxm.lxm attribute)": [[40, "randomgen.lxm.LXM.ctypes", false]], "ctypes (randomgen.mt19937.mt19937 attribute)": [[47, "randomgen.mt19937.MT19937.ctypes", false]], "ctypes (randomgen.mt64.mt64 attribute)": [[54, "randomgen.mt64.MT64.ctypes", false]], "ctypes (randomgen.pcg32.pcg32 attribute)": [[60, "randomgen.pcg32.PCG32.ctypes", false]], "ctypes (randomgen.pcg64.lcg128mix attribute)": [[68, "randomgen.pcg64.LCG128Mix.ctypes", false]], "ctypes (randomgen.pcg64.pcg64 attribute)": [[75, "randomgen.pcg64.PCG64.ctypes", false]], "ctypes (randomgen.pcg64.pcg64dxsm attribute)": [[83, "randomgen.pcg64.PCG64DXSM.ctypes", false]], "ctypes (randomgen.philox.philox attribute)": [[91, "randomgen.philox.Philox.ctypes", false]], "ctypes (randomgen.rdrand.rdrand attribute)": [[98, "randomgen.rdrand.RDRAND.ctypes", false]], "ctypes (randomgen.romu.romu attribute)": [[105, "randomgen.romu.Romu.ctypes", false]], "ctypes (randomgen.sfc.sfc64 attribute)": [[110, "randomgen.sfc.SFC64.ctypes", false]], "ctypes (randomgen.sfmt.sfmt attribute)": [[116, "randomgen.sfmt.SFMT.ctypes", false]], "ctypes (randomgen.speck128.speck128 attribute)": [[124, "randomgen.speck128.SPECK128.ctypes", false]], "ctypes (randomgen.threefry.threefry attribute)": [[132, "randomgen.threefry.ThreeFry.ctypes", false]], "ctypes (randomgen.tyche.tyche attribute)": [[139, "randomgen.tyche.Tyche.ctypes", false]], "ctypes (randomgen.wrapper.userbitgenerator attribute)": [[144, "randomgen.wrapper.UserBitGenerator.ctypes", false]], "ctypes (randomgen.xoroshiro128.xoroshiro128 attribute)": [[150, "randomgen.xoroshiro128.Xoroshiro128.ctypes", false]], "ctypes (randomgen.xorshift1024.xorshift1024 attribute)": [[157, "randomgen.xorshift1024.Xorshift1024.ctypes", false]], "ctypes (randomgen.xoshiro256.xoshiro256 attribute)": [[164, "randomgen.xoshiro256.Xoshiro256.ctypes", false]], "ctypes (randomgen.xoshiro512.xoshiro512 attribute)": [[171, "randomgen.xoshiro512.Xoshiro512.ctypes", false]], "dsfmt (class in randomgen.dsfmt)": [[2, "randomgen.dsfmt.DSFMT", false]], "efiix64 (class in randomgen.efiix64)": [[3, "randomgen.efiix64.EFIIX64", false]], "extendedgenerator (class in randomgen.generator)": [[204, "randomgen.generator.ExtendedGenerator", false]], "from_cfunc() (randomgen.wrapper.userbitgenerator class method)": [[145, "randomgen.wrapper.UserBitGenerator.from_cfunc", false]], "from_ctypes() (randomgen.wrapper.userbitgenerator class method)": [[146, "randomgen.wrapper.UserBitGenerator.from_ctypes", false]], "hc128 (class in randomgen.hc128)": [[177, "randomgen.hc128.HC128", false]], "jsf (class in randomgen.jsf)": [[179, "randomgen.jsf.JSF", false]], "jump() (randomgen.aes.aescounter method)": [[7, "randomgen.aes.AESCounter.jump", false]], "jump() (randomgen.dsfmt.dsfmt method)": [[19, "randomgen.dsfmt.DSFMT.jump", false]], "jump() (randomgen.lxm.lxm method)": [[41, "randomgen.lxm.LXM.jump", false]], "jump() (randomgen.mt19937.mt19937 method)": [[48, "randomgen.mt19937.MT19937.jump", false]], "jump() (randomgen.pcg32.pcg32 method)": [[61, "randomgen.pcg32.PCG32.jump", false]], "jump() (randomgen.pcg64.pcg64 method)": [[76, "randomgen.pcg64.PCG64.jump", false]], "jump() (randomgen.pcg64.pcg64dxsm method)": [[84, "randomgen.pcg64.PCG64DXSM.jump", false]], "jump() (randomgen.philox.philox method)": [[92, "randomgen.philox.Philox.jump", false]], "jump() (randomgen.sfmt.sfmt method)": [[117, "randomgen.sfmt.SFMT.jump", false]], "jump() (randomgen.speck128.speck128 method)": [[125, "randomgen.speck128.SPECK128.jump", false]], "jump() (randomgen.threefry.threefry method)": [[133, "randomgen.threefry.ThreeFry.jump", false]], "jump() (randomgen.xoroshiro128.xoroshiro128 method)": [[151, "randomgen.xoroshiro128.Xoroshiro128.jump", false]], "jump() (randomgen.xorshift1024.xorshift1024 method)": [[158, "randomgen.xorshift1024.Xorshift1024.jump", false]], "jump() (randomgen.xoshiro256.xoshiro256 method)": [[165, "randomgen.xoshiro256.Xoshiro256.jump", false]], "jump() (randomgen.xoshiro512.xoshiro512 method)": [[172, "randomgen.xoshiro512.Xoshiro512.jump", false]], "jumped() (randomgen.aes.aescounter method)": [[8, "randomgen.aes.AESCounter.jumped", false]], "jumped() (randomgen.dsfmt.dsfmt method)": [[20, "randomgen.dsfmt.DSFMT.jumped", false]], "jumped() (randomgen.lxm.lxm method)": [[42, "randomgen.lxm.LXM.jumped", false]], "jumped() (randomgen.mt19937.mt19937 method)": [[49, "randomgen.mt19937.MT19937.jumped", false]], "jumped() (randomgen.pcg32.pcg32 method)": [[62, "randomgen.pcg32.PCG32.jumped", false]], "jumped() (randomgen.pcg64.lcg128mix method)": [[69, "randomgen.pcg64.LCG128Mix.jumped", false]], "jumped() (randomgen.pcg64.pcg64 method)": [[77, "randomgen.pcg64.PCG64.jumped", false]], "jumped() (randomgen.pcg64.pcg64dxsm method)": [[85, "randomgen.pcg64.PCG64DXSM.jumped", false]], "jumped() (randomgen.philox.philox method)": [[93, "randomgen.philox.Philox.jumped", false]], "jumped() (randomgen.rdrand.rdrand method)": [[99, "randomgen.rdrand.RDRAND.jumped", false]], "jumped() (randomgen.sfmt.sfmt method)": [[118, "randomgen.sfmt.SFMT.jumped", false]], "jumped() (randomgen.speck128.speck128 method)": [[126, "randomgen.speck128.SPECK128.jumped", false]], "jumped() (randomgen.threefry.threefry method)": [[134, "randomgen.threefry.ThreeFry.jumped", false]], "jumped() (randomgen.xoroshiro128.xoroshiro128 method)": [[152, "randomgen.xoroshiro128.Xoroshiro128.jumped", false]], "jumped() (randomgen.xorshift1024.xorshift1024 method)": [[159, "randomgen.xorshift1024.Xorshift1024.jumped", false]], "jumped() (randomgen.xoshiro256.xoshiro256 method)": [[166, "randomgen.xoshiro256.Xoshiro256.jumped", false]], "jumped() (randomgen.xoshiro512.xoshiro512 method)": [[173, "randomgen.xoshiro512.Xoshiro512.jumped", false]], "lcg128mix (class in randomgen.pcg64)": [[180, "randomgen.pcg64.LCG128Mix", false]], "lock (randomgen.aes.aescounter attribute)": [[0, "randomgen.aes.AESCounter.lock", false]], "lock (randomgen.chacha.chacha attribute)": [[1, "randomgen.chacha.ChaCha.lock", false]], "lock (randomgen.dsfmt.dsfmt attribute)": [[2, "randomgen.dsfmt.DSFMT.lock", false]], "lock (randomgen.efiix64.efiix64 attribute)": [[3, "randomgen.efiix64.EFIIX64.lock", false]], "lock (randomgen.hc128.hc128 attribute)": [[177, "randomgen.hc128.HC128.lock", false]], "lock (randomgen.jsf.jsf attribute)": [[179, "randomgen.jsf.JSF.lock", false]], "lock (randomgen.lxm.lxm attribute)": [[181, "randomgen.lxm.LXM.lock", false]], "lock (randomgen.mt19937.mt19937 attribute)": [[182, "randomgen.mt19937.MT19937.lock", false]], "lock (randomgen.mt64.mt64 attribute)": [[183, "randomgen.mt64.MT64.lock", false]], "lock (randomgen.pcg32.pcg32 attribute)": [[184, "randomgen.pcg32.PCG32.lock", false]], "lock (randomgen.pcg64.lcg128mix attribute)": [[180, "randomgen.pcg64.LCG128Mix.lock", false]], "lock (randomgen.pcg64.pcg64 attribute)": [[185, "randomgen.pcg64.PCG64.lock", false]], "lock (randomgen.pcg64.pcg64dxsm attribute)": [[186, "randomgen.pcg64.PCG64DXSM.lock", false]], "lock (randomgen.philox.philox attribute)": [[187, "randomgen.philox.Philox.lock", false]], "lock (randomgen.rdrand.rdrand attribute)": [[188, "randomgen.rdrand.RDRAND.lock", false]], "lock (randomgen.sfmt.sfmt attribute)": [[191, "randomgen.sfmt.SFMT.lock", false]], "lock (randomgen.speck128.speck128 attribute)": [[192, "randomgen.speck128.SPECK128.lock", false]], "lock (randomgen.threefry.threefry attribute)": [[193, "randomgen.threefry.ThreeFry.lock", false]], "lock (randomgen.tyche.tyche attribute)": [[194, "randomgen.tyche.Tyche.lock", false]], "lock (randomgen.xoroshiro128.xoroshiro128 attribute)": [[196, "randomgen.xoroshiro128.Xoroshiro128.lock", false]], "lock (randomgen.xorshift1024.xorshift1024 attribute)": [[197, "randomgen.xorshift1024.Xorshift1024.lock", false]], "lock (randomgen.xoshiro256.xoshiro256 attribute)": [[198, "randomgen.xoshiro256.Xoshiro256.lock", false]], "lock (randomgen.xoshiro512.xoshiro512 attribute)": [[199, "randomgen.xoshiro512.Xoshiro512.lock", false]], "lxm (class in randomgen.lxm)": [[181, "randomgen.lxm.LXM", false]], "module": [[0, "module-randomgen.aes", false], [1, "module-randomgen.chacha", false], [2, "module-randomgen.dsfmt", false], [3, "module-randomgen.efiix64", false], [177, "module-randomgen.hc128", false], [179, "module-randomgen.jsf", false], [181, "module-randomgen.lxm", false], [182, "module-randomgen.mt19937", false], [183, "module-randomgen.mt64", false], [184, "module-randomgen.pcg32", false], [185, "module-randomgen.pcg64", false], [187, "module-randomgen.philox", false], [188, "module-randomgen.rdrand", false], [189, "module-randomgen.romu", false], [190, "module-randomgen.sfc", false], [191, "module-randomgen.sfmt", false], [192, "module-randomgen.speck128", false], [193, "module-randomgen.threefry", false], [194, "module-randomgen.tyche", false], [195, "module-randomgen.wrapper", false], [196, "module-randomgen.xoroshiro128", false], [197, "module-randomgen.xorshift1024", false], [198, "module-randomgen.xoshiro256", false], [199, "module-randomgen.xoshiro512", false], [202, "module-randomgen.entropy", false], [222, "module-randomgen", false]], "mt19937 (class in randomgen.mt19937)": [[182, "randomgen.mt19937.MT19937", false]], "mt64 (class in randomgen.mt64)": [[183, "randomgen.mt64.MT64", false]], "multivariate_complex_normal() (randomgen.generator.extendedgenerator method)": [[209, "randomgen.generator.ExtendedGenerator.multivariate_complex_normal", false]], "multivariate_normal() (randomgen.generator.extendedgenerator method)": [[210, "randomgen.generator.ExtendedGenerator.multivariate_normal", false]], "pcg32 (class in randomgen.pcg32)": [[184, "randomgen.pcg32.PCG32", false]], "pcg64 (class in randomgen.pcg64)": [[185, "randomgen.pcg64.PCG64", false]], "pcg64dxsm (class in randomgen.pcg64)": [[186, "randomgen.pcg64.PCG64DXSM", false]], "philox (class in randomgen.philox)": [[187, "randomgen.philox.Philox", false]], "raisinglock (class in randomgen.rdrand)": [[188, "randomgen.rdrand.RaisingLock", false]], "random() (randomgen.generator.extendedgenerator method)": [[211, "randomgen.generator.ExtendedGenerator.random", false]], "random_entropy() (in module randomgen.entropy)": [[202, "randomgen.entropy.random_entropy", false]], "random_raw() (randomgen.aes.aescounter method)": [[9, "randomgen.aes.AESCounter.random_raw", false]], "random_raw() (randomgen.chacha.chacha method)": [[14, "randomgen.chacha.ChaCha.random_raw", false]], "random_raw() (randomgen.dsfmt.dsfmt method)": [[21, "randomgen.dsfmt.DSFMT.random_raw", false]], "random_raw() (randomgen.efiix64.efiix64 method)": [[26, "randomgen.efiix64.EFIIX64.random_raw", false]], "random_raw() (randomgen.hc128.hc128 method)": [[31, "randomgen.hc128.HC128.random_raw", false]], "random_raw() (randomgen.jsf.jsf method)": [[36, "randomgen.jsf.JSF.random_raw", false]], "random_raw() (randomgen.lxm.lxm method)": [[43, "randomgen.lxm.LXM.random_raw", false]], "random_raw() (randomgen.mt19937.mt19937 method)": [[50, "randomgen.mt19937.MT19937.random_raw", false]], "random_raw() (randomgen.mt64.mt64 method)": [[55, "randomgen.mt64.MT64.random_raw", false]], "random_raw() (randomgen.pcg32.pcg32 method)": [[63, "randomgen.pcg32.PCG32.random_raw", false]], "random_raw() (randomgen.pcg64.lcg128mix method)": [[70, "randomgen.pcg64.LCG128Mix.random_raw", false]], "random_raw() (randomgen.pcg64.pcg64 method)": [[78, "randomgen.pcg64.PCG64.random_raw", false]], "random_raw() (randomgen.pcg64.pcg64dxsm method)": [[86, "randomgen.pcg64.PCG64DXSM.random_raw", false]], "random_raw() (randomgen.philox.philox method)": [[94, "randomgen.philox.Philox.random_raw", false]], "random_raw() (randomgen.rdrand.rdrand method)": [[100, "randomgen.rdrand.RDRAND.random_raw", false]], "random_raw() (randomgen.romu.romu method)": [[106, "randomgen.romu.Romu.random_raw", false]], "random_raw() (randomgen.sfc.sfc64 method)": [[111, "randomgen.sfc.SFC64.random_raw", false]], "random_raw() (randomgen.sfmt.sfmt method)": [[119, "randomgen.sfmt.SFMT.random_raw", false]], "random_raw() (randomgen.speck128.speck128 method)": [[127, "randomgen.speck128.SPECK128.random_raw", false]], "random_raw() (randomgen.threefry.threefry method)": [[135, "randomgen.threefry.ThreeFry.random_raw", false]], "random_raw() (randomgen.tyche.tyche method)": [[140, "randomgen.tyche.Tyche.random_raw", false]], "random_raw() (randomgen.wrapper.userbitgenerator method)": [[147, "randomgen.wrapper.UserBitGenerator.random_raw", false]], "random_raw() (randomgen.xoroshiro128.xoroshiro128 method)": [[153, "randomgen.xoroshiro128.Xoroshiro128.random_raw", false]], "random_raw() (randomgen.xorshift1024.xorshift1024 method)": [[160, "randomgen.xorshift1024.Xorshift1024.random_raw", false]], "random_raw() (randomgen.xoshiro256.xoshiro256 method)": [[167, "randomgen.xoshiro256.Xoshiro256.random_raw", false]], "random_raw() (randomgen.xoshiro512.xoshiro512 method)": [[174, "randomgen.xoshiro512.Xoshiro512.random_raw", false]], "randomgen": [[222, "module-randomgen", false]], "randomgen.aes": [[0, "module-randomgen.aes", false]], "randomgen.chacha": [[1, "module-randomgen.chacha", false]], "randomgen.dsfmt": [[2, "module-randomgen.dsfmt", false]], "randomgen.efiix64": [[3, "module-randomgen.efiix64", false]], "randomgen.entropy": [[202, "module-randomgen.entropy", false]], "randomgen.hc128": [[177, "module-randomgen.hc128", false]], "randomgen.jsf": [[179, "module-randomgen.jsf", false]], "randomgen.lxm": [[181, "module-randomgen.lxm", false]], "randomgen.mt19937": [[182, "module-randomgen.mt19937", false]], "randomgen.mt64": [[183, "module-randomgen.mt64", false]], "randomgen.pcg32": [[184, "module-randomgen.pcg32", false]], "randomgen.pcg64": [[185, "module-randomgen.pcg64", false]], "randomgen.philox": [[187, "module-randomgen.philox", false]], "randomgen.rdrand": [[188, "module-randomgen.rdrand", false]], "randomgen.romu": [[189, "module-randomgen.romu", false]], "randomgen.sfc": [[190, "module-randomgen.sfc", false]], "randomgen.sfmt": [[191, "module-randomgen.sfmt", false]], "randomgen.speck128": [[192, "module-randomgen.speck128", false]], "randomgen.threefry": [[193, "module-randomgen.threefry", false]], "randomgen.tyche": [[194, "module-randomgen.tyche", false]], "randomgen.wrapper": [[195, "module-randomgen.wrapper", false]], "randomgen.xoroshiro128": [[196, "module-randomgen.xoroshiro128", false]], "randomgen.xorshift1024": [[197, "module-randomgen.xorshift1024", false]], "randomgen.xoshiro256": [[198, "module-randomgen.xoshiro256", false]], "randomgen.xoshiro512": [[199, "module-randomgen.xoshiro512", false]], "rdrand (class in randomgen.rdrand)": [[188, "randomgen.rdrand.RDRAND", false]], "romu (class in randomgen.romu)": [[189, "randomgen.romu.Romu", false]], "seed() (randomgen.aes.aescounter method)": [[10, "randomgen.aes.AESCounter.seed", false]], "seed() (randomgen.chacha.chacha method)": [[15, "randomgen.chacha.ChaCha.seed", false]], "seed() (randomgen.dsfmt.dsfmt method)": [[22, "randomgen.dsfmt.DSFMT.seed", false]], "seed() (randomgen.efiix64.efiix64 method)": [[27, "randomgen.efiix64.EFIIX64.seed", false]], "seed() (randomgen.hc128.hc128 method)": [[32, "randomgen.hc128.HC128.seed", false]], "seed() (randomgen.jsf.jsf method)": [[37, "randomgen.jsf.JSF.seed", false]], "seed() (randomgen.lxm.lxm method)": [[44, "randomgen.lxm.LXM.seed", false]], "seed() (randomgen.mt19937.mt19937 method)": [[51, "randomgen.mt19937.MT19937.seed", false]], "seed() (randomgen.mt64.mt64 method)": [[56, "randomgen.mt64.MT64.seed", false]], "seed() (randomgen.pcg32.pcg32 method)": [[64, "randomgen.pcg32.PCG32.seed", false]], "seed() (randomgen.pcg64.lcg128mix method)": [[71, "randomgen.pcg64.LCG128Mix.seed", false]], "seed() (randomgen.pcg64.pcg64 method)": [[79, "randomgen.pcg64.PCG64.seed", false]], "seed() (randomgen.pcg64.pcg64dxsm method)": [[87, "randomgen.pcg64.PCG64DXSM.seed", false]], "seed() (randomgen.philox.philox method)": [[95, "randomgen.philox.Philox.seed", false]], "seed() (randomgen.rdrand.rdrand method)": [[101, "randomgen.rdrand.RDRAND.seed", false]], "seed() (randomgen.romu.romu method)": [[107, "randomgen.romu.Romu.seed", false]], "seed() (randomgen.sfc.sfc64 method)": [[112, "randomgen.sfc.SFC64.seed", false]], "seed() (randomgen.sfmt.sfmt method)": [[120, "randomgen.sfmt.SFMT.seed", false]], "seed() (randomgen.speck128.speck128 method)": [[128, "randomgen.speck128.SPECK128.seed", false]], "seed() (randomgen.threefry.threefry method)": [[136, "randomgen.threefry.ThreeFry.seed", false]], "seed() (randomgen.tyche.tyche method)": [[141, "randomgen.tyche.Tyche.seed", false]], "seed() (randomgen.xoroshiro128.xoroshiro128 method)": [[154, "randomgen.xoroshiro128.Xoroshiro128.seed", false]], "seed() (randomgen.xorshift1024.xorshift1024 method)": [[161, "randomgen.xorshift1024.Xorshift1024.seed", false]], "seed() (randomgen.xoshiro256.xoshiro256 method)": [[168, "randomgen.xoshiro256.Xoshiro256.seed", false]], "seed() (randomgen.xoshiro512.xoshiro512 method)": [[175, "randomgen.xoshiro512.Xoshiro512.seed", false]], "seed_seq (randomgen.aes.aescounter attribute)": [[0, "randomgen.aes.AESCounter.seed_seq", false]], "seed_seq (randomgen.chacha.chacha attribute)": [[1, "randomgen.chacha.ChaCha.seed_seq", false]], "seed_seq (randomgen.dsfmt.dsfmt attribute)": [[2, "randomgen.dsfmt.DSFMT.seed_seq", false]], "seed_seq (randomgen.efiix64.efiix64 attribute)": [[3, "randomgen.efiix64.EFIIX64.seed_seq", false]], "seed_seq (randomgen.hc128.hc128 attribute)": [[177, "randomgen.hc128.HC128.seed_seq", false]], "seed_seq (randomgen.jsf.jsf attribute)": [[179, "randomgen.jsf.JSF.seed_seq", false]], "seed_seq (randomgen.lxm.lxm attribute)": [[181, "randomgen.lxm.LXM.seed_seq", false]], "seed_seq (randomgen.mt19937.mt19937 attribute)": [[182, "randomgen.mt19937.MT19937.seed_seq", false]], "seed_seq (randomgen.mt64.mt64 attribute)": [[183, "randomgen.mt64.MT64.seed_seq", false]], "seed_seq (randomgen.pcg32.pcg32 attribute)": [[184, "randomgen.pcg32.PCG32.seed_seq", false]], "seed_seq (randomgen.pcg64.lcg128mix attribute)": [[180, "randomgen.pcg64.LCG128Mix.seed_seq", false]], "seed_seq (randomgen.pcg64.pcg64 attribute)": [[185, "randomgen.pcg64.PCG64.seed_seq", false]], "seed_seq (randomgen.pcg64.pcg64dxsm attribute)": [[186, "randomgen.pcg64.PCG64DXSM.seed_seq", false]], "seed_seq (randomgen.philox.philox attribute)": [[187, "randomgen.philox.Philox.seed_seq", false]], "seed_seq (randomgen.rdrand.rdrand attribute)": [[188, "randomgen.rdrand.RDRAND.seed_seq", false]], "seed_seq (randomgen.sfmt.sfmt attribute)": [[191, "randomgen.sfmt.SFMT.seed_seq", false]], "seed_seq (randomgen.speck128.speck128 attribute)": [[192, "randomgen.speck128.SPECK128.seed_seq", false]], "seed_seq (randomgen.threefry.threefry attribute)": [[193, "randomgen.threefry.ThreeFry.seed_seq", false]], "seed_seq (randomgen.tyche.tyche attribute)": [[194, "randomgen.tyche.Tyche.seed_seq", false]], "seed_seq (randomgen.xoroshiro128.xoroshiro128 attribute)": [[196, "randomgen.xoroshiro128.Xoroshiro128.seed_seq", false]], "seed_seq (randomgen.xorshift1024.xorshift1024 attribute)": [[197, "randomgen.xorshift1024.Xorshift1024.seed_seq", false]], "seed_seq (randomgen.xoshiro256.xoshiro256 attribute)": [[198, "randomgen.xoshiro256.Xoshiro256.seed_seq", false]], "seed_seq (randomgen.xoshiro512.xoshiro512 attribute)": [[199, "randomgen.xoshiro512.Xoshiro512.seed_seq", false]], "sfc64 (class in randomgen.sfc)": [[190, "randomgen.sfc.SFC64", false]], "sfmt (class in randomgen.sfmt)": [[191, "randomgen.sfmt.SFMT", false]], "speck128 (class in randomgen.speck128)": [[192, "randomgen.speck128.SPECK128", false]], "standard_wishart() (randomgen.generator.extendedgenerator method)": [[212, "randomgen.generator.ExtendedGenerator.standard_wishart", false]], "state (randomgen.aes.aescounter attribute)": [[11, "randomgen.aes.AESCounter.state", false]], "state (randomgen.chacha.chacha attribute)": [[16, "randomgen.chacha.ChaCha.state", false]], "state (randomgen.dsfmt.dsfmt attribute)": [[23, "randomgen.dsfmt.DSFMT.state", false]], "state (randomgen.efiix64.efiix64 attribute)": [[28, "randomgen.efiix64.EFIIX64.state", false]], "state (randomgen.generator.extendedgenerator attribute)": [[213, "randomgen.generator.ExtendedGenerator.state", false]], "state (randomgen.hc128.hc128 attribute)": [[33, "randomgen.hc128.HC128.state", false]], "state (randomgen.jsf.jsf attribute)": [[38, "randomgen.jsf.JSF.state", false]], "state (randomgen.lxm.lxm attribute)": [[45, "randomgen.lxm.LXM.state", false]], "state (randomgen.mt19937.mt19937 attribute)": [[52, "randomgen.mt19937.MT19937.state", false]], "state (randomgen.mt64.mt64 attribute)": [[57, "randomgen.mt64.MT64.state", false]], "state (randomgen.pcg32.pcg32 attribute)": [[65, "randomgen.pcg32.PCG32.state", false]], "state (randomgen.pcg64.lcg128mix attribute)": [[72, "randomgen.pcg64.LCG128Mix.state", false]], "state (randomgen.pcg64.pcg64 attribute)": [[80, "randomgen.pcg64.PCG64.state", false]], "state (randomgen.pcg64.pcg64dxsm attribute)": [[88, "randomgen.pcg64.PCG64DXSM.state", false]], "state (randomgen.philox.philox attribute)": [[96, "randomgen.philox.Philox.state", false]], "state (randomgen.rdrand.rdrand attribute)": [[102, "randomgen.rdrand.RDRAND.state", false]], "state (randomgen.romu.romu attribute)": [[108, "randomgen.romu.Romu.state", false]], "state (randomgen.sfc.sfc64 attribute)": [[113, "randomgen.sfc.SFC64.state", false]], "state (randomgen.sfmt.sfmt attribute)": [[121, "randomgen.sfmt.SFMT.state", false]], "state (randomgen.speck128.speck128 attribute)": [[129, "randomgen.speck128.SPECK128.state", false]], "state (randomgen.threefry.threefry attribute)": [[137, "randomgen.threefry.ThreeFry.state", false]], "state (randomgen.tyche.tyche attribute)": [[142, "randomgen.tyche.Tyche.state", false]], "state (randomgen.wrapper.userbitgenerator attribute)": [[148, "randomgen.wrapper.UserBitGenerator.state", false]], "state (randomgen.xoroshiro128.xoroshiro128 attribute)": [[155, "randomgen.xoroshiro128.Xoroshiro128.state", false]], "state (randomgen.xorshift1024.xorshift1024 attribute)": [[162, "randomgen.xorshift1024.Xorshift1024.state", false]], "state (randomgen.xoshiro256.xoshiro256 attribute)": [[169, "randomgen.xoshiro256.Xoshiro256.state", false]], "state (randomgen.xoshiro512.xoshiro512 attribute)": [[176, "randomgen.xoshiro512.Xoshiro512.state", false]], "success (randomgen.rdrand.rdrand attribute)": [[103, "randomgen.rdrand.RDRAND.success", false]], "threefry (class in randomgen.threefry)": [[193, "randomgen.threefry.ThreeFry", false]], "tyche (class in randomgen.tyche)": [[194, "randomgen.tyche.Tyche", false]], "uintegers() (randomgen.generator.extendedgenerator method)": [[214, "randomgen.generator.ExtendedGenerator.uintegers", false]], "userbitgenerator (class in randomgen.wrapper)": [[195, "randomgen.wrapper.UserBitGenerator", false]], "weyl_increments() (randomgen.sfc.sfc64 method)": [[114, "randomgen.sfc.SFC64.weyl_increments", false]], "wishart() (randomgen.generator.extendedgenerator method)": [[215, "randomgen.generator.ExtendedGenerator.wishart", false]], "xoroshiro128 (class in randomgen.xoroshiro128)": [[196, "randomgen.xoroshiro128.Xoroshiro128", false]], "xorshift1024 (class in randomgen.xorshift1024)": [[197, "randomgen.xorshift1024.Xorshift1024", false]], "xoshiro256 (class in randomgen.xoshiro256)": [[198, "randomgen.xoshiro256.Xoshiro256", false]], "xoshiro512 (class in randomgen.xoshiro512)": [[199, "randomgen.xoshiro512.Xoshiro512", false]]}, "objects": {"": [[222, 0, 0, 1, "randomgen", ""]], "randomgen": [[0, 0, 0, 1, "aes", ""], [1, 0, 0, 1, "chacha", ""], [2, 0, 0, 1, "dsfmt", ""], [3, 0, 0, 1, "efiix64", ""], [202, 0, 0, 1, "entropy", ""], [177, 0, 0, 1, "hc128", ""], [179, 0, 0, 1, "jsf", ""], [181, 0, 0, 1, "lxm", ""], [182, 0, 0, 1, "mt19937", ""], [183, 0, 0, 1, "mt64", ""], [184, 0, 0, 1, "pcg32", ""], [185, 0, 0, 1, "pcg64", ""], [187, 0, 0, 1, "philox", ""], [188, 0, 0, 1, "rdrand", ""], [189, 0, 0, 1, "romu", ""], [190, 0, 0, 1, "sfc", ""], [191, 0, 0, 1, "sfmt", ""], [192, 0, 0, 1, "speck128", ""], [193, 0, 0, 1, "threefry", ""], [194, 0, 0, 1, "tyche", ""], [195, 0, 0, 1, "wrapper", ""], [196, 0, 0, 1, "xoroshiro128", ""], [197, 0, 0, 1, "xorshift1024", ""], [198, 0, 0, 1, "xoshiro256", ""], [199, 0, 0, 1, "xoshiro512", ""]], "randomgen.aes": [[0, 1, 1, 0, "AESCounter", "Container for the AES Counter pseudo-random number generator."]], "randomgen.aes.AESCounter": [[4, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [5, 4, 1, 0, "cffi", "CFFI interface"], [6, 4, 1, 0, "ctypes", "ctypes interface"], [7, 3, 1, 0, "jump", "Jumps the state as-if iter * 2**64 random numbers are generated"], [8, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [0, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [9, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [10, 3, 1, 0, "seed", "Seed the generator"], [0, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [11, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.aes.AESCounter.__init__": [[0, 2, 2, 0, "counter", "Counter to use in the AESCounter state."], [0, 2, 2, 0, "key", "Key to use in the AESCounter state."], [0, 2, 2, 0, "mode", "Deprecated parameter."], [0, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**128), a SeedSequence instance or None (the default)."]], "randomgen.aes.AESCounter.advance": [[4, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.aes.AESCounter.jump": [[7, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.aes.AESCounter.jumped": [[8, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.aes.AESCounter.random_raw": [[9, 2, 2, 0, "output", "Output values."], [9, 2, 2, 0, "size", "Output shape."]], "randomgen.aes.AESCounter.seed": [[10, 2, 2, 0, "counter", "Counter to use in the AESCounter state."], [10, 2, 2, 0, "key", "Key to use in the AESCounter state."], [10, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**128), a SeedSequence instance or None (the default)."]], "randomgen.chacha": [[1, 1, 1, 0, "ChaCha", "Container for the ChaCha family of Counter pseudo-random number generators"]], "randomgen.chacha.ChaCha": [[12, 4, 1, 0, "cffi", "CFFI interface"], [13, 4, 1, 0, "ctypes", "ctypes interface"], [1, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [14, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [15, 3, 1, 0, "seed", "Seed the generator"], [1, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [16, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.chacha.ChaCha.__init__": [[1, 2, 2, 0, "counter", "Counter to use in the ChaCha state."], [1, 2, 2, 0, "key", "Key to use in the ChaCha state."], [1, 2, 2, 0, "mode", "Deprecated parameter."], [1, 2, 2, 0, "rounds", "Number of rounds to run the ChaCha mixer."], [1, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**256), an array of 4 uint64 values, a SeedSequence instance or None (the default)."]], "randomgen.chacha.ChaCha.random_raw": [[14, 2, 2, 0, "output", "Output values."], [14, 2, 2, 0, "size", "Output shape."]], "randomgen.chacha.ChaCha.seed": [[15, 2, 2, "randomgen.chacha.ChaCha.seed", "counter", "Seed the generator"], [15, 2, 2, "randomgen.chacha.ChaCha.seed", "key", "Seed the generator"], [15, 2, 2, "randomgen.chacha.ChaCha.seed", "seed", "Seed the generator"]], "randomgen.dsfmt": [[2, 1, 1, 0, "DSFMT", "Container for the SIMD-based Mersenne Twister pseudo RNG."]], "randomgen.dsfmt.DSFMT": [[17, 4, 1, 0, "cffi", "CFFI interface"], [18, 4, 1, 0, "ctypes", "ctypes interface"], [19, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated."], [20, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [2, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [21, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [22, 3, 1, 0, "seed", "Seed the generator"], [2, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [23, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.dsfmt.DSFMT.__init__": [[2, 2, 2, 0, "mode", "Deprecated parameter."], [2, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator."]], "randomgen.dsfmt.DSFMT.jump": [[19, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator."]], "randomgen.dsfmt.DSFMT.jumped": [[20, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.dsfmt.DSFMT.random_raw": [[21, 2, 2, 0, "output", "Output values."], [21, 2, 2, 0, "size", "Output shape."]], "randomgen.dsfmt.DSFMT.seed": [[22, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator. Can be any integer between 0 and 2**32 - 1 inclusive, an array (or other sequence) of unsigned 32-bit integers, a SeedSequence instance or None (the default)."]], "randomgen.efiix64": [[3, 1, 1, 0, "EFIIX64", "Container for the EFIIX64x384 pseudo-random number generator."]], "randomgen.efiix64.EFIIX64": [[24, 4, 1, 0, "cffi", "CFFI interface"], [25, 4, 1, 0, "ctypes", "ctypes interface"], [3, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [26, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [27, 3, 1, 0, "seed", "Seed the generator"], [3, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [28, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.efiix64.EFIIX64.__init__": [[3, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.efiix64.EFIIX64.random_raw": [[26, 2, 2, 0, "output", "Output values."], [26, 2, 2, 0, "size", "Output shape."]], "randomgen.efiix64.EFIIX64.seed": [[27, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]], "randomgen.entropy": [[202, 5, 1, 0, "random_entropy", "Read entropy from the system cryptographic provider"]], "randomgen.entropy.random_entropy": [[202, 2, 2, 0, "size", "Output shape."], [202, 2, 2, 0, "source", "Source of entropy."]], "randomgen.generator": [[204, 1, 1, 0, "ExtendedGenerator", "Additional random value generator using a bit generator source."]], "randomgen.generator.ExtendedGenerator": [[207, 4, 1, 0, "bit_generator", "Gets the bit generator instance used by the generator"], [208, 3, 1, 0, "complex_normal", "Draw random samples from a complex normal (Gaussian) distribution."], [209, 3, 1, 0, "multivariate_complex_normal", "Draw random samples from a multivariate complex normal (Gaussian) distribution."], [210, 3, 1, 0, "multivariate_normal", "Draw random samples from a multivariate normal distribution."], [211, 3, 1, 0, "random", "Return random floats in the half-open interval [0.0, 1.0)."], [212, 3, 1, 0, "standard_wishart", "Draw samples from the Standard Wishart and Pseudo-Wishart distributions"], [213, 4, 1, 0, "state", "Get or set the bit generator's state"], [214, 3, 1, 0, "uintegers", "Return random unsigned integers"], [215, 3, 1, 0, "wishart", "Draw samples from the Wishart and pseudo-Wishart distributions."]], "randomgen.generator.ExtendedGenerator.__init__": [[204, 2, 2, 0, "bit_generator", "Bit generator to use as the core generator."]], "randomgen.generator.ExtendedGenerator.complex_normal": [[208, 2, 2, 0, "gamma", "Variance of the distribution"], [208, 2, 2, 0, "loc", "Mean of the distribution."], [208, 2, 2, 0, "relation", "Relation between the two component normals"], [208, 2, 2, 0, "size", "Output shape."]], "randomgen.generator.ExtendedGenerator.multivariate_complex_normal": [[209, 2, 2, 0, "check_valid", "Behavior when the covariance matrix implied by gamma and relation is not positive semidefinite."], [209, 2, 2, 0, "gamma", "Covariance of the real component of the distribution."], [209, 2, 2, 0, "loc", "Mean of the distribution."], [209, 2, 2, 0, "method", "The cov input is used to compute a factor matrix A such that A @ A.T = cov."], [209, 2, 2, 0, "relation", "Relation between the two component normals."], [209, 2, 2, 0, "size", "Given a shape of, for example, (m,n,k), m*n*k samples are generated, and packed in an m-by-n-by-k arrangement."], [209, 2, 2, 0, "tol", "Tolerance when checking the singular values in the covariance matrix implied by gamma and relation."]], "randomgen.generator.ExtendedGenerator.multivariate_normal": [[210, 2, 2, 0, "check_valid", "Behavior when the covariance matrix is not positive semidefinite."], [210, 2, 2, 0, "cov", "Covariance matrix of the distribution."], [210, 2, 2, 0, "mean", "Mean of the distribution."], [210, 2, 2, 0, "method", "The cov input is used to compute a factor matrix A such that A @ A.T = cov."], [210, 2, 2, 0, "size", "Given a shape of, for example, (m,n,k), m*n*k samples are generated, and packed in an m-by-n-by-k arrangement."], [210, 2, 2, 0, "tol", "Tolerance when checking the singular values in covariance matrix. cov is cast to double before the check."]], "randomgen.generator.ExtendedGenerator.random": [[211, 2, 2, 0, "dtype", "Desired dtype of the result."], [211, 2, 2, 0, "out", "Alternative output array in which to place the result."], [211, 2, 2, 0, "size", "Output shape."]], "randomgen.generator.ExtendedGenerator.standard_wishart": [[212, 2, 2, 0, "df", "The degree-of-freedom for the simulated Wishart variates."], [212, 2, 2, 0, "dim", "The dimension of the simulated Wishart variates."], [212, 2, 2, 0, "rescale", "Flag indicating whether to rescale the outputs to have expectation identity."], [212, 2, 2, 0, "size", "Output shape, excluding trailing dims."]], "randomgen.generator.ExtendedGenerator.uintegers": [[214, 2, 2, 0, "bits", "Size of the unsigned integer to return, either 32 bit or 64 bit."], [214, 2, 2, 0, "size", "Output shape."]], "randomgen.generator.ExtendedGenerator.wishart": [[215, 2, 2, 0, "check_valid", "Behavior when the covariance matrix has rank less than rank."], [215, 2, 2, 0, "df", "Degree-of-freedom values."], [215, 2, 2, 0, "method", "The cov input is used to compute a factor matrix A such that A @ A.T = cov."], [215, 2, 2, 0, "rank", "The rank of shape when generating from the Singular Wishart distribution."], [215, 2, 2, 0, "scale", "Shape matrix of the distribution."], [215, 2, 2, 0, "size", "Given a shape of, for example, (m,n,k), m*n*k samples are generated, and packed in an m-by-n-by-k arrangement."], [215, 2, 2, 0, "tol", "Tolerance when checking the rank of shape."]], "randomgen.hc128": [[177, 1, 1, 0, "HC128", "Container for the HC-128 cipher-based pseudo-random number generator"]], "randomgen.hc128.HC128": [[29, 4, 1, 0, "cffi", "CFFI interface"], [30, 4, 1, 0, "ctypes", "ctypes interface"], [177, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [31, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [32, 3, 1, 0, "seed", "Seed the generator"], [177, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [33, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.hc128.HC128.__init__": [[177, 2, 2, 0, "key", "Key for HC128."], [177, 2, 2, 0, "mode", "Deprecated parameter."], [177, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.hc128.HC128.random_raw": [[31, 2, 2, 0, "output", "Output values."], [31, 2, 2, 0, "size", "Output shape."]], "randomgen.hc128.HC128.seed": [[32, 2, 2, 0, "key", "Key for HC128."], [32, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]], "randomgen.jsf": [[179, 1, 1, 0, "JSF", "Container for Jenkins's Fast Small (JSF) pseudo-random number generator"]], "randomgen.jsf.JSF": [[34, 4, 1, 0, "cffi", "CFFI interface"], [35, 4, 1, 0, "ctypes", "ctypes interface"], [179, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [36, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [37, 3, 1, 0, "seed", "Seed the generator"], [179, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [38, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.jsf.JSF.__init__": [[179, 2, 2, 0, "mode", "Deprecated parameter."], [179, 2, 2, 0, "p", "One the the three parameters that defines JSF."], [179, 2, 2, 0, "q", "One the the three parameters that defines JSF."], [179, 2, 2, 0, "r", "One the the three parameters that defines JSF."], [179, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."], [179, 2, 2, 0, "seed_size", "Number of distinct seed values used to initialize JSF."], [179, 2, 2, 0, "size", "Output size of a single iteration of JSF."]], "randomgen.jsf.JSF.random_raw": [[36, 2, 2, 0, "output", "Output values."], [36, 2, 2, 0, "size", "Output shape."]], "randomgen.jsf.JSF.seed": [[37, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."]], "randomgen.lxm": [[181, 1, 1, 0, "LXM", "Container for the LXM pseudo-random number generator."]], "randomgen.lxm.LXM": [[39, 4, 1, 0, "cffi", "CFFI interface"], [40, 4, 1, 0, "ctypes", "ctypes interface"], [41, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated"], [42, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [181, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [43, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [44, 3, 1, 0, "seed", "Seed the generator"], [181, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [45, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.lxm.LXM.__init__": [[181, 2, 2, 0, "b", "The additive constant in the LCG update."], [181, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.lxm.LXM.jump": [[41, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.lxm.LXM.jumped": [[42, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.lxm.LXM.random_raw": [[43, 2, 2, 0, "output", "Output values."], [43, 2, 2, 0, "size", "Output shape."]], "randomgen.lxm.LXM.seed": [[44, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). The input is passed to SeedSequence which produces the values used to initialize the state."]], "randomgen.mt19937": [[182, 1, 1, 0, "MT19937", "Container for the Mersenne Twister pseudo-random number generator."]], "randomgen.mt19937.MT19937": [[46, 4, 1, 0, "cffi", "CFFI interface"], [47, 4, 1, 0, "ctypes", "ctypes interface"], [48, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated."], [49, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [182, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [50, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [51, 3, 1, 0, "seed", "Seed the generator"], [182, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [52, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.mt19937.MT19937.__init__": [[182, 2, 2, 0, "mode", "\"sequence\" uses a SeedSequence to transforms the seed into an initial state."], [182, 2, 2, 0, "numpy_seed", "Set to True to use  the same seeding mechanism as NumPy and so matches NumPy exactly."], [182, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator."]], "randomgen.mt19937.MT19937.jump": [[48, 2, 2, 0, "jumps", "Number of times to jump the state of the bit generator."]], "randomgen.mt19937.MT19937.jumped": [[49, 2, 2, 0, "jumps", "Number of times to jump the state of the bit generator returned"]], "randomgen.mt19937.MT19937.random_raw": [[50, 2, 2, 0, "output", "Output values."], [50, 2, 2, 0, "size", "Output shape."]], "randomgen.mt19937.MT19937.seed": [[51, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator. Can be any integer between 0 and 2**32 - 1 inclusive, an array (or other sequence) of unsigned 32-bit integers, a SeedSequence instance or None (the default)."]], "randomgen.mt64": [[183, 1, 1, 0, "MT64", "Container for the 64-bit Mersenne Twister pseudo-random number generator"]], "randomgen.mt64.MT64": [[53, 4, 1, 0, "cffi", "CFFI interface"], [54, 4, 1, 0, "ctypes", "ctypes interface"], [183, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [55, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [56, 3, 1, 0, "seed", "Seed the generator"], [183, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [57, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.mt64.MT64.__init__": [[183, 2, 2, 0, "mode", "Deprecated parameter."], [183, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator."]], "randomgen.mt64.MT64.random_raw": [[55, 2, 2, 0, "output", "Output values."], [55, 2, 2, 0, "size", "Output shape."]], "randomgen.mt64.MT64.seed": [[56, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator."]], "randomgen.pcg32": [[184, 1, 1, 0, "PCG32", "Container for the PCG-32 pseudo-random number generator."]], "randomgen.pcg32.PCG32": [[58, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [59, 4, 1, 0, "cffi", "CFFI interface"], [60, 4, 1, 0, "ctypes", "ctypes interface"], [61, 3, 1, 0, "jump", "Jump the state a fixed increment"], [62, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [184, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [63, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [64, 3, 1, 0, "seed", "Seed the generator"], [184, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [65, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.pcg32.PCG32.__init__": [[184, 2, 2, 0, "inc", "The increment in the LCG."], [184, 2, 2, 0, "mode", "Deprecated parameter."], [184, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."]], "randomgen.pcg32.PCG32.advance": [[58, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.pcg32.PCG32.jump": [[61, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.pcg32.PCG32.jumped": [[62, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.pcg32.PCG32.random_raw": [[63, 2, 2, 0, "output", "Output values."], [63, 2, 2, 0, "size", "Output shape."]], "randomgen.pcg32.PCG32.seed": [[64, 2, 2, 0, "inc", "The increment in the LCG."], [64, 2, 2, 0, "seed", "Seed for PCG64."]], "randomgen.pcg64": [[180, 1, 1, 0, "LCG128Mix", "Customizable 128-bit LCG bit generator with output mixing"], [185, 1, 1, 0, "PCG64", "Container for the PCG-64 pseudo-random number generator."], [186, 1, 1, 0, "PCG64DXSM", "Container for the PCG-64 updated with a 64-bit mult using DXSM output func."]], "randomgen.pcg64.LCG128Mix": [[66, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [67, 4, 1, 0, "cffi", "CFFI interface"], [68, 4, 1, 0, "ctypes", "ctypes interface"], [69, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [180, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [70, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [71, 3, 1, 0, "seed", "Seed the generator"], [180, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [72, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.pcg64.LCG128Mix.__init__": [[180, 2, 2, 0, "dxsm_multiplier", "The multiplier to use in the DXSM output function."], [180, 2, 2, 0, "inc", "The increment in the LCG."], [180, 2, 2, 0, "multiplier", "The multipler to use in the LCG."], [180, 2, 2, 0, "output", "The name of the output function or a ctypes function or function pointer with a signature uint64(uint64, uint64)."], [180, 2, 2, 0, "post", "Whether the mix the output before or after the next increment of the LCG is computed."], [180, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer, a sequence of integers, a SeedSequence instance or None (the default)."]], "randomgen.pcg64.LCG128Mix.advance": [[66, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.pcg64.LCG128Mix.jumped": [[69, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.pcg64.LCG128Mix.random_raw": [[70, 2, 2, 0, "output", "Output values."], [70, 2, 2, 0, "size", "Output shape."]], "randomgen.pcg64.LCG128Mix.seed": [[71, 2, 2, 0, "inc", "The increment in the LCG."], [71, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."]], "randomgen.pcg64.PCG64": [[73, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [74, 4, 1, 0, "cffi", "CFFI interface"], [75, 4, 1, 0, "ctypes", "ctypes interface"], [76, 3, 1, 0, "jump", "Jump the state a fixed increment"], [77, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [185, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [78, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [79, 3, 1, 0, "seed", "Seed the generator"], [185, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [80, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.pcg64.PCG64.__init__": [[185, 2, 2, 0, "inc", "The increment in the LCG."], [185, 2, 2, 0, "mode", "\"sequence\" uses a SeedSequence to transforms the seed into an initial state."], [185, 2, 2, 0, "numpy_seed", "Set to True to use  the same seeding mechanism as NumPy and so matches NumPy exactly."], [185, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**128), a SeedSequence instance or None (the default)."], [185, 2, 2, 0, "variant", "Name of PCG64 variant to use."]], "randomgen.pcg64.PCG64.advance": [[73, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.pcg64.PCG64.jump": [[76, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.pcg64.PCG64.jumped": [[77, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.pcg64.PCG64.random_raw": [[78, 2, 2, 0, "output", "Output values."], [78, 2, 2, 0, "size", "Output shape."]], "randomgen.pcg64.PCG64.seed": [[79, 2, 2, 0, "inc", "The increment in the LCG."], [79, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."]], "randomgen.pcg64.PCG64DXSM": [[81, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [82, 4, 1, 0, "cffi", "CFFI interface"], [83, 4, 1, 0, "ctypes", "ctypes interface"], [84, 3, 1, 0, "jump", "Not implemented. Use jumped."], [85, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [186, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [86, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [87, 3, 1, 0, "seed", "Seed the generator"], [186, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [88, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.pcg64.PCG64DXSM.__init__": [[186, 2, 2, 0, "inc", "The increment in the LCG."], [186, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**128), a SeedSequence instance or None (the default)."]], "randomgen.pcg64.PCG64DXSM.advance": [[81, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.pcg64.PCG64DXSM.jump": [[84, 2, 2, "randomgen.pcg64.PCG64DXSM.jump", "iter", "Not implemented. Use jumped."]], "randomgen.pcg64.PCG64DXSM.jumped": [[85, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.pcg64.PCG64DXSM.random_raw": [[86, 2, 2, 0, "output", "Output values."], [86, 2, 2, 0, "size", "Output shape."]], "randomgen.pcg64.PCG64DXSM.seed": [[87, 2, 2, 0, "inc", "The increment in the LCG."], [87, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."]], "randomgen.philox": [[187, 1, 1, 0, "Philox", "Container for the Philox family of pseudo-random number generators."]], "randomgen.philox.Philox": [[89, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [90, 4, 1, 0, "cffi", "CFFI interface"], [91, 4, 1, 0, "ctypes", "ctypes interface"], [92, 3, 1, 0, "jump", "Jumps the state as-if 2**(W*N/2) random numbers have been generated."], [93, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [187, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [94, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [95, 3, 1, 0, "seed", "Seed the generator"], [187, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [96, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.philox.Philox.__init__": [[187, 2, 2, 0, "counter", "Counter to use in the Philox state."], [187, 2, 2, 0, "key", "Key to use in the Philox state."], [187, 2, 2, 0, "mode", "\"sequence\" uses a SeedSequence to transforms the seed into an initial state."], [187, 2, 2, 0, "number", "Number of values to produce in a single call."], [187, 2, 2, 0, "numpy_seed", "Set to True to use  the same seeding mechanism as NumPy and so matches NumPy exactly."], [187, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, data will be read from /dev/urandom (or the Windows analog) if available."], [187, 2, 2, 0, "width", "Bit width the values produced."]], "randomgen.philox.Philox.advance": [[89, 2, 2, 0, "counter", "Flag indicating whether the advance the counter only or both the counter and the buffer position."], [89, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.philox.Philox.jump": [[92, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.philox.Philox.jumped": [[93, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.philox.Philox.random_raw": [[94, 2, 2, 0, "output", "Output values."], [94, 2, 2, 0, "size", "Output shape."]], "randomgen.philox.Philox.seed": [[95, 2, 2, 0, "counter", "Counter to use in the Philox state."], [95, 2, 2, 0, "key", "Key to use in the Philox state."], [95, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, data will be read from /dev/urandom (or the Windows analog) if available."]], "randomgen.rdrand": [[188, 1, 1, 0, "RDRAND", "Container for the hardware RDRAND random number generator."], [188, 1, 1, 0, "RaisingLock", "A Lock that wraps threading.Lock can can raise errors."]], "randomgen.rdrand.RDRAND": [[97, 4, 1, 0, "cffi", "CFFI interface"], [98, 4, 1, 0, "ctypes", "ctypes interface"], [99, 3, 1, 0, "jumped", "Returns a new bit generator"], [188, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [100, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [101, 3, 1, 0, "seed", "Compatibility function. Not used."], [188, 4, 1, 0, "seed_seq", "Always None since RDRAND cannot be seeded."], [102, 4, 1, 0, "state", "Get or set the PRNG state"], [103, 4, 1, 0, "success", "Gets the flag indicating that all calls to RDRAND succeeded"]], "randomgen.rdrand.RDRAND.__init__": [[188, 2, 2, 0, "retries", "The number of times to retry."], [188, 2, 2, 0, "seed", "Must be None."]], "randomgen.rdrand.RDRAND.jumped": [[99, 2, 2, 0, "iter", "This parameter is ignored"]], "randomgen.rdrand.RDRAND.random_raw": [[100, 2, 2, 0, "output", "Output values."], [100, 2, 2, 0, "size", "Output shape."]], "randomgen.rdrand.RDRAND.seed": [[101, 2, 2, 0, "seed", "Must be None."]], "randomgen.romu": [[189, 1, 1, 0, "Romu", "Mark A. Overton's quad and trio rotate-multiply-based generators"]], "randomgen.romu.Romu": [[104, 4, 1, 0, "cffi", "CFFI interface"], [105, 4, 1, 0, "ctypes", "ctypes interface"], [106, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [107, 3, 1, 0, "seed", "Seed the generator"], [108, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.romu.Romu.__init__": [[189, 2, 2, 0, "seed", "A seed to initialize the BitGenerator."], [189, 2, 2, 0, "variant", "The variant to use."]], "randomgen.romu.Romu.random_raw": [[106, 2, 2, 0, "output", "Output values."], [106, 2, 2, 0, "size", "Output shape."]], "randomgen.romu.Romu.seed": [[107, 2, 2, "randomgen.romu.Romu.seed", "seed", "Seed the generator"]], "randomgen.sfc": [[190, 1, 1, 0, "SFC64", "Chris Doty-Humphrey's Small Fast Chaotic PRNG with optional Weyl Sequence"]], "randomgen.sfc.SFC64": [[109, 4, 1, 0, "cffi", "CFFI interface"], [110, 4, 1, 0, "ctypes", "ctypes interface"], [111, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [112, 3, 1, 0, "seed", "Seed the generator"], [113, 4, 1, 0, "state", "Get or set the PRNG state"], [114, 3, 1, 0, "weyl_increments", "Generate distinct Weyl increments to construct multiple streams"]], "randomgen.sfc.SFC64.__init__": [[190, 2, 2, 0, "k", "The increment to the Weyl sequence."], [190, 2, 2, 0, "mode", "The default uses a seed sequence to initialize all unspecified values. When using \"numpy\" uses the seed sequence to initialize three values and checks that both w and k are 1."], [190, 2, 2, 0, "numpy_seed", "Set to True to use  the same seeding mechanism as NumPy. Uses the seed sequence to initialize three state values and checks that both w and k are 1."], [190, 2, 2, 0, "seed", "A seed to initialize the BitGenerator."], [190, 2, 2, 0, "w", "The starting value of the Weyl sequence."]], "randomgen.sfc.SFC64.random_raw": [[111, 2, 2, 0, "output", "Output values."], [111, 2, 2, 0, "size", "Output shape."]], "randomgen.sfc.SFC64.seed": [[112, 2, 2, "randomgen.sfc.SFC64.seed", "seed", "Seed the generator"]], "randomgen.sfc.SFC64.weyl_increments": [[114, 2, 2, 0, "max_bits", "Maximum number of non-zero bits in the values returned."], [114, 2, 2, 0, "min_bits", "The minimum number of non-zero bits in the values returned."], [114, 2, 2, 0, "n", "Number of distinct values to generate."]], "randomgen.sfmt": [[191, 1, 1, 0, "SFMT", "Container for the SIMD-based Mersenne Twister pseudo RNG."]], "randomgen.sfmt.SFMT": [[115, 4, 1, 0, "cffi", "CFFI interface"], [116, 4, 1, 0, "ctypes", "ctypes interface"], [117, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated."], [118, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [191, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [119, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [120, 3, 1, 0, "seed", "Seed the generator"], [191, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [121, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.sfmt.SFMT.__init__": [[191, 2, 2, 0, "mode", "Deprecated parameter."], [191, 2, 2, 0, "seed", "Entropy used to initialize the pseudo-random number generator."]], "randomgen.sfmt.SFMT.jump": [[117, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator."]], "randomgen.sfmt.SFMT.jumped": [[118, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.sfmt.SFMT.random_raw": [[119, 2, 2, 0, "output", "Output values."], [119, 2, 2, 0, "size", "Output shape."]], "randomgen.sfmt.SFMT.seed": [[120, 2, 2, 0, "seed", "Entropy used to initialize the pseudo-random number generator."]], "randomgen.speck128": [[192, 1, 1, 0, "SPECK128", "Container for the SPECK (128 x 256) pseudo-random number generator."]], "randomgen.speck128.SPECK128": [[122, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [123, 4, 1, 0, "cffi", "CFFI interface"], [124, 4, 1, 0, "ctypes", "ctypes interface"], [125, 3, 1, 0, "jump", "Jumps the state as-if iter * 2**64 random numbers are generated"], [126, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [192, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [127, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [128, 3, 1, 0, "seed", "Seed the generator"], [192, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [129, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.speck128.SPECK128.__init__": [[192, 2, 2, 0, "counter", "Counter to use in the SPECK128 state."], [192, 2, 2, 0, "key", "Key to use in the SPECK128 state."], [192, 2, 2, 0, "mode", "Deprecated parameter."], [192, 2, 2, 0, "rounds", "Number of rounds of the SPECK algorithm to run."], [192, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**256), a SeedSequence instance or None (the default)."]], "randomgen.speck128.SPECK128.advance": [[122, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.speck128.SPECK128.jump": [[125, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.speck128.SPECK128.jumped": [[126, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.speck128.SPECK128.random_raw": [[127, 2, 2, 0, "output", "Output values."], [127, 2, 2, 0, "size", "Output shape."]], "randomgen.speck128.SPECK128.seed": [[128, 2, 2, 0, "counter", "Integer in [0,2**128) containing the counter position or a 2-element array of uint64 containing the counter"], [128, 2, 2, 0, "key", "Integer in [0,2**256) containing the key or a 4-element array of uint64 containing the key"], [128, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**256), a SeedSequence instance or None (the default)."]], "randomgen.threefry": [[193, 1, 1, 0, "ThreeFry", "Container for the ThreeFry family of pseudo-random number generators."]], "randomgen.threefry.ThreeFry": [[130, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [131, 4, 1, 0, "cffi", "CFFI interface"], [132, 4, 1, 0, "ctypes", "ctypes interface"], [133, 3, 1, 0, "jump", "Jumps the state as-if 2**(W*N/2) random numbers have been generated."], [134, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [193, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [135, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [136, 3, 1, 0, "seed", "Seed the generator"], [193, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [137, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.threefry.ThreeFry.__init__": [[193, 2, 2, 0, "counter", "Counter to use in the ThreeFry state."], [193, 2, 2, 0, "key", "Key to use in the ThreeFry state."], [193, 2, 2, 0, "mode", "Deprecated parameter."], [193, 2, 2, 0, "number", "Number of values to produce in a single call."], [193, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, data will be read from /dev/urandom (or the Windows analog) if available."], [193, 2, 2, 0, "width", "Bit width the values produced."]], "randomgen.threefry.ThreeFry.advance": [[130, 2, 2, 0, "counter", "Flag indicating whether the advance the counter only or both the counter and the buffer position."], [130, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.threefry.ThreeFry.jump": [[133, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.threefry.ThreeFry.jumped": [[134, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.threefry.ThreeFry.random_raw": [[135, 2, 2, 0, "output", "Output values."], [135, 2, 2, 0, "size", "Output shape."]], "randomgen.threefry.ThreeFry.seed": [[136, 2, 2, 0, "counter", "Counter to use in the ThreeFry state."], [136, 2, 2, 0, "key", "Key to use in the ThreeFry state."], [136, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, data will be read from /dev/urandom (or the Windows analog) if available."]], "randomgen.tyche": [[194, 1, 1, 0, "Tyche", "Container for the Tychee pseudo-random number generator."]], "randomgen.tyche.Tyche": [[138, 4, 1, 0, "cffi", "CFFI interface"], [139, 4, 1, 0, "ctypes", "ctypes interface"], [194, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [140, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [141, 3, 1, 0, "seed", "Seed the generator"], [194, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [142, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.tyche.Tyche.__init__": [[194, 2, 2, 0, "idx", "The index to use when seeding from a SeedSequence."], [194, 2, 2, 0, "original", "If True, use the original Tyche implementation."], [194, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.tyche.Tyche.random_raw": [[140, 2, 2, 0, "output", "Output values."], [140, 2, 2, 0, "size", "Output shape."]], "randomgen.tyche.Tyche.seed": [[141, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]], "randomgen.wrapper": [[195, 1, 1, 0, "UserBitGenerator", "Construct a bit generator from  Python functions"]], "randomgen.wrapper.UserBitGenerator": [[143, 4, 1, 0, "cffi", "CFFI interface"], [144, 4, 1, 0, "ctypes", "ctypes interface"], [145, 3, 1, 0, "from_cfunc", "state_getter=None, state_setter=None)"], [146, 3, 1, 0, "from_ctypes", "state_getter=None, state_setter=None)"], [147, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [148, 4, 1, 0, "state", "Get or set the state"]], "randomgen.wrapper.UserBitGenerator.__init__": [[195, 2, 2, 0, "bits", "The number of bits output by the next_raw callable."], [195, 2, 2, 0, "next_32", "A callable with the same signature as as next_raw that always return 32 bits."], [195, 2, 2, 0, "next_64", "A callable with the same signature as as next_raw that always return 64 bits."], [195, 2, 2, 0, "next_double", "A callable with the same signature as as next_raw that always return a random double in [0,1)."], [195, 2, 2, 0, "next_raw", "A callable that returns either 64 or 32 random bits."], [195, 2, 2, 0, "state", "A ctypes pointer to pass into the next functions."], [195, 2, 2, 0, "state_getter", "A callable that returns the state of the bit generator."], [195, 2, 2, 0, "state_setter", "A callable that sets the state of the bit generator."]], "randomgen.wrapper.UserBitGenerator.from_cfunc": [[145, 2, 2, 0, "next_32", "A numba callback with a signature uint32(void) the return the next 32 bits from the underlying PRNG."], [145, 2, 2, 0, "next_64", "A numba callback with a signature uint64(void) the return the next 64 bits from the underlying PRNG."], [145, 2, 2, 0, "next_double", "A numba callback with a signature uint32(void) the return the next double in [0,1) from the underlying PRNG."], [145, 2, 2, 0, "next_raw", "A numba callback with a signature uint64(void) the return the next raw value from the underlying PRNG."], [145, 2, 2, 0, "state", "A void pointer to the state."], [145, 2, 2, 0, "state_getter", "A callable that returns the state of the bit generator."], [145, 2, 2, 0, "state_setter", "A callable that sets the state of the bit generator."]], "randomgen.wrapper.UserBitGenerator.from_ctypes": [[146, 2, 2, 0, "next_32", "A CFunctionType returning ctypes.c_uint64 and taking one ctypes.c_void_p input that returns the next 32 bits from the underlying PRNG."], [146, 2, 2, 0, "next_64", "A CFunctionType returning ctypes.c_uint64 and taking one ctypes.c_void_p input that returns the next 64 bits from the underlying PRNG."], [146, 2, 2, 0, "next_double", "A CFunctionType returning ctypes.c_uint64 and taking one ctypes.c_void_p input that returns the next double in [0,1) value from the underlying PRNG."], [146, 2, 2, 0, "next_raw", "A CFunctionType returning ctypes.c_uint64 and taking one ctypes.c_void_p input that returns the next raw value from the underlying PRNG."], [146, 2, 2, 0, "state", "A void pointer to the state."], [146, 2, 2, 0, "state_getter", "A callable that returns the state of the bit generator."], [146, 2, 2, 0, "state_setter", "A callable that sets the state of the bit generator."]], "randomgen.wrapper.UserBitGenerator.random_raw": [[147, 2, 2, 0, "output", "Output values."], [147, 2, 2, 0, "size", "Output shape."]], "randomgen.xoroshiro128": [[196, 1, 1, 0, "Xoroshiro128", "Container for the xoroshiro128+/++ pseudo-random number generator."]], "randomgen.xoroshiro128.Xoroshiro128": [[149, 4, 1, 0, "cffi", "CFFI interface"], [150, 4, 1, 0, "ctypes", "ctypes interface"], [151, 3, 1, 0, "jump", "Jumps the state as-if 2**64 random numbers have been generated."], [152, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [196, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [153, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [154, 3, 1, 0, "seed", "Seed the generator"], [196, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [155, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.xoroshiro128.Xoroshiro128.__init__": [[196, 2, 2, 0, "mode", "Deprecated parameter."], [196, 2, 2, 0, "plusplus", "Whether to use the ++ version (xoroshiro128++)."], [196, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence, or None (the default)."]], "randomgen.xoroshiro128.Xoroshiro128.jump": [[151, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.xoroshiro128.Xoroshiro128.jumped": [[152, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.xoroshiro128.Xoroshiro128.random_raw": [[153, 2, 2, 0, "output", "Output values."], [153, 2, 2, 0, "size", "Output shape."]], "randomgen.xoroshiro128.Xoroshiro128.seed": [[154, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence, or None (the default)."]], "randomgen.xorshift1024": [[197, 1, 1, 0, "Xorshift1024", "Container for the xorshift1024*\u03c6 pseudo-random number generator."]], "randomgen.xorshift1024.Xorshift1024": [[156, 4, 1, 0, "cffi", "CFFI interface"], [157, 4, 1, 0, "ctypes", "ctypes interface"], [158, 3, 1, 0, "jump", "Jumps the state as-if 2**512 random numbers have been generated"], [159, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [197, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [160, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [161, 3, 1, 0, "seed", "Seed the generator"], [197, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [162, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.xorshift1024.Xorshift1024.__init__": [[197, 2, 2, 0, "mode", "Deprecated parameter."], [197, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.xorshift1024.Xorshift1024.jump": [[158, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.xorshift1024.Xorshift1024.jumped": [[159, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.xorshift1024.Xorshift1024.random_raw": [[160, 2, 2, 0, "output", "Output values."], [160, 2, 2, 0, "size", "Output shape."]], "randomgen.xorshift1024.Xorshift1024.seed": [[161, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]], "randomgen.xoshiro256": [[198, 1, 1, 0, "Xoshiro256", "Container for the xoshiro256** pseudo-random number generator."]], "randomgen.xoshiro256.Xoshiro256": [[163, 4, 1, 0, "cffi", "CFFI interface"], [164, 4, 1, 0, "ctypes", "ctypes interface"], [165, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated."], [166, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [198, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [167, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [168, 3, 1, 0, "seed", "Seed the generator"], [198, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [169, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.xoshiro256.Xoshiro256.__init__": [[198, 2, 2, 0, "mode", "Deprecated parameter."], [198, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.xoshiro256.Xoshiro256.jump": [[165, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.xoshiro256.Xoshiro256.jumped": [[166, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.xoshiro256.Xoshiro256.random_raw": [[167, 2, 2, 0, "output", "Output values."], [167, 2, 2, 0, "size", "Output shape."]], "randomgen.xoshiro256.Xoshiro256.seed": [[168, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]], "randomgen.xoshiro512": [[199, 1, 1, 0, "Xoshiro512", "Container for the xoshiro512** pseudo-random number generator."]], "randomgen.xoshiro512.Xoshiro512": [[170, 4, 1, 0, "cffi", "CFFI interface"], [171, 4, 1, 0, "ctypes", "ctypes interface"], [172, 3, 1, 0, "jump", "Jumps the state as-if 2**256 random numbers have been generated."], [173, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [199, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [174, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [175, 3, 1, 0, "seed", "Seed the generator"], [199, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [176, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.xoshiro512.Xoshiro512.__init__": [[199, 2, 2, 0, "mode", "Deprecated parameter."], [199, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.xoshiro512.Xoshiro512.jump": [[172, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.xoshiro512.Xoshiro512.jumped": [[173, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.xoshiro512.Xoshiro512.random_raw": [[174, 2, 2, 0, "output", "Output values."], [174, 2, 2, 0, "size", "Output shape."]], "randomgen.xoshiro512.Xoshiro512.seed": [[175, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:parameter", "3": "py:method", "4": "py:attribute", "5": "py:function"}, "terms": {"": [0, 1, 2, 3, 49, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 208, 213, 222, 225], "0": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 44, 51, 56, 64, 71, 79, 87, 89, 95, 103, 114, 120, 128, 130, 136, 141, 145, 146, 154, 161, 168, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 208, 209, 210, 211, 216, 217, 218, 219, 220, 221, 222, 224], "000": [201, 205, 222], "01": [1, 181], "01769784": 200, "04674949j": 209, "04682163j": 209, "04913229": 209, "06687298j": 209, "06912343j": 209, "08": 201, "09": 181, "0930": 197, "0j": 209, "0x0e": 201, "0x1": 201, "0x11": 201, "0x14": 201, "0x1da942042e4dd58b5": 180, "0x3f": 201, "0x5e": 201, "0x77": 201, "0x94d049bb133111eb": 180, "0xb7": 201, "0xbf58476d1ce4e5b9": 180, "0xd1": 201, "0xdead10cc": 180, "0xf1ea5e": 201, "0xff37f1f758180525": 180, "0xffffffff": 201, "0xffffffffffffffff": 201, "1": [0, 1, 2, 3, 7, 8, 19, 20, 22, 41, 42, 48, 49, 51, 56, 61, 62, 64, 69, 76, 77, 84, 85, 89, 92, 93, 99, 114, 117, 118, 120, 125, 126, 130, 133, 134, 145, 146, 151, 152, 158, 159, 165, 166, 172, 173, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 205, 206, 208, 209, 210, 211, 212, 215, 217, 218, 219, 221, 222, 225], "10": [0, 1, 2, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 205, 219, 222], "100": [188, 201, 210, 219, 222], "1000": [114, 201, 208, 221], "1000000": [201, 205], "10000000": 219, "1000x": [200, 201], "1007": 194, "101": 222, "102": 222, "1024": [3, 177, 194, 196, 197, 198, 199, 221], "104": 222, "105": 222, "108": 222, "109": 222, "10941": 223, "11": [0, 200, 201, 222], "110": 222, "111": 222, "112": 222, "114": 222, "11400714819323198486": [61, 62], "11659149": 211, "1167245051188668936": 201, "117": 222, "11749869230777074271": 201, "118": 222, "119": 222, "12": [1, 192, 201, 222], "120": 222, "121": 222, "12103276313412614439": 201, "122": [201, 222], "123": [0, 1, 3, 177, 179, 181, 187, 188, 192, 193, 194, 196, 197, 198, 199], "1234": [0, 1, 3, 177, 179, 181, 184, 185, 186, 187, 192, 193, 194, 196, 197, 198, 199], "12345": 217, "124": 222, "126": 222, "127": 222, "12712143389959007425": 201, "128": [0, 1, 2, 10, 15, 19, 20, 32, 41, 42, 48, 49, 69, 71, 76, 77, 79, 85, 87, 95, 117, 118, 128, 136, 165, 166, 178, 181, 182, 185, 186, 191, 192, 196, 198, 199, 200, 201, 217, 221, 222, 225], "12803009197309261862": 189, "128bit": 0, "128gb": 225, "129": [0, 192, 222], "13": [179, 200, 201, 222, 223, 225], "130": 222, "13020151409549081939": 190, "131": 222, "132": [187, 193], "13259944246262022926": 201, "133411349017971402732463711865589153492": 201, "134": 222, "135": 222, "136": 222, "138": 222, "139": 222, "13933250373249421220": 190, "13952735719045862400": 201, "14": [181, 197, 201, 222], "140": 188, "1402": 197, "1403": 197, "14241860431798867506": 201, "143": 222, "14412717025735663865": 195, "145": 222, "14501513697102443756": 201, "147": 222, "149": 222, "15": [192, 201, 217, 222, 225], "15002187965291974971": 201, "15184288j": 209, "152": 222, "154": 222, "155": 222, "156": 222, "15715724510248929625": 201, "15750249268501108917": 180, "15780814468893899944": 201, "158": 222, "16": [1, 3, 4, 58, 66, 73, 81, 89, 122, 130, 177, 180, 186, 197, 217, 221, 222, 225], "160": 222, "162": 222, "163": 222, "16313": [180, 186], "164": 222, "16430795192718506": 201, "165": 222, "1654503": 211, "167": 222, "168": 222, "17": [0, 1, 89, 130, 179, 187, 192, 193, 217, 218, 219, 222], "170": 222, "171": 219, "17190901158427765818": 201, "172": 222, "17233599j": 209, "17318243661941184039": 195, "174": 222, "17400468283504521969": 201, "175": 222, "176": 222, "177": 222, "178": 222, "17987378307908897868": 201, "18": [217, 222], "18011468": 209, "18034113569054765009": 201, "1805": 223, "181": 222, "182": 222, "183": 222, "18366146": 209, "184": 222, "18419364": 209, "185": 222, "186": 222, "1866397": 209, "189": 222, "19": [201, 217, 222, 225], "190": 222, "192": [189, 222], "193": 222, "195": [222, 225], "196": [187, 193, 222, 225], "1966": [212, 215], "197": 222, "19754723j": 209, "198": 222, "199": [212, 215, 222], "1991": 210, "19937": 221, "1994": [212, 215], "1997": [212, 215], "1998": 183, "1999": 180, "1e": [209, 210], "1ghz": 222, "1j": 209, "1tb": 200, "2": [0, 1, 2, 3, 7, 8, 10, 15, 19, 20, 22, 27, 32, 37, 41, 42, 44, 48, 49, 51, 56, 61, 62, 64, 69, 71, 76, 77, 79, 85, 87, 89, 92, 93, 95, 114, 117, 118, 120, 125, 126, 128, 130, 133, 134, 136, 141, 151, 152, 154, 158, 159, 161, 165, 166, 168, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 201, 203, 205, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225], "20": [1, 49, 182, 201, 217, 222, 225], "2000": [181, 183], "2001": 210, "2003": [181, 197], "2006": [2, 191], "2008": [1, 2, 49, 177, 182, 191], "2009": 179, "2011": [181, 187, 193, 194], "2012": [188, 194, 200], "2014": 197, "2015": [188, 208, 209], "2018": 223, "2019": [0, 181, 192], "202": 222, "2020": [3, 49, 180, 181, 186, 188, 189], "20210501": 200, "203": [204, 212, 215], "205": 222, "206": 222, "208": [219, 222], "2080": 114, "21": [181, 201, 222, 225], "210": 222, "210306068529402873165736369884012333108": 76, "212": 222, "213": 222, "215": 222, "2156737186088199787": 189, "217": 222, "219": 222, "22": [0, 3, 200, 212, 215, 222], "225": 180, "227": 222, "228": 222, "229": 222, "23": [206, 217, 222], "23204345": 211, "234": 222, "23587346j": 209, "24": [201, 222], "242": 222, "244": 222, "246": 222, "249": [180, 222], "250": 222, "2549297995355413924": 201, "255": 190, "256": [1, 15, 32, 95, 128, 136, 172, 173, 177, 189, 190, 192, 198, 199, 221, 225], "26": [189, 217], "260": 180, "264": 222, "27": [179, 180, 222], "2701576j": 209, "271": 222, "2740075917084007745": 201, "278": 222, "279": 222, "28": [1, 181, 222], "28036548": 209, "28145563": 209, "282": 222, "283": 222, "285": 222, "2862933555777941757": 181, "287": 222, "290": [2, 182, 191], "298": [2, 182, 191], "2nd": 210, "3": [3, 49, 114, 179, 180, 181, 182, 183, 186, 187, 189, 190, 193, 194, 197, 201, 209, 210, 211, 212, 215, 217, 219, 222, 225], "30": [180, 183, 222], "30220482": 211, "3035725": 209, "3037000493": 181, "304881062738325533": 201, "31": [180, 201, 222], "312": [56, 183], "31464": 194, "31483301": 209, "32": [0, 1, 2, 3, 4, 5, 6, 12, 13, 17, 18, 22, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 51, 53, 54, 58, 59, 60, 66, 67, 68, 73, 74, 75, 81, 82, 83, 89, 90, 91, 97, 98, 104, 105, 109, 110, 114, 115, 116, 120, 122, 123, 124, 130, 131, 132, 138, 139, 143, 144, 145, 146, 149, 150, 156, 157, 163, 164, 170, 171, 177, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 214, 220, 221, 222, 225], "32361134": 209, "325874985469": 190, "32699266": 209, "32777": 177, "33": [0, 1, 187, 192, 193, 222], "3315941531": 201, "3394385948627484371": 225, "34": [192, 222], "348": 183, "35": 222, "35185607": 209, "35360097j": 209, "35399562948360463058890781895381311971": 201, "356": 181, "357": 183, "36": 222, "36159505490948474": 201, "366935": 3, "37": [179, 201, 225], "37548236789240574857439075": 180, "381": 200, "3814417803339974021": 201, "382": [2, 191], "384": 2, "385": [49, 182], "39": [177, 201, 222], "390": [49, 182], "395": [212, 215], "3_10": 194, "3rd": 210, "4": [0, 1, 3, 15, 95, 128, 136, 179, 180, 181, 187, 189, 190, 192, 193, 194, 195, 197, 198, 199, 201, 209, 217, 219, 221, 222, 225], "405": [212, 215], "4141": 188, "42551611": 209, "44163456j": 209, "44740101": 209, "45": 222, "46716898": 209, "47": 177, "47026247687942121848144207491837523525": 180, "47108547995356098": 211, "48": 222, "4865540595714422341": 201, "489048146361948": 189, "4893028492374823749823": 114, "49": 222, "4976686463289251617": 201, "4986": 177, "4j": 209, "4tb": [200, 225], "5": [181, 201, 205, 208, 209, 211, 217, 219, 221, 222], "50": [177, 190, 221, 225], "5000": 210, "50539209j": 209, "51": 222, "512": [158, 159, 177, 196, 197, 198, 199, 221], "521015634160378615": 195, "5228567175856316": 219, "52338984": 211, "5264292724725465572": 201, "53": [200, 201, 221], "530704699024515781": 201, "5336551313612926520": 201, "54": 222, "54323428": 211, "55": [201, 222], "5553417437478470678": 201, "56": 222, "56994348j": 209, "57": 222, "57787275j": 209, "5897100938578919857511": 225, "59": 222, "59809459": 209, "6": [49, 181, 192, 197, 201, 210, 217, 219, 222], "602963287911976729": 201, "603484028490308141": 221, "607": [2, 191], "61": [212, 215, 222], "62": [201, 222], "622": [2, 191], "623": 183, "624": [51, 120, 182, 191], "6246": 197, "63": [114, 201, 212, 215], "64": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 39, 40, 43, 44, 46, 47, 50, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 74, 75, 77, 78, 79, 82, 83, 85, 86, 87, 90, 91, 94, 95, 97, 98, 104, 105, 106, 109, 110, 111, 114, 115, 116, 119, 123, 124, 125, 126, 127, 128, 131, 132, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 160, 161, 163, 164, 167, 168, 170, 171, 174, 175, 177, 178, 179, 180, 181, 182, 184, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 214, 217, 220, 221, 222, 225], "64185732j": 209, "642": 194, "64gb": 225, "65": [0, 1, 187, 192, 193], "66": [219, 222], "66462037": 209, "66851489": 200, "67": 222, "68": 180, "69": 222, "7": [179, 200, 201, 203, 209, 219, 222, 225], "71": 222, "72": 222, "7203": 194, "73": [212, 215, 222], "73939778j": 209, "74": 222, "75": 222, "75224494": 211, "755828109848996024": 201, "76": 219, "764": [2, 22], "76788821": 209, "768": [182, 191], "77": 222, "7713239619832409074": 195, "78": 222, "79": 222, "79479508": 211, "7j": 209, "8": [0, 1, 181, 183, 189, 197, 200, 201, 209, 210, 222, 225], "80": 222, "8062752282355435850": 190, "81": 222, "8192": 189, "8196": [190, 221, 225], "82": 222, "83": 222, "84": 222, "84832672j": 209, "85": [219, 222], "8509285875904376097169743623867": [3, 194], "85384162": 200, "86316980830225721106033794313786972513572058861498566720023788662568817403978": 225, "86532386": 200, "86649667": 209, "86820401": 211, "87": [212, 215], "87136372517582989555478159403783844777": 201, "87316102": 200, "88380663j": 209, "88447445j": 209, "8870424784319794977": 201, "9": [0, 1, 187, 192, 193, 201, 219, 222], "9007199254740992": 201, "91": 222, "9130649916277841551": 189, "91476019": 209, "91802901j": 209, "93": [0, 1, 192], "936j": 204, "93782402j": 209, "9405893610231781608176235507540826829": 201, "95": 222, "9596734350428388680": 201, "96": [192, 221, 222], "9710": 200, "97279918": 209, "978": 194, "98": 222, "99": 222, "99091858": 211, "99149989": 211, "A": [2, 3, 107, 112, 145, 146, 179, 180, 182, 184, 185, 186, 187, 188, 189, 190, 191, 193, 195, 201, 202, 203, 206, 209, 210, 212, 215, 220, 221, 225], "As": [187, 193, 224], "By": [180, 186, 225], "For": [4, 10, 15, 44, 58, 64, 66, 73, 81, 89, 95, 114, 122, 128, 130, 136, 161, 200, 220, 221, 222], "If": [0, 1, 2, 3, 9, 10, 14, 15, 21, 22, 26, 27, 31, 32, 36, 37, 43, 44, 50, 51, 55, 56, 63, 64, 70, 71, 78, 79, 86, 87, 89, 94, 95, 100, 101, 106, 107, 111, 112, 114, 119, 120, 127, 128, 130, 135, 136, 140, 141, 145, 146, 147, 148, 153, 154, 160, 161, 167, 168, 174, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 204, 208, 209, 210, 211, 212, 214, 215], "In": [0, 1, 2, 3, 4, 58, 66, 73, 81, 89, 114, 122, 130, 177, 180, 182, 183, 185, 186, 188, 191, 192, 194, 195, 196, 197, 198, 199, 200, 202, 210, 214, 215, 217, 219, 221], "It": [3, 10, 15, 27, 32, 37, 44, 64, 71, 79, 87, 95, 107, 112, 128, 136, 141, 154, 161, 168, 175, 177, 180, 185, 188, 189, 194, 195, 196, 198, 199, 200, 201, 203, 204, 210, 215, 217, 225], "NOT": [188, 202], "No": [49, 182, 188], "Not": [84, 101], "ON": [49, 182], "On": [188, 202, 212, 215], "One": [107, 112, 179, 187, 189, 190, 193, 200, 211], "Such": 210, "The": [0, 1, 2, 3, 4, 8, 10, 15, 20, 32, 42, 44, 49, 58, 61, 62, 64, 66, 69, 71, 73, 76, 77, 79, 81, 85, 87, 89, 93, 95, 102, 114, 118, 122, 126, 128, 130, 134, 136, 152, 159, 166, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 217, 219, 221, 222, 225], "Their": [2, 182, 191], "There": [179, 203, 221], "These": [0, 1, 2, 3, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 196, 197, 198, 199, 201, 203, 205, 210, 214, 221, 225], "To": [89, 130, 185, 187, 188, 211, 225], "With": 188, "_": [0, 1, 2, 182, 187, 188, 191, 192, 193, 196, 197, 198, 199, 219, 221, 225], "__del__": 219, "__init__": [201, 219], "__name__": 201, "_fill": 219, "_has_uint32": 201, "_mm_paus": 188, "_next_32": 201, "_next_64": 201, "_next_doubl": 201, "_next_raw": 201, "_random_gener": 219, "_state": 201, "_uinteg": 201, "ab": [197, 223], "abl": 188, "about": [177, 190, 200, 201, 203, 217, 225], "abov": 225, "abrupt": 200, "absolut": 190, "absolute_import": 200, "ac": 49, "acceler": 222, "accept": [195, 201], "access": [0, 1, 2, 3, 49, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 204, 205, 214, 220], "accord": 201, "acm": [183, 187, 193], "acquir": 188, "across": [195, 200, 221, 225], "activ": 203, "actuari": [208, 209], "ad": [180, 181, 190, 200, 206], "add": [180, 200, 206, 211, 217], "addit": [3, 177, 180, 181, 185, 186, 194, 204, 208, 217, 219, 220, 221], "addition": [185, 187, 221], "address": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 143, 144, 149, 150, 156, 157, 163, 164, 170, 171, 195, 201, 205], "advanc": [0, 1, 2, 178, 180, 181, 182, 184, 185, 186, 187, 191, 192, 193, 196, 197, 198, 199, 200, 201, 217, 219], "advanced_encryption_standard": 0, "ae": [178, 217], "aescount": [0, 1, 177, 192, 200, 203, 217, 220, 221, 222, 225], "aesni": 177, "affect": 200, "after": [100, 180, 201, 205, 219], "again": [10, 15, 27, 32, 37, 44, 64, 71, 79, 87, 95, 107, 112, 128, 136, 141, 154, 161, 168, 175], "against": 200, "agenc": 192, "ahead": [2, 49, 182, 191], "algorithm": [2, 179, 180, 182, 184, 185, 186, 189, 190, 191, 192, 202], "alia": [186, 200], "alias": 185, "align": [205, 219], "all": [0, 1, 2, 9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 103, 106, 111, 119, 127, 135, 140, 147, 153, 160, 167, 174, 181, 182, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 203, 205, 208, 211, 214, 215, 219, 222, 225], "allow": [0, 1, 2, 180, 181, 182, 187, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 205, 217, 219, 220], "along": [205, 210, 221], "alongsid": 217, "also": [2, 3, 71, 89, 107, 112, 130, 178, 179, 182, 183, 185, 187, 188, 189, 190, 191, 197, 200, 203, 205, 217, 221, 222], "alter": 181, "altern": [0, 1, 177, 187, 192, 193, 194, 211, 217, 222], "although": [188, 206, 222], "alwai": [0, 1, 2, 3, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 206, 210, 225], "ambigu": 200, "amd": 188, "amer": [212, 215], "among": 200, "amount": 217, "an": [0, 1, 2, 3, 4, 10, 15, 22, 27, 32, 37, 44, 51, 56, 58, 66, 71, 73, 79, 81, 87, 89, 95, 107, 112, 114, 120, 122, 128, 130, 136, 141, 145, 146, 154, 161, 168, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 209, 210, 215, 217, 219, 221, 222, 223, 225], "analog": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 51, 56, 79, 87, 95, 120, 128, 136, 141, 154, 161, 168, 175, 177, 179, 181, 182, 183, 184, 187, 191, 192, 193, 194, 196, 197, 198, 199, 210], "analysi": [187, 193, 212, 215], "ani": [0, 1, 2, 4, 7, 22, 41, 51, 56, 66, 73, 76, 81, 89, 92, 101, 120, 122, 125, 130, 133, 151, 158, 165, 172, 182, 183, 187, 188, 191, 192, 193, 201, 203, 206, 219, 221, 222, 225], "annal": [212, 215], "anon_func_st": 205, "anoth": [0, 1, 10, 15, 95, 136, 177, 187, 192, 193, 196, 197, 198, 199], "api": [99, 200, 203], "appear": [181, 200], "append": [181, 219, 221, 225], "appli": [180, 194, 200, 201, 205, 210, 215], "applic": [0, 1, 2, 99, 177, 181, 182, 184, 185, 186, 187, 188, 189, 191, 192, 193, 196, 197, 198, 199, 200, 212, 215, 217, 220, 221, 222], "appropri": 180, "approxim": 210, "april": 189, "ar": [0, 1, 2, 3, 4, 7, 9, 10, 14, 15, 21, 22, 26, 27, 31, 32, 36, 37, 43, 44, 50, 51, 55, 56, 58, 63, 64, 66, 70, 73, 78, 79, 81, 86, 87, 89, 94, 95, 100, 102, 106, 107, 111, 112, 114, 119, 120, 122, 125, 127, 128, 130, 135, 136, 140, 141, 147, 148, 153, 154, 160, 161, 167, 168, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 214, 215, 217, 219, 221, 222, 225], "araujo": [194, 200], "arbitrari": [0, 1, 180, 184, 185, 186, 187, 192, 193, 217, 221], "arg": 219, "argument": [200, 209, 210, 215, 219, 225], "around": [205, 221], "arrai": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 44, 51, 56, 95, 114, 120, 128, 136, 141, 154, 161, 168, 175, 177, 179, 181, 182, 183, 187, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 205, 209, 211, 212, 215, 219, 221], "arrang": [209, 210, 215], "array_lik": [15, 107, 112, 189, 190], "articl": 188, "arxiv": 223, "asarrai": 205, "assert": 188, "assertionerror": 188, "assess": 201, "assoc": [212, 215], "associ": 215, "assum": [180, 210, 215], "assur": [200, 217], "astyp": 219, "attach": 188, "attempt": 202, "attribut": [179, 219, 225], "audit": 188, "aug": 223, "augment": [2, 191], "author": [200, 217], "auto": 202, "automat": [188, 202, 215], "avail": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 49, 51, 56, 79, 87, 95, 114, 120, 128, 136, 141, 148, 154, 161, 168, 175, 177, 179, 180, 181, 182, 183, 184, 186, 187, 188, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 217, 224], "averag": [4, 58, 66, 73, 81, 89, 122, 130, 177, 210, 221], "avoid": 200, "axi": 210, "b": [179, 181, 201, 211], "back": 202, "backward": [89, 130, 200, 210, 218, 222, 225], "bad": 225, "base": [2, 4, 49, 58, 66, 73, 81, 89, 122, 130, 177, 180, 189, 191, 194, 196, 200, 205, 209, 217, 220, 221, 222], "base_gen": 225, "basic": [200, 203, 217], "basic_rng": 203, "beaulieu": 192, "becaus": [209, 210, 215], "beck": 181, "becom": [186, 200], "been": [0, 1, 2, 4, 8, 19, 20, 41, 42, 48, 49, 58, 61, 62, 66, 69, 73, 76, 77, 81, 85, 89, 92, 93, 114, 117, 118, 122, 126, 130, 133, 134, 151, 152, 158, 159, 165, 166, 172, 173, 180, 181, 182, 187, 188, 191, 192, 193, 196, 197, 198, 199, 200, 203, 205, 206, 210, 215, 216, 217, 218, 221, 225], "befor": [0, 1, 10, 15, 95, 136, 180, 185, 187, 188, 192, 193, 200, 201, 202, 210, 215, 218, 219, 225], "began": 217, "begin": [201, 209, 225], "behav": 219, "behavior": [209, 210, 215], "being": [200, 203, 217], "bell": 210, "below": [201, 221, 222, 225], "berlin": 194, "bernstein": 1, "best": [195, 201, 221, 225], "beta": [212, 215], "better": [179, 180, 181, 184, 185, 186, 217], "between": [0, 2, 4, 22, 51, 56, 58, 64, 66, 73, 81, 89, 114, 120, 122, 130, 179, 182, 183, 191, 192, 200, 208, 209, 217, 221], "bg": [189, 195], "big": [8, 20, 42, 49, 62, 69, 77, 85, 93, 118, 126, 134, 152, 159, 166, 173, 180], "bit": [0, 1, 2, 3, 4, 5, 6, 8, 9, 12, 13, 14, 17, 18, 19, 20, 21, 22, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 62, 63, 66, 67, 68, 69, 70, 73, 74, 75, 77, 78, 79, 81, 82, 83, 85, 86, 87, 89, 90, 91, 93, 94, 97, 98, 99, 104, 105, 106, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 126, 127, 130, 131, 132, 134, 135, 138, 139, 140, 143, 144, 145, 146, 147, 149, 150, 152, 153, 156, 157, 159, 160, 163, 164, 166, 167, 170, 171, 173, 174, 177, 179, 181, 182, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 213, 214, 220, 221, 222, 225], "bit_gen": [3, 114, 180, 189, 190, 194, 201, 225], "bit_gen_st": 201, "bit_gener": [0, 1, 2, 8, 20, 42, 49, 62, 69, 77, 85, 93, 99, 118, 126, 134, 152, 159, 166, 173, 182, 184, 185, 186, 187, 191, 192, 193, 196, 197, 198, 199, 201, 203, 204], "bit_generator_kwarg": 225, "bitgen": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 143, 144, 149, 150, 156, 157, 163, 164, 170, 171, 188, 203, 205], "bitgen_st": 205, "bitgen_t": [200, 205], "bitgener": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 107, 111, 112, 119, 127, 135, 140, 147, 153, 160, 167, 174, 188, 189, 190, 200, 203, 207, 217], "bivari": [208, 209], "blackman": [196, 198, 199], "block": [177, 201, 215, 221], "blocked_rng": 221, "blogspot": 181, "bob": 179, "bool": 103, "both": [0, 1, 10, 15, 32, 71, 89, 95, 128, 130, 136, 177, 187, 190, 192, 193, 196, 200, 201, 205, 208, 222], "bound": [200, 205, 214], "boundscheck": 205, "box": 205, "brank": 225, "break": 200, "bret": 181, "bridg": 188, "bring": 200, "brng": [200, 203], "brng_t": 200, "broadcast": [200, 203, 208, 209, 210, 215, 220], "brook": 181, "bryan": 192, "bt": 225, "buffer": [0, 1, 89, 102, 130, 177, 192, 200], "bug": 200, "buggi": 200, "build": 200, "built": 201, "burtleburtl": 179, "byte": [200, 225], "c": [146, 179, 195, 200, 201, 203, 205, 209, 220], "c1": [210, 215], "c2": [210, 215], "c73ddb7b": 3, "c_": 210, "c_uint64": 146, "c_void_p": [146, 201], "call": [0, 1, 2, 4, 10, 15, 27, 32, 37, 44, 58, 64, 66, 71, 73, 79, 81, 87, 89, 95, 103, 107, 112, 122, 128, 130, 136, 141, 146, 148, 154, 161, 168, 175, 181, 182, 185, 186, 187, 188, 191, 192, 193, 196, 197, 198, 199, 200, 201, 205, 219, 221], "callabl": [145, 146, 195, 201], "callback": [145, 201], "can": [0, 1, 2, 3, 4, 10, 15, 22, 27, 32, 37, 44, 51, 56, 58, 64, 66, 71, 73, 79, 81, 87, 89, 95, 99, 107, 112, 120, 122, 128, 130, 136, 141, 154, 161, 168, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 210, 217, 219, 221], "cannot": [0, 1, 10, 15, 32, 95, 136, 177, 187, 188, 192, 193, 221], "canon": 200, "capabl": [206, 217], "capac": 189, "capsul": [0, 1, 2, 3, 177, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 196, 197, 198, 199, 205], "capsule_nam": 205, "captur": [0, 1, 192], "carefulli": [196, 198, 199], "carlo": [2, 191], "carrai": 201, "cascad": 222, "case": [0, 1, 2, 9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 119, 127, 135, 140, 147, 153, 160, 167, 174, 177, 182, 183, 185, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 211, 212, 214, 221], "cast": [201, 205, 210, 215], "casualti": [208, 209], "caveat": 205, "cc": 209, "cdef": 205, "ceil": 219, "center": [209, 210], "cffi": [200, 205], "cfunc": [180, 201], "cfunctiontyp": 146, "chacha": [177, 178, 205, 217, 220, 221, 222, 225], "chanc": 189, "chang": [89, 130, 180, 196, 201, 204, 220, 225], "chaotic": [188, 190, 220], "char": 205, "cheap": 185, "check": [185, 187, 188, 190, 200, 205, 209, 210, 215, 225], "check_valid": [209, 210, 215], "chi": 3, "child": [3, 180, 189, 194, 221, 225], "children": [180, 221], "choic": [200, 222], "choleski": [209, 210, 215], "choos": 200, "chose": [185, 190], "chosen": [114, 180], "chri": [3, 190], "cimport": 205, "cipher": [32, 220, 221], "circularli": 209, "circumst": [200, 219], "cj": [210, 215], "clark": 192, "class": [0, 1, 2, 3, 9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 106, 111, 119, 127, 135, 140, 147, 153, 160, 167, 174, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 211, 217, 219, 225], "classif": 210, "classmethod": [145, 146], "cleanup": 200, "clear": [181, 188, 201], "clone": [200, 201], "close": [114, 187, 193, 200, 222], "closur": 201, "cm": [185, 204, 220], "cnp": 181, "code": [0, 1, 2, 3, 49, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 205, 225], "coeffici": 190, "collis": 221, "com": [180, 181, 186, 188], "combin": [3, 181, 194, 222], "come": [0, 1, 2, 181, 182, 187, 191, 192, 193, 196, 197, 198, 199], "command": [188, 202], "common": [200, 205, 219, 225], "commonli": 225, "compar": [201, 217, 219], "compat": [0, 1, 2, 3, 89, 99, 101, 130, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 210, 218, 222, 225], "compil": [200, 201, 205, 220], "complet": [200, 201, 216, 217, 218], "complex": [203, 208, 209, 220], "complex_norm": [203, 204, 209, 220], "complex_normal_distribut": [208, 209], "complic": 205, "compon": [208, 209, 217], "comput": [4, 7, 41, 49, 66, 73, 76, 81, 92, 122, 125, 133, 151, 158, 165, 172, 180, 181, 182, 183, 187, 193, 194, 209, 210, 215, 221, 222], "concern": 221, "concurr": 219, "condit": 200, "confer": [187, 193], "configur": [114, 186, 217, 221], "congruenti": [181, 201, 220], "conjunct": 203, "consider": 200, "consist": [0, 1, 2, 3, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200], "const": 205, "constant": [3, 181, 200], "constraint": [181, 203], "construct": [114, 145, 146, 195, 198, 199, 225], "constructor": 219, "consum": [0, 1, 2, 3, 177, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 196, 197, 198, 199], "consumpt": 178, "contain": [0, 1, 2, 3, 5, 6, 11, 12, 13, 16, 17, 18, 23, 24, 25, 28, 29, 30, 32, 33, 34, 35, 38, 39, 40, 45, 46, 47, 52, 53, 54, 57, 59, 60, 65, 67, 68, 72, 74, 75, 80, 82, 83, 88, 90, 91, 96, 97, 98, 102, 104, 105, 108, 109, 110, 113, 114, 115, 116, 121, 123, 124, 128, 129, 131, 132, 137, 138, 139, 142, 143, 144, 149, 150, 155, 156, 157, 162, 163, 164, 169, 170, 171, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 205, 213, 217], "content": 188, "contigu": [200, 219], "continu": 211, "convert": [89, 130], "coordin": 210, "copi": [200, 224], "core": [4, 58, 66, 73, 81, 89, 122, 130, 188, 203, 204, 217, 219, 221], "corner": 221, "corr": [197, 223], "correct": 200, "correl": [180, 186, 196, 209, 221], "correspond": 185, "corrupt": [0, 1, 2, 3, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 196, 197, 198, 199], "could": 200, "counter": [1, 3, 10, 15, 89, 95, 128, 130, 136, 178, 190, 200, 217, 221], "coupl": 180, "cov": [209, 210, 215], "covari": [208, 209, 210, 212, 215], "cpcg": 180, "cpointer": 201, "cpu": 188, "cpu_count": 219, "cpython": 205, "cr": 1, "creat": [180, 181, 201, 219, 221], "creation": 219, "cryptograph": [0, 3, 177, 187, 192, 193, 202, 217, 220], "cryptographi": [217, 222], "ctype": [145, 146, 180, 195, 200, 201, 205], "current": [2, 178, 182, 183, 191, 200, 205], "curv": 210, "custom": 180, "customiz": 180, "cycl": [177, 181, 188, 190], "cython": [195, 200, 201, 217], "d": [0, 1, 179, 181, 201, 209, 210, 211], "d0fc": 3, "d1": 215, "d2": 215, "danger": [180, 186], "daniel": 223, "data": [0, 1, 3, 10, 15, 27, 32, 37, 79, 87, 95, 128, 136, 141, 154, 161, 168, 175, 177, 179, 181, 184, 187, 192, 193, 194, 196, 197, 198, 199, 205, 210, 225], "data_a": 201, "david": [181, 187, 193, 196, 198, 199], "decemb": 181, "decis": 203, "decomposit": [209, 210, 215], "decor": 201, "deem": 217, "def": [180, 195, 201, 205, 219], "default": [0, 1, 2, 3, 9, 10, 14, 15, 21, 22, 26, 27, 31, 32, 36, 37, 43, 44, 50, 51, 55, 56, 63, 70, 71, 78, 79, 86, 87, 89, 94, 95, 100, 106, 111, 114, 119, 120, 127, 128, 130, 135, 136, 140, 141, 147, 153, 154, 160, 161, 167, 168, 174, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 208, 209, 210, 211, 212, 214, 215, 221, 225], "default_rng": 225, "defin": [179, 180, 200, 217], "definit": [208, 209, 210], "degre": [212, 215], "delta": [4, 58, 66, 73, 81, 89, 122, 130], "delta_new": [89, 130], "demonstr": [195, 220], "depend": [179, 188, 190, 201, 209, 221], "deprec": [0, 1, 2, 177, 179, 183, 184, 191, 192, 193, 196, 197, 198, 199, 200, 203, 224], "deprecationwarn": [200, 203], "deriv": [107, 112, 181, 189, 190], "describ": [11, 16, 23, 28, 33, 38, 45, 52, 57, 65, 72, 80, 88, 96, 102, 108, 113, 121, 129, 137, 142, 155, 162, 169, 176, 213], "descript": 209, "design": [0, 1, 187, 188, 192, 193, 205], "desir": 211, "detail": [10, 15, 44, 64, 95, 128, 136, 161, 208, 217], "detect": [188, 221], "determin": [187, 188, 193, 210, 211, 215], "determinist": [188, 200], "dev": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 51, 56, 79, 87, 95, 120, 128, 136, 141, 154, 161, 168, 175, 177, 179, 181, 182, 183, 184, 187, 191, 192, 193, 194, 196, 197, 198, 199, 201, 202, 219, 220], "develop": [177, 188], "deviat": [208, 210, 225], "df": [212, 215], "di": [181, 196, 197, 198, 199], "diag": 209, "diagon": 210, "dict": [11, 16, 23, 28, 33, 38, 45, 52, 57, 65, 72, 80, 88, 96, 102, 108, 113, 121, 129, 137, 142, 155, 162, 169, 176, 201, 213], "dictionari": [11, 16, 23, 28, 33, 38, 45, 52, 57, 65, 72, 80, 88, 96, 102, 108, 113, 121, 129, 137, 142, 155, 162, 169, 176, 213], "did": 200, "differ": [0, 1, 4, 58, 66, 73, 81, 89, 122, 130, 180, 184, 185, 186, 187, 190, 192, 193, 194, 198, 199, 201, 221], "difficult": 221, "digit": 188, "dim": [212, 215], "dimens": [210, 212, 215], "dimension": [183, 209, 210], "direct": 220, "directli": [0, 1, 2, 3, 9, 10, 14, 15, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 95, 106, 111, 119, 127, 135, 136, 140, 147, 153, 160, 167, 174, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 205, 212, 213, 215, 217, 219], "discuss": [3, 180], "disjoint": 49, "distinct": [0, 1, 2, 114, 177, 179, 181, 182, 187, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 217, 222, 225], "distribut": [0, 1, 4, 58, 66, 73, 81, 89, 122, 130, 192, 200, 203, 205, 206, 208, 209, 210, 211, 212, 215, 217, 219, 220, 221, 222], "distutil": 200, "divid": [61, 62, 69, 76, 77, 85], "dk": 215, "dll": [201, 205], "do": [0, 1, 2, 177, 178, 179, 183, 184, 191, 192, 193, 196, 197, 198, 199, 200, 219, 222], "doc": 200, "docstr": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 106, 111, 119, 127, 135, 140, 147, 153, 160, 167, 174, 200], "document": [145, 146, 195, 200, 217], "doe": [188, 200, 201, 202, 213, 219, 221, 224], "doi": 194, "done": 200, "dongarra": 194, "doti": [3, 190], "doubl": [0, 1, 3, 5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 143, 144, 145, 146, 149, 150, 156, 157, 163, 164, 170, 171, 177, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 205, 210, 215], "dougla": 192, "draw": [0, 1, 4, 58, 66, 73, 81, 89, 114, 122, 130, 192, 200, 208, 209, 210, 212, 215, 217, 221], "drawn": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 119, 127, 135, 140, 147, 153, 160, 167, 174, 202, 208, 209, 210, 211, 212, 214, 221], "drng": 188, "dror": [187, 193], "dsfmt": [178, 200, 217, 220, 221, 222, 225], "dsfmt\u2074": 225, "dtype": [195, 200, 201, 211, 221], "duda": 210, "due": [219, 225], "dure": 188, "dxsm": [178, 180, 185, 200, 204, 217, 220, 222, 225], "dxsm_mult": 180, "dxsm_multipli": 180, "d\u0131az": [212, 215], "e": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 119, 127, 135, 140, 147, 153, 160, 167, 174, 178, 179, 180, 184, 185, 186, 187, 188, 190, 193, 201, 202, 203, 208, 209, 210, 211, 212, 214, 218, 220], "each": [0, 1, 2, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 196, 197, 198, 199, 201, 209, 210, 212, 215, 219, 225], "easi": [187, 193], "ecrypt": 177, "ecuy": [2, 49, 180, 182, 191], "ed": [194, 210], "edg": 200, "edu": 177, "effect": [202, 214], "effici": [2, 49, 178, 180, 182, 184, 185, 186, 191], "efiix64": [3, 178, 194, 200, 217, 222, 225], "efiix64x384": 3, "eg": [200, 204, 209], "eigen": [209, 210, 215], "eigenvalu": 215, "eigh": [209, 210, 215], "either": [0, 1, 2, 10, 15, 95, 114, 136, 177, 179, 182, 183, 185, 187, 188, 189, 191, 192, 193, 195, 196, 197, 198, 199, 205, 214, 225], "element": [0, 1, 2, 3, 10, 15, 89, 95, 128, 130, 136, 177, 179, 181, 182, 183, 187, 191, 192, 193, 196, 197, 198, 199, 210], "elif": 225, "els": [79, 87, 201, 225], "empti": [200, 205, 219], "en": [0, 188, 208, 209], "enabl": [217, 221], "encod": [187, 193, 221], "encount": 200, "encrypt": [0, 177, 192], "end": [179, 209], "enhanc": [181, 200], "enough": 221, "ensur": [0, 1, 2, 4, 7, 41, 66, 73, 76, 81, 92, 103, 122, 125, 133, 151, 158, 165, 172, 181, 182, 187, 188, 191, 192, 193, 196, 197, 198, 199, 201, 221, 225], "entri": 210, "entropi": [0, 1, 2, 27, 44, 64, 71, 79, 87, 107, 112, 120, 128, 136, 141, 154, 161, 168, 175, 180, 181, 182, 184, 185, 186, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 217, 221, 225], "equal": [210, 222], "equidistribut": 183, "erg": 210, "erron": 200, "error": 188, "escap": 225, "especi": 189, "essenti": 221, "estream": 177, "eu": 177, "eugen": 181, "even": [1, 102, 181, 187, 190, 193, 219], "ever": 188, "everi": [187, 193], "evolut": 217, "evolv": 201, "exact": [4, 7, 41, 66, 73, 76, 81, 92, 122, 125, 133, 151, 158, 165, 172, 221], "exactli": [182, 185, 187], "examin": [201, 205, 225], "exampl": [0, 1, 3, 4, 58, 66, 73, 81, 89, 114, 122, 130, 145, 146, 177, 179, 180, 181, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 208, 209, 210, 211, 215, 219, 220, 221], "exce": 188, "excel": [198, 199, 222], "except": [185, 188, 200, 201, 203, 209, 225], "excess": 225, "exclud": 212, "execut": 188, "executor": 219, "exhaust": 200, "exist": [195, 205, 206, 219], "exit": 188, "exot": 217, "expand": [188, 225], "expect": [177, 190, 212], "expens": 221, "experi": [217, 220], "experiment": [197, 217], "explor": 197, "expon": 222, "exponenti": 200, "export": 205, "expos": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 106, 111, 119, 127, 135, 140, 147, 153, 160, 167, 174, 201, 204, 214, 217], "extend": [200, 206, 217, 225], "extendedgener": [200, 203, 204, 206, 217], "extern": [180, 185, 186, 201], "extra": 225, "extrem": 189, "ey": [209, 212], "f": [194, 201, 205, 211], "f2": [49, 182], "face": 203, "factor": [209, 210, 215], "fail": [100, 188, 200, 202, 225], "failur": [103, 188, 200, 225], "fall": [202, 208, 209], "fallback": [200, 202], "fals": [89, 103, 130, 182, 185, 187, 190, 194, 196, 201, 205, 212, 219, 225], "famili": [1, 180, 184, 185, 186, 187, 193, 222, 225], "fast": [2, 3, 177, 180, 182, 184, 185, 186, 189, 190, 194, 195, 198, 199, 200, 201, 203, 217, 219, 220, 222, 223], "faster": [3, 187, 193, 197, 209, 210, 215, 222], "fastest": [177, 200, 209, 210, 215, 222], "favor": 200, "featur": [0, 1, 2, 3, 177, 180, 181, 182, 184, 185, 186, 187, 188, 191, 192, 193, 194, 196, 197, 198, 199, 200, 203], "feiveson": [212, 215], "few": [190, 200, 201, 203], "fewer": [190, 221, 225], "file": [201, 205], "fill": [102, 205, 219], "filler": 200, "final": [1, 114, 181, 188, 200, 201, 205, 210, 215, 221], "finalist": 177, "fine": 189, "first": [0, 114, 181, 188, 190, 201, 205, 219, 221, 225], "five": [217, 221], "fix": [0, 1, 2, 3, 61, 76, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 220, 221], "flag": [89, 103, 130, 188, 201, 212], "flaw": 200, "float": [200, 201, 211, 215], "float128": 200, "float32": [201, 211], "float64": 211, "fold": 225, "folder": 205, "follow": [210, 222], "form": [221, 225], "fortran": 200, "forum": [208, 209], "four": 219, "frac": 209, "fran\u00e7oi": [49, 182], "freedom": [212, 215], "frequenc": 196, "fresh": [107, 112, 189, 190], "from": [0, 1, 2, 4, 10, 15, 22, 27, 32, 37, 49, 51, 56, 58, 66, 73, 79, 81, 87, 89, 95, 107, 112, 114, 120, 122, 128, 130, 136, 141, 145, 146, 154, 161, 168, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 208, 209, 210, 211, 212, 215, 217, 219, 221, 222, 224, 225], "from_cfunc": 201, "full": [181, 205, 210, 218, 221], "fulli": 200, "func": 186, "function": [0, 1, 2, 3, 5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 101, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 143, 144, 145, 146, 148, 149, 150, 156, 157, 163, 164, 170, 171, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 205, 213, 215, 217, 221], "further": 197, "futur": [178, 186, 200, 217, 219, 224], "futurewarn": 203, "g": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 119, 127, 135, 140, 147, 153, 160, 167, 174, 178, 179, 188, 201, 202, 203, 205, 208, 210, 211, 212, 214, 215, 218, 220], "g1": 209, "g2": 209, "gain": [200, 219], "gamma": [200, 208, 209, 222], "garc\u0131a": [212, 215], "gaussian": [208, 209, 210, 220], "gb": 225, "gb\u00b9": 225, "gen": [188, 201, 204, 222], "gener": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 183, 194, 200, 201, 202, 203, 206, 220, 222, 223, 225], "genrat": 201, "geometr": [210, 222], "georg": [181, 197], "get": [11, 16, 23, 28, 33, 38, 45, 52, 57, 65, 72, 80, 88, 96, 102, 103, 108, 113, 121, 129, 137, 142, 145, 146, 148, 155, 162, 169, 176, 178, 195, 201, 207, 213], "getter": 201, "gil": 188, "git": [0, 1, 2, 3, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 196, 197, 198, 199], "github": [180, 186, 192], "given": [4, 9, 14, 21, 26, 31, 36, 43, 50, 55, 58, 63, 66, 70, 73, 78, 81, 86, 89, 94, 100, 106, 111, 119, 122, 127, 130, 135, 140, 147, 153, 160, 167, 174, 202, 208, 209, 210, 211, 212, 214, 215, 221], "gj": 209, "go": 200, "goal": [206, 217], "golden": [69, 76, 77, 85, 221], "good": [180, 184, 185, 186, 222], "gov": 181, "guarante": [0, 1, 2, 3, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 210, 225], "gui": 181, "guid": [188, 192], "gumbel": 200, "h": [212, 215], "ha": [0, 1, 49, 89, 114, 130, 180, 181, 184, 185, 186, 187, 188, 189, 190, 192, 193, 196, 197, 198, 199, 200, 203, 206, 210, 212, 215, 216, 217, 218, 219, 225], "half": [180, 200, 201, 211], "halliwel": [208, 209], "handcraft": 196, "handl": 200, "happen": [103, 188], "haramoto": [2, 49, 182, 191], "hardwar": [220, 221, 222], "hart": 210, "has_uint": 201, "has_uint32": 201, "hash": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 51, 56, 79, 87, 95, 120, 128, 136, 141, 154, 161, 168, 175, 177, 179, 180, 181, 182, 183, 184, 187, 191, 192, 193, 196, 197, 198, 199, 200, 202], "have": [0, 1, 2, 4, 8, 19, 20, 41, 42, 48, 49, 58, 61, 62, 66, 69, 73, 76, 77, 81, 85, 89, 92, 93, 117, 118, 122, 126, 130, 133, 134, 151, 152, 158, 159, 165, 166, 172, 173, 180, 181, 182, 187, 188, 190, 191, 192, 193, 196, 197, 198, 199, 200, 202, 203, 205, 206, 209, 210, 211, 212, 215, 217, 218, 221, 222, 225], "hc": 32, "hc128": [177, 178, 217, 220, 221, 222, 225], "hc128_p3": 177, "he": 181, "heavili": 188, "heidelberg": 194, "held": [188, 201], "helper": 221, "here": [2, 191, 201], "hi": 180, "high": [1, 187, 189, 193, 200, 201, 205, 217], "higher": [179, 201, 210], "hill": 210, "hiroshi": [2, 49, 182, 191], "hiroshima": 49, "hold": [0, 1, 2, 3, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 196, 197, 198, 199], "home": 177, "hongjun": 177, "hood": 201, "horner": 49, "how": [201, 205, 217, 221], "howev": [188, 221], "html": [1, 177, 179, 181, 188, 190], "http": [0, 1, 3, 49, 177, 179, 180, 181, 184, 185, 186, 188, 189, 190, 192, 194, 196, 197, 198, 199, 208, 209, 223], "humphrei": [3, 190], "hypergeometr": 200, "i": [0, 1, 2, 3, 4, 7, 8, 9, 10, 14, 15, 20, 21, 22, 26, 27, 31, 32, 36, 37, 41, 42, 43, 44, 49, 50, 51, 55, 56, 58, 61, 62, 63, 64, 66, 69, 70, 71, 73, 76, 77, 78, 79, 81, 85, 86, 87, 89, 92, 93, 94, 95, 99, 100, 101, 102, 103, 106, 107, 111, 112, 114, 118, 119, 120, 122, 125, 126, 127, 128, 130, 133, 134, 135, 136, 140, 141, 147, 151, 152, 153, 154, 158, 159, 160, 161, 165, 166, 167, 168, 172, 173, 174, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 217, 219, 220, 221, 222, 224, 225], "id": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 51, 56, 79, 87, 95, 120, 128, 136, 141, 154, 161, 168, 175, 177, 179, 181, 182, 183, 184, 187, 191, 192, 193, 196, 197, 198, 199, 202], "ident": [185, 187, 201, 209, 210, 212, 217, 225], "identifi": [209, 212, 215], "idx": [194, 195], "ignor": 99, "ii": [209, 210], "iii": 181, "ij": 210, "im": [208, 209], "imaginari": [208, 209], "immateri": 200, "immedi": 225, "impact": 203, "implement": [2, 49, 84, 179, 180, 184, 185, 186, 188, 190, 191, 192, 194, 195, 197, 200, 201, 205, 209, 221], "implementationguide1": 192, "implemnt": 201, "impli": [208, 209], "import": [0, 1, 2, 3, 114, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 209, 210, 217, 219, 221, 224, 225], "impress": 201, "improv": [1, 181, 192, 196, 200, 217], "inbound": 200, "inc": [64, 71, 79, 87, 180, 184, 185, 186, 187, 201], "includ": [178, 180, 200, 205, 210, 217, 220, 221, 225], "inclus": [2, 22, 51, 56, 120, 181, 182, 183, 191, 217], "incorpor": [190, 217], "incorrect": 200, "increas": [179, 200], "increment": [0, 1, 61, 64, 71, 76, 79, 87, 114, 180, 184, 185, 186, 187, 190, 192, 193, 196, 197, 198, 199, 200, 201, 220, 221, 222, 225], "independ": 217, "index": [177, 182, 183, 194, 217, 221], "indic": [2, 89, 103, 130, 191, 201, 210, 212, 221, 225], "individu": 200, "ineffici": 200, "inform": [11, 16, 23, 28, 33, 38, 45, 49, 52, 57, 65, 72, 80, 88, 96, 102, 108, 113, 121, 129, 137, 142, 155, 162, 169, 176, 182, 200, 205, 210, 212, 213, 215, 217], "inher": 205, "inherit": 200, "initi": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 44, 51, 56, 64, 71, 79, 87, 95, 107, 112, 120, 128, 136, 141, 154, 161, 168, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 221, 222, 225], "inlin": 201, "inner": [212, 215], "innov": 217, "input": [0, 1, 2, 44, 145, 146, 177, 182, 183, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 209, 210, 212, 215, 217, 221], "insid": 205, "inspect": 188, "instanc": [0, 1, 2, 3, 8, 10, 15, 20, 22, 27, 32, 42, 44, 49, 51, 56, 62, 69, 71, 77, 79, 85, 87, 93, 95, 99, 107, 112, 118, 120, 126, 128, 134, 136, 141, 152, 159, 161, 166, 168, 173, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 203, 204, 207, 221], "instant": [201, 204], "instead": [188, 200, 210, 224], "instruct": [100, 188, 221], "int": [0, 1, 10, 15, 95, 107, 112, 136, 180, 185, 186, 187, 189, 190, 192, 193, 195, 201, 202, 214, 219, 221], "int64": 200, "int_": 201, "integ": [0, 1, 2, 3, 4, 5, 6, 10, 12, 13, 15, 17, 18, 22, 24, 25, 27, 29, 30, 32, 34, 35, 37, 39, 40, 44, 46, 47, 51, 53, 54, 56, 58, 59, 60, 64, 66, 67, 68, 71, 73, 74, 75, 79, 81, 82, 83, 87, 89, 90, 91, 95, 97, 98, 104, 105, 109, 110, 114, 115, 116, 120, 122, 123, 124, 128, 130, 131, 132, 136, 138, 139, 141, 143, 144, 149, 150, 154, 156, 157, 161, 163, 164, 168, 170, 171, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 214, 220, 221, 223], "integr": 200, "intel": [188, 200, 222], "interest": 206, "interfac": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 143, 144, 146, 149, 150, 156, 157, 163, 164, 170, 171, 200, 201, 205], "intern": [187, 193, 200], "intertwin": 225, "interv": [200, 211, 223], "intervent": 188, "intrins": 188, "intrinsicsguid": 188, "introduc": 217, "invalid": [188, 200, 205], "invert": 190, "involv": [195, 201], "io": 192, "irrespect": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 106, 111, 119, 127, 135, 140, 147, 153, 160, 167, 174], "isinst": 201, "issu": [114, 180, 186, 188, 200, 201, 203, 225], "iter": [7, 8, 19, 20, 41, 42, 61, 62, 69, 76, 77, 84, 85, 92, 93, 99, 117, 118, 125, 126, 133, 134, 151, 152, 158, 159, 165, 166, 172, 173, 179, 189, 190, 205], "its": [206, 210], "itself": 225, "ivi": 188, "j": [1, 194, 208, 209, 210, 212, 215], "januari": 192, "jason": 192, "java": [181, 200], "jep": 181, "jit": [201, 205], "john": [187, 193], "jour": [212, 215], "journal": [49, 181, 182, 197, 212, 215], "jp": 49, "jsf": [178, 179, 201, 217, 220, 222, 225], "jsf32": 222, "jsf_next": 201, "jsf_next_sig": 201, "jsf_state": 201, "jsf_ubg": 201, "juli": 188, "jump": [0, 1, 2, 178, 181, 182, 187, 191, 192, 193, 196, 197, 198, 199, 200, 203, 217, 219, 225], "june": [0, 3, 180, 181, 186, 189], "j\u00e1imez": [212, 215], "k": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 114, 119, 127, 135, 140, 147, 153, 160, 167, 174, 187, 190, 193, 194, 201, 202, 208, 209, 210, 211, 212, 214, 215, 221, 222, 225], "karczewski": 194, "kei": [0, 1, 10, 15, 32, 95, 128, 136, 177, 187, 192, 193, 200, 201, 205, 217, 222], "keystream": 177, "keyword": [200, 219, 225], "known": [3, 203, 225], "l": [2, 49, 180, 182, 191, 212, 215], "lake": 222, "landingpag": 188, "laplac": 200, "larg": [114, 189, 192, 200, 219, 221, 222, 225], "larger": [189, 196, 219], "largest": 215, "last": [188, 190, 219], "last_bg": 219, "last_rng": 221, "later": 188, "latest": 200, "latter": 225, "lattic": 180, "lcg": [64, 71, 79, 87, 178, 181, 184, 185, 186, 200, 201, 217], "lcg128mix": [180, 186, 200, 217, 220, 221, 225], "lcg_mult": 180, "lead": [195, 200, 201, 210], "least": [190, 200], "lectur": 194, "left": [179, 209], "legaci": [200, 203, 217], "legacygener": 200, "leigh": [208, 209], "lemir": [200, 223], "len": 221, "length": [177, 190, 225], "less": [58, 66, 73, 81, 89, 130, 188, 209, 210, 215], "let": 205, "level": [0, 1, 2, 3, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 210], "libnpyrandom": 200, "librari": 201, "like": [114, 186, 200, 202, 203, 210, 215, 217], "limit": [215, 220, 221, 225], "line": [188, 200], "linear": [2, 49, 181, 182, 191, 196, 198, 199, 201], "linux": 222, "list": [179, 180, 190, 210, 217, 221, 225], "liter": 201, "littl": 201, "live": 219, "llnl": 181, "lnc": 177, "lo": 180, "loc": [208, 209], "local": 221, "locat": [0, 192, 201, 210], "lock": [0, 1, 2, 3, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 191, 192, 193, 194, 196, 197, 198, 199], "log": [205, 217, 220], "logist": 200, "logseri": 200, "long": [200, 205, 219, 221], "longdoubl": [200, 211], "longer": 200, "look": 201, "loop": [201, 219], "loui": 192, "low": [0, 1, 2, 3, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 205, 225], "lower": [32, 177, 180, 188, 201], "lxm": [178, 200, 217, 220, 221, 222, 225], "m": [9, 14, 21, 26, 31, 36, 43, 49, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 119, 127, 135, 140, 147, 153, 160, 167, 174, 180, 183, 185, 186, 187, 189, 193, 201, 202, 208, 209, 210, 211, 212, 214, 215, 219], "m1": [209, 210], "m2": [209, 210], "machin": 202, "made": [4, 58, 66, 73, 81, 89, 122, 130, 217, 221], "magnitud": 201, "mai": [49, 107, 112, 114, 178, 189, 190, 206, 209], "main": [2, 182, 183, 191, 200, 203, 217], "maintain": [203, 206], "mainten": 203, "make": [0, 1, 2, 3, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 202, 219, 225], "makoto": [2, 49, 182, 191], "manag": 201, "mani": [114, 179, 188, 200, 203, 217, 221, 225], "manipul": 213, "manual": [103, 188], "manylinux": 200, "map": [187, 190, 193, 220], "mardia": [212, 215], "mark": [187, 189, 193, 225], "marsaglia": [181, 197], "massiv": 188, "mat": 49, "match": [49, 182, 185, 187, 200, 201, 211], "math": 49, "mathemat": [180, 194, 209], "mathrm": 209, "matplotlib": 210, "matrix": [208, 209, 210, 212, 215], "matsumoto": [2, 49, 182, 183, 191, 197], "max_bit": 114, "maximum": [114, 188, 225], "mcgraw": 210, "mean": [188, 190, 201, 208, 209, 210, 219, 222], "mechan": [182, 185, 187, 190], "melissa": [180, 184, 185, 186], "member": [205, 225], "memori": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 143, 144, 149, 150, 156, 157, 163, 164, 170, 171, 195, 201], "merg": [206, 217], "mersenn": [200, 220, 222, 225], "method": [0, 1, 2, 4, 9, 10, 14, 15, 21, 26, 27, 31, 32, 36, 37, 43, 44, 49, 50, 55, 58, 63, 64, 66, 70, 71, 73, 78, 79, 81, 86, 87, 89, 94, 95, 106, 107, 111, 112, 114, 119, 122, 127, 128, 130, 135, 136, 140, 141, 147, 153, 154, 160, 161, 167, 168, 174, 175, 178, 180, 181, 182, 184, 185, 186, 187, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 204, 206, 209, 210, 212, 214, 215, 217, 221, 225], "might": [190, 192], "migrat": 206, "min_bit": 114, "minim": 205, "minimum": [114, 190, 200], "mix": [178, 181, 185, 189, 190, 200, 217], "mixer": [1, 180, 185], "mk": [209, 210], "mod": [180, 181, 185, 186], "mode": [0, 1, 2, 3, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201], "model": [183, 222], "moder": [219, 221], "modern": [200, 217], "modifi": 49, "modul": [2, 182, 183, 191, 217], "modulo": [89, 130], "modulu": 201, "mont": [2, 191], "mora": [187, 193], "more": [1, 4, 58, 66, 73, 81, 89, 122, 130, 188, 195, 200, 203, 205, 210, 212, 215, 217, 221], "most": [114, 188, 195, 200, 210, 214, 217, 221, 225], "move": [200, 203], "mrng": 219, "mt": [49, 225], "mt19937": [178, 200, 204, 217, 220, 221, 222, 225], "mt19937\u2074": 225, "mt64": [178, 183, 200, 217, 220, 222], "mu": 209, "much": 188, "muller": 205, "mult": 186, "multibuild": 200, "multidimension": 200, "multinomi": 200, "multinorm": 210, "multipl": [0, 1, 2, 3, 49, 114, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 196, 197, 198, 199, 200, 203, 210, 217, 219, 221, 225], "multipli": [178, 180, 185, 200, 201, 211, 217, 221], "multiprocess": 219, "multithread": 217, "multithreadedrng": 219, "multivari": [209, 210, 212, 215, 220], "multivariate_complex_norm": 200, "multivariate_norm": [200, 203, 209, 220], "murmur3": [180, 181], "murmur3_mix": 180, "murmurhash3": 181, "must": [0, 1, 2, 3, 58, 66, 71, 73, 81, 89, 101, 114, 130, 145, 146, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 205, 208, 209, 210, 211, 215, 218, 221], "mutsuo": [2, 191], "n": [0, 9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 89, 92, 94, 100, 106, 111, 114, 119, 127, 130, 133, 135, 140, 147, 153, 160, 167, 174, 180, 185, 186, 187, 193, 201, 202, 205, 208, 209, 210, 211, 212, 214, 215, 219, 222], "name": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 143, 144, 149, 150, 156, 157, 163, 164, 170, 171, 180, 185, 187, 193, 200, 201, 203, 211], "namedtupl": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 143, 144, 149, 150, 156, 157, 163, 164, 170, 171], "nan": 200, "nation": 192, "nativ": 201, "natur": 225, "nb": 205, "ndarrai": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 114, 119, 127, 135, 140, 147, 153, 160, 167, 174, 202, 208, 209, 210, 211, 212, 214, 215], "necessari": 188, "necessarili": 195, "need": [188, 200, 201, 205, 219, 221, 222], "neg": [89, 130, 210], "neglig": 221, "neill": [180, 184, 185, 186], "net": [3, 179, 181, 190], "network": [187, 193], "neve": [194, 200], "never": 102, "new": [8, 20, 42, 49, 62, 69, 77, 85, 93, 99, 118, 126, 134, 152, 159, 166, 173, 181, 187, 193, 200, 201, 203, 210, 221], "new_kei": 221, "newer": 222, "next": [0, 145, 146, 180, 188, 192, 195, 200, 201, 205, 222], "next_32": [145, 146, 195, 201], "next_64": [145, 146, 195, 201], "next_doubl": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 143, 144, 145, 146, 149, 150, 156, 157, 163, 164, 170, 171, 195, 201, 205], "next_gen": 221, "next_raw": [145, 146, 195, 201, 205], "next_uint32": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 143, 144, 149, 150, 156, 157, 163, 164, 170, 171, 205], "next_uint64": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 143, 144, 149, 150, 156, 157, 163, 164, 170, 171, 205], "next_valu": 201, "nextgen": 206, "nishimura": [49, 182, 183], "njsf": 201, "node4": 181, "nois": 200, "non": [0, 1, 114, 184, 185, 186, 187, 192, 193, 196, 197, 198, 199, 210, 212, 217, 225], "noncryptograph": 179, "none": [0, 1, 2, 3, 9, 10, 14, 15, 21, 22, 26, 27, 31, 32, 36, 37, 43, 44, 50, 51, 55, 56, 63, 64, 70, 71, 78, 79, 86, 87, 89, 94, 95, 100, 101, 106, 107, 111, 112, 114, 119, 120, 127, 128, 130, 135, 136, 140, 141, 145, 146, 147, 153, 154, 160, 161, 167, 168, 174, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 204, 208, 209, 210, 211, 212, 214, 215, 219, 225], "nonlinear": [189, 194], "nonneg": 210, "nopython": 205, "normal": [200, 201, 203, 205, 208, 209, 210, 212, 215, 219, 220, 222], "normals_zig": 205, "normalsj": 205, "note": [0, 1, 2, 3, 4, 7, 9, 10, 14, 15, 21, 26, 31, 36, 41, 43, 49, 50, 55, 58, 61, 62, 63, 66, 69, 70, 73, 76, 77, 78, 81, 85, 86, 89, 92, 94, 95, 99, 102, 103, 106, 111, 114, 119, 122, 125, 127, 128, 130, 133, 135, 136, 140, 145, 146, 147, 151, 153, 158, 160, 165, 167, 172, 174, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 202, 208, 209, 210, 212, 213, 214, 215, 221], "notebook": [195, 220], "notic": 201, "notimplementederror": [145, 146, 148, 195, 200, 201, 203], "novel": 206, "now": [200, 201, 203, 224], "np": [190, 195, 200, 201, 205, 208, 209, 211, 219, 221, 225], "nsacyb": 192, "ntu": 177, "nuclear": 181, "null": 195, "num_stream": [189, 190, 221, 225], "numba": [145, 178, 180, 195, 200, 217, 220], "numbajsf": 201, "number": [0, 1, 2, 3, 4, 7, 8, 9, 10, 14, 15, 19, 20, 21, 22, 26, 27, 31, 32, 36, 37, 41, 42, 43, 44, 48, 49, 50, 51, 55, 56, 58, 61, 62, 63, 66, 69, 70, 71, 73, 76, 77, 78, 79, 81, 85, 86, 87, 89, 92, 93, 94, 95, 106, 111, 114, 117, 118, 119, 120, 122, 125, 126, 127, 128, 130, 133, 134, 135, 136, 140, 141, 147, 151, 152, 153, 154, 158, 159, 160, 161, 165, 166, 167, 168, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 211, 214, 217, 219, 225], "numer": [212, 215], "numpi": [0, 1, 2, 3, 114, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225], "numpy_se": [182, 185, 187, 190], "ny": [187, 193], "nz_bit": 114, "o": [107, 112, 180, 184, 185, 186, 187, 189, 190, 193, 210], "object": [0, 1, 2, 3, 177, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 196, 197, 198, 199, 205, 219, 225], "occur": [4, 58, 66, 73, 81, 89, 122, 130, 188, 200, 221], "odd": [114, 180, 181, 190, 221], "odel": [212, 215], "offici": [192, 200, 201, 203], "offset": [0, 192], "onc": 103, "one": [4, 58, 66, 73, 81, 89, 122, 130, 146, 190, 200, 201, 205, 210, 217, 221, 222], "ones": [206, 209], "onli": [0, 1, 2, 89, 114, 130, 177, 178, 179, 181, 182, 183, 187, 188, 191, 192, 193, 194, 196, 197, 198, 199, 200, 210, 219, 225], "onlin": [3, 49, 180, 181, 186, 188, 197], "opaqu": 205, "open": [3, 200, 211], "openjdk": 181, "openrand": [194, 200], "oper": [188, 194, 200, 201, 203], "option": [15, 107, 112, 180, 181, 190, 205, 217, 220], "order": 201, "org": [0, 177, 180, 184, 185, 186, 189, 190, 194, 195, 201, 208, 209, 223, 225], "orient": [2, 210], "origin": [2, 49, 179, 181, 182, 185, 191, 194, 196, 197, 198, 199, 200, 222], "other": [2, 22, 51, 56, 101, 120, 179, 182, 183, 188, 190, 191, 200, 205, 210, 214, 217, 220, 225], "otherwis": [208, 210, 211, 212, 215], "oubl": 201, "out": [9, 10, 14, 15, 21, 22, 26, 27, 31, 32, 36, 37, 43, 44, 50, 51, 55, 56, 63, 64, 70, 78, 79, 86, 87, 94, 95, 100, 106, 107, 111, 112, 119, 120, 127, 128, 135, 136, 140, 141, 147, 153, 154, 160, 161, 167, 168, 174, 175, 195, 200, 201, 205, 208, 209, 210, 211, 214, 219], "outcom": 201, "output": [0, 1, 2, 4, 9, 14, 21, 26, 31, 36, 43, 50, 55, 58, 63, 66, 70, 73, 78, 81, 86, 89, 94, 100, 106, 111, 119, 122, 127, 130, 135, 140, 147, 153, 160, 167, 174, 177, 178, 179, 181, 182, 183, 185, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 208, 209, 210, 211, 212, 214, 215, 217, 219, 221, 222, 225], "outsid": [89, 130], "over": 211, "overal": 222, "overhead": 219, "overlap": [0, 1, 184, 185, 186, 187, 189, 192, 193, 196, 197, 198, 199, 221], "overton": 189, "p": [3, 177, 179, 180, 201, 210, 212, 215], "p3cipher": 177, "pack": [209, 210, 215], "packag": 217, "page": 217, "panneton": [49, 182], "paper": [1, 200], "papouli": 210, "parallel": [1, 3, 99, 177, 189, 194, 200], "paramet": [0, 1, 2, 3, 4, 7, 8, 9, 10, 14, 19, 20, 21, 22, 26, 27, 31, 32, 36, 37, 41, 42, 43, 44, 48, 49, 50, 51, 55, 56, 58, 61, 62, 63, 64, 66, 69, 70, 71, 73, 76, 77, 78, 79, 81, 85, 86, 87, 89, 92, 93, 94, 95, 99, 100, 101, 106, 111, 114, 117, 118, 119, 120, 122, 125, 126, 127, 128, 130, 133, 134, 135, 136, 140, 141, 145, 146, 147, 151, 152, 153, 154, 158, 159, 160, 161, 165, 166, 167, 168, 172, 173, 174, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 208, 209, 210, 211, 212, 214, 215], "parameter": [179, 208, 209], "parametr": 200, "particular": [4, 58, 66, 73, 81, 89, 122, 130, 202, 221], "pass": [3, 44, 101, 107, 112, 145, 146, 148, 188, 189, 190, 195, 201, 204, 205, 213, 217, 221, 225], "path": 200, "pattern": [89, 130, 210, 221], "paus": [188, 200], "pcg": [180, 184, 185, 186, 190, 200, 201, 204, 217, 221], "pcg32": [178, 200, 217, 220, 221], "pcg4": 220, "pcg64": [64, 178, 180, 184, 186, 200, 201, 203, 204, 217, 220, 221, 222, 225], "pcg64dxsm": [186, 200, 222, 225], "pcg64dxsm\u00b2": 225, "pcg64\u2075": 225, "pcg_default_multipli": 201, "pdf": [177, 192], "peak": 210, "per": [201, 219], "percentag": 222, "perform": [1, 9, 14, 21, 26, 31, 36, 43, 49, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 119, 127, 135, 140, 147, 153, 160, 167, 174, 187, 188, 192, 193, 195, 200, 205, 215, 217, 221, 225], "period": [0, 1, 61, 62, 69, 180, 184, 185, 187, 190, 192, 193, 196, 197, 198, 199, 200, 217, 219, 221], "perman": 178, "permut": [180, 200, 220], "phi": [61, 62, 69, 76, 77, 85, 200, 221], "philox": [0, 178, 192, 193, 200, 217, 220, 221, 222], "philoxnxw": 187, "philox\u2075": 225, "pickl": 200, "pierr": [2, 49, 182, 191], "place": [200, 201, 203, 211], "plan": [203, 217], "platform": 188, "plot": 210, "plt": 210, "plu": [2, 182, 183, 191], "plusplu": 196, "point": [210, 215], "pointer": [0, 1, 2, 3, 5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 143, 144, 145, 146, 149, 150, 156, 157, 163, 164, 170, 171, 177, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 205], "polynomi": [2, 49, 182, 191], "pool": [0, 1, 202], "popular": 210, "portion": 206, "posit": [0, 1, 2, 89, 128, 130, 182, 183, 187, 191, 192, 193, 208, 209, 210, 215], "possibl": [0, 1, 2, 103, 114, 182, 183, 187, 188, 191, 192, 193, 196, 197, 198, 199, 201, 203, 204, 206, 217], "post": [180, 190, 200], "pp": [2, 49, 177, 181, 182, 191, 197], "ppam": 194, "pracrand": [3, 190], "practic": [3, 114, 188, 190, 214, 225], "practrand": [190, 200, 225], "pre": [4, 7, 41, 66, 73, 76, 81, 92, 122, 125, 133, 151, 158, 165, 172, 186, 200, 210, 215, 221], "precis": [200, 215], "precomput": 49, "predecessor": 206, "predefin": 180, "prefer": [180, 196, 200, 203], "prepar": 203, "present": [203, 204, 222], "prevent": 200, "previou": [200, 220], "previous": 114, "primari": 204, "print": [201, 205, 219], "prng": [0, 1, 3, 7, 9, 10, 11, 14, 15, 16, 19, 21, 22, 23, 26, 27, 28, 31, 32, 33, 36, 37, 38, 41, 43, 44, 45, 48, 50, 51, 52, 55, 56, 57, 63, 64, 65, 70, 72, 78, 79, 80, 86, 87, 88, 92, 94, 95, 96, 102, 106, 107, 108, 111, 112, 113, 117, 119, 120, 121, 125, 127, 128, 129, 133, 135, 136, 137, 140, 141, 142, 145, 146, 147, 151, 153, 154, 155, 158, 160, 161, 162, 165, 167, 168, 169, 172, 174, 175, 176, 177, 179, 181, 184, 187, 190, 192, 193, 195, 196, 197, 198, 199, 200, 201, 217, 219, 222], "probabl": [200, 210, 221], "problem": 3, "procedur": [212, 215], "proceed": [187, 193], "process": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 51, 56, 79, 87, 95, 120, 128, 136, 141, 154, 161, 168, 175, 177, 179, 181, 182, 183, 184, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 202, 210, 221], "processor": 188, "produc": [0, 1, 2, 3, 5, 6, 9, 12, 13, 14, 17, 18, 21, 24, 25, 26, 29, 30, 31, 34, 35, 36, 39, 40, 43, 44, 46, 47, 49, 50, 53, 54, 55, 59, 60, 63, 67, 68, 70, 74, 75, 78, 82, 83, 86, 90, 91, 94, 97, 98, 104, 105, 106, 109, 110, 111, 114, 115, 116, 119, 123, 124, 127, 131, 132, 135, 138, 139, 140, 143, 144, 147, 149, 150, 153, 156, 157, 160, 163, 164, 167, 170, 171, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 205, 209, 214, 217, 219, 220, 221, 222, 225], "product": [208, 212, 215], "project": [206, 217], "proof": 200, "propag": 188, "proper": 210, "properti": [1, 145, 146, 180, 185, 186, 188, 195, 201, 210], "propos": [181, 200], "prototyp": 205, "provid": [0, 1, 2, 3, 10, 15, 71, 95, 99, 102, 136, 145, 146, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 209, 211, 220, 224], "pseudo": [0, 1, 2, 3, 9, 10, 14, 15, 21, 22, 26, 27, 31, 32, 36, 37, 43, 44, 50, 51, 55, 56, 63, 70, 71, 78, 79, 86, 87, 94, 95, 106, 111, 119, 120, 127, 128, 135, 136, 140, 141, 147, 153, 154, 160, 161, 167, 168, 174, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 196, 197, 198, 199, 201, 203, 212, 214, 215, 217, 221], "pseudorandom": [2, 49, 191, 194], "pull": [107, 112, 189, 190, 200, 206], "pure": [201, 205], "put": 206, "py_ssize_t": 205, "pycapsul": [188, 205], "pycapsule_getpoint": 205, "pycapsule_isvalid": 205, "pyerr_occur": 188, "pyplot": 210, "python": [0, 1, 2, 3, 10, 15, 95, 136, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 203, 217, 219, 220], "python_pcg": 201, "pythonpcg64": 201, "pyx": [201, 205], "q": [177, 179, 201], "quad": 189, "qualifi": 200, "qualiti": [3, 177, 189, 196, 198, 199, 200, 217], "quasi": [2, 191], "quickli": 188, "r": [2, 179, 181, 182, 191, 194, 201, 210, 212, 215], "r1": 209, "r2": [205, 209], "rai": 192, "rais": [10, 15, 22, 27, 32, 37, 44, 51, 56, 64, 79, 87, 95, 100, 101, 107, 112, 120, 128, 136, 141, 145, 146, 148, 154, 161, 168, 175, 188, 195, 200, 201, 202, 203, 205, 209], "raisinglock": 188, "rand": 179, "randint": [200, 203], "random": [0, 1, 2, 3, 4, 7, 8, 9, 10, 14, 15, 19, 20, 21, 22, 26, 27, 31, 32, 36, 37, 41, 42, 43, 44, 48, 49, 50, 51, 55, 56, 58, 61, 62, 63, 66, 69, 70, 71, 73, 76, 77, 78, 79, 81, 85, 86, 87, 89, 92, 93, 94, 95, 100, 106, 111, 117, 118, 119, 120, 122, 125, 126, 127, 128, 130, 133, 134, 135, 136, 140, 141, 145, 146, 147, 151, 152, 153, 154, 158, 159, 160, 161, 165, 166, 167, 168, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 219, 220, 222, 223, 225], "random123": [200, 217], "random_entropi": [2, 182, 191, 202, 217, 220, 221], "random_gauss_zig": 205, "random_integ": [200, 203], "random_raw": [188, 189, 190, 200, 201], "random_sampl": [200, 203], "random_st": 219, "random_uinteg": 200, "random_valu": 205, "randomgen": [0, 1, 2, 3, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 216, 218, 219, 221, 224, 225], "randomgener": [200, 203], "randomst": [200, 203, 206, 217, 218, 222], "rang": [0, 1, 2, 10, 15, 22, 27, 32, 37, 44, 51, 56, 64, 79, 87, 89, 95, 107, 112, 120, 128, 130, 136, 141, 154, 161, 168, 175, 177, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 196, 197, 198, 199, 201, 205, 219, 220, 221, 225], "rank": 215, "rapidli": 205, "rare": 200, "rather": [177, 185], "ratio": [69, 76, 77, 85, 221], "raw": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 106, 111, 119, 127, 135, 140, 145, 146, 147, 153, 160, 167, 174, 201, 205, 214], "rdrand": [178, 200, 217, 220, 221, 222], "re": [10, 15, 27, 32, 37, 44, 64, 71, 79, 87, 95, 107, 112, 128, 136, 141, 154, 161, 168, 175, 208, 209], "read": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 51, 56, 79, 87, 95, 120, 128, 136, 141, 154, 161, 168, 175, 177, 179, 181, 182, 183, 184, 187, 191, 192, 193, 194, 196, 197, 198, 199, 201, 202, 217], "real": [208, 209], "realist": 195, "realli": 3, "reason": [4, 58, 66, 73, 81, 89, 122, 130, 219, 221, 222, 225], "receiv": 203, "recent": 217, "recogn": 200, "recommend": [188, 190, 200, 217, 225], "recurr": [2, 182, 191], "redirect": 200, "reduc": [1, 192], "refactor": 200, "refer": [0, 1, 2, 3, 49, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 208, 209, 210, 212, 215, 217], "refil": 200, "reflect": 203, "regist": 200, "reject": [4, 58, 66, 73, 81, 89, 114, 122, 130, 221], "rel": [114, 209, 222, 225], "relat": [0, 1, 10, 15, 95, 128, 136, 177, 187, 192, 193, 196, 198, 199, 208, 209], "relationship": [4, 58, 66, 73, 81, 89, 122, 130, 221], "releas": [178, 200, 220], "relev": 225, "reli": [188, 200], "remain": 103, "remov": [196, 200, 203, 205, 206, 216, 218, 224], "renam": [200, 203], "repeat": [219, 221], "replac": [114, 185, 200, 203], "replic": 200, "report": [188, 225], "repositori": [180, 186], "repres": [180, 184, 185, 186, 210], "represent": [10, 15, 95, 128, 136], "reproduc": [4, 7, 41, 66, 71, 73, 76, 81, 92, 122, 125, 133, 151, 158, 165, 172, 188, 202, 217, 219], "request": 206, "requir": [4, 7, 11, 16, 23, 28, 33, 38, 41, 45, 52, 57, 58, 65, 66, 72, 73, 76, 80, 81, 88, 89, 92, 96, 102, 108, 113, 121, 122, 125, 129, 130, 133, 137, 142, 151, 155, 158, 162, 165, 169, 172, 176, 200, 205, 213, 219, 221, 222, 225], "rescal": 212, "research": 177, "resembl": 225, "reset": [4, 7, 41, 66, 73, 76, 81, 89, 92, 103, 122, 125, 130, 133, 151, 158, 165, 172, 200, 221], "reshap": 221, "restor": [102, 200], "result": [188, 200, 211, 217, 221], "retain": 217, "retri": [100, 188, 200], "retriev": [0, 181, 189], "return": [4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 176, 179, 180, 185, 195, 200, 201, 202, 203, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 221], "revamp": 206, "rg": [0, 1, 3, 177, 179, 181, 184, 185, 186, 187, 188, 192, 193, 194, 196, 197, 198, 199, 204, 217, 219, 225], "rho": 209, "right": 209, "rng": [2, 4, 7, 10, 15, 41, 58, 61, 66, 73, 76, 81, 89, 92, 95, 122, 125, 130, 133, 136, 151, 158, 165, 172, 180, 181, 184, 185, 186, 191, 197, 200, 201, 203, 205, 217, 221], "rng_engin": 190, "rngman": 181, "robust": [209, 210, 215], "romu": [178, 200, 217, 222, 225], "ron": [187, 193], "rot": 201, "rotat": [179, 185, 194, 195, 196, 201, 217, 220], "rotate64": 201, "rotate64_sig": 201, "rotl": 179, "rotr_64": 201, "roughli": 210, "round": [1, 192, 222, 225], "rq": 209, "rr": [180, 185, 187, 201], "rsa": 202, "run": [0, 1, 10, 15, 95, 136, 187, 188, 190, 192, 193, 201, 219, 222], "runtimeerror": [100, 188, 202], "runtimerror": 188, "rv": 195, "s_": [180, 185, 186, 201], "sai": 221, "said": 221, "saito": [2, 191, 197], "salmon": [187, 193], "salsa20": 1, "same": [0, 1, 2, 3, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 211, 217, 219, 221, 225], "sampl": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 114, 119, 127, 135, 140, 147, 153, 160, 167, 174, 200, 202, 208, 209, 210, 211, 212, 214, 215, 225], "sampler": 114, "satisfi": 219, "save": 201, "sc11": [187, 193], "scalar": [202, 203, 208, 209, 211], "scale": [212, 215, 219, 222], "scheme": [187, 193], "sci": 49, "scienc": 194, "scrambl": 197, "search": 217, "sebastiano": [196, 197, 198, 199], "second": [0, 1, 180, 181, 185, 186, 187, 188, 192, 193, 200, 221, 225], "secur": [1, 188, 192], "see": [0, 1, 9, 10, 14, 15, 21, 26, 31, 36, 43, 44, 50, 55, 63, 64, 70, 78, 86, 94, 95, 106, 111, 119, 127, 128, 135, 136, 140, 145, 146, 147, 153, 160, 161, 167, 174, 177, 179, 180, 184, 187, 188, 192, 193, 195, 196, 197, 198, 199, 200, 201, 210, 217, 220, 225], "seed": [178, 200, 201, 202, 217, 219, 221], "seed_seq": [0, 1, 2, 3, 114, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 221, 225], "seed_sequ": [200, 203], "seed_siz": [179, 201, 225], "seedsequ": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 44, 51, 56, 71, 79, 87, 95, 107, 112, 114, 120, 128, 136, 141, 154, 161, 168, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 203, 217, 222, 224, 225], "seedseuqnc": 186, "seen": 210, "segment": [0, 1, 2, 181, 182, 187, 191, 192, 193, 196, 197, 198, 199], "select": [179, 194, 209, 210, 215], "self": [4, 7, 19, 41, 48, 58, 61, 66, 73, 76, 81, 89, 92, 117, 122, 125, 130, 133, 151, 158, 165, 172, 180, 186, 201, 219], "semi": [208, 209], "semidefinit": [209, 210, 215], "sens": 219, "sensit": 225, "sent": 200, "separ": 225, "septemb": 181, "sequenc": [0, 1, 2, 3, 22, 49, 51, 56, 71, 120, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 217, 220, 225], "servic": 202, "set": [0, 1, 3, 10, 11, 15, 16, 23, 28, 33, 38, 45, 52, 57, 65, 71, 72, 80, 88, 95, 96, 102, 103, 108, 113, 114, 121, 128, 129, 136, 137, 142, 145, 146, 148, 155, 162, 169, 176, 177, 178, 181, 182, 185, 187, 188, 190, 192, 193, 194, 195, 200, 201, 202, 205, 209, 213, 215, 221, 225], "seta": [2, 182, 191], "settabl": 181, "setter": 201, "setup": [200, 205], "setuptool": 200, "sfc": [190, 200], "sfc64": [178, 200, 217, 220, 221, 222, 225], "sfc64\u2075": 225, "sfmt": [178, 200, 217, 220, 221, 222, 225], "sfmt\u2074": 225, "sg": 177, "shape": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 119, 127, 135, 140, 147, 153, 160, 167, 174, 200, 202, 208, 209, 210, 211, 212, 214, 215], "share": [0, 1, 2, 3, 71, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 196, 197, 198, 199, 204, 225], "shaw": [187, 193], "shift": [196, 200, 217, 220], "shootout": [181, 196, 197, 198, 199], "shor": 192, "short": [188, 225], "should": [0, 1, 2, 3, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 214, 216, 218, 225], "show": [0, 192, 201, 205, 210, 219, 221], "shutdown": 219, "sig": 201, "signatur": [145, 180, 195], "signature_or_funct": 201, "signific": [180, 186], "sim": 209, "simd": 200, "similar": [0, 1, 2, 3, 177, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 196, 197, 198, 199, 220], "similarli": 200, "simon": 192, "simpl": [177, 180, 181, 184, 185, 186, 196, 197, 198, 199, 200, 201, 214], "simpler": [114, 201], "simplest": 205, "simpli": 225, "simplifi": 200, "simul": [4, 58, 66, 73, 81, 89, 122, 130, 183, 194, 212, 220, 221], "sinc": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 119, 127, 135, 140, 147, 153, 160, 167, 174, 181, 188, 200, 201, 214, 217, 220, 221, 222, 224, 225], "singl": [0, 1, 2, 4, 9, 14, 21, 26, 31, 36, 43, 50, 55, 58, 63, 66, 70, 73, 78, 81, 86, 89, 94, 100, 106, 111, 119, 122, 127, 130, 135, 140, 145, 146, 147, 153, 160, 167, 174, 177, 179, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 195, 196, 197, 198, 199, 201, 202, 208, 209, 210, 211, 212, 214, 215, 219, 221, 222, 225], "singular": [209, 210, 212, 215], "site": 188, "size": [9, 14, 21, 26, 31, 36, 37, 43, 50, 55, 58, 61, 62, 63, 66, 69, 70, 73, 76, 77, 78, 81, 85, 86, 89, 94, 100, 106, 111, 119, 127, 130, 135, 140, 147, 153, 160, 167, 174, 179, 180, 188, 196, 198, 199, 200, 201, 202, 208, 209, 210, 211, 212, 214, 215, 221, 225], "skip": 200, "skylak": 188, "slow": [114, 195, 201, 217, 220], "slower": [188, 189, 201, 209, 210, 215, 222], "slowest": [209, 210, 215], "small": [0, 1, 2, 114, 182, 183, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 204, 205], "smaller": [1, 184, 197, 208], "smallprng": 179, "smith": 192, "so": [0, 1, 2, 3, 4, 58, 66, 73, 81, 89, 99, 114, 122, 130, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 205, 206, 208, 210, 215, 217, 219, 221, 225], "societi": [208, 209], "softwar": [177, 181, 188, 197], "some": [188, 196, 201, 204, 206, 212, 215, 217, 221, 225], "somewhat": 189, "sourc": [201, 202, 204, 220], "sourceforg": [3, 190], "space": [2, 179, 180, 182, 184, 185, 186, 191, 210], "spars": 221, "spawn": [3, 180, 189, 194, 221, 222, 225], "special": 188, "specif": [188, 200, 204, 221, 222, 225], "specifi": [200, 209, 210, 215], "speck128": [178, 192, 217, 220, 221, 222, 225], "spectral": [180, 185, 186], "spectrum": 205, "speed": [196, 200, 220], "spheric": 210, "sphinx": 200, "split": [2, 181, 182, 191, 196, 197, 198, 199], "splitmix64": [0, 1, 177, 192, 196, 197, 198, 199], "spread": 210, "springer": [2, 177, 191, 194], "sqrt": [205, 221], "squar": [3, 210], "ss": [3, 180, 194], "sse2": 217, "st": [201, 205], "stabil": 218, "stabl": [217, 225], "stafford": 181, "standard": [0, 1, 181, 200, 201, 205, 208, 209, 210, 212, 215, 217, 225], "standard_exponenti": 200, "standard_gamma": 200, "standard_norm": [0, 1, 3, 177, 179, 181, 187, 188, 192, 193, 194, 196, 197, 198, 199, 200, 201, 205, 219], "standard_wishart": [200, 215], "start": [188, 190, 201], "stat": [212, 215], "state": [4, 5, 6, 7, 8, 10, 12, 13, 15, 17, 18, 19, 20, 24, 25, 29, 30, 34, 35, 39, 40, 41, 42, 44, 46, 47, 48, 49, 53, 54, 58, 59, 60, 61, 62, 66, 67, 68, 69, 73, 74, 75, 76, 77, 81, 82, 83, 85, 89, 90, 91, 92, 93, 95, 97, 98, 104, 105, 107, 109, 110, 112, 115, 116, 117, 118, 122, 123, 124, 125, 126, 130, 131, 132, 133, 134, 136, 138, 139, 143, 144, 145, 146, 149, 150, 151, 152, 156, 157, 158, 159, 163, 164, 165, 166, 170, 171, 172, 173, 178, 200, 201, 202, 205, 211, 217, 219, 225], "state_addr": 205, "state_address": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 143, 144, 149, 150, 156, 157, 163, 164, 170, 171, 201, 205], "state_gett": [145, 146, 148, 195, 201], "state_sett": [145, 146, 148, 195, 201], "stateless": [99, 188], "statist": [3, 180, 181, 184, 185, 186, 190, 192, 196, 197, 198, 199, 212, 215, 217], "statu": [103, 188], "std": [201, 219], "stdlib": [2, 182, 183, 191], "steel": 181, "stefan": 192, "step": [0, 1, 4, 49, 58, 61, 62, 66, 69, 73, 76, 77, 81, 85, 89, 122, 130, 180, 184, 185, 186, 187, 192, 193, 200, 201, 217, 219, 221, 222], "still": [188, 205], "stochast": 210, "storag": [187, 193], "store": [89, 130, 187, 193, 201, 221], "stork": 210, "strategi": 221, "stream": [0, 1, 2, 3, 49, 114, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 217, 221, 222, 225], "struct": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 143, 144, 149, 150, 156, 157, 163, 164, 170, 171, 201, 205], "structur": [180, 188, 200, 201, 205], "studi": 225, "subject": 221, "submit": 219, "subsequ": [198, 199, 201], "substanti": [206, 217, 219], "subtract": 194, "succe": 217, "succeed": [103, 188, 206], "success": 188, "successor": 196, "suggest": 181, "suit": 179, "suitabl": [177, 220, 221], "sum": [3, 181], "summer": [49, 182], "suppli": [200, 217], "support": [0, 1, 2, 3, 177, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 203, 206, 212, 219, 220, 221], "svd": [209, 210, 215], "swap": 200, "switch": 200, "symmetr": [209, 210, 215], "sync": 200, "synchron": 200, "system": [71, 179, 180, 185, 186, 200, 217, 220, 221], "t": [183, 209, 210, 215], "tabl": [3, 180, 183, 222, 225], "take": [89, 130, 145, 146, 188, 195, 201], "taken": [203, 222, 225], "takuji": [49, 182], "tb\u00b9": 225, "te": 225, "temp": 201, "templat": 225, "test": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 102, 106, 111, 119, 127, 135, 140, 147, 153, 160, 167, 174, 178, 200, 205, 217, 218, 220], "text": 188, "tf": 225, "than": [4, 58, 66, 73, 81, 89, 122, 130, 177, 185, 188, 201, 208, 209, 210, 215, 220, 221], "thei": [188, 203], "theme": 200, "theoret": 217, "theori": [212, 215], "thi": [0, 1, 2, 3, 4, 7, 9, 10, 14, 15, 21, 26, 27, 31, 32, 36, 37, 41, 43, 44, 50, 55, 58, 63, 64, 66, 70, 71, 73, 76, 78, 79, 81, 86, 87, 89, 92, 94, 95, 99, 102, 103, 106, 107, 111, 112, 114, 119, 122, 125, 127, 128, 130, 133, 135, 136, 140, 141, 146, 147, 151, 153, 154, 158, 160, 161, 165, 167, 168, 172, 174, 175, 177, 180, 181, 182, 185, 186, 187, 188, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 209, 210, 213, 214, 215, 217, 219, 221, 225], "those": 225, "thread": [0, 1, 2, 3, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 196, 197, 198, 199, 219], "threadpoolexecutor": 219, "three": [179, 190, 205, 211, 225], "threefri": [0, 178, 187, 192, 200, 203, 217, 220, 221, 222, 225], "threefrynxw": 193, "through": [0, 1, 10, 15, 95, 128, 136, 148, 187, 192, 193, 201, 205, 213], "time": [0, 1, 2, 3, 7, 8, 10, 15, 19, 20, 22, 27, 32, 37, 41, 42, 48, 49, 51, 56, 61, 62, 69, 76, 77, 79, 85, 87, 92, 93, 95, 99, 117, 118, 120, 125, 126, 128, 133, 134, 136, 141, 151, 152, 154, 158, 159, 161, 165, 166, 168, 172, 173, 175, 177, 179, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 217, 219, 221], "timeit": [201, 205, 219], "times2": 225, "tini": 189, "togeth": 210, "tol": [209, 210, 215], "toler": [209, 210, 215], "tolist": 221, "too": [3, 200, 217], "tool": 205, "trail": 212, "transact": 183, "transform": [182, 185, 187, 196, 198, 199, 201, 210, 215, 225], "translat": [194, 201], "treat": 200, "treatman": 192, "trio": [189, 222, 225], "trivari": 209, "trivial": 213, "true": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 89, 94, 100, 103, 106, 111, 119, 127, 130, 135, 140, 147, 153, 160, 167, 174, 180, 182, 185, 187, 188, 190, 194, 196, 201, 205, 210, 212], "truncat": 214, "trust": 185, "try": [79, 87, 184], "tupl": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 143, 144, 149, 150, 156, 157, 163, 164, 170, 171, 221], "twice": 210, "twister": [200, 220, 222, 225], "two": [0, 4, 10, 15, 58, 66, 73, 81, 89, 95, 122, 128, 130, 136, 181, 200, 201, 208, 209, 210, 211, 215, 221, 225], "txt": 190, "tych": [178, 200, 217], "tyche": 194, "type": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215], "typedef": 205, "typeerror": 101, "typic": 1, "u": [49, 188], "uhlig": [212, 215], "uint": 201, "uint32": [1, 145, 179, 201, 222], "uint32_t": 205, "uint64": [0, 1, 9, 10, 14, 15, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 95, 100, 106, 111, 119, 127, 128, 135, 136, 140, 145, 147, 153, 160, 167, 174, 179, 180, 187, 192, 193, 195, 200, 201, 221, 222], "uint64_t": 205, "uint8": [0, 201, 221], "uinteg": [201, 203, 220], "unavail": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 51, 56, 79, 87, 95, 120, 128, 136, 141, 154, 161, 168, 175, 177, 179, 181, 182, 183, 184, 187, 191, 192, 193, 196, 197, 198, 199], "undefin": 210, "under": [201, 219], "underli": [4, 9, 14, 21, 26, 31, 36, 43, 50, 55, 58, 63, 66, 70, 73, 78, 81, 86, 89, 94, 100, 106, 111, 119, 122, 127, 130, 135, 140, 145, 146, 147, 153, 160, 167, 174, 185, 201, 203, 214, 219, 221], "understand": 201, "unif": 211, "uniform": [183, 200, 203, 205, 211, 222], "uniformli": 114, "unimi": [181, 196, 197, 198, 199], "uniqu": [188, 200, 221], "univari": 210, "univers": 221, "unix": [202, 220], "unless": [103, 211, 222], "unlik": [0, 1, 10, 15, 95, 136, 187, 192, 193, 200], "unpack": 205, "unpickl": [102, 200], "unpredict": [107, 112, 189, 190], "unreleas": 217, "unsid": 179, "unsign": [0, 1, 2, 3, 9, 14, 21, 22, 26, 31, 36, 43, 50, 51, 55, 56, 63, 70, 78, 86, 94, 106, 111, 119, 120, 127, 135, 140, 147, 153, 160, 167, 174, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 205, 214, 220, 221], "unspecifi": 190, "untest": 192, "up": [188, 200, 201, 205], "updat": [3, 4, 58, 66, 73, 81, 89, 122, 130, 180, 181, 186, 200, 201, 221], "upper": [32, 177, 180, 201, 215, 225], "upstream": 200, "urandom": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 51, 56, 79, 87, 95, 120, 128, 136, 141, 154, 161, 168, 175, 177, 179, 181, 182, 183, 184, 187, 191, 192, 193, 194, 196, 197, 198, 199, 202, 220], "us": [0, 1, 2, 3, 4, 9, 10, 14, 15, 21, 22, 26, 27, 31, 32, 36, 37, 43, 44, 49, 50, 51, 55, 56, 58, 63, 66, 70, 71, 73, 78, 79, 81, 84, 86, 87, 89, 94, 95, 99, 100, 101, 102, 106, 111, 114, 119, 120, 122, 127, 128, 130, 135, 136, 140, 141, 145, 146, 147, 153, 154, 160, 161, 167, 168, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 222, 224, 225], "user": [0, 1, 180, 188, 200, 201, 205, 217], "userbitgener": [195, 200, 201, 205, 217, 220], "usual": [1, 201, 205], "util": [188, 205], "v": [212, 215], "v1": [203, 217], "v2": 217, "valid": [200, 201], "valu": [0, 1, 2, 3, 4, 9, 10, 14, 15, 21, 22, 26, 27, 31, 32, 36, 37, 43, 44, 50, 51, 55, 56, 58, 63, 64, 66, 70, 73, 78, 79, 81, 86, 87, 89, 94, 95, 100, 101, 102, 106, 107, 111, 112, 114, 119, 120, 122, 127, 128, 130, 135, 136, 140, 141, 145, 146, 147, 153, 154, 160, 161, 167, 168, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 208, 209, 210, 211, 212, 214, 215, 219, 220, 221, 222, 225], "valueerror": [10, 15, 22, 27, 32, 37, 44, 51, 56, 64, 79, 87, 95, 107, 112, 120, 128, 136, 141, 154, 161, 168, 175, 201, 205], "var": 205, "vari": [0, 192, 210, 221], "variabl": [58, 66, 73, 81, 89, 130, 208, 209, 210], "varianc": [208, 210], "variant": [1, 185, 186, 187, 189, 192, 193, 200, 201, 204, 217, 220, 222, 225], "variat": [145, 146, 180, 185, 186, 200, 204, 205, 212, 215], "varieti": 217, "vector": [0, 1, 2, 3, 177, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199], "vendor": [200, 224], "veri": [114, 200, 222], "verifi": [49, 103], "verlag": 177, "version": [49, 187, 193, 196, 200, 201, 217, 220, 224, 225], "view": [201, 221], "vigna": [196, 197, 198, 199], "virtual": 203, "void": [145, 146, 195, 201, 205], "void_p": 201, "voidp": 195, "vol": [49, 182, 194], "w": [89, 92, 93, 130, 133, 134, 187, 190, 193, 222], "wa": [177, 188, 200, 206, 217, 225], "wai": [185, 187, 205, 217, 221], "wait": [188, 219], "warm": 205, "warn": [203, 209, 210, 215, 219], "wast": 114, "wa\u015bniewski": 194, "we": [201, 210], "weaker": [187, 193], "weakli": 208, "week": 192, "welcom": 206, "well": [192, 219], "were": [200, 203, 217, 222, 225], "weyl": [114, 190, 200, 217, 220, 222, 225], "weyl_inc": [190, 221], "weyl_incr": [190, 200, 221], "wheel": 200, "when": [0, 1, 3, 10, 15, 44, 61, 62, 64, 69, 76, 77, 85, 89, 95, 102, 114, 128, 130, 136, 145, 146, 161, 177, 185, 187, 188, 189, 190, 192, 193, 194, 200, 201, 209, 210, 212, 215, 219, 220, 221, 225], "where": [0, 1, 89, 130, 179, 180, 181, 185, 186, 187, 188, 192, 193, 200, 201, 203, 208, 209, 210, 215, 221, 225], "whether": [89, 130, 180, 196, 212], "which": [0, 1, 2, 3, 9, 10, 14, 15, 21, 26, 31, 36, 43, 44, 50, 55, 63, 70, 71, 78, 86, 89, 94, 95, 100, 106, 111, 119, 127, 130, 135, 136, 140, 147, 153, 160, 167, 174, 179, 180, 181, 182, 185, 186, 187, 188, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 209, 210, 211, 212, 214, 219, 220, 221, 225], "while": [1, 181, 188, 195, 201, 205, 209, 210, 215, 221, 225], "wider": [217, 220], "width": [187, 193, 210], "wiki": [0, 208, 209], "wikipedia": [0, 208, 209], "wilei": 210, "window": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 51, 56, 79, 87, 95, 120, 128, 136, 141, 154, 161, 168, 175, 177, 179, 181, 182, 183, 184, 187, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202], "winger": 192, "wire": 201, "wishart": [200, 212], "wit": 225, "within": [2, 182, 183, 191], "without": [0, 1, 2, 3, 114, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 221], "word": 210, "worker": [2, 181, 182, 191, 196, 197, 198, 199], "worri": 225, "would": [201, 209, 210], "wrap": [188, 195, 201, 205], "wraparound": 205, "wrapper": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 149, 150, 156, 157, 163, 164, 170, 171, 178, 195, 200, 201], "writabl": 219, "write": [180, 188, 205, 217, 218], "written": [3, 145, 146, 195, 196, 198, 199, 200, 220], "wrong": 200, "wu": 177, "wuhj": 177, "www": [49, 177, 180, 184, 185, 186, 188, 189, 190], "wyrzykowski": 194, "x": [179, 192, 201, 203, 205, 209, 210], "x1": 205, "x2": 205, "x_1": 210, "x_2": 210, "x_i": 210, "x_j": 210, "x_n": 210, "xl": 201, "xor": [185, 194, 201, 217], "xoroshiro": [196, 198, 199, 217], "xoroshiro1024": 197, "xoroshiro120": 200, "xoroshiro128": [178, 197, 200, 205, 217, 220, 221], "xorshift": [181, 185, 186, 196, 197, 198, 199, 200, 217], "xorshift1024": [178, 196, 198, 199, 200, 217, 220, 221], "xorshift128": [196, 217], "xorshift256": 219, "xorshiro256": 217, "xorshiro512": 217, "xoshiro": 217, "xoshiro256": [178, 200, 217, 219, 220, 221, 222, 225], "xoshiro256starstar": 200, "xoshiro512": [178, 200, 217, 220, 221, 222, 225], "xoshiro512starstar": 200, "xsadd": [197, 217], "xsl": [180, 185, 187, 201], "y": [179, 209, 210], "york": [187, 193, 210], "you": [188, 203, 216, 218, 222], "your": 188, "yp": 1, "z": [180, 201, 209], "zero": [114, 201, 208, 209, 219, 221], "ziggurat": 205, "zimbri": 181, "zipf": 200, "\u00b2": 225, "\u00b3": 225, "\u00b5": [201, 219], "\u00b9": 225, "\u03c6": [178, 217], "\u2074": 225, "\u2075": 225}, "titles": ["AES Counter-based RNG", "ChaCha Cipher-based RNG", "Double SIMD Mersenne Twister (dSFMT)", "Entropy From Iteration, Indirection, Xor (EFIIX)  Generator", "randomgen.aes.AESCounter.advance", "randomgen.aes.AESCounter.cffi", "randomgen.aes.AESCounter.ctypes", "randomgen.aes.AESCounter.jump", "randomgen.aes.AESCounter.jumped", "randomgen.aes.AESCounter.random_raw", "randomgen.aes.AESCounter.seed", "randomgen.aes.AESCounter.state", "randomgen.chacha.ChaCha.cffi", "randomgen.chacha.ChaCha.ctypes", "randomgen.chacha.ChaCha.random_raw", "randomgen.chacha.ChaCha.seed", "randomgen.chacha.ChaCha.state", "randomgen.dsfmt.DSFMT.cffi", "randomgen.dsfmt.DSFMT.ctypes", "randomgen.dsfmt.DSFMT.jump", "randomgen.dsfmt.DSFMT.jumped", "randomgen.dsfmt.DSFMT.random_raw", "randomgen.dsfmt.DSFMT.seed", "randomgen.dsfmt.DSFMT.state", "randomgen.efiix64.EFIIX64.cffi", "randomgen.efiix64.EFIIX64.ctypes", "randomgen.efiix64.EFIIX64.random_raw", "randomgen.efiix64.EFIIX64.seed", "randomgen.efiix64.EFIIX64.state", "randomgen.hc128.HC128.cffi", "randomgen.hc128.HC128.ctypes", "randomgen.hc128.HC128.random_raw", "randomgen.hc128.HC128.seed", "randomgen.hc128.HC128.state", "randomgen.jsf.JSF.cffi", "randomgen.jsf.JSF.ctypes", "randomgen.jsf.JSF.random_raw", "randomgen.jsf.JSF.seed", "randomgen.jsf.JSF.state", "randomgen.lxm.LXM.cffi", "randomgen.lxm.LXM.ctypes", "randomgen.lxm.LXM.jump", "randomgen.lxm.LXM.jumped", "randomgen.lxm.LXM.random_raw", "randomgen.lxm.LXM.seed", "randomgen.lxm.LXM.state", "randomgen.mt19937.MT19937.cffi", "randomgen.mt19937.MT19937.ctypes", "randomgen.mt19937.MT19937.jump", "randomgen.mt19937.MT19937.jumped", "randomgen.mt19937.MT19937.random_raw", "randomgen.mt19937.MT19937.seed", "randomgen.mt19937.MT19937.state", "randomgen.mt64.MT64.cffi", "randomgen.mt64.MT64.ctypes", "randomgen.mt64.MT64.random_raw", "randomgen.mt64.MT64.seed", "randomgen.mt64.MT64.state", "randomgen.pcg32.PCG32.advance", "randomgen.pcg32.PCG32.cffi", "randomgen.pcg32.PCG32.ctypes", "randomgen.pcg32.PCG32.jump", "randomgen.pcg32.PCG32.jumped", "randomgen.pcg32.PCG32.random_raw", "randomgen.pcg32.PCG32.seed", "randomgen.pcg32.PCG32.state", "randomgen.pcg64.LCG128Mix.advance", "randomgen.pcg64.LCG128Mix.cffi", "randomgen.pcg64.LCG128Mix.ctypes", "randomgen.pcg64.LCG128Mix.jumped", "randomgen.pcg64.LCG128Mix.random_raw", "randomgen.pcg64.LCG128Mix.seed", "randomgen.pcg64.LCG128Mix.state", "randomgen.pcg64.PCG64.advance", "randomgen.pcg64.PCG64.cffi", "randomgen.pcg64.PCG64.ctypes", "randomgen.pcg64.PCG64.jump", "randomgen.pcg64.PCG64.jumped", "randomgen.pcg64.PCG64.random_raw", "randomgen.pcg64.PCG64.seed", "randomgen.pcg64.PCG64.state", "randomgen.pcg64.PCG64DXSM.advance", "randomgen.pcg64.PCG64DXSM.cffi", "randomgen.pcg64.PCG64DXSM.ctypes", "randomgen.pcg64.PCG64DXSM.jump", "randomgen.pcg64.PCG64DXSM.jumped", "randomgen.pcg64.PCG64DXSM.random_raw", "randomgen.pcg64.PCG64DXSM.seed", "randomgen.pcg64.PCG64DXSM.state", "randomgen.philox.Philox.advance", "randomgen.philox.Philox.cffi", "randomgen.philox.Philox.ctypes", "randomgen.philox.Philox.jump", "randomgen.philox.Philox.jumped", "randomgen.philox.Philox.random_raw", "randomgen.philox.Philox.seed", "randomgen.philox.Philox.state", "randomgen.rdrand.RDRAND.cffi", "randomgen.rdrand.RDRAND.ctypes", "randomgen.rdrand.RDRAND.jumped", "randomgen.rdrand.RDRAND.random_raw", "randomgen.rdrand.RDRAND.seed", "randomgen.rdrand.RDRAND.state", "randomgen.rdrand.RDRAND.success", "randomgen.romu.Romu.cffi", "randomgen.romu.Romu.ctypes", "randomgen.romu.Romu.random_raw", "randomgen.romu.Romu.seed", "randomgen.romu.Romu.state", "randomgen.sfc.SFC64.cffi", "randomgen.sfc.SFC64.ctypes", "randomgen.sfc.SFC64.random_raw", "randomgen.sfc.SFC64.seed", "randomgen.sfc.SFC64.state", "randomgen.sfc.SFC64.weyl_increments", "randomgen.sfmt.SFMT.cffi", "randomgen.sfmt.SFMT.ctypes", "randomgen.sfmt.SFMT.jump", "randomgen.sfmt.SFMT.jumped", "randomgen.sfmt.SFMT.random_raw", "randomgen.sfmt.SFMT.seed", "randomgen.sfmt.SFMT.state", "randomgen.speck128.SPECK128.advance", "randomgen.speck128.SPECK128.cffi", "randomgen.speck128.SPECK128.ctypes", "randomgen.speck128.SPECK128.jump", "randomgen.speck128.SPECK128.jumped", "randomgen.speck128.SPECK128.random_raw", "randomgen.speck128.SPECK128.seed", "randomgen.speck128.SPECK128.state", "randomgen.threefry.ThreeFry.advance", "randomgen.threefry.ThreeFry.cffi", "randomgen.threefry.ThreeFry.ctypes", "randomgen.threefry.ThreeFry.jump", "randomgen.threefry.ThreeFry.jumped", "randomgen.threefry.ThreeFry.random_raw", "randomgen.threefry.ThreeFry.seed", "randomgen.threefry.ThreeFry.state", "randomgen.tyche.Tyche.cffi", "randomgen.tyche.Tyche.ctypes", "randomgen.tyche.Tyche.random_raw", "randomgen.tyche.Tyche.seed", "randomgen.tyche.Tyche.state", "randomgen.wrapper.UserBitGenerator.cffi", "randomgen.wrapper.UserBitGenerator.ctypes", "randomgen.wrapper.UserBitGenerator.from_cfunc", "randomgen.wrapper.UserBitGenerator.from_ctypes", "randomgen.wrapper.UserBitGenerator.random_raw", "randomgen.wrapper.UserBitGenerator.state", "randomgen.xoroshiro128.Xoroshiro128.cffi", "randomgen.xoroshiro128.Xoroshiro128.ctypes", "randomgen.xoroshiro128.Xoroshiro128.jump", "randomgen.xoroshiro128.Xoroshiro128.jumped", "randomgen.xoroshiro128.Xoroshiro128.random_raw", "randomgen.xoroshiro128.Xoroshiro128.seed", "randomgen.xoroshiro128.Xoroshiro128.state", "randomgen.xorshift1024.Xorshift1024.cffi", "randomgen.xorshift1024.Xorshift1024.ctypes", "randomgen.xorshift1024.Xorshift1024.jump", "randomgen.xorshift1024.Xorshift1024.jumped", "randomgen.xorshift1024.Xorshift1024.random_raw", "randomgen.xorshift1024.Xorshift1024.seed", "randomgen.xorshift1024.Xorshift1024.state", "randomgen.xoshiro256.Xoshiro256.cffi", "randomgen.xoshiro256.Xoshiro256.ctypes", "randomgen.xoshiro256.Xoshiro256.jump", "randomgen.xoshiro256.Xoshiro256.jumped", "randomgen.xoshiro256.Xoshiro256.random_raw", "randomgen.xoshiro256.Xoshiro256.seed", "randomgen.xoshiro256.Xoshiro256.state", "randomgen.xoshiro512.Xoshiro512.cffi", "randomgen.xoshiro512.Xoshiro512.ctypes", "randomgen.xoshiro512.Xoshiro512.jump", "randomgen.xoshiro512.Xoshiro512.jumped", "randomgen.xoshiro512.Xoshiro512.random_raw", "randomgen.xoshiro512.Xoshiro512.seed", "randomgen.xoshiro512.Xoshiro512.state", "HC-128 Cipher Generator", "Bit Generators", "Jenkins Small Fast Generator", "128-bit Linear Congruential Generator (LCG) with Output Mixing", "LXM Generator", "Mersenne Twister (MT19937)", "64-bit Mersenne Twister", "Permuted Congruential Generator (32-bit, PCG32)", "Permuted Congruential Generator (64-bit, PCG64)", "Permuted Congruential Generator 2.0 (64-bit Multiplier, DXSM Output)", "Philox Counter-based RNG", "Hardware-based Random Number Generator (RDRAND)", "Rotate-Multiply (Romu) Generators", "SFC64 Generator", "SIMD-oriented Fast Mersenne Twister (SFMT)", "SPECK Counter-based RNG", "ThreeFry Counter-based RNG", "Tyche PRNG", "User-defined Bit Generators", "Xoroshiro128+", "Xorshift1024*\u03c6", "Xoshiro256**", "Xoshiro512**", "Change Log", "Writing a BitGenerator", "System Entropy", "Evolution of randomgen", "Extended Generator", "Extending", "Future Plans", "randomgen.generator.ExtendedGenerator.bit_generator", "randomgen.generator.ExtendedGenerator.complex_normal", "randomgen.generator.ExtendedGenerator.multivariate_complex_normal", "randomgen.generator.ExtendedGenerator.multivariate_normal", "randomgen.generator.ExtendedGenerator.random", "randomgen.generator.ExtendedGenerator.standard_wishart", "randomgen.generator.ExtendedGenerator.state", "randomgen.generator.ExtendedGenerator.uintegers", "randomgen.generator.ExtendedGenerator.wishart", "Random Generator", "RandomGen", "Legacy Random Generation", "Multithreaded Generation", "What\u2019s New or Different", "Parallel Random Number Generation", "Performance", "References", "Seed Sequences", "Quality Assurance"], "titleterms": {"": [217, 220, 221], "0": [186, 200, 225], "1": [200, 203, 220], "128": [177, 180], "15": 200, "16": [200, 203], "17": [200, 220], "18": [200, 203], "19": [200, 203], "2": [186, 200], "20": 200, "23": [200, 203], "26": 200, "3": 200, "32": 184, "4": 200, "5": 200, "6": 200, "64": [183, 185, 186], "addit": 225, "advanc": [4, 58, 66, 73, 81, 89, 122, 130, 221], "ae": [0, 4, 5, 6, 7, 8, 9, 10, 11], "aescount": [4, 5, 6, 7, 8, 9, 10, 11], "also": [186, 204, 208, 209, 212, 215], "assur": 225, "base": [0, 1, 187, 188, 192, 193], "between": 203, "bit": [178, 180, 183, 184, 185, 186, 195, 205, 217], "bit_gener": 207, "bitgener": [201, 205], "cffi": [5, 12, 17, 24, 29, 34, 39, 46, 53, 59, 67, 74, 82, 90, 97, 104, 109, 115, 123, 131, 138, 143, 149, 156, 163, 170], "chacha": [1, 12, 13, 14, 15, 16], "chang": [200, 203, 217], "cipher": [1, 177], "complex_norm": 208, "configur": 225, "congruenti": [180, 184, 185, 186], "core": 225, "correl": 225, "counter": [0, 187, 192, 193], "cryptograph": 221, "ctype": [6, 13, 18, 25, 30, 35, 40, 47, 54, 60, 68, 75, 83, 91, 98, 105, 110, 116, 124, 132, 139, 144, 150, 157, 164, 171], "custom": 188, "cython": 205, "danger": [216, 217, 218], "defin": [178, 195], "differ": [217, 220], "distinct": 221, "distribut": 204, "doubl": 2, "dsfmt": [2, 17, 18, 19, 20, 21, 22, 23], "dxsm": 186, "efiix": 3, "efiix64": [24, 25, 26, 27, 28], "entropi": [3, 202], "evolut": 203, "exampl": 225, "experi": 225, "experiment": 178, "extend": [0, 1, 2, 3, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 204, 205], "extendedgener": [207, 208, 209, 210, 211, 212, 213, 214, 215], "fast": [179, 191], "featur": 217, "from": [3, 195, 220], "from_cfunc": 145, "from_ctyp": 146, "futur": 206, "gener": [0, 2, 3, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221], "hardwar": 188, "hc": 177, "hc128": [29, 30, 31, 32, 33], "histori": 217, "indic": 217, "indirect": 3, "introduct": 217, "iter": 3, "jenkin": 179, "jsf": [34, 35, 36, 37, 38], "jump": [7, 8, 19, 20, 41, 42, 48, 49, 61, 62, 69, 76, 77, 84, 85, 92, 93, 99, 117, 118, 125, 126, 133, 134, 151, 152, 158, 159, 165, 166, 172, 173, 221], "kei": 221, "lcg": 180, "lcg128mix": [66, 67, 68, 69, 70, 71, 72], "legaci": 218, "level": 195, "linear": 180, "lock": 188, "log": 200, "low": 195, "lxm": [39, 40, 41, 42, 43, 44, 45, 181], "manipul": 204, "mersenn": [2, 182, 183, 191], "mix": 180, "mt19937": [46, 47, 48, 49, 50, 51, 52, 182], "mt64": [53, 54, 55, 56, 57], "multipli": [186, 189], "multithread": 219, "multivariate_complex_norm": 209, "multivariate_norm": 210, "new": [205, 217, 220], "non": 221, "note": [222, 224, 225], "numba": [201, 205], "number": [188, 221], "numpi": 220, "object": 195, "orient": 191, "output": [180, 186], "parallel": [0, 2, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 196, 197, 198, 199, 217, 221], "pcg32": [58, 59, 60, 61, 62, 63, 64, 65, 184], "pcg64": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 185], "pcg64dxsm": [81, 82, 83, 84, 85, 86, 87, 88], "perform": [201, 222], "permut": [184, 185, 186], "philox": [89, 90, 91, 92, 93, 94, 95, 96, 187], "plan": 206, "prng": [194, 221], "python": [201, 205], "qualiti": 225, "random": [188, 211, 216, 217, 218, 221], "random_raw": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 119, 127, 135, 140, 147, 153, 160, 167, 174], "randomgen": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217], "rdrand": [97, 98, 99, 100, 101, 102, 103, 188], "recommend": 222, "refer": 223, "remov": 217, "reproduc": 221, "rng": [0, 1, 178, 187, 192, 193], "romu": [104, 105, 106, 107, 108, 189], "rotat": 189, "see": [186, 204, 208, 209, 212, 215], "seed": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 44, 51, 56, 64, 71, 79, 87, 95, 101, 107, 112, 120, 128, 136, 141, 154, 161, 168, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 204, 224, 225], "seedsequ": 221, "sequenc": [221, 224], "sequenti": 225, "sfc": [109, 110, 111, 112, 113, 114], "sfc64": [109, 110, 111, 112, 113, 114, 190], "sfmt": [115, 116, 117, 118, 119, 120, 121, 191], "simd": [2, 191], "small": 179, "speck": 192, "speck128": [122, 123, 124, 125, 126, 127, 128, 129], "stabl": 178, "standard_wishart": 212, "state": [0, 1, 2, 3, 11, 16, 23, 28, 33, 38, 45, 52, 57, 65, 72, 80, 88, 96, 102, 108, 113, 121, 129, 137, 142, 148, 155, 162, 169, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 204, 213, 221], "success": 103, "support": 217, "system": 202, "tabl": 217, "test": [0, 1, 2, 3, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 225], "threefri": [130, 131, 132, 133, 134, 135, 136, 137, 193], "time": 222, "twister": [2, 182, 183, 191], "tych": [138, 139, 140, 141, 142, 194], "uinteg": 214, "unreleas": 200, "us": [201, 221], "user": [178, 195], "userbitgener": [143, 144, 145, 146, 147, 148], "v1": 200, "v2": 200, "weyl": 221, "weyl_incr": 114, "what": [217, 220], "wishart": 215, "wrapper": [143, 144, 145, 146, 147, 148], "write": 201, "xor": 3, "xoroshiro128": [149, 150, 151, 152, 153, 154, 155, 196], "xorshift1024": [156, 157, 158, 159, 160, 161, 162, 197], "xoshiro256": [163, 164, 165, 166, 167, 168, 169, 198], "xoshiro512": [170, 171, 172, 173, 174, 175, 176, 199], "zero": 225, "\u03c6": 197}})