Search.setIndex({"alltitles": {"128-bit Linear Congruential Generator (LCG) with Output Mixing": [[188, null]], "64-bit Mersenne Twister": [[191, null]], "AES Counter-based RNG": [[0, null]], "Additional Experiments": [[235, "additional-experiments"]], "Advancing the PRNG\u2019s state": [[231, "advancing-the-prng-s-state"]], "Bit Generators": [[186, null], [227, "bit-generators"]], "ChaCha Cipher-based RNG": [[1, null]], "Change Log": [[209, null]], "Changes": [[227, "changes"]], "Changes between 1.16 and 1.18": [[213, "changes-between-1-16-and-1-18"]], "Changes in 1.19": [[213, "changes-in-1-19"]], "Changes in 1.23": [[213, "changes-in-1-23"]], "Core Testing": [[235, "core-testing"]], "Correlated Seeds": [[235, "correlated-seeds"]], "Custom Lock": [[196, "custom-lock"]], "Cython": [[215, "cython"]], "Danger": [[226, null], [227, null], [228, null]], "Differences from NumPy (1.17+)": [[230, "differences-from-numpy-1-17"]], "Distinct Keys in Cryptographic Generators": [[231, "distinct-keys-in-cryptographic-generators"]], "Distributions": [[214, "distributions"]], "Double SIMD Mersenne Twister (dSFMT)": [[2, null]], "Entropy From Iteration, Indirection, Xor (EFIIX)  Generator": [[3, null]], "Evolution of randomgen": [[213, null]], "Example Configuration": [[235, "example-configuration"]], "Experimental RNGs": [[186, "experimental-rngs"]], "Extended Generator": [[214, null]], "Extending": [[0, "extending"], [1, "extending"], [2, "extending"], [3, "extending"], [185, "extending"], [187, "extending"], [188, "extending"], [189, "extending"], [190, "extending"], [191, "extending"], [192, "extending"], [193, "extending"], [194, "extending"], [195, "extending"], [196, "extending"], [197, "extending"], [198, "extending"], [199, "extending"], [200, "extending"], [201, "extending"], [202, "extending"], [203, "extending"], [204, "extending"], [205, "extending"], [206, "extending"], [207, "extending"], [208, "extending"], [215, null]], "From Low-level Objects": [[204, "from-low-level-objects"]], "Future Plans": [[216, null]], "HC-128 Cipher Generator": [[185, null]], "Hardware-based Random Number Generator (RDRAND)": [[196, null]], "History": [[227, "history"]], "Indices and tables": [[227, "indices-and-tables"]], "Introduction": [[227, "introduction"]], "Jenkins Small Fast Generator": [[187, null]], "Jumping the PRNG state": [[231, "jumping-the-prng-state"]], "Key Generation": [[201, "key-generation"]], "LXM Generator": [[189, null]], "Legacy Random Generation": [[228, null]], "Mersenne Twister (MT19937)": [[190, null]], "Middle Square with Weyl increment (64-bit, Squares)": [[201, null]], "Multithreaded Generation": [[229, null]], "New Bit Generators": [[215, "new-bit-generators"]], "New Features": [[227, "new-features"]], "Non-reproducible Sequences": [[231, "non-reproducible-sequences"]], "Note": [[232, null], [234, null]], "Notes": [[235, "notes"]], "Numba": [[215, "numba"]], "Parallel Generation": [[227, "parallel-generation"]], "Parallel Random Number Generation": [[231, null]], "Parallel generation": [[0, "parallel-generation"], [2, "parallel-generation"], [188, "parallel-generation"], [189, "parallel-generation"], [190, "parallel-generation"], [192, "parallel-generation"], [193, "parallel-generation"], [194, "parallel-generation"], [195, "parallel-generation"], [196, "parallel-generation"], [199, "parallel-generation"], [200, "parallel-generation"], [201, "parallel-generation"], [202, "parallel-generation"], [205, "parallel-generation"], [206, "parallel-generation"], [207, "parallel-generation"], [208, "parallel-generation"]], "Parallelization": [[198, "parallelization"]], "Performance": [[211, "Performance"], [211, "id1"], [232, null]], "Permuted Congruential Generator (32-bit, PCG32)": [[192, null]], "Permuted Congruential Generator (64-bit, PCG64)": [[193, null]], "Permuted Congruential Generator 2.0 (64-bit Multiplier, DXSM Output)": [[194, null]], "Philox Counter-based RNG": [[195, null]], "Python BitGenerators": [[215, "python-bitgenerators"]], "Quality Assurance": [[235, null]], "Random Generator": [[226, null], [227, "random-generator"]], "RandomGen": [[227, "randomgen"]], "Recommendation": [[232, "recommendation"]], "References": [[233, null]], "Removed Features": [[227, "removed-features"]], "Rotate-Multiply (Romu) Generators": [[197, null]], "SFC64 Generator": [[198, null]], "SIMD-oriented Fast Mersenne Twister (SFMT)": [[199, null]], "SPECK Counter-based RNG": [[200, null]], "See also": [[137, null], [194, null], [201, null], [214, null], [218, null], [219, null], [222, null], [225, null]], "Seed Sequences": [[234, null]], "Seed and State Manipulation": [[214, "seed-and-state-manipulation"]], "Seeding and State": [[0, "seeding-and-state"], [1, "seeding-and-state"], [2, "seeding-and-state"], [3, "seeding-and-state"], [185, "seeding-and-state"], [187, "seeding-and-state"], [188, "seeding-and-state"], [189, "seeding-and-state"], [190, "seeding-and-state"], [191, "seeding-and-state"], [192, "seeding-and-state"], [193, "seeding-and-state"], [194, "seeding-and-state"], [195, "seeding-and-state"], [196, "seeding-and-state"], [197, "seeding-and-state"], [198, "seeding-and-state"], [199, "seeding-and-state"], [200, "seeding-and-state"], [201, "seeding-and-state"], [202, "seeding-and-state"], [203, "seeding-and-state"], [205, "seeding-and-state"], [206, "seeding-and-state"], [207, "seeding-and-state"], [208, "seeding-and-state"]], "Sequential Seeds": [[235, "sequential-seeds"]], "Shared functionality": [[210, null]], "Stable RNGs": [[186, "stable-rngs"]], "State": [[204, "state"]], "Supported Generators": [[227, "supported-generators"]], "System Entropy": [[212, null]], "Testing": [[0, "testing"], [1, "testing"], [2, "testing"], [3, "testing"], [185, "testing"], [187, "testing"], [188, "testing"], [189, "testing"], [190, "testing"], [191, "testing"], [192, "testing"], [193, "testing"], [194, "testing"], [195, "testing"], [196, "testing"], [197, "testing"], [198, "testing"], [199, "testing"], [200, "testing"], [201, "testing"], [202, "testing"], [203, "testing"], [204, "testing"], [205, "testing"], [206, "testing"], [207, "testing"], [208, "testing"]], "ThreeFry Counter-based RNG": [[202, null]], "Timings": [[232, "timings"]], "Tyche PRNG": [[203, null]], "User-defined Bit Generators": [[186, "user-defined-bit-generators"], [204, null]], "Using Python": [[211, "Using-Python"]], "Using a SeedSequence": [[231, "using-a-seedsequence"]], "Using numba": [[211, "Using-numba"]], "Warning": [[204, null]], "Weyl Sequences": [[231, "weyl-sequences"]], "What\u2019s New or Different": [[227, "what-s-new-or-different"], [230, null]], "Writing a BitGenerator": [[211, null]], "Xoroshiro128+": [[205, null]], "Xorshift1024*\u03c6": [[206, null]], "Xoshiro256**": [[207, null]], "Xoshiro512**": [[208, null]], "Zero (0) Seeding": [[235, "zero-0-seeding"]], "randomgen.aes.AESCounter.advance": [[4, null]], "randomgen.aes.AESCounter.cffi": [[5, null]], "randomgen.aes.AESCounter.ctypes": [[6, null]], "randomgen.aes.AESCounter.jump": [[7, null]], "randomgen.aes.AESCounter.jumped": [[8, null]], "randomgen.aes.AESCounter.random_raw": [[9, null]], "randomgen.aes.AESCounter.seed": [[10, null]], "randomgen.aes.AESCounter.state": [[11, null]], "randomgen.chacha.ChaCha.cffi": [[12, null]], "randomgen.chacha.ChaCha.ctypes": [[13, null]], "randomgen.chacha.ChaCha.random_raw": [[14, null]], "randomgen.chacha.ChaCha.seed": [[15, null]], "randomgen.chacha.ChaCha.state": [[16, null]], "randomgen.dsfmt.DSFMT.cffi": [[17, null]], "randomgen.dsfmt.DSFMT.ctypes": [[18, null]], "randomgen.dsfmt.DSFMT.jump": [[19, null]], "randomgen.dsfmt.DSFMT.jumped": [[20, null]], "randomgen.dsfmt.DSFMT.random_raw": [[21, null]], "randomgen.dsfmt.DSFMT.seed": [[22, null]], "randomgen.dsfmt.DSFMT.state": [[23, null]], "randomgen.efiix64.EFIIX64.cffi": [[24, null]], "randomgen.efiix64.EFIIX64.ctypes": [[25, null]], "randomgen.efiix64.EFIIX64.random_raw": [[26, null]], "randomgen.efiix64.EFIIX64.seed": [[27, null]], "randomgen.efiix64.EFIIX64.state": [[28, null]], "randomgen.generator.ExtendedGenerator.bit_generator": [[217, null]], "randomgen.generator.ExtendedGenerator.complex_normal": [[218, null]], "randomgen.generator.ExtendedGenerator.multivariate_complex_normal": [[219, null]], "randomgen.generator.ExtendedGenerator.multivariate_normal": [[220, null]], "randomgen.generator.ExtendedGenerator.random": [[221, null]], "randomgen.generator.ExtendedGenerator.standard_wishart": [[222, null]], "randomgen.generator.ExtendedGenerator.state": [[223, null]], "randomgen.generator.ExtendedGenerator.uintegers": [[224, null]], "randomgen.generator.ExtendedGenerator.wishart": [[225, null]], "randomgen.hc128.HC128.cffi": [[29, null]], "randomgen.hc128.HC128.ctypes": [[30, null]], "randomgen.hc128.HC128.random_raw": [[31, null]], "randomgen.hc128.HC128.seed": [[32, null]], "randomgen.hc128.HC128.state": [[33, null]], "randomgen.jsf.JSF.cffi": [[34, null]], "randomgen.jsf.JSF.ctypes": [[35, null]], "randomgen.jsf.JSF.random_raw": [[36, null]], "randomgen.jsf.JSF.seed": [[37, null]], "randomgen.jsf.JSF.state": [[38, null]], "randomgen.lxm.LXM.cffi": [[39, null]], "randomgen.lxm.LXM.ctypes": [[40, null]], "randomgen.lxm.LXM.jump": [[41, null]], "randomgen.lxm.LXM.jumped": [[42, null]], "randomgen.lxm.LXM.random_raw": [[43, null]], "randomgen.lxm.LXM.seed": [[44, null]], "randomgen.lxm.LXM.state": [[45, null]], "randomgen.mt19937.MT19937.cffi": [[46, null]], "randomgen.mt19937.MT19937.ctypes": [[47, null]], "randomgen.mt19937.MT19937.jump": [[48, null]], "randomgen.mt19937.MT19937.jumped": [[49, null]], "randomgen.mt19937.MT19937.random_raw": [[50, null]], "randomgen.mt19937.MT19937.seed": [[51, null]], "randomgen.mt19937.MT19937.state": [[52, null]], "randomgen.mt64.MT64.cffi": [[53, null]], "randomgen.mt64.MT64.ctypes": [[54, null]], "randomgen.mt64.MT64.random_raw": [[55, null]], "randomgen.mt64.MT64.seed": [[56, null]], "randomgen.mt64.MT64.state": [[57, null]], "randomgen.pcg32.PCG32.advance": [[58, null]], "randomgen.pcg32.PCG32.cffi": [[59, null]], "randomgen.pcg32.PCG32.ctypes": [[60, null]], "randomgen.pcg32.PCG32.jump": [[61, null]], "randomgen.pcg32.PCG32.jumped": [[62, null]], "randomgen.pcg32.PCG32.random_raw": [[63, null]], "randomgen.pcg32.PCG32.seed": [[64, null]], "randomgen.pcg32.PCG32.state": [[65, null]], "randomgen.pcg64.LCG128Mix.advance": [[66, null]], "randomgen.pcg64.LCG128Mix.cffi": [[67, null]], "randomgen.pcg64.LCG128Mix.ctypes": [[68, null]], "randomgen.pcg64.LCG128Mix.jumped": [[69, null]], "randomgen.pcg64.LCG128Mix.random_raw": [[70, null]], "randomgen.pcg64.LCG128Mix.seed": [[71, null]], "randomgen.pcg64.LCG128Mix.state": [[72, null]], "randomgen.pcg64.PCG64.advance": [[73, null]], "randomgen.pcg64.PCG64.cffi": [[74, null]], "randomgen.pcg64.PCG64.ctypes": [[75, null]], "randomgen.pcg64.PCG64.jump": [[76, null]], "randomgen.pcg64.PCG64.jumped": [[77, null]], "randomgen.pcg64.PCG64.random_raw": [[78, null]], "randomgen.pcg64.PCG64.seed": [[79, null]], "randomgen.pcg64.PCG64.state": [[80, null]], "randomgen.pcg64.PCG64DXSM.advance": [[81, null]], "randomgen.pcg64.PCG64DXSM.cffi": [[82, null]], "randomgen.pcg64.PCG64DXSM.ctypes": [[83, null]], "randomgen.pcg64.PCG64DXSM.jump": [[84, null]], "randomgen.pcg64.PCG64DXSM.jumped": [[85, null]], "randomgen.pcg64.PCG64DXSM.random_raw": [[86, null]], "randomgen.pcg64.PCG64DXSM.seed": [[87, null]], "randomgen.pcg64.PCG64DXSM.state": [[88, null]], "randomgen.philox.Philox.advance": [[89, null]], "randomgen.philox.Philox.cffi": [[90, null]], "randomgen.philox.Philox.ctypes": [[91, null]], "randomgen.philox.Philox.jump": [[92, null]], "randomgen.philox.Philox.jumped": [[93, null]], "randomgen.philox.Philox.random_raw": [[94, null]], "randomgen.philox.Philox.seed": [[95, null]], "randomgen.philox.Philox.state": [[96, null]], "randomgen.rdrand.RDRAND.cffi": [[97, null]], "randomgen.rdrand.RDRAND.ctypes": [[98, null]], "randomgen.rdrand.RDRAND.jumped": [[99, null]], "randomgen.rdrand.RDRAND.random_raw": [[100, null]], "randomgen.rdrand.RDRAND.seed": [[101, null]], "randomgen.rdrand.RDRAND.state": [[102, null]], "randomgen.rdrand.RDRAND.success": [[103, null]], "randomgen.romu.Romu.cffi": [[104, null]], "randomgen.romu.Romu.ctypes": [[105, null]], "randomgen.romu.Romu.random_raw": [[106, null]], "randomgen.romu.Romu.seed": [[107, null]], "randomgen.romu.Romu.state": [[108, null]], "randomgen.sfc.SFC64.cffi": [[109, null]], "randomgen.sfc.SFC64.ctypes": [[110, null]], "randomgen.sfc.SFC64.random_raw": [[111, null]], "randomgen.sfc.SFC64.seed": [[112, null]], "randomgen.sfc.SFC64.state": [[113, null]], "randomgen.sfc.SFC64.weyl_increments": [[114, null]], "randomgen.sfmt.SFMT.cffi": [[115, null]], "randomgen.sfmt.SFMT.ctypes": [[116, null]], "randomgen.sfmt.SFMT.jump": [[117, null]], "randomgen.sfmt.SFMT.jumped": [[118, null]], "randomgen.sfmt.SFMT.random_raw": [[119, null]], "randomgen.sfmt.SFMT.seed": [[120, null]], "randomgen.sfmt.SFMT.state": [[121, null]], "randomgen.speck128.SPECK128.advance": [[122, null]], "randomgen.speck128.SPECK128.cffi": [[123, null]], "randomgen.speck128.SPECK128.ctypes": [[124, null]], "randomgen.speck128.SPECK128.jump": [[125, null]], "randomgen.speck128.SPECK128.jumped": [[126, null]], "randomgen.speck128.SPECK128.random_raw": [[127, null]], "randomgen.speck128.SPECK128.seed": [[128, null]], "randomgen.speck128.SPECK128.state": [[129, null]], "randomgen.squares.Squares.advance": [[130, null]], "randomgen.squares.Squares.cffi": [[131, null]], "randomgen.squares.Squares.ctypes": [[132, null]], "randomgen.squares.Squares.jumped": [[133, null]], "randomgen.squares.Squares.random_raw": [[134, null]], "randomgen.squares.Squares.seed": [[135, null]], "randomgen.squares.Squares.state": [[136, null]], "randomgen.squares.generate_keys": [[137, null]], "randomgen.threefry.ThreeFry.advance": [[138, null]], "randomgen.threefry.ThreeFry.cffi": [[139, null]], "randomgen.threefry.ThreeFry.ctypes": [[140, null]], "randomgen.threefry.ThreeFry.jump": [[141, null]], "randomgen.threefry.ThreeFry.jumped": [[142, null]], "randomgen.threefry.ThreeFry.random_raw": [[143, null]], "randomgen.threefry.ThreeFry.seed": [[144, null]], "randomgen.threefry.ThreeFry.state": [[145, null]], "randomgen.tyche.Tyche.cffi": [[146, null]], "randomgen.tyche.Tyche.ctypes": [[147, null]], "randomgen.tyche.Tyche.random_raw": [[148, null]], "randomgen.tyche.Tyche.seed": [[149, null]], "randomgen.tyche.Tyche.state": [[150, null]], "randomgen.wrapper.UserBitGenerator.cffi": [[151, null]], "randomgen.wrapper.UserBitGenerator.ctypes": [[152, null]], "randomgen.wrapper.UserBitGenerator.from_cfunc": [[153, null]], "randomgen.wrapper.UserBitGenerator.from_ctypes": [[154, null]], "randomgen.wrapper.UserBitGenerator.random_raw": [[155, null]], "randomgen.wrapper.UserBitGenerator.state": [[156, null]], "randomgen.xoroshiro128.Xoroshiro128.cffi": [[157, null]], "randomgen.xoroshiro128.Xoroshiro128.ctypes": [[158, null]], "randomgen.xoroshiro128.Xoroshiro128.jump": [[159, null]], "randomgen.xoroshiro128.Xoroshiro128.jumped": [[160, null]], "randomgen.xoroshiro128.Xoroshiro128.random_raw": [[161, null]], "randomgen.xoroshiro128.Xoroshiro128.seed": [[162, null]], "randomgen.xoroshiro128.Xoroshiro128.state": [[163, null]], "randomgen.xorshift1024.Xorshift1024.cffi": [[164, null]], "randomgen.xorshift1024.Xorshift1024.ctypes": [[165, null]], "randomgen.xorshift1024.Xorshift1024.jump": [[166, null]], "randomgen.xorshift1024.Xorshift1024.jumped": [[167, null]], "randomgen.xorshift1024.Xorshift1024.random_raw": [[168, null]], "randomgen.xorshift1024.Xorshift1024.seed": [[169, null]], "randomgen.xorshift1024.Xorshift1024.state": [[170, null]], "randomgen.xoshiro256.Xoshiro256.cffi": [[171, null]], "randomgen.xoshiro256.Xoshiro256.ctypes": [[172, null]], "randomgen.xoshiro256.Xoshiro256.jump": [[173, null]], "randomgen.xoshiro256.Xoshiro256.jumped": [[174, null]], "randomgen.xoshiro256.Xoshiro256.random_raw": [[175, null]], "randomgen.xoshiro256.Xoshiro256.seed": [[176, null]], "randomgen.xoshiro256.Xoshiro256.state": [[177, null]], "randomgen.xoshiro512.Xoshiro512.cffi": [[178, null]], "randomgen.xoshiro512.Xoshiro512.ctypes": [[179, null]], "randomgen.xoshiro512.Xoshiro512.jump": [[180, null]], "randomgen.xoshiro512.Xoshiro512.jumped": [[181, null]], "randomgen.xoshiro512.Xoshiro512.random_raw": [[182, null]], "randomgen.xoshiro512.Xoshiro512.seed": [[183, null]], "randomgen.xoshiro512.Xoshiro512.state": [[184, null]], "v1.15": [[209, "v1-15"]], "v1.15.1": [[209, "v1-15-1"]], "v1.16.0": [[209, "v1-16-0"]], "v1.16.1": [[209, "v1-16-1"]], "v1.16.2": [[209, "v1-16-2"]], "v1.16.3": [[209, "v1-16-3"]], "v1.16.4": [[209, "v1-16-4"]], "v1.16.5": [[209, "v1-16-5"]], "v1.16.6": [[209, "v1-16-6"]], "v1.17.0": [[209, "v1-17-0"]], "v1.18.0": [[209, "v1-18-0"]], "v1.19.0": [[209, "v1-19-0"]], "v1.19.1": [[209, "v1-19-1"]], "v1.19.2": [[209, "v1-19-2"]], "v1.19.3": [[209, "v1-19-3"]], "v1.20.0": [[209, "v1-20-0"]], "v1.20.1": [[209, "v1-20-1"]], "v1.20.2": [[209, "v1-20-2"]], "v1.23.0": [[209, "v1-23-0"]], "v1.23.1": [[209, "v1-23-1"]], "v1.26.0": [[209, "v1-26-0"]], "v1.26.1": [[209, "v1-26-1"]], "v2.0.0": [[209, "v2-0-0"]], "v2.1.0": [[209, "v2-1-0"]]}, "docurls": ["bit_generators/aesctr.html", "bit_generators/chacha.html", "bit_generators/dsfmt.html", "bit_generators/efiix64.html", "bit_generators/generated/randomgen.aes.AESCounter.advance.html", "bit_generators/generated/randomgen.aes.AESCounter.cffi.html", "bit_generators/generated/randomgen.aes.AESCounter.ctypes.html", "bit_generators/generated/randomgen.aes.AESCounter.jump.html", "bit_generators/generated/randomgen.aes.AESCounter.jumped.html", "bit_generators/generated/randomgen.aes.AESCounter.random_raw.html", "bit_generators/generated/randomgen.aes.AESCounter.seed.html", "bit_generators/generated/randomgen.aes.AESCounter.state.html", "bit_generators/generated/randomgen.chacha.ChaCha.cffi.html", "bit_generators/generated/randomgen.chacha.ChaCha.ctypes.html", "bit_generators/generated/randomgen.chacha.ChaCha.random_raw.html", "bit_generators/generated/randomgen.chacha.ChaCha.seed.html", "bit_generators/generated/randomgen.chacha.ChaCha.state.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.cffi.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.ctypes.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.jump.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.jumped.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.random_raw.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.seed.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.state.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.cffi.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.ctypes.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.random_raw.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.seed.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.state.html", "bit_generators/generated/randomgen.hc128.HC128.cffi.html", "bit_generators/generated/randomgen.hc128.HC128.ctypes.html", "bit_generators/generated/randomgen.hc128.HC128.random_raw.html", "bit_generators/generated/randomgen.hc128.HC128.seed.html", "bit_generators/generated/randomgen.hc128.HC128.state.html", "bit_generators/generated/randomgen.jsf.JSF.cffi.html", "bit_generators/generated/randomgen.jsf.JSF.ctypes.html", "bit_generators/generated/randomgen.jsf.JSF.random_raw.html", "bit_generators/generated/randomgen.jsf.JSF.seed.html", "bit_generators/generated/randomgen.jsf.JSF.state.html", "bit_generators/generated/randomgen.lxm.LXM.cffi.html", "bit_generators/generated/randomgen.lxm.LXM.ctypes.html", "bit_generators/generated/randomgen.lxm.LXM.jump.html", "bit_generators/generated/randomgen.lxm.LXM.jumped.html", "bit_generators/generated/randomgen.lxm.LXM.random_raw.html", "bit_generators/generated/randomgen.lxm.LXM.seed.html", "bit_generators/generated/randomgen.lxm.LXM.state.html", "bit_generators/generated/randomgen.mt19937.MT19937.cffi.html", "bit_generators/generated/randomgen.mt19937.MT19937.ctypes.html", "bit_generators/generated/randomgen.mt19937.MT19937.jump.html", "bit_generators/generated/randomgen.mt19937.MT19937.jumped.html", "bit_generators/generated/randomgen.mt19937.MT19937.random_raw.html", "bit_generators/generated/randomgen.mt19937.MT19937.seed.html", "bit_generators/generated/randomgen.mt19937.MT19937.state.html", "bit_generators/generated/randomgen.mt64.MT64.cffi.html", "bit_generators/generated/randomgen.mt64.MT64.ctypes.html", "bit_generators/generated/randomgen.mt64.MT64.random_raw.html", "bit_generators/generated/randomgen.mt64.MT64.seed.html", "bit_generators/generated/randomgen.mt64.MT64.state.html", "bit_generators/generated/randomgen.pcg32.PCG32.advance.html", "bit_generators/generated/randomgen.pcg32.PCG32.cffi.html", "bit_generators/generated/randomgen.pcg32.PCG32.ctypes.html", "bit_generators/generated/randomgen.pcg32.PCG32.jump.html", "bit_generators/generated/randomgen.pcg32.PCG32.jumped.html", "bit_generators/generated/randomgen.pcg32.PCG32.random_raw.html", "bit_generators/generated/randomgen.pcg32.PCG32.seed.html", "bit_generators/generated/randomgen.pcg32.PCG32.state.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.advance.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.cffi.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.ctypes.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.jumped.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.random_raw.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.seed.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.state.html", "bit_generators/generated/randomgen.pcg64.PCG64.advance.html", "bit_generators/generated/randomgen.pcg64.PCG64.cffi.html", "bit_generators/generated/randomgen.pcg64.PCG64.ctypes.html", "bit_generators/generated/randomgen.pcg64.PCG64.jump.html", "bit_generators/generated/randomgen.pcg64.PCG64.jumped.html", "bit_generators/generated/randomgen.pcg64.PCG64.random_raw.html", "bit_generators/generated/randomgen.pcg64.PCG64.seed.html", "bit_generators/generated/randomgen.pcg64.PCG64.state.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.advance.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.cffi.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.ctypes.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.jump.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.jumped.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.random_raw.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.seed.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.state.html", "bit_generators/generated/randomgen.philox.Philox.advance.html", "bit_generators/generated/randomgen.philox.Philox.cffi.html", "bit_generators/generated/randomgen.philox.Philox.ctypes.html", "bit_generators/generated/randomgen.philox.Philox.jump.html", "bit_generators/generated/randomgen.philox.Philox.jumped.html", "bit_generators/generated/randomgen.philox.Philox.random_raw.html", "bit_generators/generated/randomgen.philox.Philox.seed.html", "bit_generators/generated/randomgen.philox.Philox.state.html", "bit_generators/generated/randomgen.rdrand.RDRAND.cffi.html", "bit_generators/generated/randomgen.rdrand.RDRAND.ctypes.html", "bit_generators/generated/randomgen.rdrand.RDRAND.jumped.html", "bit_generators/generated/randomgen.rdrand.RDRAND.random_raw.html", "bit_generators/generated/randomgen.rdrand.RDRAND.seed.html", "bit_generators/generated/randomgen.rdrand.RDRAND.state.html", "bit_generators/generated/randomgen.rdrand.RDRAND.success.html", "bit_generators/generated/randomgen.romu.Romu.cffi.html", "bit_generators/generated/randomgen.romu.Romu.ctypes.html", "bit_generators/generated/randomgen.romu.Romu.random_raw.html", "bit_generators/generated/randomgen.romu.Romu.seed.html", "bit_generators/generated/randomgen.romu.Romu.state.html", "bit_generators/generated/randomgen.sfc.SFC64.cffi.html", "bit_generators/generated/randomgen.sfc.SFC64.ctypes.html", "bit_generators/generated/randomgen.sfc.SFC64.random_raw.html", "bit_generators/generated/randomgen.sfc.SFC64.seed.html", "bit_generators/generated/randomgen.sfc.SFC64.state.html", "bit_generators/generated/randomgen.sfc.SFC64.weyl_increments.html", "bit_generators/generated/randomgen.sfmt.SFMT.cffi.html", "bit_generators/generated/randomgen.sfmt.SFMT.ctypes.html", "bit_generators/generated/randomgen.sfmt.SFMT.jump.html", "bit_generators/generated/randomgen.sfmt.SFMT.jumped.html", "bit_generators/generated/randomgen.sfmt.SFMT.random_raw.html", "bit_generators/generated/randomgen.sfmt.SFMT.seed.html", "bit_generators/generated/randomgen.sfmt.SFMT.state.html", "bit_generators/generated/randomgen.speck128.SPECK128.advance.html", "bit_generators/generated/randomgen.speck128.SPECK128.cffi.html", "bit_generators/generated/randomgen.speck128.SPECK128.ctypes.html", "bit_generators/generated/randomgen.speck128.SPECK128.jump.html", "bit_generators/generated/randomgen.speck128.SPECK128.jumped.html", "bit_generators/generated/randomgen.speck128.SPECK128.random_raw.html", "bit_generators/generated/randomgen.speck128.SPECK128.seed.html", "bit_generators/generated/randomgen.speck128.SPECK128.state.html", "bit_generators/generated/randomgen.squares.Squares.advance.html", "bit_generators/generated/randomgen.squares.Squares.cffi.html", "bit_generators/generated/randomgen.squares.Squares.ctypes.html", "bit_generators/generated/randomgen.squares.Squares.jumped.html", "bit_generators/generated/randomgen.squares.Squares.random_raw.html", "bit_generators/generated/randomgen.squares.Squares.seed.html", "bit_generators/generated/randomgen.squares.Squares.state.html", "bit_generators/generated/randomgen.squares.generate_keys.html", "bit_generators/generated/randomgen.threefry.ThreeFry.advance.html", "bit_generators/generated/randomgen.threefry.ThreeFry.cffi.html", "bit_generators/generated/randomgen.threefry.ThreeFry.ctypes.html", "bit_generators/generated/randomgen.threefry.ThreeFry.jump.html", "bit_generators/generated/randomgen.threefry.ThreeFry.jumped.html", "bit_generators/generated/randomgen.threefry.ThreeFry.random_raw.html", "bit_generators/generated/randomgen.threefry.ThreeFry.seed.html", "bit_generators/generated/randomgen.threefry.ThreeFry.state.html", "bit_generators/generated/randomgen.tyche.Tyche.cffi.html", "bit_generators/generated/randomgen.tyche.Tyche.ctypes.html", "bit_generators/generated/randomgen.tyche.Tyche.random_raw.html", "bit_generators/generated/randomgen.tyche.Tyche.seed.html", "bit_generators/generated/randomgen.tyche.Tyche.state.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.cffi.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.ctypes.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.from_cfunc.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.from_ctypes.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.random_raw.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.state.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.cffi.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.ctypes.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.jump.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.jumped.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.random_raw.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.seed.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.state.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.cffi.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.ctypes.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.jump.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.jumped.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.random_raw.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.seed.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.state.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.cffi.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.ctypes.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.jump.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.jumped.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.random_raw.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.seed.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.state.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.cffi.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.ctypes.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.jump.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.jumped.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.random_raw.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.seed.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.state.html", "bit_generators/hc128.html", "bit_generators/index.html", "bit_generators/jsf.html", "bit_generators/lcg128mix.html", "bit_generators/lxm.html", "bit_generators/mt19937.html", "bit_generators/mt64.html", "bit_generators/pcg32.html", "bit_generators/pcg64.html", "bit_generators/pcg64dxsm.html", "bit_generators/philox.html", "bit_generators/rdrand.html", "bit_generators/romu.html", "bit_generators/sfc.html", "bit_generators/sfmt.html", "bit_generators/speck128.html", "bit_generators/squares.html", "bit_generators/threefry.html", "bit_generators/tyche.html", "bit_generators/userbitgenerator.html", "bit_generators/xoroshiro128.html", "bit_generators/xorshift1024.html", "bit_generators/xoshiro256.html", "bit_generators/xoshiro512.html", "change-log.html", "common.html", "custom-bit-generators.html", "entropy.html", "evolution.html", "extended-generator.html", "extending.html", "future.html", "generated/randomgen.generator.ExtendedGenerator.bit_generator.html", "generated/randomgen.generator.ExtendedGenerator.complex_normal.html", "generated/randomgen.generator.ExtendedGenerator.multivariate_complex_normal.html", "generated/randomgen.generator.ExtendedGenerator.multivariate_normal.html", "generated/randomgen.generator.ExtendedGenerator.random.html", "generated/randomgen.generator.ExtendedGenerator.standard_wishart.html", "generated/randomgen.generator.ExtendedGenerator.state.html", "generated/randomgen.generator.ExtendedGenerator.uintegers.html", "generated/randomgen.generator.ExtendedGenerator.wishart.html", "generator.html", "index.html", "legacy.html", "multithreading.html", "new-or-different.html", "parallel.html", "performance.html", "references.html", "seed_sequence.html", "testing.html"], "envversion": {"nbsphinx": 4, "sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1}, "indexentries": {"advance() (randomgen.aes.aescounter method)": [[4, "randomgen.aes.AESCounter.advance", false]], "advance() (randomgen.pcg32.pcg32 method)": [[58, "randomgen.pcg32.PCG32.advance", false]], "advance() (randomgen.pcg64.lcg128mix method)": [[66, "randomgen.pcg64.LCG128Mix.advance", false]], "advance() (randomgen.pcg64.pcg64 method)": [[73, "randomgen.pcg64.PCG64.advance", false]], "advance() (randomgen.pcg64.pcg64dxsm method)": [[81, "randomgen.pcg64.PCG64DXSM.advance", false]], "advance() (randomgen.philox.philox method)": [[89, "randomgen.philox.Philox.advance", false]], "advance() (randomgen.speck128.speck128 method)": [[122, "randomgen.speck128.SPECK128.advance", false]], "advance() (randomgen.squares.squares method)": [[130, "randomgen.squares.Squares.advance", false]], "advance() (randomgen.threefry.threefry method)": [[138, "randomgen.threefry.ThreeFry.advance", false]], "aescounter (class in randomgen.aes)": [[0, "randomgen.aes.AESCounter", false]], "bit_generator (randomgen.common.interface attribute)": [[210, "randomgen.common.Interface.bit_generator", false]], "bit_generator (randomgen.generator.extendedgenerator attribute)": [[217, "randomgen.generator.ExtendedGenerator.bit_generator", false]], "cffi (randomgen.aes.aescounter attribute)": [[5, "randomgen.aes.AESCounter.cffi", false]], "cffi (randomgen.chacha.chacha attribute)": [[12, "randomgen.chacha.ChaCha.cffi", false]], "cffi (randomgen.dsfmt.dsfmt attribute)": [[17, "randomgen.dsfmt.DSFMT.cffi", false]], "cffi (randomgen.efiix64.efiix64 attribute)": [[24, "randomgen.efiix64.EFIIX64.cffi", false]], "cffi (randomgen.hc128.hc128 attribute)": [[29, "randomgen.hc128.HC128.cffi", false]], "cffi (randomgen.jsf.jsf attribute)": [[34, "randomgen.jsf.JSF.cffi", false]], "cffi (randomgen.lxm.lxm attribute)": [[39, "randomgen.lxm.LXM.cffi", false]], "cffi (randomgen.mt19937.mt19937 attribute)": [[46, "randomgen.mt19937.MT19937.cffi", false]], "cffi (randomgen.mt64.mt64 attribute)": [[53, "randomgen.mt64.MT64.cffi", false]], "cffi (randomgen.pcg32.pcg32 attribute)": [[59, "randomgen.pcg32.PCG32.cffi", false]], "cffi (randomgen.pcg64.lcg128mix attribute)": [[67, "randomgen.pcg64.LCG128Mix.cffi", false]], "cffi (randomgen.pcg64.pcg64 attribute)": [[74, "randomgen.pcg64.PCG64.cffi", false]], "cffi (randomgen.pcg64.pcg64dxsm attribute)": [[82, "randomgen.pcg64.PCG64DXSM.cffi", false]], "cffi (randomgen.philox.philox attribute)": [[90, "randomgen.philox.Philox.cffi", false]], "cffi (randomgen.rdrand.rdrand attribute)": [[97, "randomgen.rdrand.RDRAND.cffi", false]], "cffi (randomgen.romu.romu attribute)": [[104, "randomgen.romu.Romu.cffi", false]], "cffi (randomgen.sfc.sfc64 attribute)": [[109, "randomgen.sfc.SFC64.cffi", false]], "cffi (randomgen.sfmt.sfmt attribute)": [[115, "randomgen.sfmt.SFMT.cffi", false]], "cffi (randomgen.speck128.speck128 attribute)": [[123, "randomgen.speck128.SPECK128.cffi", false]], "cffi (randomgen.squares.squares attribute)": [[131, "randomgen.squares.Squares.cffi", false]], "cffi (randomgen.threefry.threefry attribute)": [[139, "randomgen.threefry.ThreeFry.cffi", false]], "cffi (randomgen.tyche.tyche attribute)": [[146, "randomgen.tyche.Tyche.cffi", false]], "cffi (randomgen.wrapper.userbitgenerator attribute)": [[151, "randomgen.wrapper.UserBitGenerator.cffi", false]], "cffi (randomgen.xoroshiro128.xoroshiro128 attribute)": [[157, "randomgen.xoroshiro128.Xoroshiro128.cffi", false]], "cffi (randomgen.xorshift1024.xorshift1024 attribute)": [[164, "randomgen.xorshift1024.Xorshift1024.cffi", false]], "cffi (randomgen.xoshiro256.xoshiro256 attribute)": [[171, "randomgen.xoshiro256.Xoshiro256.cffi", false]], "cffi (randomgen.xoshiro512.xoshiro512 attribute)": [[178, "randomgen.xoshiro512.Xoshiro512.cffi", false]], "chacha (class in randomgen.chacha)": [[1, "randomgen.chacha.ChaCha", false]], "complex_normal() (randomgen.generator.extendedgenerator method)": [[218, "randomgen.generator.ExtendedGenerator.complex_normal", false]], "ctypes (randomgen.aes.aescounter attribute)": [[6, "randomgen.aes.AESCounter.ctypes", false]], "ctypes (randomgen.chacha.chacha attribute)": [[13, "randomgen.chacha.ChaCha.ctypes", false]], "ctypes (randomgen.dsfmt.dsfmt attribute)": [[18, "randomgen.dsfmt.DSFMT.ctypes", false]], "ctypes (randomgen.efiix64.efiix64 attribute)": [[25, "randomgen.efiix64.EFIIX64.ctypes", false]], "ctypes (randomgen.hc128.hc128 attribute)": [[30, "randomgen.hc128.HC128.ctypes", false]], "ctypes (randomgen.jsf.jsf attribute)": [[35, "randomgen.jsf.JSF.ctypes", false]], "ctypes (randomgen.lxm.lxm attribute)": [[40, "randomgen.lxm.LXM.ctypes", false]], "ctypes (randomgen.mt19937.mt19937 attribute)": [[47, "randomgen.mt19937.MT19937.ctypes", false]], "ctypes (randomgen.mt64.mt64 attribute)": [[54, "randomgen.mt64.MT64.ctypes", false]], "ctypes (randomgen.pcg32.pcg32 attribute)": [[60, "randomgen.pcg32.PCG32.ctypes", false]], "ctypes (randomgen.pcg64.lcg128mix attribute)": [[68, "randomgen.pcg64.LCG128Mix.ctypes", false]], "ctypes (randomgen.pcg64.pcg64 attribute)": [[75, "randomgen.pcg64.PCG64.ctypes", false]], "ctypes (randomgen.pcg64.pcg64dxsm attribute)": [[83, "randomgen.pcg64.PCG64DXSM.ctypes", false]], "ctypes (randomgen.philox.philox attribute)": [[91, "randomgen.philox.Philox.ctypes", false]], "ctypes (randomgen.rdrand.rdrand attribute)": [[98, "randomgen.rdrand.RDRAND.ctypes", false]], "ctypes (randomgen.romu.romu attribute)": [[105, "randomgen.romu.Romu.ctypes", false]], "ctypes (randomgen.sfc.sfc64 attribute)": [[110, "randomgen.sfc.SFC64.ctypes", false]], "ctypes (randomgen.sfmt.sfmt attribute)": [[116, "randomgen.sfmt.SFMT.ctypes", false]], "ctypes (randomgen.speck128.speck128 attribute)": [[124, "randomgen.speck128.SPECK128.ctypes", false]], "ctypes (randomgen.squares.squares attribute)": [[132, "randomgen.squares.Squares.ctypes", false]], "ctypes (randomgen.threefry.threefry attribute)": [[140, "randomgen.threefry.ThreeFry.ctypes", false]], "ctypes (randomgen.tyche.tyche attribute)": [[147, "randomgen.tyche.Tyche.ctypes", false]], "ctypes (randomgen.wrapper.userbitgenerator attribute)": [[152, "randomgen.wrapper.UserBitGenerator.ctypes", false]], "ctypes (randomgen.xoroshiro128.xoroshiro128 attribute)": [[158, "randomgen.xoroshiro128.Xoroshiro128.ctypes", false]], "ctypes (randomgen.xorshift1024.xorshift1024 attribute)": [[165, "randomgen.xorshift1024.Xorshift1024.ctypes", false]], "ctypes (randomgen.xoshiro256.xoshiro256 attribute)": [[172, "randomgen.xoshiro256.Xoshiro256.ctypes", false]], "ctypes (randomgen.xoshiro512.xoshiro512 attribute)": [[179, "randomgen.xoshiro512.Xoshiro512.ctypes", false]], "dsfmt (class in randomgen.dsfmt)": [[2, "randomgen.dsfmt.DSFMT", false]], "efiix64 (class in randomgen.efiix64)": [[3, "randomgen.efiix64.EFIIX64", false]], "extendedgenerator (class in randomgen.generator)": [[214, "randomgen.generator.ExtendedGenerator", false]], "from_cfunc() (randomgen.wrapper.userbitgenerator class method)": [[153, "randomgen.wrapper.UserBitGenerator.from_cfunc", false]], "from_ctypes() (randomgen.wrapper.userbitgenerator class method)": [[154, "randomgen.wrapper.UserBitGenerator.from_ctypes", false]], "generate_keys() (in module randomgen.squares)": [[137, "randomgen.squares.generate_keys", false]], "hc128 (class in randomgen.hc128)": [[185, "randomgen.hc128.HC128", false]], "interface (class in randomgen.common)": [[210, "randomgen.common.Interface", false]], "jsf (class in randomgen.jsf)": [[187, "randomgen.jsf.JSF", false]], "jump() (randomgen.aes.aescounter method)": [[7, "randomgen.aes.AESCounter.jump", false]], "jump() (randomgen.dsfmt.dsfmt method)": [[19, "randomgen.dsfmt.DSFMT.jump", false]], "jump() (randomgen.lxm.lxm method)": [[41, "randomgen.lxm.LXM.jump", false]], "jump() (randomgen.mt19937.mt19937 method)": [[48, "randomgen.mt19937.MT19937.jump", false]], "jump() (randomgen.pcg32.pcg32 method)": [[61, "randomgen.pcg32.PCG32.jump", false]], "jump() (randomgen.pcg64.pcg64 method)": [[76, "randomgen.pcg64.PCG64.jump", false]], "jump() (randomgen.pcg64.pcg64dxsm method)": [[84, "randomgen.pcg64.PCG64DXSM.jump", false]], "jump() (randomgen.philox.philox method)": [[92, "randomgen.philox.Philox.jump", false]], "jump() (randomgen.sfmt.sfmt method)": [[117, "randomgen.sfmt.SFMT.jump", false]], "jump() (randomgen.speck128.speck128 method)": [[125, "randomgen.speck128.SPECK128.jump", false]], "jump() (randomgen.threefry.threefry method)": [[141, "randomgen.threefry.ThreeFry.jump", false]], "jump() (randomgen.xoroshiro128.xoroshiro128 method)": [[159, "randomgen.xoroshiro128.Xoroshiro128.jump", false]], "jump() (randomgen.xorshift1024.xorshift1024 method)": [[166, "randomgen.xorshift1024.Xorshift1024.jump", false]], "jump() (randomgen.xoshiro256.xoshiro256 method)": [[173, "randomgen.xoshiro256.Xoshiro256.jump", false]], "jump() (randomgen.xoshiro512.xoshiro512 method)": [[180, "randomgen.xoshiro512.Xoshiro512.jump", false]], "jumped() (randomgen.aes.aescounter method)": [[8, "randomgen.aes.AESCounter.jumped", false]], "jumped() (randomgen.dsfmt.dsfmt method)": [[20, "randomgen.dsfmt.DSFMT.jumped", false]], "jumped() (randomgen.lxm.lxm method)": [[42, "randomgen.lxm.LXM.jumped", false]], "jumped() (randomgen.mt19937.mt19937 method)": [[49, "randomgen.mt19937.MT19937.jumped", false]], "jumped() (randomgen.pcg32.pcg32 method)": [[62, "randomgen.pcg32.PCG32.jumped", false]], "jumped() (randomgen.pcg64.lcg128mix method)": [[69, "randomgen.pcg64.LCG128Mix.jumped", false]], "jumped() (randomgen.pcg64.pcg64 method)": [[77, "randomgen.pcg64.PCG64.jumped", false]], "jumped() (randomgen.pcg64.pcg64dxsm method)": [[85, "randomgen.pcg64.PCG64DXSM.jumped", false]], "jumped() (randomgen.philox.philox method)": [[93, "randomgen.philox.Philox.jumped", false]], "jumped() (randomgen.rdrand.rdrand method)": [[99, "randomgen.rdrand.RDRAND.jumped", false]], "jumped() (randomgen.sfmt.sfmt method)": [[118, "randomgen.sfmt.SFMT.jumped", false]], "jumped() (randomgen.speck128.speck128 method)": [[126, "randomgen.speck128.SPECK128.jumped", false]], "jumped() (randomgen.squares.squares method)": [[133, "randomgen.squares.Squares.jumped", false]], "jumped() (randomgen.threefry.threefry method)": [[142, "randomgen.threefry.ThreeFry.jumped", false]], "jumped() (randomgen.xoroshiro128.xoroshiro128 method)": [[160, "randomgen.xoroshiro128.Xoroshiro128.jumped", false]], "jumped() (randomgen.xorshift1024.xorshift1024 method)": [[167, "randomgen.xorshift1024.Xorshift1024.jumped", false]], "jumped() (randomgen.xoshiro256.xoshiro256 method)": [[174, "randomgen.xoshiro256.Xoshiro256.jumped", false]], "jumped() (randomgen.xoshiro512.xoshiro512 method)": [[181, "randomgen.xoshiro512.Xoshiro512.jumped", false]], "lcg128mix (class in randomgen.pcg64)": [[188, "randomgen.pcg64.LCG128Mix", false]], "lock (randomgen.aes.aescounter attribute)": [[0, "randomgen.aes.AESCounter.lock", false]], "lock (randomgen.chacha.chacha attribute)": [[1, "randomgen.chacha.ChaCha.lock", false]], "lock (randomgen.dsfmt.dsfmt attribute)": [[2, "randomgen.dsfmt.DSFMT.lock", false]], "lock (randomgen.efiix64.efiix64 attribute)": [[3, "randomgen.efiix64.EFIIX64.lock", false]], "lock (randomgen.hc128.hc128 attribute)": [[185, "randomgen.hc128.HC128.lock", false]], "lock (randomgen.jsf.jsf attribute)": [[187, "randomgen.jsf.JSF.lock", false]], "lock (randomgen.lxm.lxm attribute)": [[189, "randomgen.lxm.LXM.lock", false]], "lock (randomgen.mt19937.mt19937 attribute)": [[190, "randomgen.mt19937.MT19937.lock", false]], "lock (randomgen.mt64.mt64 attribute)": [[191, "randomgen.mt64.MT64.lock", false]], "lock (randomgen.pcg32.pcg32 attribute)": [[192, "randomgen.pcg32.PCG32.lock", false]], "lock (randomgen.pcg64.lcg128mix attribute)": [[188, "randomgen.pcg64.LCG128Mix.lock", false]], "lock (randomgen.pcg64.pcg64 attribute)": [[193, "randomgen.pcg64.PCG64.lock", false]], "lock (randomgen.pcg64.pcg64dxsm attribute)": [[194, "randomgen.pcg64.PCG64DXSM.lock", false]], "lock (randomgen.philox.philox attribute)": [[195, "randomgen.philox.Philox.lock", false]], "lock (randomgen.rdrand.rdrand attribute)": [[196, "randomgen.rdrand.RDRAND.lock", false]], "lock (randomgen.sfmt.sfmt attribute)": [[199, "randomgen.sfmt.SFMT.lock", false]], "lock (randomgen.speck128.speck128 attribute)": [[200, "randomgen.speck128.SPECK128.lock", false]], "lock (randomgen.squares.squares attribute)": [[201, "randomgen.squares.Squares.lock", false]], "lock (randomgen.threefry.threefry attribute)": [[202, "randomgen.threefry.ThreeFry.lock", false]], "lock (randomgen.tyche.tyche attribute)": [[203, "randomgen.tyche.Tyche.lock", false]], "lock (randomgen.xoroshiro128.xoroshiro128 attribute)": [[205, "randomgen.xoroshiro128.Xoroshiro128.lock", false]], "lock (randomgen.xorshift1024.xorshift1024 attribute)": [[206, "randomgen.xorshift1024.Xorshift1024.lock", false]], "lock (randomgen.xoshiro256.xoshiro256 attribute)": [[207, "randomgen.xoshiro256.Xoshiro256.lock", false]], "lock (randomgen.xoshiro512.xoshiro512 attribute)": [[208, "randomgen.xoshiro512.Xoshiro512.lock", false]], "lxm (class in randomgen.lxm)": [[189, "randomgen.lxm.LXM", false]], "module": [[0, "module-randomgen.aes", false], [1, "module-randomgen.chacha", false], [2, "module-randomgen.dsfmt", false], [3, "module-randomgen.efiix64", false], [185, "module-randomgen.hc128", false], [187, "module-randomgen.jsf", false], [189, "module-randomgen.lxm", false], [190, "module-randomgen.mt19937", false], [191, "module-randomgen.mt64", false], [192, "module-randomgen.pcg32", false], [193, "module-randomgen.pcg64", false], [195, "module-randomgen.philox", false], [196, "module-randomgen.rdrand", false], [197, "module-randomgen.romu", false], [198, "module-randomgen.sfc", false], [199, "module-randomgen.sfmt", false], [200, "module-randomgen.speck128", false], [201, "module-randomgen.squares", false], [202, "module-randomgen.threefry", false], [203, "module-randomgen.tyche", false], [204, "module-randomgen.wrapper", false], [205, "module-randomgen.xoroshiro128", false], [206, "module-randomgen.xorshift1024", false], [207, "module-randomgen.xoshiro256", false], [208, "module-randomgen.xoshiro512", false], [210, "module-randomgen.common", false], [212, "module-randomgen.entropy", false], [232, "module-randomgen", false]], "mt19937 (class in randomgen.mt19937)": [[190, "randomgen.mt19937.MT19937", false]], "mt64 (class in randomgen.mt64)": [[191, "randomgen.mt64.MT64", false]], "multivariate_complex_normal() (randomgen.generator.extendedgenerator method)": [[219, "randomgen.generator.ExtendedGenerator.multivariate_complex_normal", false]], "multivariate_normal() (randomgen.generator.extendedgenerator method)": [[220, "randomgen.generator.ExtendedGenerator.multivariate_normal", false]], "next_double (randomgen.common.interface attribute)": [[210, "randomgen.common.Interface.next_double", false]], "next_uint32 (randomgen.common.interface attribute)": [[210, "randomgen.common.Interface.next_uint32", false]], "next_uint64 (randomgen.common.interface attribute)": [[210, "randomgen.common.Interface.next_uint64", false]], "pcg32 (class in randomgen.pcg32)": [[192, "randomgen.pcg32.PCG32", false]], "pcg64 (class in randomgen.pcg64)": [[193, "randomgen.pcg64.PCG64", false]], "pcg64dxsm (class in randomgen.pcg64)": [[194, "randomgen.pcg64.PCG64DXSM", false]], "philox (class in randomgen.philox)": [[195, "randomgen.philox.Philox", false]], "raisinglock (class in randomgen.rdrand)": [[196, "randomgen.rdrand.RaisingLock", false]], "random() (randomgen.generator.extendedgenerator method)": [[221, "randomgen.generator.ExtendedGenerator.random", false]], "random_entropy() (in module randomgen.entropy)": [[212, "randomgen.entropy.random_entropy", false]], "random_raw() (randomgen.aes.aescounter method)": [[9, "randomgen.aes.AESCounter.random_raw", false]], "random_raw() (randomgen.chacha.chacha method)": [[14, "randomgen.chacha.ChaCha.random_raw", false]], "random_raw() (randomgen.dsfmt.dsfmt method)": [[21, "randomgen.dsfmt.DSFMT.random_raw", false]], "random_raw() (randomgen.efiix64.efiix64 method)": [[26, "randomgen.efiix64.EFIIX64.random_raw", false]], "random_raw() (randomgen.hc128.hc128 method)": [[31, "randomgen.hc128.HC128.random_raw", false]], "random_raw() (randomgen.jsf.jsf method)": [[36, "randomgen.jsf.JSF.random_raw", false]], "random_raw() (randomgen.lxm.lxm method)": [[43, "randomgen.lxm.LXM.random_raw", false]], "random_raw() (randomgen.mt19937.mt19937 method)": [[50, "randomgen.mt19937.MT19937.random_raw", false]], "random_raw() (randomgen.mt64.mt64 method)": [[55, "randomgen.mt64.MT64.random_raw", false]], "random_raw() (randomgen.pcg32.pcg32 method)": [[63, "randomgen.pcg32.PCG32.random_raw", false]], "random_raw() (randomgen.pcg64.lcg128mix method)": [[70, "randomgen.pcg64.LCG128Mix.random_raw", false]], "random_raw() (randomgen.pcg64.pcg64 method)": [[78, "randomgen.pcg64.PCG64.random_raw", false]], "random_raw() (randomgen.pcg64.pcg64dxsm method)": [[86, "randomgen.pcg64.PCG64DXSM.random_raw", false]], "random_raw() (randomgen.philox.philox method)": [[94, "randomgen.philox.Philox.random_raw", false]], "random_raw() (randomgen.rdrand.rdrand method)": [[100, "randomgen.rdrand.RDRAND.random_raw", false]], "random_raw() (randomgen.romu.romu method)": [[106, "randomgen.romu.Romu.random_raw", false]], "random_raw() (randomgen.sfc.sfc64 method)": [[111, "randomgen.sfc.SFC64.random_raw", false]], "random_raw() (randomgen.sfmt.sfmt method)": [[119, "randomgen.sfmt.SFMT.random_raw", false]], "random_raw() (randomgen.speck128.speck128 method)": [[127, "randomgen.speck128.SPECK128.random_raw", false]], "random_raw() (randomgen.squares.squares method)": [[134, "randomgen.squares.Squares.random_raw", false]], "random_raw() (randomgen.threefry.threefry method)": [[143, "randomgen.threefry.ThreeFry.random_raw", false]], "random_raw() (randomgen.tyche.tyche method)": [[148, "randomgen.tyche.Tyche.random_raw", false]], "random_raw() (randomgen.wrapper.userbitgenerator method)": [[155, "randomgen.wrapper.UserBitGenerator.random_raw", false]], "random_raw() (randomgen.xoroshiro128.xoroshiro128 method)": [[161, "randomgen.xoroshiro128.Xoroshiro128.random_raw", false]], "random_raw() (randomgen.xorshift1024.xorshift1024 method)": [[168, "randomgen.xorshift1024.Xorshift1024.random_raw", false]], "random_raw() (randomgen.xoshiro256.xoshiro256 method)": [[175, "randomgen.xoshiro256.Xoshiro256.random_raw", false]], "random_raw() (randomgen.xoshiro512.xoshiro512 method)": [[182, "randomgen.xoshiro512.Xoshiro512.random_raw", false]], "randomgen": [[232, "module-randomgen", false]], "randomgen.aes": [[0, "module-randomgen.aes", false]], "randomgen.chacha": [[1, "module-randomgen.chacha", false]], "randomgen.common": [[210, "module-randomgen.common", false]], "randomgen.dsfmt": [[2, "module-randomgen.dsfmt", false]], "randomgen.efiix64": [[3, "module-randomgen.efiix64", false]], "randomgen.entropy": [[212, "module-randomgen.entropy", false]], "randomgen.hc128": [[185, "module-randomgen.hc128", false]], "randomgen.jsf": [[187, "module-randomgen.jsf", false]], "randomgen.lxm": [[189, "module-randomgen.lxm", false]], "randomgen.mt19937": [[190, "module-randomgen.mt19937", false]], "randomgen.mt64": [[191, "module-randomgen.mt64", false]], "randomgen.pcg32": [[192, "module-randomgen.pcg32", false]], "randomgen.pcg64": [[193, "module-randomgen.pcg64", false]], "randomgen.philox": [[195, "module-randomgen.philox", false]], "randomgen.rdrand": [[196, "module-randomgen.rdrand", false]], "randomgen.romu": [[197, "module-randomgen.romu", false]], "randomgen.sfc": [[198, "module-randomgen.sfc", false]], "randomgen.sfmt": [[199, "module-randomgen.sfmt", false]], "randomgen.speck128": [[200, "module-randomgen.speck128", false]], "randomgen.squares": [[201, "module-randomgen.squares", false]], "randomgen.threefry": [[202, "module-randomgen.threefry", false]], "randomgen.tyche": [[203, "module-randomgen.tyche", false]], "randomgen.wrapper": [[204, "module-randomgen.wrapper", false]], "randomgen.xoroshiro128": [[205, "module-randomgen.xoroshiro128", false]], "randomgen.xorshift1024": [[206, "module-randomgen.xorshift1024", false]], "randomgen.xoshiro256": [[207, "module-randomgen.xoshiro256", false]], "randomgen.xoshiro512": [[208, "module-randomgen.xoshiro512", false]], "rdrand (class in randomgen.rdrand)": [[196, "randomgen.rdrand.RDRAND", false]], "romu (class in randomgen.romu)": [[197, "randomgen.romu.Romu", false]], "seed() (randomgen.aes.aescounter method)": [[10, "randomgen.aes.AESCounter.seed", false]], "seed() (randomgen.chacha.chacha method)": [[15, "randomgen.chacha.ChaCha.seed", false]], "seed() (randomgen.dsfmt.dsfmt method)": [[22, "randomgen.dsfmt.DSFMT.seed", false]], "seed() (randomgen.efiix64.efiix64 method)": [[27, "randomgen.efiix64.EFIIX64.seed", false]], "seed() (randomgen.hc128.hc128 method)": [[32, "randomgen.hc128.HC128.seed", false]], "seed() (randomgen.jsf.jsf method)": [[37, "randomgen.jsf.JSF.seed", false]], "seed() (randomgen.lxm.lxm method)": [[44, "randomgen.lxm.LXM.seed", false]], "seed() (randomgen.mt19937.mt19937 method)": [[51, "randomgen.mt19937.MT19937.seed", false]], "seed() (randomgen.mt64.mt64 method)": [[56, "randomgen.mt64.MT64.seed", false]], "seed() (randomgen.pcg32.pcg32 method)": [[64, "randomgen.pcg32.PCG32.seed", false]], "seed() (randomgen.pcg64.lcg128mix method)": [[71, "randomgen.pcg64.LCG128Mix.seed", false]], "seed() (randomgen.pcg64.pcg64 method)": [[79, "randomgen.pcg64.PCG64.seed", false]], "seed() (randomgen.pcg64.pcg64dxsm method)": [[87, "randomgen.pcg64.PCG64DXSM.seed", false]], "seed() (randomgen.philox.philox method)": [[95, "randomgen.philox.Philox.seed", false]], "seed() (randomgen.rdrand.rdrand method)": [[101, "randomgen.rdrand.RDRAND.seed", false]], "seed() (randomgen.romu.romu method)": [[107, "randomgen.romu.Romu.seed", false]], "seed() (randomgen.sfc.sfc64 method)": [[112, "randomgen.sfc.SFC64.seed", false]], "seed() (randomgen.sfmt.sfmt method)": [[120, "randomgen.sfmt.SFMT.seed", false]], "seed() (randomgen.speck128.speck128 method)": [[128, "randomgen.speck128.SPECK128.seed", false]], "seed() (randomgen.squares.squares method)": [[135, "randomgen.squares.Squares.seed", false]], "seed() (randomgen.threefry.threefry method)": [[144, "randomgen.threefry.ThreeFry.seed", false]], "seed() (randomgen.tyche.tyche method)": [[149, "randomgen.tyche.Tyche.seed", false]], "seed() (randomgen.xoroshiro128.xoroshiro128 method)": [[162, "randomgen.xoroshiro128.Xoroshiro128.seed", false]], "seed() (randomgen.xorshift1024.xorshift1024 method)": [[169, "randomgen.xorshift1024.Xorshift1024.seed", false]], "seed() (randomgen.xoshiro256.xoshiro256 method)": [[176, "randomgen.xoshiro256.Xoshiro256.seed", false]], "seed() (randomgen.xoshiro512.xoshiro512 method)": [[183, "randomgen.xoshiro512.Xoshiro512.seed", false]], "seed_seq (randomgen.aes.aescounter attribute)": [[0, "randomgen.aes.AESCounter.seed_seq", false]], "seed_seq (randomgen.chacha.chacha attribute)": [[1, "randomgen.chacha.ChaCha.seed_seq", false]], "seed_seq (randomgen.dsfmt.dsfmt attribute)": [[2, "randomgen.dsfmt.DSFMT.seed_seq", false]], "seed_seq (randomgen.efiix64.efiix64 attribute)": [[3, "randomgen.efiix64.EFIIX64.seed_seq", false]], "seed_seq (randomgen.hc128.hc128 attribute)": [[185, "randomgen.hc128.HC128.seed_seq", false]], "seed_seq (randomgen.jsf.jsf attribute)": [[187, "randomgen.jsf.JSF.seed_seq", false]], "seed_seq (randomgen.lxm.lxm attribute)": [[189, "randomgen.lxm.LXM.seed_seq", false]], "seed_seq (randomgen.mt19937.mt19937 attribute)": [[190, "randomgen.mt19937.MT19937.seed_seq", false]], "seed_seq (randomgen.mt64.mt64 attribute)": [[191, "randomgen.mt64.MT64.seed_seq", false]], "seed_seq (randomgen.pcg32.pcg32 attribute)": [[192, "randomgen.pcg32.PCG32.seed_seq", false]], "seed_seq (randomgen.pcg64.lcg128mix attribute)": [[188, "randomgen.pcg64.LCG128Mix.seed_seq", false]], "seed_seq (randomgen.pcg64.pcg64 attribute)": [[193, "randomgen.pcg64.PCG64.seed_seq", false]], "seed_seq (randomgen.pcg64.pcg64dxsm attribute)": [[194, "randomgen.pcg64.PCG64DXSM.seed_seq", false]], "seed_seq (randomgen.philox.philox attribute)": [[195, "randomgen.philox.Philox.seed_seq", false]], "seed_seq (randomgen.rdrand.rdrand attribute)": [[196, "randomgen.rdrand.RDRAND.seed_seq", false]], "seed_seq (randomgen.sfmt.sfmt attribute)": [[199, "randomgen.sfmt.SFMT.seed_seq", false]], "seed_seq (randomgen.speck128.speck128 attribute)": [[200, "randomgen.speck128.SPECK128.seed_seq", false]], "seed_seq (randomgen.squares.squares attribute)": [[201, "randomgen.squares.Squares.seed_seq", false]], "seed_seq (randomgen.threefry.threefry attribute)": [[202, "randomgen.threefry.ThreeFry.seed_seq", false]], "seed_seq (randomgen.tyche.tyche attribute)": [[203, "randomgen.tyche.Tyche.seed_seq", false]], "seed_seq (randomgen.xoroshiro128.xoroshiro128 attribute)": [[205, "randomgen.xoroshiro128.Xoroshiro128.seed_seq", false]], "seed_seq (randomgen.xorshift1024.xorshift1024 attribute)": [[206, "randomgen.xorshift1024.Xorshift1024.seed_seq", false]], "seed_seq (randomgen.xoshiro256.xoshiro256 attribute)": [[207, "randomgen.xoshiro256.Xoshiro256.seed_seq", false]], "seed_seq (randomgen.xoshiro512.xoshiro512 attribute)": [[208, "randomgen.xoshiro512.Xoshiro512.seed_seq", false]], "sfc64 (class in randomgen.sfc)": [[198, "randomgen.sfc.SFC64", false]], "sfmt (class in randomgen.sfmt)": [[199, "randomgen.sfmt.SFMT", false]], "speck128 (class in randomgen.speck128)": [[200, "randomgen.speck128.SPECK128", false]], "squares (class in randomgen.squares)": [[201, "randomgen.squares.Squares", false]], "standard_wishart() (randomgen.generator.extendedgenerator method)": [[222, "randomgen.generator.ExtendedGenerator.standard_wishart", false]], "state (randomgen.aes.aescounter attribute)": [[11, "randomgen.aes.AESCounter.state", false]], "state (randomgen.chacha.chacha attribute)": [[16, "randomgen.chacha.ChaCha.state", false]], "state (randomgen.common.interface attribute)": [[210, "randomgen.common.Interface.state", false]], "state (randomgen.dsfmt.dsfmt attribute)": [[23, "randomgen.dsfmt.DSFMT.state", false]], "state (randomgen.efiix64.efiix64 attribute)": [[28, "randomgen.efiix64.EFIIX64.state", false]], "state (randomgen.generator.extendedgenerator attribute)": [[223, "randomgen.generator.ExtendedGenerator.state", false]], "state (randomgen.hc128.hc128 attribute)": [[33, "randomgen.hc128.HC128.state", false]], "state (randomgen.jsf.jsf attribute)": [[38, "randomgen.jsf.JSF.state", false]], "state (randomgen.lxm.lxm attribute)": [[45, "randomgen.lxm.LXM.state", false]], "state (randomgen.mt19937.mt19937 attribute)": [[52, "randomgen.mt19937.MT19937.state", false]], "state (randomgen.mt64.mt64 attribute)": [[57, "randomgen.mt64.MT64.state", false]], "state (randomgen.pcg32.pcg32 attribute)": [[65, "randomgen.pcg32.PCG32.state", false]], "state (randomgen.pcg64.lcg128mix attribute)": [[72, "randomgen.pcg64.LCG128Mix.state", false]], "state (randomgen.pcg64.pcg64 attribute)": [[80, "randomgen.pcg64.PCG64.state", false]], "state (randomgen.pcg64.pcg64dxsm attribute)": [[88, "randomgen.pcg64.PCG64DXSM.state", false]], "state (randomgen.philox.philox attribute)": [[96, "randomgen.philox.Philox.state", false]], "state (randomgen.rdrand.rdrand attribute)": [[102, "randomgen.rdrand.RDRAND.state", false]], "state (randomgen.romu.romu attribute)": [[108, "randomgen.romu.Romu.state", false]], "state (randomgen.sfc.sfc64 attribute)": [[113, "randomgen.sfc.SFC64.state", false]], "state (randomgen.sfmt.sfmt attribute)": [[121, "randomgen.sfmt.SFMT.state", false]], "state (randomgen.speck128.speck128 attribute)": [[129, "randomgen.speck128.SPECK128.state", false]], "state (randomgen.squares.squares attribute)": [[136, "randomgen.squares.Squares.state", false]], "state (randomgen.threefry.threefry attribute)": [[145, "randomgen.threefry.ThreeFry.state", false]], "state (randomgen.tyche.tyche attribute)": [[150, "randomgen.tyche.Tyche.state", false]], "state (randomgen.wrapper.userbitgenerator attribute)": [[156, "randomgen.wrapper.UserBitGenerator.state", false]], "state (randomgen.xoroshiro128.xoroshiro128 attribute)": [[163, "randomgen.xoroshiro128.Xoroshiro128.state", false]], "state (randomgen.xorshift1024.xorshift1024 attribute)": [[170, "randomgen.xorshift1024.Xorshift1024.state", false]], "state (randomgen.xoshiro256.xoshiro256 attribute)": [[177, "randomgen.xoshiro256.Xoshiro256.state", false]], "state (randomgen.xoshiro512.xoshiro512 attribute)": [[184, "randomgen.xoshiro512.Xoshiro512.state", false]], "state_address (randomgen.common.interface attribute)": [[210, "randomgen.common.Interface.state_address", false]], "success (randomgen.rdrand.rdrand attribute)": [[103, "randomgen.rdrand.RDRAND.success", false]], "threefry (class in randomgen.threefry)": [[202, "randomgen.threefry.ThreeFry", false]], "tyche (class in randomgen.tyche)": [[203, "randomgen.tyche.Tyche", false]], "uintegers() (randomgen.generator.extendedgenerator method)": [[224, "randomgen.generator.ExtendedGenerator.uintegers", false]], "userbitgenerator (class in randomgen.wrapper)": [[204, "randomgen.wrapper.UserBitGenerator", false]], "weyl_increments() (randomgen.sfc.sfc64 method)": [[114, "randomgen.sfc.SFC64.weyl_increments", false]], "wishart() (randomgen.generator.extendedgenerator method)": [[225, "randomgen.generator.ExtendedGenerator.wishart", false]], "xoroshiro128 (class in randomgen.xoroshiro128)": [[205, "randomgen.xoroshiro128.Xoroshiro128", false]], "xorshift1024 (class in randomgen.xorshift1024)": [[206, "randomgen.xorshift1024.Xorshift1024", false]], "xoshiro256 (class in randomgen.xoshiro256)": [[207, "randomgen.xoshiro256.Xoshiro256", false]], "xoshiro512 (class in randomgen.xoshiro512)": [[208, "randomgen.xoshiro512.Xoshiro512", false]]}, "objects": {"": [[232, 0, 0, 1, "randomgen", ""]], "randomgen": [[0, 0, 0, 1, "aes", ""], [1, 0, 0, 1, "chacha", ""], [210, 0, 0, 1, "common", ""], [2, 0, 0, 1, "dsfmt", ""], [3, 0, 0, 1, "efiix64", ""], [212, 0, 0, 1, "entropy", ""], [185, 0, 0, 1, "hc128", ""], [187, 0, 0, 1, "jsf", ""], [189, 0, 0, 1, "lxm", ""], [190, 0, 0, 1, "mt19937", ""], [191, 0, 0, 1, "mt64", ""], [192, 0, 0, 1, "pcg32", ""], [193, 0, 0, 1, "pcg64", ""], [195, 0, 0, 1, "philox", ""], [196, 0, 0, 1, "rdrand", ""], [197, 0, 0, 1, "romu", ""], [198, 0, 0, 1, "sfc", ""], [199, 0, 0, 1, "sfmt", ""], [200, 0, 0, 1, "speck128", ""], [201, 0, 0, 1, "squares", ""], [202, 0, 0, 1, "threefry", ""], [203, 0, 0, 1, "tyche", ""], [204, 0, 0, 1, "wrapper", ""], [205, 0, 0, 1, "xoroshiro128", ""], [206, 0, 0, 1, "xorshift1024", ""], [207, 0, 0, 1, "xoshiro256", ""], [208, 0, 0, 1, "xoshiro512", ""]], "randomgen.aes": [[0, 1, 1, 0, "AESCounter", "Container for the AES Counter pseudo-random number generator."]], "randomgen.aes.AESCounter": [[4, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [5, 4, 1, 0, "cffi", "CFFI interface"], [6, 4, 1, 0, "ctypes", "ctypes interface"], [7, 3, 1, 0, "jump", "Jumps the state as-if iter * 2**64 random numbers are generated"], [8, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [0, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [9, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [10, 3, 1, 0, "seed", "Seed the generator"], [0, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [11, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.aes.AESCounter.__init__": [[0, 2, 2, 0, "counter", "Counter to use in the AESCounter state."], [0, 2, 2, 0, "key", "Key to use in the AESCounter state."], [0, 2, 2, 0, "mode", "Deprecated parameter."], [0, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**128), a SeedSequence instance or None (the default)."]], "randomgen.aes.AESCounter.advance": [[4, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.aes.AESCounter.jump": [[7, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.aes.AESCounter.jumped": [[8, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.aes.AESCounter.random_raw": [[9, 2, 2, 0, "output", "Output values."], [9, 2, 2, 0, "size", "Output shape."]], "randomgen.aes.AESCounter.seed": [[10, 2, 2, 0, "counter", "Counter to use in the AESCounter state."], [10, 2, 2, 0, "key", "Key to use in the AESCounter state."], [10, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**128), a SeedSequence instance or None (the default)."]], "randomgen.chacha": [[1, 1, 1, 0, "ChaCha", "Container for the ChaCha family of Counter pseudo-random number generators"]], "randomgen.chacha.ChaCha": [[12, 4, 1, 0, "cffi", "CFFI interface"], [13, 4, 1, 0, "ctypes", "ctypes interface"], [1, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [14, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [15, 3, 1, 0, "seed", "Seed the generator"], [1, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [16, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.chacha.ChaCha.__init__": [[1, 2, 2, 0, "counter", "Counter to use in the ChaCha state."], [1, 2, 2, 0, "key", "Key to use in the ChaCha state."], [1, 2, 2, 0, "mode", "Deprecated parameter."], [1, 2, 2, 0, "rounds", "Number of rounds to run the ChaCha mixer."], [1, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**256), an array of 4 uint64 values, a SeedSequence instance or None (the default)."]], "randomgen.chacha.ChaCha.random_raw": [[14, 2, 2, 0, "output", "Output values."], [14, 2, 2, 0, "size", "Output shape."]], "randomgen.chacha.ChaCha.seed": [[15, 2, 2, "randomgen.chacha.ChaCha.seed", "counter", "Seed the generator"], [15, 2, 2, "randomgen.chacha.ChaCha.seed", "key", "Seed the generator"], [15, 2, 2, "randomgen.chacha.ChaCha.seed", "seed", "Seed the generator"]], "randomgen.common": [[210, 1, 1, 0, "Interface", "Interface for interacting with a BitGenerator using ctypes or cffi"]], "randomgen.common.Interface": [[210, 4, 1, 0, "bit_generator", "Void pointer to the bit generator struct"], [210, 4, 1, 0, "next_double", "Function type the returns psuedo-random double values"], [210, 4, 1, 0, "next_uint32", "Function type the returns psuedo-random uint32 values"], [210, 4, 1, 0, "next_uint64", "Function type the returns psuedo-random uint64 values"], [210, 4, 1, 0, "state", "Void pointer to the state struct"], [210, 4, 1, 0, "state_address", "The state memoty address"]], "randomgen.common.Interface.__init__": [[210, 2, 2, "randomgen.common.Interface", "bit_generator", "Interface for interacting with a BitGenerator using ctypes or cffi"], [210, 2, 2, "randomgen.common.Interface", "next_double", "Interface for interacting with a BitGenerator using ctypes or cffi"], [210, 2, 2, "randomgen.common.Interface", "next_uint32", "Interface for interacting with a BitGenerator using ctypes or cffi"], [210, 2, 2, "randomgen.common.Interface", "next_uint64", "Interface for interacting with a BitGenerator using ctypes or cffi"], [210, 2, 2, "randomgen.common.Interface", "state", "Interface for interacting with a BitGenerator using ctypes or cffi"], [210, 2, 2, "randomgen.common.Interface", "state_address", "Interface for interacting with a BitGenerator using ctypes or cffi"]], "randomgen.dsfmt": [[2, 1, 1, 0, "DSFMT", "Container for the SIMD-based Mersenne Twister pseudo RNG."]], "randomgen.dsfmt.DSFMT": [[17, 4, 1, 0, "cffi", "CFFI interface"], [18, 4, 1, 0, "ctypes", "ctypes interface"], [19, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated."], [20, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [2, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [21, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [22, 3, 1, 0, "seed", "Seed the generator"], [2, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [23, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.dsfmt.DSFMT.__init__": [[2, 2, 2, 0, "mode", "Deprecated parameter."], [2, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator."]], "randomgen.dsfmt.DSFMT.jump": [[19, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator."]], "randomgen.dsfmt.DSFMT.jumped": [[20, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.dsfmt.DSFMT.random_raw": [[21, 2, 2, 0, "output", "Output values."], [21, 2, 2, 0, "size", "Output shape."]], "randomgen.dsfmt.DSFMT.seed": [[22, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator. Can be any integer between 0 and 2**32 - 1 inclusive, an array (or other sequence) of unsigned 32-bit integers, a SeedSequence instance or None (the default)."]], "randomgen.efiix64": [[3, 1, 1, 0, "EFIIX64", "Container for the EFIIX64x384 pseudo-random number generator."]], "randomgen.efiix64.EFIIX64": [[24, 4, 1, 0, "cffi", "CFFI interface"], [25, 4, 1, 0, "ctypes", "ctypes interface"], [3, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [26, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [27, 3, 1, 0, "seed", "Seed the generator"], [3, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [28, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.efiix64.EFIIX64.__init__": [[3, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.efiix64.EFIIX64.random_raw": [[26, 2, 2, 0, "output", "Output values."], [26, 2, 2, 0, "size", "Output shape."]], "randomgen.efiix64.EFIIX64.seed": [[27, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]], "randomgen.entropy": [[212, 5, 1, 0, "random_entropy", "Read entropy from the system cryptographic provider"]], "randomgen.entropy.random_entropy": [[212, 2, 2, 0, "size", "Output shape."], [212, 2, 2, 0, "source", "Source of entropy."]], "randomgen.generator": [[214, 1, 1, 0, "ExtendedGenerator", "Additional random value generator using a bit generator source."]], "randomgen.generator.ExtendedGenerator": [[217, 4, 1, 0, "bit_generator", "Gets the bit generator instance used by the generator"], [218, 3, 1, 0, "complex_normal", "Draw random samples from a complex normal (Gaussian) distribution."], [219, 3, 1, 0, "multivariate_complex_normal", "Draw random samples from a multivariate complex normal (Gaussian) distribution."], [220, 3, 1, 0, "multivariate_normal", "Draw random samples from a multivariate normal distribution."], [221, 3, 1, 0, "random", "Return random floats in the half-open interval [0.0, 1.0)."], [222, 3, 1, 0, "standard_wishart", "Draw samples from the Standard Wishart and Pseudo-Wishart distributions"], [223, 4, 1, 0, "state", "Get or set the bit generator's state"], [224, 3, 1, 0, "uintegers", "Return random unsigned integers"], [225, 3, 1, 0, "wishart", "Draw samples from the Wishart and pseudo-Wishart distributions."]], "randomgen.generator.ExtendedGenerator.__init__": [[214, 2, 2, 0, "bit_generator", "Bit generator to use as the core generator."]], "randomgen.generator.ExtendedGenerator.complex_normal": [[218, 2, 2, 0, "gamma", "Variance of the distribution"], [218, 2, 2, 0, "loc", "Mean of the distribution."], [218, 2, 2, 0, "relation", "Relation between the two component normals"], [218, 2, 2, 0, "size", "Output shape."]], "randomgen.generator.ExtendedGenerator.multivariate_complex_normal": [[219, 2, 2, 0, "check_valid", "Behavior when the covariance matrix implied by gamma and relation is not positive semidefinite."], [219, 2, 2, 0, "gamma", "Covariance of the real component of the distribution."], [219, 2, 2, 0, "loc", "Mean of the distribution."], [219, 2, 2, 0, "method", "The cov input is used to compute a factor matrix A such that A @ A.T = cov."], [219, 2, 2, 0, "relation", "Relation between the two component normals."], [219, 2, 2, 0, "size", "Given a shape of, for example, (m,n,k), m*n*k samples are generated, and packed in an m-by-n-by-k arrangement."], [219, 2, 2, 0, "tol", "Tolerance when checking the singular values in the covariance matrix implied by gamma and relation."]], "randomgen.generator.ExtendedGenerator.multivariate_normal": [[220, 2, 2, 0, "check_valid", "Behavior when the covariance matrix is not positive semidefinite."], [220, 2, 2, 0, "cov", "Covariance matrix of the distribution."], [220, 2, 2, 0, "mean", "Mean of the distribution."], [220, 2, 2, 0, "method", "The cov input is used to compute a factor matrix A such that A @ A.T = cov."], [220, 2, 2, 0, "size", "Given a shape of, for example, (m,n,k), m*n*k samples are generated, and packed in an m-by-n-by-k arrangement."], [220, 2, 2, 0, "tol", "Tolerance when checking the singular values in covariance matrix. cov is cast to double before the check."]], "randomgen.generator.ExtendedGenerator.random": [[221, 2, 2, 0, "dtype", "Desired dtype of the result."], [221, 2, 2, 0, "out", "Alternative output array in which to place the result."], [221, 2, 2, 0, "size", "Output shape."]], "randomgen.generator.ExtendedGenerator.standard_wishart": [[222, 2, 2, 0, "df", "The degree-of-freedom for the simulated Wishart variates."], [222, 2, 2, 0, "dim", "The dimension of the simulated Wishart variates."], [222, 2, 2, 0, "rescale", "Flag indicating whether to rescale the outputs to have expectation identity."], [222, 2, 2, 0, "size", "Output shape, excluding trailing dims."]], "randomgen.generator.ExtendedGenerator.uintegers": [[224, 2, 2, 0, "bits", "Size of the unsigned integer to return, either 32 bit or 64 bit."], [224, 2, 2, 0, "size", "Output shape."]], "randomgen.generator.ExtendedGenerator.wishart": [[225, 2, 2, 0, "check_valid", "Behavior when the covariance matrix has rank less than rank."], [225, 2, 2, 0, "df", "Degree-of-freedom values."], [225, 2, 2, 0, "method", "The cov input is used to compute a factor matrix A such that A @ A.T = cov."], [225, 2, 2, 0, "rank", "The rank of shape when generating from the Singular Wishart distribution."], [225, 2, 2, 0, "scale", "Shape matrix of the distribution."], [225, 2, 2, 0, "size", "Given a shape of, for example, (m,n,k), m*n*k samples are generated, and packed in an m-by-n-by-k arrangement."], [225, 2, 2, 0, "tol", "Tolerance when checking the rank of shape."]], "randomgen.hc128": [[185, 1, 1, 0, "HC128", "Container for the HC-128 cipher-based pseudo-random number generator"]], "randomgen.hc128.HC128": [[29, 4, 1, 0, "cffi", "CFFI interface"], [30, 4, 1, 0, "ctypes", "ctypes interface"], [185, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [31, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [32, 3, 1, 0, "seed", "Seed the generator"], [185, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [33, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.hc128.HC128.__init__": [[185, 2, 2, 0, "key", "Key for HC128."], [185, 2, 2, 0, "mode", "Deprecated parameter."], [185, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.hc128.HC128.random_raw": [[31, 2, 2, 0, "output", "Output values."], [31, 2, 2, 0, "size", "Output shape."]], "randomgen.hc128.HC128.seed": [[32, 2, 2, 0, "key", "Key for HC128."], [32, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]], "randomgen.jsf": [[187, 1, 1, 0, "JSF", "Container for Jenkins's Fast Small (JSF) pseudo-random number generator"]], "randomgen.jsf.JSF": [[34, 4, 1, 0, "cffi", "CFFI interface"], [35, 4, 1, 0, "ctypes", "ctypes interface"], [187, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [36, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [37, 3, 1, 0, "seed", "Seed the generator"], [187, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [38, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.jsf.JSF.__init__": [[187, 2, 2, 0, "mode", "Deprecated parameter."], [187, 2, 2, 0, "p", "One the the three parameters that defines JSF."], [187, 2, 2, 0, "q", "One the the three parameters that defines JSF."], [187, 2, 2, 0, "r", "One the the three parameters that defines JSF."], [187, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."], [187, 2, 2, 0, "seed_size", "Number of distinct seed values used to initialize JSF."], [187, 2, 2, 0, "size", "Output size of a single iteration of JSF."]], "randomgen.jsf.JSF.random_raw": [[36, 2, 2, 0, "output", "Output values."], [36, 2, 2, 0, "size", "Output shape."]], "randomgen.jsf.JSF.seed": [[37, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."]], "randomgen.lxm": [[189, 1, 1, 0, "LXM", "Container for the LXM pseudo-random number generator."]], "randomgen.lxm.LXM": [[39, 4, 1, 0, "cffi", "CFFI interface"], [40, 4, 1, 0, "ctypes", "ctypes interface"], [41, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated"], [42, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [189, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [43, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [44, 3, 1, 0, "seed", "Seed the generator"], [189, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [45, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.lxm.LXM.__init__": [[189, 2, 2, 0, "b", "The additive constant in the LCG update."], [189, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.lxm.LXM.jump": [[41, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.lxm.LXM.jumped": [[42, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.lxm.LXM.random_raw": [[43, 2, 2, 0, "output", "Output values."], [43, 2, 2, 0, "size", "Output shape."]], "randomgen.lxm.LXM.seed": [[44, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). The input is passed to SeedSequence which produces the values used to initialize the state."]], "randomgen.mt19937": [[190, 1, 1, 0, "MT19937", "Container for the Mersenne Twister pseudo-random number generator."]], "randomgen.mt19937.MT19937": [[46, 4, 1, 0, "cffi", "CFFI interface"], [47, 4, 1, 0, "ctypes", "ctypes interface"], [48, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated."], [49, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [190, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [50, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [51, 3, 1, 0, "seed", "Seed the generator"], [190, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [52, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.mt19937.MT19937.__init__": [[190, 2, 2, 0, "mode", "\"sequence\" uses a SeedSequence to transforms the seed into an initial state."], [190, 2, 2, 0, "numpy_seed", "Set to True to use  the same seeding mechanism as NumPy and so matches NumPy exactly."], [190, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator."]], "randomgen.mt19937.MT19937.jump": [[48, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator."]], "randomgen.mt19937.MT19937.jumped": [[49, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.mt19937.MT19937.random_raw": [[50, 2, 2, 0, "output", "Output values."], [50, 2, 2, 0, "size", "Output shape."]], "randomgen.mt19937.MT19937.seed": [[51, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator. Can be any integer between 0 and 2**32 - 1 inclusive, an array (or other sequence) of unsigned 32-bit integers, a SeedSequence instance or None (the default)."]], "randomgen.mt64": [[191, 1, 1, 0, "MT64", "Container for the 64-bit Mersenne Twister pseudo-random number generator"]], "randomgen.mt64.MT64": [[53, 4, 1, 0, "cffi", "CFFI interface"], [54, 4, 1, 0, "ctypes", "ctypes interface"], [191, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [55, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [56, 3, 1, 0, "seed", "Seed the generator"], [191, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [57, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.mt64.MT64.__init__": [[191, 2, 2, 0, "mode", "Deprecated parameter."], [191, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator."]], "randomgen.mt64.MT64.random_raw": [[55, 2, 2, 0, "output", "Output values."], [55, 2, 2, 0, "size", "Output shape."]], "randomgen.mt64.MT64.seed": [[56, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator."]], "randomgen.pcg32": [[192, 1, 1, 0, "PCG32", "Container for the PCG-32 pseudo-random number generator."]], "randomgen.pcg32.PCG32": [[58, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [59, 4, 1, 0, "cffi", "CFFI interface"], [60, 4, 1, 0, "ctypes", "ctypes interface"], [61, 3, 1, 0, "jump", "Jump the state a fixed increment"], [62, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [192, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [63, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [64, 3, 1, 0, "seed", "Seed the generator"], [192, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [65, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.pcg32.PCG32.__init__": [[192, 2, 2, 0, "inc", "The increment in the LCG."], [192, 2, 2, 0, "mode", "Deprecated parameter."], [192, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."]], "randomgen.pcg32.PCG32.advance": [[58, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.pcg32.PCG32.jump": [[61, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.pcg32.PCG32.jumped": [[62, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.pcg32.PCG32.random_raw": [[63, 2, 2, 0, "output", "Output values."], [63, 2, 2, 0, "size", "Output shape."]], "randomgen.pcg32.PCG32.seed": [[64, 2, 2, 0, "inc", "The increment in the LCG."], [64, 2, 2, 0, "seed", "Seed for PCG64."]], "randomgen.pcg64": [[188, 1, 1, 0, "LCG128Mix", "Customizable 128-bit LCG bit generator with output mixing"], [193, 1, 1, 0, "PCG64", "Container for the PCG-64 pseudo-random number generator."], [194, 1, 1, 0, "PCG64DXSM", "Container for the PCG-64 updated with a 64-bit mult using DXSM output func."]], "randomgen.pcg64.LCG128Mix": [[66, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [67, 4, 1, 0, "cffi", "CFFI interface"], [68, 4, 1, 0, "ctypes", "ctypes interface"], [69, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [188, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [70, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [71, 3, 1, 0, "seed", "Seed the generator"], [188, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [72, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.pcg64.LCG128Mix.__init__": [[188, 2, 2, 0, "dxsm_multiplier", "The multiplier to use in the DXSM output function."], [188, 2, 2, 0, "inc", "The increment in the LCG."], [188, 2, 2, 0, "multiplier", "The multipler to use in the LCG."], [188, 2, 2, 0, "output", "The name of the output function or a ctypes function or function pointer with a signature uint64(uint64, uint64)."], [188, 2, 2, 0, "post", "Whether the mix the output before or after the next increment of the LCG is computed."], [188, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer, a sequence of integers, a SeedSequence instance or None (the default)."]], "randomgen.pcg64.LCG128Mix.advance": [[66, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.pcg64.LCG128Mix.jumped": [[69, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.pcg64.LCG128Mix.random_raw": [[70, 2, 2, 0, "output", "Output values."], [70, 2, 2, 0, "size", "Output shape."]], "randomgen.pcg64.LCG128Mix.seed": [[71, 2, 2, 0, "inc", "The increment in the LCG."], [71, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."]], "randomgen.pcg64.PCG64": [[73, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [74, 4, 1, 0, "cffi", "CFFI interface"], [75, 4, 1, 0, "ctypes", "ctypes interface"], [76, 3, 1, 0, "jump", "Jump the state a fixed increment"], [77, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [193, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [78, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [79, 3, 1, 0, "seed", "Seed the generator"], [193, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [80, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.pcg64.PCG64.__init__": [[193, 2, 2, 0, "inc", "The increment in the LCG."], [193, 2, 2, 0, "mode", "\"sequence\" uses a SeedSequence to transforms the seed into an initial state."], [193, 2, 2, 0, "numpy_seed", "Set to True to use  the same seeding mechanism as NumPy and so matches NumPy exactly."], [193, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**128), a SeedSequence instance or None (the default)."], [193, 2, 2, 0, "variant", "Name of PCG64 variant to use."]], "randomgen.pcg64.PCG64.advance": [[73, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.pcg64.PCG64.jump": [[76, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.pcg64.PCG64.jumped": [[77, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.pcg64.PCG64.random_raw": [[78, 2, 2, 0, "output", "Output values."], [78, 2, 2, 0, "size", "Output shape."]], "randomgen.pcg64.PCG64.seed": [[79, 2, 2, 0, "inc", "The increment in the LCG."], [79, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."]], "randomgen.pcg64.PCG64DXSM": [[81, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [82, 4, 1, 0, "cffi", "CFFI interface"], [83, 4, 1, 0, "ctypes", "ctypes interface"], [84, 3, 1, 0, "jump", "Not implemented. Use jumped."], [85, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [194, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [86, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [87, 3, 1, 0, "seed", "Seed the generator"], [194, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [88, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.pcg64.PCG64DXSM.__init__": [[194, 2, 2, 0, "inc", "The increment in the LCG."], [194, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**128), a SeedSequence instance or None (the default)."]], "randomgen.pcg64.PCG64DXSM.advance": [[81, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.pcg64.PCG64DXSM.jump": [[84, 2, 2, "randomgen.pcg64.PCG64DXSM.jump", "iter", "Not implemented. Use jumped."]], "randomgen.pcg64.PCG64DXSM.jumped": [[85, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.pcg64.PCG64DXSM.random_raw": [[86, 2, 2, 0, "output", "Output values."], [86, 2, 2, 0, "size", "Output shape."]], "randomgen.pcg64.PCG64DXSM.seed": [[87, 2, 2, 0, "inc", "The increment in the LCG."], [87, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."]], "randomgen.philox": [[195, 1, 1, 0, "Philox", "Container for the Philox family of pseudo-random number generators."]], "randomgen.philox.Philox": [[89, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [90, 4, 1, 0, "cffi", "CFFI interface"], [91, 4, 1, 0, "ctypes", "ctypes interface"], [92, 3, 1, 0, "jump", "Jumps the state as-if 2**(W*N/2) random numbers have been generated."], [93, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [195, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [94, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [95, 3, 1, 0, "seed", "Seed the generator"], [195, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [96, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.philox.Philox.__init__": [[195, 2, 2, 0, "counter", "Counter to use in the Philox state."], [195, 2, 2, 0, "key", "Key to use in the Philox state."], [195, 2, 2, 0, "mode", "\"sequence\" uses a SeedSequence to transforms the seed into an initial state."], [195, 2, 2, 0, "number", "Number of values to produce in a single call."], [195, 2, 2, 0, "numpy_seed", "Set to True to use  the same seeding mechanism as NumPy and so matches NumPy exactly."], [195, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, data will be read from /dev/urandom (or the Windows analog) if available."], [195, 2, 2, 0, "width", "Bit width the values produced."]], "randomgen.philox.Philox.advance": [[89, 2, 2, 0, "counter", "Flag indicating whether the advance the counter only or both the counter and the buffer position."], [89, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.philox.Philox.jump": [[92, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.philox.Philox.jumped": [[93, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.philox.Philox.random_raw": [[94, 2, 2, 0, "output", "Output values."], [94, 2, 2, 0, "size", "Output shape."]], "randomgen.philox.Philox.seed": [[95, 2, 2, 0, "counter", "Counter to use in the Philox state."], [95, 2, 2, 0, "key", "Key to use in the Philox state."], [95, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, data will be read from /dev/urandom (or the Windows analog) if available."]], "randomgen.rdrand": [[196, 1, 1, 0, "RDRAND", "Container for the hardware RDRAND random number generator."], [196, 1, 1, 0, "RaisingLock", "A Lock that wraps threading.Lock can can raise errors."]], "randomgen.rdrand.RDRAND": [[97, 4, 1, 0, "cffi", "CFFI interface"], [98, 4, 1, 0, "ctypes", "ctypes interface"], [99, 3, 1, 0, "jumped", "Returns a new bit generator"], [196, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [100, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [101, 3, 1, 0, "seed", "Compatibility function. Not used."], [196, 4, 1, 0, "seed_seq", "Always None since RDRAND cannot be seeded."], [102, 4, 1, 0, "state", "Get or set the PRNG state"], [103, 4, 1, 0, "success", "Gets the flag indicating that all calls to RDRAND succeeded"]], "randomgen.rdrand.RDRAND.__init__": [[196, 2, 2, 0, "retries", "The number of times to retry."], [196, 2, 2, 0, "seed", "Must be None."]], "randomgen.rdrand.RDRAND.jumped": [[99, 2, 2, 0, "iter", "This parameter is ignored"]], "randomgen.rdrand.RDRAND.random_raw": [[100, 2, 2, 0, "output", "Output values."], [100, 2, 2, 0, "size", "Output shape."]], "randomgen.rdrand.RDRAND.seed": [[101, 2, 2, 0, "seed", "Must be None."]], "randomgen.romu": [[197, 1, 1, 0, "Romu", "Mark A. Overton's quad and trio rotate-multiply-based generators"]], "randomgen.romu.Romu": [[104, 4, 1, 0, "cffi", "CFFI interface"], [105, 4, 1, 0, "ctypes", "ctypes interface"], [106, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [107, 3, 1, 0, "seed", "Seed the generator"], [108, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.romu.Romu.__init__": [[197, 2, 2, 0, "seed", "A seed to initialize the BitGenerator."], [197, 2, 2, 0, "variant", "The variant to use."]], "randomgen.romu.Romu.random_raw": [[106, 2, 2, 0, "output", "Output values."], [106, 2, 2, 0, "size", "Output shape."]], "randomgen.romu.Romu.seed": [[107, 2, 2, "randomgen.romu.Romu.seed", "seed", "Seed the generator"]], "randomgen.sfc": [[198, 1, 1, 0, "SFC64", "Chris Doty-Humphrey's Small Fast Chaotic PRNG with optional Weyl Sequence"]], "randomgen.sfc.SFC64": [[109, 4, 1, 0, "cffi", "CFFI interface"], [110, 4, 1, 0, "ctypes", "ctypes interface"], [111, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [112, 3, 1, 0, "seed", "Seed the generator"], [113, 4, 1, 0, "state", "Get or set the PRNG state"], [114, 3, 1, 0, "weyl_increments", "Generate distinct Weyl increments to construct multiple streams"]], "randomgen.sfc.SFC64.__init__": [[198, 2, 2, 0, "k", "The increment to the Weyl sequence."], [198, 2, 2, 0, "mode", "The default uses a seed sequence to initialize all unspecified values. When using \"numpy\" uses the seed sequence to initialize three values and checks that both w and k are 1."], [198, 2, 2, 0, "numpy_seed", "Set to True to use  the same seeding mechanism as NumPy. Uses the seed sequence to initialize three state values and checks that both w and k are 1."], [198, 2, 2, 0, "seed", "A seed to initialize the BitGenerator."], [198, 2, 2, 0, "w", "The starting value of the Weyl sequence."]], "randomgen.sfc.SFC64.random_raw": [[111, 2, 2, 0, "output", "Output values."], [111, 2, 2, 0, "size", "Output shape."]], "randomgen.sfc.SFC64.seed": [[112, 2, 2, "randomgen.sfc.SFC64.seed", "seed", "Seed the generator"]], "randomgen.sfc.SFC64.weyl_increments": [[114, 2, 2, 0, "max_bits", "Maximum number of non-zero bits in the values returned."], [114, 2, 2, 0, "min_bits", "The minimum number of non-zero bits in the values returned."], [114, 2, 2, 0, "n", "Number of distinct values to generate."]], "randomgen.sfmt": [[199, 1, 1, 0, "SFMT", "Container for the SIMD-based Mersenne Twister pseudo RNG."]], "randomgen.sfmt.SFMT": [[115, 4, 1, 0, "cffi", "CFFI interface"], [116, 4, 1, 0, "ctypes", "ctypes interface"], [117, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated."], [118, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [199, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [119, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [120, 3, 1, 0, "seed", "Seed the generator"], [199, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [121, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.sfmt.SFMT.__init__": [[199, 2, 2, 0, "mode", "Deprecated parameter."], [199, 2, 2, 0, "seed", "Entropy used to initialize the pseudo-random number generator."]], "randomgen.sfmt.SFMT.jump": [[117, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator."]], "randomgen.sfmt.SFMT.jumped": [[118, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.sfmt.SFMT.random_raw": [[119, 2, 2, 0, "output", "Output values."], [119, 2, 2, 0, "size", "Output shape."]], "randomgen.sfmt.SFMT.seed": [[120, 2, 2, 0, "seed", "Entropy used to initialize the pseudo-random number generator."]], "randomgen.speck128": [[200, 1, 1, 0, "SPECK128", "Container for the SPECK (128 x 256) pseudo-random number generator."]], "randomgen.speck128.SPECK128": [[122, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [123, 4, 1, 0, "cffi", "CFFI interface"], [124, 4, 1, 0, "ctypes", "ctypes interface"], [125, 3, 1, 0, "jump", "Jumps the state as-if iter * 2**64 random numbers are generated"], [126, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [200, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [127, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [128, 3, 1, 0, "seed", "Seed the generator"], [200, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [129, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.speck128.SPECK128.__init__": [[200, 2, 2, 0, "counter", "Counter to use in the SPECK128 state."], [200, 2, 2, 0, "key", "Key to use in the SPECK128 state."], [200, 2, 2, 0, "mode", "Deprecated parameter."], [200, 2, 2, 0, "rounds", "Number of rounds of the SPECK algorithm to run."], [200, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**256), a SeedSequence instance or None (the default)."]], "randomgen.speck128.SPECK128.advance": [[122, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.speck128.SPECK128.jump": [[125, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.speck128.SPECK128.jumped": [[126, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.speck128.SPECK128.random_raw": [[127, 2, 2, 0, "output", "Output values."], [127, 2, 2, 0, "size", "Output shape."]], "randomgen.speck128.SPECK128.seed": [[128, 2, 2, 0, "counter", "Integer in [0,2**128) containing the counter position or a 2-element array of uint64 containing the counter"], [128, 2, 2, 0, "key", "Integer in [0,2**256) containing the key or a 4-element array of uint64 containing the key"], [128, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**256), a SeedSequence instance or None (the default)."]], "randomgen.squares": [[201, 1, 1, 0, "Squares", "Squares counter-based PRNG"], [137, 5, 1, 0, "generate_keys", "Pre-generate keys for use with Squares"]], "randomgen.squares.Squares": [[130, 3, 1, 0, "advance", "Advance the state of the PRNG"], [131, 4, 1, 0, "cffi", "CFFI interface"], [132, 4, 1, 0, "ctypes", "ctypes interface"], [133, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [201, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [134, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [135, 3, 1, 0, "seed", "Seed the generator"], [201, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [136, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.squares.Squares.__init__": [[201, 2, 2, 0, "counter", "The initial counter to use when constructing the PRNG. The defalt value is 0."], [201, 2, 2, 0, "key", "The key to use when constructing the PRNG."], [201, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."], [201, 2, 2, 0, "variant", "The variance of the Square to use."]], "randomgen.squares.Squares.advance": [[130, 2, 2, 0, "delta", "The number of steps to advance the PRNG."]], "randomgen.squares.Squares.jumped": [[133, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.squares.Squares.random_raw": [[134, 2, 2, 0, "output", "Output values."], [134, 2, 2, 0, "size", "Output shape."]], "randomgen.squares.Squares.seed": [[135, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]], "randomgen.squares.generate_keys": [[137, 2, 2, 0, "n", "Number of keys to generate."], [137, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."], [137, 2, 2, 0, "unique", "If True, return only unique keys."]], "randomgen.threefry": [[202, 1, 1, 0, "ThreeFry", "Container for the ThreeFry family of pseudo-random number generators."]], "randomgen.threefry.ThreeFry": [[138, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [139, 4, 1, 0, "cffi", "CFFI interface"], [140, 4, 1, 0, "ctypes", "ctypes interface"], [141, 3, 1, 0, "jump", "Jumps the state as-if 2**(W*N/2) random numbers have been generated."], [142, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [202, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [143, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [144, 3, 1, 0, "seed", "Seed the generator"], [202, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [145, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.threefry.ThreeFry.__init__": [[202, 2, 2, 0, "counter", "Counter to use in the ThreeFry state."], [202, 2, 2, 0, "key", "Key to use in the ThreeFry state."], [202, 2, 2, 0, "mode", "Deprecated parameter."], [202, 2, 2, 0, "number", "Number of values to produce in a single call."], [202, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, data will be read from /dev/urandom (or the Windows analog) if available."], [202, 2, 2, 0, "width", "Bit width the values produced."]], "randomgen.threefry.ThreeFry.advance": [[138, 2, 2, 0, "counter", "Flag indicating whether the advance the counter only or both the counter and the buffer position."], [138, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.threefry.ThreeFry.jump": [[141, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.threefry.ThreeFry.jumped": [[142, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.threefry.ThreeFry.random_raw": [[143, 2, 2, 0, "output", "Output values."], [143, 2, 2, 0, "size", "Output shape."]], "randomgen.threefry.ThreeFry.seed": [[144, 2, 2, 0, "counter", "Counter to use in the ThreeFry state."], [144, 2, 2, 0, "key", "Key to use in the ThreeFry state."], [144, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, data will be read from /dev/urandom (or the Windows analog) if available."]], "randomgen.tyche": [[203, 1, 1, 0, "Tyche", "Container for the Tychee pseudo-random number generator."]], "randomgen.tyche.Tyche": [[146, 4, 1, 0, "cffi", "CFFI interface"], [147, 4, 1, 0, "ctypes", "ctypes interface"], [203, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [148, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [149, 3, 1, 0, "seed", "Seed the generator"], [203, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [150, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.tyche.Tyche.__init__": [[203, 2, 2, 0, "idx", "The index to use when seeding from a SeedSequence."], [203, 2, 2, 0, "original", "If True, use the original Tyche implementation."], [203, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.tyche.Tyche.random_raw": [[148, 2, 2, 0, "output", "Output values."], [148, 2, 2, 0, "size", "Output shape."]], "randomgen.tyche.Tyche.seed": [[149, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]], "randomgen.wrapper": [[204, 1, 1, 0, "UserBitGenerator", "Construct a bit generator from  Python functions"]], "randomgen.wrapper.UserBitGenerator": [[151, 4, 1, 0, "cffi", "CFFI interface"], [152, 4, 1, 0, "ctypes", "ctypes interface"], [153, 3, 1, 0, "from_cfunc", "state_getter=None, state_setter=None)"], [154, 3, 1, 0, "from_ctypes", "state_getter=None, state_setter=None)"], [155, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [156, 4, 1, 0, "state", "Get or set the state"]], "randomgen.wrapper.UserBitGenerator.__init__": [[204, 2, 2, 0, "bits", "The number of bits output by the next_raw callable."], [204, 2, 2, 0, "next_32", "A callable with the same signature as as next_raw that always return 32 bits."], [204, 2, 2, 0, "next_64", "A callable with the same signature as as next_raw that always return 64 bits."], [204, 2, 2, 0, "next_double", "A callable with the same signature as as next_raw that always return a random double in [0,1)."], [204, 2, 2, 0, "next_raw", "A callable that returns either 64 or 32 random bits."], [204, 2, 2, 0, "state", "A ctypes pointer to pass into the next functions."], [204, 2, 2, 0, "state_getter", "A callable that returns the state of the bit generator."], [204, 2, 2, 0, "state_setter", "A callable that sets the state of the bit generator."]], "randomgen.wrapper.UserBitGenerator.from_cfunc": [[153, 2, 2, 0, "next_32", "A numba callback with a signature uint32(void) the return the next 32 bits from the underlying PRNG."], [153, 2, 2, 0, "next_64", "A numba callback with a signature uint64(void) the return the next 64 bits from the underlying PRNG."], [153, 2, 2, 0, "next_double", "A numba callback with a signature uint32(void) the return the next double in [0,1) from the underlying PRNG."], [153, 2, 2, 0, "next_raw", "A numba callback with a signature uint64(void) the return the next raw value from the underlying PRNG."], [153, 2, 2, 0, "state", "A void pointer to the state."], [153, 2, 2, 0, "state_getter", "A callable that returns the state of the bit generator."], [153, 2, 2, 0, "state_setter", "A callable that sets the state of the bit generator."]], "randomgen.wrapper.UserBitGenerator.from_ctypes": [[154, 2, 2, 0, "next_32", "A CFunctionType returning ctypes.c_uint64 and taking one ctypes.c_void_p input that returns the next 32 bits from the underlying PRNG."], [154, 2, 2, 0, "next_64", "A CFunctionType returning ctypes.c_uint64 and taking one ctypes.c_void_p input that returns the next 64 bits from the underlying PRNG."], [154, 2, 2, 0, "next_double", "A CFunctionType returning ctypes.c_uint64 and taking one ctypes.c_void_p input that returns the next double in [0,1) value from the underlying PRNG."], [154, 2, 2, 0, "next_raw", "A CFunctionType returning ctypes.c_uint64 and taking one ctypes.c_void_p input that returns the next raw value from the underlying PRNG."], [154, 2, 2, 0, "state", "A void pointer to the state."], [154, 2, 2, 0, "state_getter", "A callable that returns the state of the bit generator."], [154, 2, 2, 0, "state_setter", "A callable that sets the state of the bit generator."]], "randomgen.wrapper.UserBitGenerator.random_raw": [[155, 2, 2, 0, "output", "Output values."], [155, 2, 2, 0, "size", "Output shape."]], "randomgen.xoroshiro128": [[205, 1, 1, 0, "Xoroshiro128", "Container for the xoroshiro128+/++ pseudo-random number generator."]], "randomgen.xoroshiro128.Xoroshiro128": [[157, 4, 1, 0, "cffi", "CFFI interface"], [158, 4, 1, 0, "ctypes", "ctypes interface"], [159, 3, 1, 0, "jump", "Jumps the state as-if 2**64 random numbers have been generated."], [160, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [205, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [161, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [162, 3, 1, 0, "seed", "Seed the generator"], [205, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [163, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.xoroshiro128.Xoroshiro128.__init__": [[205, 2, 2, 0, "mode", "Deprecated parameter."], [205, 2, 2, 0, "plusplus", "Whether to use the ++ version (xoroshiro128++)."], [205, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence, or None (the default)."]], "randomgen.xoroshiro128.Xoroshiro128.jump": [[159, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.xoroshiro128.Xoroshiro128.jumped": [[160, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.xoroshiro128.Xoroshiro128.random_raw": [[161, 2, 2, 0, "output", "Output values."], [161, 2, 2, 0, "size", "Output shape."]], "randomgen.xoroshiro128.Xoroshiro128.seed": [[162, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence, or None (the default)."]], "randomgen.xorshift1024": [[206, 1, 1, 0, "Xorshift1024", "Container for the xorshift1024*\u03c6 pseudo-random number generator."]], "randomgen.xorshift1024.Xorshift1024": [[164, 4, 1, 0, "cffi", "CFFI interface"], [165, 4, 1, 0, "ctypes", "ctypes interface"], [166, 3, 1, 0, "jump", "Jumps the state as-if 2**512 random numbers have been generated"], [167, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [206, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [168, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [169, 3, 1, 0, "seed", "Seed the generator"], [206, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [170, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.xorshift1024.Xorshift1024.__init__": [[206, 2, 2, 0, "mode", "Deprecated parameter."], [206, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.xorshift1024.Xorshift1024.jump": [[166, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.xorshift1024.Xorshift1024.jumped": [[167, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.xorshift1024.Xorshift1024.random_raw": [[168, 2, 2, 0, "output", "Output values."], [168, 2, 2, 0, "size", "Output shape."]], "randomgen.xorshift1024.Xorshift1024.seed": [[169, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]], "randomgen.xoshiro256": [[207, 1, 1, 0, "Xoshiro256", "Container for the xoshiro256** pseudo-random number generator."]], "randomgen.xoshiro256.Xoshiro256": [[171, 4, 1, 0, "cffi", "CFFI interface"], [172, 4, 1, 0, "ctypes", "ctypes interface"], [173, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated."], [174, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [207, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [175, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [176, 3, 1, 0, "seed", "Seed the generator"], [207, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [177, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.xoshiro256.Xoshiro256.__init__": [[207, 2, 2, 0, "mode", "Deprecated parameter."], [207, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.xoshiro256.Xoshiro256.jump": [[173, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.xoshiro256.Xoshiro256.jumped": [[174, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.xoshiro256.Xoshiro256.random_raw": [[175, 2, 2, 0, "output", "Output values."], [175, 2, 2, 0, "size", "Output shape."]], "randomgen.xoshiro256.Xoshiro256.seed": [[176, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]], "randomgen.xoshiro512": [[208, 1, 1, 0, "Xoshiro512", "Container for the xoshiro512** pseudo-random number generator."]], "randomgen.xoshiro512.Xoshiro512": [[178, 4, 1, 0, "cffi", "CFFI interface"], [179, 4, 1, 0, "ctypes", "ctypes interface"], [180, 3, 1, 0, "jump", "Jumps the state as-if 2**256 random numbers have been generated."], [181, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [208, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [182, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [183, 3, 1, 0, "seed", "Seed the generator"], [208, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [184, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.xoshiro512.Xoshiro512.__init__": [[208, 2, 2, 0, "mode", "Deprecated parameter."], [208, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.xoshiro512.Xoshiro512.jump": [[180, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.xoshiro512.Xoshiro512.jumped": [[181, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.xoshiro512.Xoshiro512.random_raw": [[182, 2, 2, 0, "output", "Output values."], [182, 2, 2, 0, "size", "Output shape."]], "randomgen.xoshiro512.Xoshiro512.seed": [[183, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:parameter", "3": "py:method", "4": "py:attribute", "5": "py:function"}, "terms": {"": [0, 1, 2, 3, 49, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 213, 214, 215, 216, 218, 223, 232, 235], "0": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 44, 51, 56, 64, 71, 79, 87, 89, 95, 103, 114, 120, 128, 130, 135, 137, 138, 144, 149, 153, 154, 162, 169, 176, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 213, 214, 215, 218, 219, 220, 221, 226, 227, 228, 229, 230, 231, 232, 234], "000": [137, 211, 215, 232], "00358": [137, 201], "01": [1, 189], "01769784": 209, "04674949j": 219, "04682163j": 219, "04913229": 219, "06278": [137, 201], "06687298j": 219, "06912343j": 219, "08": 211, "09": 189, "092": 137, "0930": 206, "0j": 219, "0x0e": 211, "0x1": 211, "0x11": 211, "0x14": 211, "0x18c589d6d5fa72c1": 137, "0x1da942042e4dd58b5": 188, "0x3f": 211, "0x5e": 211, "0x648f732e50f1b74d": 137, "0x77": 211, "0x836cdc3a1af658b7": 137, "0x94d049bb133111eb": 188, "0x98d91d71e39a4c2f": 137, "0xa39cdc865e62a037": 137, "0xb7": 211, "0xbf58476d1ce4e5b9": 188, "0xd1": 211, "0xdead10cc": 188, "0xf1ea5e": 211, "0xff37f1f758180525": 188, "0xffffffff": 211, "0xffffffffffffffff": 211, "1": [0, 1, 2, 3, 7, 8, 19, 20, 22, 41, 42, 48, 49, 51, 56, 61, 62, 64, 69, 76, 77, 84, 85, 89, 92, 93, 99, 114, 117, 118, 120, 125, 126, 133, 137, 138, 141, 142, 153, 154, 159, 160, 166, 167, 173, 174, 180, 181, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 215, 216, 218, 219, 220, 221, 222, 225, 227, 228, 229, 231, 232, 235], "10": [0, 1, 2, 137, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 215, 229, 232], "100": [196, 211, 220, 229, 232], "1000": [114, 211, 218, 231], "1000000": [211, 215], "10000000": 229, "1000x": [209, 211], "1007": 203, "101": 232, "102": 232, "1024": [3, 185, 201, 203, 205, 206, 207, 208, 231], "104": 232, "105": 232, "108": 232, "109": 232, "10941": 233, "11": [0, 209, 211, 232], "110": 232, "11013866738698308655": 137, "111": 232, "112": 232, "114": 232, "11400714819323198486": [61, 62], "1167245051188668936": 211, "117": 232, "11749869230777074271": 211, "11789540394216366135": 137, "118": 232, "119": 232, "12": [1, 200, 211, 232], "120": 232, "121": 232, "12103276313412614439": 211, "122": [211, 232], "123": [0, 1, 3, 185, 187, 189, 195, 196, 200, 201, 202, 203, 205, 206, 207, 208], "1234": [0, 1, 3, 137, 185, 187, 189, 192, 193, 194, 195, 200, 201, 202, 203, 205, 206, 207, 208], "12345": 227, "124": 232, "126": 232, "127": 232, "12712143389959007425": 211, "128": [0, 1, 2, 10, 15, 19, 20, 32, 41, 42, 48, 49, 69, 71, 76, 77, 79, 85, 87, 95, 117, 118, 128, 144, 173, 174, 186, 189, 190, 193, 194, 199, 200, 205, 207, 208, 209, 211, 227, 231, 232, 235], "12803009197309261862": 197, "128bit": 0, "128gb": 235, "129": [0, 200, 232], "13": [187, 209, 211, 232, 233, 235], "130": 232, "13020151409549081939": 198, "131": 232, "132": [195, 202], "13259944246262022926": 211, "133411349017971402732463711865589153492": 211, "134": 232, "135": 232, "136": 232, "138": 232, "139": 232, "13933250373249421220": 198, "13952735719045862400": 211, "14": [137, 189, 206, 211, 232], "140": 196, "1402": 206, "1403": 206, "14241860431798867506": 211, "143": 232, "14412717025735663865": 204, "145": 232, "14501513697102443756": 211, "147": 232, "149": 232, "14_p": 137, "15": [137, 200, 211, 227, 232, 235], "15002187965291974971": 211, "15184288j": 219, "152": 232, "154": 232, "155": 232, "156": 232, "15715724510248929625": 211, "15750249268501108917": 188, "15780814468893899944": 211, "158": 232, "16": [1, 3, 4, 58, 66, 73, 81, 89, 122, 138, 185, 188, 194, 201, 206, 227, 231, 232, 235], "160": 232, "162": 232, "163": 232, "16313": [188, 194], "164": 232, "16430795192718506": 211, "165": 232, "1654503": 221, "167": 232, "168": [137, 232], "17": [0, 1, 89, 138, 187, 195, 200, 202, 227, 228, 229, 232], "170": 232, "1704": [137, 201], "171": 229, "17190901158427765818": 211, "172": 232, "17233599j": 219, "17318243661941184039": 204, "174": 232, "17400468283504521969": 211, "175": 232, "176": 232, "177": 232, "178": 232, "1784984383128236737": 137, "17987378307908897868": 211, "18": [227, 232], "180": 137, "18011468": 219, "18034113569054765009": 211, "1805": 233, "181": 232, "182": 232, "183": 232, "18366146": 219, "184": 232, "18419364": 219, "185": 232, "186": 232, "1866397": 219, "189": 232, "19": [211, 227, 232, 235], "190": 232, "192": [197, 232], "193": 232, "195": [232, 235], "196": [195, 202, 232, 235], "1966": [222, 225], "197": 232, "19754723j": 219, "198": 232, "199": [222, 225, 232], "1991": 220, "19937": 231, "1994": [222, 225], "1997": [222, 225], "1998": 191, "1999": 188, "1_000_000_000": 201, "1e": [219, 220], "1ghz": 232, "1j": 219, "1st": 201, "1tb": 209, "2": [0, 1, 2, 3, 7, 8, 10, 15, 19, 20, 22, 27, 32, 37, 41, 42, 44, 48, 49, 51, 56, 61, 62, 64, 69, 71, 76, 77, 79, 85, 87, 89, 92, 93, 95, 114, 117, 118, 120, 125, 126, 128, 130, 133, 135, 137, 138, 141, 142, 144, 149, 159, 160, 162, 166, 167, 169, 173, 174, 176, 180, 181, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 211, 213, 215, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235], "20": [1, 49, 190, 211, 227, 232, 235], "2000": [189, 191], "2001": 220, "2003": [189, 206], "2004": [137, 201], "2006": [2, 199], "2008": [1, 2, 49, 185, 190, 199], "2009": 187, "2011": [189, 195, 202, 203], "2012": [196, 203, 209], "2014": 206, "2015": [196, 218, 219], "2017": [137, 201], "2018": 233, "2019": [0, 189, 200], "202": [137, 232], "2020": [3, 49, 188, 189, 194, 196, 197], "20210501": 209, "203": [214, 222, 225], "204": 137, "205": 232, "206": 232, "208": [229, 232], "2080": 114, "21": [189, 211, 232, 235], "210": 232, "210306068529402873165736369884012333108": 76, "212": 232, "213": 232, "215": 232, "2156737186088199787": 197, "217": [137, 232], "219": 232, "22": [0, 3, 209, 222, 225, 232], "225": 188, "227": 232, "228": 232, "229": 232, "23": [216, 227, 232], "23204345": 221, "234": 232, "23587346j": 219, "24": [211, 232], "242": 232, "244": 232, "246": 232, "249": [188, 232], "25": 137, "250": 232, "2549297995355413924": 211, "255": 198, "256": [1, 15, 32, 95, 128, 144, 180, 181, 185, 197, 198, 200, 207, 208, 231, 235], "26": [197, 227], "260": 188, "264": 232, "27": [187, 188, 232], "2701576j": 219, "271": 232, "2740075917084007745": 211, "278": 232, "279": 232, "28": [1, 189, 232], "28036548": 219, "28145563": 219, "282": 232, "283": 232, "285": 232, "2862933555777941757": 189, "287": 232, "290": [2, 190, 199], "298": [2, 190, 199], "2nd": 220, "3": [3, 49, 114, 187, 188, 189, 190, 191, 194, 195, 197, 198, 201, 202, 203, 206, 211, 219, 220, 221, 222, 225, 227, 229, 232, 235], "30": [188, 191, 232], "30220482": 221, "3035725": 219, "3037000493": 189, "304881062738325533": 211, "31": [188, 211, 232], "312": [56, 191], "31464": 203, "31483301": 219, "32": [0, 1, 2, 3, 4, 5, 6, 12, 13, 17, 18, 22, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 51, 53, 54, 58, 59, 60, 66, 67, 68, 73, 74, 75, 81, 82, 83, 89, 90, 91, 97, 98, 104, 105, 109, 110, 114, 115, 116, 120, 122, 123, 124, 131, 132, 138, 139, 140, 146, 147, 151, 152, 153, 154, 157, 158, 164, 165, 171, 172, 178, 179, 185, 187, 188, 189, 190, 191, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 215, 224, 230, 231, 232, 235], "32361134": 219, "325874985469": 198, "32699266": 219, "32777": 185, "33": [0, 1, 195, 200, 202, 232], "3315941531": 211, "3394385948627484371": 235, "34": [200, 232], "348": 191, "35": 232, "35185607": 219, "35360097j": 219, "35399562948360463058890781895381311971": 211, "356": 189, "357": 191, "36": 232, "36159505490948474": 211, "366935": 3, "37": [187, 211, 235], "37548236789240574857439075": 188, "381": 209, "3814417803339974021": 211, "382": [2, 199], "384": 2, "385": [49, 190], "39": [185, 211, 232], "390": [49, 190], "395": [222, 225], "3_10": 203, "3rd": 220, "4": [0, 1, 3, 15, 95, 128, 144, 187, 188, 189, 195, 197, 198, 200, 202, 203, 204, 206, 207, 208, 211, 219, 227, 229, 231, 232, 235], "405": [222, 225], "4141": 196, "42551611": 219, "440": 137, "44163456j": 219, "44740101": 219, "45": 232, "46716898": 219, "47": 185, "47026247687942121848144207491837523525": 188, "47108547995356098": 221, "48": 232, "48550": [137, 201], "4865540595714422341": 211, "489048146361948": 197, "4893028492374823749823": 114, "49": 232, "4976686463289251617": 211, "4986": 185, "4j": 219, "4tb": [209, 235], "5": [137, 189, 201, 211, 215, 218, 219, 221, 227, 229, 231, 232], "50": [185, 198, 231, 235], "5000": 220, "50539209j": 219, "51": 232, "512": [166, 167, 185, 205, 206, 207, 208, 231], "521015634160378615": 204, "5228567175856316": 229, "52338984": 221, "5264292724725465572": 211, "53": [209, 211, 231], "530704699024515781": 211, "5336551313612926520": 211, "54": 232, "541": 137, "55": [211, 232], "5553417437478470678": 211, "56": 232, "56994348j": 219, "57": 232, "57787275j": 219, "5897100938578919857511": 235, "59": 232, "59809459": 219, "6": [49, 189, 200, 206, 211, 220, 227, 229, 232], "602963287911976729": 211, "603484028490308141": 231, "607": [2, 199], "61": [222, 225, 232], "62": [211, 232], "622": [2, 199], "623": 191, "624": [51, 120, 190, 199], "6246": 206, "63": [114, 211, 222, 225], "64": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 39, 40, 43, 44, 46, 47, 50, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 74, 75, 77, 78, 79, 82, 83, 85, 86, 87, 90, 91, 94, 95, 97, 98, 104, 105, 106, 109, 110, 111, 114, 115, 116, 119, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 137, 139, 140, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 164, 165, 168, 169, 171, 172, 175, 176, 178, 179, 182, 183, 185, 186, 187, 188, 189, 190, 192, 195, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 211, 213, 215, 224, 227, 230, 231, 232, 235], "64185732j": 219, "642": 203, "64gb": 235, "65": [0, 1, 195, 200, 202], "66": [229, 232], "66462037": 219, "66851489": 209, "67": 232, "68": 188, "683": 137, "687": 137, "69": 232, "7": [137, 187, 201, 209, 211, 213, 219, 229, 232, 235], "71": 232, "72": 232, "7203": 203, "7246136968226125645": 137, "73": [222, 225, 232], "73939778j": 219, "74": 232, "75": 232, "75224494": 221, "755828109848996024": 211, "76": 229, "764": [2, 22], "76788821": 219, "768": [190, 199], "77": 232, "7713239619832409074": 204, "78": 232, "79": 232, "79479508": 221, "7j": 219, "8": [0, 1, 137, 189, 191, 197, 201, 206, 209, 211, 219, 220, 232, 235], "80": 232, "8062752282355435850": 198, "81": 232, "8192": 197, "8196": [198, 231, 235], "82": 232, "83": 232, "84": 232, "84832672j": 219, "85": [229, 232], "8509285875904376097169743623867": [3, 201, 203], "85384162": 209, "86316980830225721106033794313786972513572058861498566720023788662568817403978": 235, "86532386": 209, "86649667": 219, "86820401": 221, "87": [222, 225], "87136372517582989555478159403783844777": 211, "87316102": 209, "88380663j": 219, "88447445j": 219, "8870424784319794977": 211, "9": [0, 1, 137, 195, 200, 202, 211, 229, 232], "9007199254740992": 211, "91": 232, "9130649916277841551": 197, "91476019": 219, "91802901j": 219, "93": [0, 1, 200], "936j": 214, "93782402j": 219, "9405893610231781608176235507540826829": 211, "9470186258571876535": 137, "95": 232, "9596734350428388680": 211, "96": [200, 231, 232], "9710": 209, "97279918": 219, "978": 203, "98": 232, "99": 232, "99091858": 221, "99149989": 221, "A": [2, 3, 107, 112, 153, 154, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 204, 211, 212, 213, 216, 219, 220, 222, 225, 230, 231, 235], "As": [195, 202, 234], "By": [188, 194, 201, 235], "For": [4, 10, 15, 44, 58, 64, 66, 73, 81, 89, 95, 114, 122, 128, 138, 144, 169, 209, 230, 231, 232], "If": [0, 1, 2, 3, 9, 10, 14, 15, 21, 22, 26, 27, 31, 32, 36, 37, 43, 44, 50, 51, 55, 56, 63, 64, 70, 71, 78, 79, 86, 87, 89, 94, 95, 100, 101, 106, 107, 111, 112, 114, 119, 120, 127, 128, 134, 135, 137, 138, 143, 144, 148, 149, 153, 154, 155, 156, 161, 162, 168, 169, 175, 176, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 214, 218, 219, 220, 221, 222, 224, 225], "In": [0, 1, 2, 3, 4, 58, 66, 73, 81, 89, 114, 122, 138, 185, 188, 190, 191, 193, 194, 196, 199, 200, 203, 204, 205, 206, 207, 208, 209, 212, 220, 224, 225, 227, 229, 231], "It": [3, 10, 15, 27, 32, 37, 44, 64, 71, 79, 87, 95, 107, 112, 128, 135, 144, 149, 162, 169, 176, 183, 185, 188, 193, 196, 197, 201, 203, 204, 205, 207, 208, 209, 211, 213, 214, 220, 225, 227, 235], "NOT": [196, 212], "No": [49, 190, 196], "Not": [84, 101], "ON": [49, 190], "On": [196, 212, 222, 225], "One": [107, 112, 187, 195, 197, 198, 202, 209, 221], "Such": 220, "The": [0, 1, 2, 3, 4, 8, 10, 15, 20, 32, 42, 44, 49, 58, 61, 62, 64, 66, 69, 71, 73, 76, 77, 79, 81, 85, 87, 89, 93, 95, 102, 114, 118, 122, 126, 128, 130, 133, 137, 138, 142, 144, 160, 167, 174, 181, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 227, 229, 231, 232, 235], "Their": [2, 190, 199], "There": [137, 187, 204, 213, 231], "These": [0, 1, 2, 3, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 205, 206, 207, 208, 211, 213, 215, 220, 224, 231, 235], "To": [89, 138, 193, 195, 196, 221, 235], "With": 196, "_": [0, 1, 2, 190, 195, 196, 199, 200, 202, 205, 206, 207, 208, 211, 229, 231, 235], "__del__": 229, "__init__": [211, 229], "__name__": 211, "_fill": 229, "_has_uint32": 211, "_mm_paus": 196, "_next_32": 211, "_next_64": 211, "_next_doubl": 211, "_next_raw": 211, "_random_gener": 229, "_state": 211, "_uinteg": 211, "ab": [206, 233], "abl": 196, "about": [185, 198, 209, 211, 213, 227, 235], "abov": 235, "abrupt": 209, "absolut": 198, "absolute_import": 209, "ac": 49, "acceler": 232, "accept": [204, 211], "access": [0, 1, 2, 3, 49, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 205, 206, 207, 208, 209, 211, 214, 215, 224, 230], "accord": [137, 211], "acm": [191, 195, 202], "acquir": 196, "across": [204, 209, 231, 235], "activ": 213, "actuari": [218, 219], "ad": [188, 189, 198, 209, 216], "add": [188, 209, 216, 221, 227], "addit": [3, 137, 185, 188, 189, 193, 194, 201, 203, 209, 214, 218, 227, 229, 230, 231], "addition": [193, 195, 231], "address": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 139, 140, 146, 147, 151, 152, 157, 158, 164, 165, 171, 172, 178, 179, 204, 210, 211, 215], "advanc": [0, 1, 2, 186, 188, 189, 190, 192, 193, 194, 195, 199, 200, 202, 205, 206, 207, 208, 209, 211, 227, 229], "advanced_encryption_standard": 0, "ae": [186, 227], "aescount": [0, 1, 185, 200, 209, 213, 227, 230, 231, 232, 235], "aesni": 185, "affect": 209, "after": [100, 188, 211, 215, 229], "again": [10, 15, 27, 32, 37, 44, 64, 71, 79, 87, 95, 107, 112, 128, 135, 144, 149, 162, 169, 176, 183], "against": 209, "agenc": 200, "ahead": [2, 49, 190, 199], "algorithm": [2, 187, 188, 190, 192, 193, 194, 197, 198, 199, 200, 209, 212], "alia": [194, 209], "alias": 193, "align": [215, 229], "all": [0, 1, 2, 9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 103, 106, 111, 119, 127, 134, 143, 148, 155, 161, 168, 175, 182, 189, 190, 195, 196, 197, 198, 199, 200, 202, 205, 206, 207, 208, 209, 211, 213, 215, 218, 221, 224, 225, 229, 232, 235], "allow": [0, 1, 2, 188, 189, 190, 195, 199, 200, 202, 204, 205, 206, 207, 208, 209, 211, 215, 227, 229, 230], "along": [201, 215, 220, 231], "alongsid": 227, "also": [2, 3, 71, 89, 107, 112, 138, 186, 187, 190, 191, 193, 195, 196, 197, 198, 199, 206, 209, 213, 215, 227, 231, 232], "alter": 189, "altern": [0, 1, 185, 195, 200, 201, 202, 203, 221, 227, 232], "although": [196, 216, 232], "alwai": [0, 1, 2, 3, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 216, 220, 235], "ambigu": 209, "amd": 196, "amer": [222, 225], "among": 209, "amount": 227, "an": [0, 1, 2, 3, 4, 10, 15, 22, 27, 32, 37, 44, 51, 56, 58, 66, 71, 73, 79, 81, 87, 89, 95, 107, 112, 114, 120, 122, 128, 130, 135, 137, 138, 144, 149, 153, 154, 162, 169, 176, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 214, 215, 219, 220, 225, 227, 229, 231, 232, 233, 235], "analog": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 51, 56, 79, 87, 95, 120, 128, 135, 137, 144, 149, 162, 169, 176, 183, 185, 187, 189, 190, 191, 192, 195, 199, 200, 201, 202, 203, 205, 206, 207, 208, 220], "analysi": [195, 202, 222, 225], "ani": [0, 1, 2, 4, 7, 22, 41, 51, 56, 66, 73, 76, 81, 89, 92, 101, 120, 122, 125, 138, 141, 159, 166, 173, 180, 190, 191, 195, 196, 199, 200, 202, 211, 213, 216, 229, 231, 232, 235], "annal": [222, 225], "anon_func_st": 215, "anoth": [0, 1, 10, 15, 95, 144, 185, 195, 200, 202, 205, 206, 207, 208], "api": [99, 209, 213], "appear": [137, 189, 209], "append": [189, 201, 229, 231, 235], "appli": [188, 203, 209, 211, 215, 220, 225], "applic": [0, 1, 2, 99, 185, 189, 190, 192, 193, 194, 195, 196, 197, 199, 200, 202, 205, 206, 207, 208, 209, 222, 225, 227, 230, 231, 232], "appropri": 188, "approxim": [137, 220], "april": 197, "ar": [0, 1, 2, 3, 4, 7, 9, 10, 14, 15, 21, 22, 26, 27, 31, 32, 36, 37, 43, 44, 50, 51, 55, 56, 58, 63, 64, 66, 70, 73, 78, 79, 81, 86, 87, 89, 94, 95, 100, 102, 106, 107, 111, 112, 114, 119, 120, 122, 125, 127, 128, 134, 135, 137, 138, 143, 144, 148, 149, 155, 156, 161, 162, 168, 169, 175, 176, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 224, 225, 227, 229, 231, 232, 235], "araujo": [203, 209], "arbitrari": [0, 1, 188, 192, 193, 194, 195, 200, 202, 227, 231], "arg": 229, "argument": [201, 209, 219, 220, 225, 229, 235], "around": [215, 231], "arrai": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 44, 51, 56, 95, 114, 120, 128, 135, 137, 144, 149, 162, 169, 176, 183, 185, 187, 189, 190, 191, 195, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 215, 219, 221, 222, 225, 229, 231], "arrang": [219, 220, 225], "array_lik": [15, 107, 112, 197, 198], "articl": 196, "arxiv": [137, 201, 233], "asarrai": 215, "assert": 196, "assertionerror": 196, "assess": 211, "assoc": [222, 225], "associ": 225, "assum": [188, 220, 225], "assur": [209, 227], "astyp": 229, "attach": 196, "attempt": 212, "attribut": [187, 229, 235], "audit": 196, "aug": 233, "augment": [2, 199], "author": [209, 227], "auto": 212, "automat": [196, 212, 225], "avail": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 49, 51, 56, 79, 87, 95, 114, 120, 128, 135, 137, 144, 149, 156, 162, 169, 176, 183, 185, 187, 188, 189, 190, 191, 192, 194, 195, 196, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 227, 234], "averag": [4, 58, 66, 73, 81, 89, 122, 138, 185, 220, 231], "avoid": 209, "axi": 220, "b": [187, 189, 201, 211, 221], "back": 212, "backward": [89, 138, 209, 220, 228, 232, 235], "bad": 235, "base": [2, 4, 49, 58, 66, 73, 81, 89, 122, 138, 185, 188, 197, 199, 201, 203, 205, 209, 215, 219, 227, 230, 231, 232], "base_gen": 235, "basic": [209, 213, 227], "basic_rng": 213, "beaulieu": 200, "becaus": [219, 220, 225], "beck": 189, "becom": [194, 209], "been": [0, 1, 2, 4, 8, 19, 20, 41, 42, 48, 49, 58, 61, 62, 66, 69, 73, 76, 77, 81, 85, 89, 92, 93, 114, 117, 118, 122, 126, 133, 138, 141, 142, 159, 160, 166, 167, 173, 174, 180, 181, 188, 189, 190, 195, 196, 199, 200, 202, 205, 206, 207, 208, 209, 213, 215, 216, 220, 225, 226, 227, 228, 231, 235], "befor": [0, 1, 10, 15, 95, 144, 188, 193, 195, 196, 200, 202, 209, 211, 212, 220, 225, 228, 229, 235], "began": 227, "begin": [211, 219, 235], "behav": 229, "behavior": [219, 220, 225], "being": [209, 213, 227], "bell": 220, "below": [211, 231, 232, 235], "berlin": 203, "bernard": [137, 201], "bernstein": 1, "best": [204, 211, 231, 235], "beta": [222, 225], "better": [187, 188, 189, 192, 193, 194, 227], "between": [0, 2, 4, 22, 51, 56, 58, 64, 66, 73, 81, 89, 114, 120, 122, 137, 138, 187, 190, 191, 199, 200, 209, 218, 219, 227, 231], "bg": [197, 204], "big": [8, 20, 42, 49, 62, 69, 77, 85, 93, 118, 126, 133, 142, 160, 167, 174, 181, 188], "bit": [0, 1, 2, 3, 4, 5, 6, 8, 9, 12, 13, 14, 17, 18, 19, 20, 21, 22, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 62, 63, 66, 67, 68, 69, 70, 73, 74, 75, 77, 78, 79, 81, 82, 83, 85, 86, 87, 89, 90, 91, 93, 94, 97, 98, 99, 104, 105, 106, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 126, 127, 131, 132, 133, 134, 138, 139, 140, 142, 143, 146, 147, 148, 151, 152, 153, 154, 155, 157, 158, 160, 161, 164, 165, 167, 168, 171, 172, 174, 175, 178, 179, 181, 182, 185, 187, 189, 190, 195, 196, 197, 198, 199, 200, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 223, 224, 230, 231, 232, 235], "bit_gen": [3, 114, 188, 197, 198, 201, 203, 211, 235], "bit_gen_st": 211, "bit_gener": [0, 1, 2, 5, 6, 8, 12, 13, 17, 18, 20, 24, 25, 29, 30, 34, 35, 39, 40, 42, 46, 47, 49, 53, 54, 59, 60, 62, 67, 68, 69, 74, 75, 77, 82, 83, 85, 90, 91, 93, 97, 98, 99, 104, 105, 109, 110, 115, 116, 118, 123, 124, 126, 131, 132, 133, 139, 140, 142, 146, 147, 151, 152, 157, 158, 160, 164, 165, 167, 171, 172, 174, 178, 179, 181, 190, 192, 193, 194, 195, 199, 200, 202, 205, 206, 207, 208, 210, 211, 213, 214], "bit_generator_kwarg": 235, "bitgen": [196, 213, 215], "bitgen_st": 215, "bitgen_t": [209, 215], "bitgener": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 107, 111, 112, 119, 127, 134, 143, 148, 155, 161, 168, 175, 182, 196, 197, 198, 209, 210, 213, 217, 227], "bivari": [218, 219], "blackman": [205, 207, 208], "block": [185, 211, 225, 231], "blocked_rng": 231, "blogspot": 189, "bob": 187, "bool": 103, "both": [0, 1, 10, 15, 32, 71, 89, 95, 128, 138, 144, 185, 195, 198, 200, 201, 202, 205, 209, 211, 215, 218, 232], "bound": [209, 215, 224], "boundscheck": 215, "box": 215, "brank": 235, "break": 209, "bret": 189, "bridg": 196, "bring": 209, "brng": [209, 213], "brng_t": 209, "broadcast": [209, 213, 218, 219, 220, 225, 230], "brook": 189, "bryan": 200, "bt": 235, "buffer": [0, 1, 89, 102, 138, 185, 200, 209], "bug": 209, "buggi": 209, "build": 209, "built": 211, "burtleburtl": 187, "byte": [209, 235], "c": [154, 187, 204, 209, 211, 213, 215, 219, 230], "c1": [220, 225], "c2": [220, 225], "c73ddb7b": 3, "c_": 220, "c_uint64": 154, "c_void_p": [154, 211], "call": [0, 1, 2, 4, 10, 15, 27, 32, 37, 44, 58, 64, 66, 71, 73, 79, 81, 87, 89, 95, 103, 107, 112, 122, 128, 135, 137, 138, 144, 149, 154, 156, 162, 169, 176, 183, 189, 190, 193, 194, 195, 196, 199, 200, 202, 205, 206, 207, 208, 209, 211, 215, 229, 231], "callabl": [153, 154, 204, 211], "callback": [153, 211], "can": [0, 1, 2, 3, 4, 10, 15, 22, 27, 32, 37, 44, 51, 56, 58, 64, 66, 71, 73, 79, 81, 87, 89, 95, 99, 107, 112, 120, 122, 128, 135, 137, 138, 144, 149, 162, 169, 176, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 214, 215, 220, 227, 229, 231], "cannot": [0, 1, 10, 15, 32, 95, 144, 185, 195, 196, 200, 202, 231], "canon": 209, "capabl": [216, 227], "capac": 197, "capsul": [0, 1, 2, 3, 185, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 205, 206, 207, 208, 215], "capsule_nam": 215, "captur": [0, 1, 200], "carefulli": [201, 205, 207, 208], "carlo": [2, 199], "carrai": 211, "cascad": 232, "case": [0, 1, 2, 9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 119, 127, 134, 143, 148, 155, 161, 168, 175, 182, 185, 190, 191, 193, 199, 200, 204, 205, 206, 207, 208, 209, 211, 212, 221, 222, 224, 231], "cast": [211, 215, 220, 225], "casualti": [218, 219], "caveat": [204, 215], "cc": 219, "cdef": 215, "cdot": 137, "ceil": 229, "center": [219, 220], "certain": 201, "cffi": [209, 210, 215], "cfunc": [188, 211], "cfunctiontyp": 154, "chacha": [185, 186, 215, 227, 230, 231, 232, 235], "chanc": [137, 197], "chang": [89, 138, 188, 205, 211, 214, 230, 235], "chaotic": [196, 198, 230], "char": 215, "characterist": 201, "cheap": 193, "check": [193, 195, 196, 198, 209, 215, 219, 220, 225, 235], "check_valid": [219, 220, 225], "chi": 3, "child": [3, 188, 197, 201, 203, 231, 235], "children": [188, 231], "choic": [209, 232], "choleski": [219, 220, 225], "choos": 209, "chose": [193, 198], "chosen": [114, 188], "chri": [3, 198], "cimport": 215, "cipher": [32, 230, 231], "circularli": 219, "circumst": [209, 229], "cj": [220, 225], "clark": 200, "class": [0, 1, 2, 3, 9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 106, 111, 119, 127, 134, 143, 148, 155, 161, 168, 175, 182, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 215, 221, 227, 229, 235], "classif": 220, "classmethod": [153, 154], "clean": 209, "cleanup": 209, "clear": [189, 196, 211], "clone": [209, 211], "close": [114, 195, 202, 209, 232], "closur": 211, "cm": [193, 214, 230], "cnp": 189, "code": [0, 1, 2, 3, 49, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 215, 235], "coeffici": 198, "collis": 231, "com": [188, 189, 194, 196], "combin": [3, 189, 201, 203, 232], "come": [0, 1, 2, 189, 190, 195, 199, 200, 201, 202, 205, 206, 207, 208], "command": [196, 212], "common": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 139, 140, 146, 147, 151, 152, 157, 158, 164, 165, 171, 172, 178, 179, 209, 210, 215, 227, 229, 235], "commonli": 235, "compar": [211, 227, 229], "compat": [0, 1, 2, 3, 89, 99, 101, 138, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 220, 228, 232, 235], "compil": [209, 211, 215, 230], "complet": [209, 211, 226, 227, 228], "complex": [213, 218, 219, 230], "complex_norm": [213, 214, 219, 230], "complex_normal_distribut": [218, 219], "complic": 215, "compon": [218, 219, 227], "comput": [4, 7, 41, 49, 66, 73, 76, 81, 92, 122, 125, 141, 159, 166, 173, 180, 188, 189, 190, 191, 195, 202, 203, 219, 220, 225, 231, 232], "concern": 231, "concurr": 229, "condit": 209, "confer": [195, 202], "configur": [114, 194, 227, 231], "congruenti": [189, 211, 230], "conjunct": 213, "consider": 209, "consist": [0, 1, 2, 3, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209], "const": 215, "constant": [3, 189, 209], "constraint": [189, 213], "construct": [114, 153, 154, 201, 204, 207, 208, 235], "constructor": 229, "consum": [0, 1, 2, 3, 185, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 205, 206, 207, 208], "consumpt": 186, "contain": [0, 1, 2, 3, 5, 6, 11, 12, 13, 16, 17, 18, 23, 24, 25, 28, 29, 30, 32, 33, 34, 35, 38, 39, 40, 45, 46, 47, 52, 53, 54, 57, 59, 60, 65, 67, 68, 72, 74, 75, 80, 82, 83, 88, 90, 91, 96, 97, 98, 102, 104, 105, 108, 109, 110, 113, 114, 115, 116, 121, 123, 124, 128, 129, 131, 132, 136, 139, 140, 145, 146, 147, 150, 151, 152, 157, 158, 163, 164, 165, 170, 171, 172, 177, 178, 179, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 205, 206, 207, 208, 209, 211, 215, 223, 227], "content": 196, "contigu": [209, 229], "continu": 221, "conveni": 201, "convert": [89, 138], "coordin": 220, "copi": [209, 234], "core": [4, 58, 66, 73, 81, 89, 122, 138, 196, 213, 214, 227, 229, 231], "corner": 231, "corr": [206, 233], "correct": 209, "correctli": 209, "correl": [188, 194, 205, 219, 231], "correspond": 193, "corrupt": [0, 1, 2, 3, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 205, 206, 207, 208], "could": 209, "counter": [1, 3, 10, 15, 89, 95, 128, 138, 144, 186, 198, 201, 209, 227, 231], "coupl": 188, "cov": [219, 220, 225], "covari": [218, 219, 220, 222, 225], "coverag": 209, "cpcg": 188, "cpointer": 211, "cpu": 196, "cpu_count": 229, "cpython": 215, "cr": 1, "creat": [137, 188, 189, 211, 229, 231], "creation": 229, "cryptograph": [0, 3, 185, 195, 200, 202, 212, 227, 230], "cryptographi": [227, 232], "ctype": [153, 154, 188, 204, 209, 210, 211, 215], "current": [2, 186, 190, 191, 199, 201, 209, 215], "curv": 220, "custom": 188, "customiz": 188, "cycl": [185, 189, 196, 198], "cython": [204, 209, 211, 227], "d": [0, 1, 187, 189, 201, 211, 219, 220, 221], "d0fc": 3, "d1": 225, "d2": 225, "danger": [188, 194], "daniel": 233, "data": [0, 1, 3, 10, 15, 27, 32, 37, 79, 87, 95, 128, 135, 137, 144, 149, 162, 169, 176, 183, 185, 187, 189, 192, 195, 200, 201, 202, 203, 205, 206, 207, 208, 215, 220, 235], "data_a": 211, "david": [189, 195, 202, 205, 207, 208], "decemb": 189, "decis": 213, "decomposit": [219, 220, 225], "decor": 211, "deem": 227, "def": [188, 204, 211, 215, 229], "defalt": 201, "default": [0, 1, 2, 3, 9, 10, 14, 15, 21, 22, 26, 27, 31, 32, 36, 37, 43, 44, 50, 51, 55, 56, 63, 70, 71, 78, 79, 86, 87, 89, 94, 95, 100, 106, 111, 114, 119, 120, 127, 128, 134, 135, 137, 138, 143, 144, 148, 149, 155, 161, 162, 168, 169, 175, 176, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 212, 214, 218, 219, 220, 221, 222, 224, 225, 231, 235], "default_rng": 235, "defin": [187, 188, 209, 227], "definit": [218, 219, 220], "degre": [222, 225], "delta": [4, 58, 66, 73, 81, 89, 122, 130, 138], "delta_new": [89, 138], "demonstr": [204, 230], "densiti": 201, "depend": [187, 196, 198, 211, 219, 231], "deprec": [0, 1, 2, 185, 187, 191, 192, 199, 200, 202, 205, 206, 207, 208, 209, 213, 234], "deprecationwarn": [209, 213], "deriv": [107, 112, 189, 197, 198], "describ": [11, 16, 23, 28, 33, 38, 45, 52, 57, 65, 72, 80, 88, 96, 102, 108, 113, 121, 129, 136, 145, 150, 163, 170, 177, 184, 223], "descript": 219, "design": [0, 1, 195, 196, 200, 202, 215], "desir": 221, "detail": [10, 15, 44, 64, 95, 128, 144, 169, 201, 218, 227], "detect": [196, 231], "determin": [195, 196, 202, 220, 221, 225], "determinist": [196, 209], "dev": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 51, 56, 79, 87, 95, 120, 128, 135, 137, 144, 149, 162, 169, 176, 183, 185, 187, 189, 190, 191, 192, 195, 199, 200, 201, 202, 203, 205, 206, 207, 208, 211, 212, 229, 230], "develop": [185, 196], "deviat": [218, 220, 235], "df": [222, 225], "di": [189, 205, 206, 207, 208], "diag": 219, "diagon": 220, "dict": [11, 16, 23, 28, 33, 38, 45, 52, 57, 65, 72, 80, 88, 96, 102, 108, 113, 121, 129, 136, 145, 150, 163, 170, 177, 184, 211, 223], "dictionari": [11, 16, 23, 28, 33, 38, 45, 52, 57, 65, 72, 80, 88, 96, 102, 108, 113, 121, 129, 136, 145, 150, 163, 170, 177, 184, 223], "did": 209, "differ": [0, 1, 4, 58, 66, 73, 81, 89, 122, 137, 138, 188, 192, 193, 194, 195, 198, 200, 201, 202, 203, 207, 208, 211, 231], "difficult": 231, "digit": 196, "dim": [222, 225], "dimens": [220, 222, 225], "dimension": [191, 219, 220], "direct": 230, "directli": [0, 1, 2, 3, 9, 10, 14, 15, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 95, 106, 111, 119, 127, 134, 143, 144, 148, 155, 161, 168, 175, 182, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 205, 206, 207, 208, 209, 211, 215, 222, 223, 225, 227, 229], "discuss": [3, 188], "disjoint": 49, "distinct": [0, 1, 2, 114, 137, 185, 187, 189, 190, 195, 197, 198, 199, 200, 202, 205, 206, 207, 208, 209, 227, 232, 235], "distribut": [0, 1, 4, 58, 66, 73, 81, 89, 122, 138, 200, 209, 213, 215, 216, 218, 219, 220, 221, 222, 225, 227, 229, 230, 231, 232], "distutil": 209, "divid": [61, 62, 69, 76, 77, 85, 133], "dk": 225, "dll": [211, 215], "do": [0, 1, 2, 185, 186, 187, 191, 192, 199, 200, 202, 205, 206, 207, 208, 209, 229, 232], "doc": 209, "docstr": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 106, 111, 119, 127, 134, 143, 148, 155, 161, 168, 175, 182, 209], "document": [153, 154, 204, 209, 227], "doe": [196, 209, 211, 212, 223, 229, 231, 234], "doi": [137, 201, 203], "done": 209, "dongarra": 203, "doti": [3, 198], "doubl": [0, 1, 3, 5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 139, 140, 146, 147, 151, 152, 153, 154, 157, 158, 164, 165, 171, 172, 178, 179, 185, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 210, 211, 215, 220, 225], "dougla": 200, "draw": [0, 1, 4, 58, 66, 73, 81, 89, 114, 122, 138, 200, 201, 209, 218, 219, 220, 222, 225, 227, 231], "drawn": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 119, 127, 134, 143, 148, 155, 161, 168, 175, 182, 212, 218, 219, 220, 221, 222, 224, 231], "drng": 196, "dror": [195, 202], "dsfmt": [186, 209, 227, 230, 231, 232, 235], "dsfmt\u2074": 235, "dtype": [137, 204, 209, 211, 221, 231], "duda": 220, "due": [229, 235], "dure": 196, "dxsm": [186, 188, 193, 209, 214, 227, 230, 232, 235], "dxsm_mult": 188, "dxsm_multipli": 188, "d\u0131az": [222, 225], "e": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 119, 127, 134, 143, 148, 155, 161, 168, 175, 182, 186, 187, 188, 192, 193, 194, 195, 196, 198, 201, 202, 211, 212, 213, 218, 219, 220, 221, 222, 224, 228, 230], "each": [0, 1, 2, 137, 189, 190, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 205, 206, 207, 208, 211, 219, 220, 222, 225, 229, 235], "easi": [195, 202], "ecrypt": 185, "ecuy": [2, 49, 188, 190, 199], "ed": [203, 220], "edg": 209, "edu": 185, "effect": [212, 224], "effici": [2, 49, 186, 188, 190, 192, 193, 194, 199], "efiix64": [3, 186, 203, 209, 227, 232, 235], "efiix64x384": 3, "eg": [209, 214, 219], "eigen": [219, 220, 225], "eigenvalu": 225, "eigh": [219, 220, 225], "either": [0, 1, 2, 10, 15, 95, 114, 137, 144, 185, 187, 190, 191, 193, 195, 196, 197, 199, 200, 202, 204, 205, 206, 207, 208, 215, 224, 235], "element": [0, 1, 2, 3, 10, 15, 89, 95, 128, 137, 138, 144, 185, 187, 189, 190, 191, 195, 199, 200, 202, 205, 206, 207, 208, 220], "elif": 235, "els": [79, 87, 211, 235], "empti": [209, 215, 229], "en": [0, 196, 201, 218, 219], "enabl": [227, 231], "encod": [195, 202, 231], "encount": 209, "encrypt": [0, 185, 200], "end": [187, 219], "enhanc": [189, 209], "enough": 231, "ensur": [0, 1, 2, 4, 7, 41, 66, 73, 76, 81, 92, 103, 122, 125, 141, 159, 166, 173, 180, 189, 190, 195, 196, 199, 200, 202, 205, 206, 207, 208, 211, 231, 235], "entri": 220, "entropi": [0, 1, 2, 27, 44, 64, 71, 79, 87, 107, 112, 120, 128, 135, 137, 144, 149, 162, 169, 176, 183, 188, 189, 190, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 227, 231, 235], "equal": [220, 232], "equidistribut": 191, "erg": 220, "erron": 209, "error": 196, "escap": 235, "especi": 197, "essenti": [204, 231], "estream": 185, "eu": 185, "eugen": 189, "even": [1, 102, 189, 195, 198, 202, 229], "ever": 196, "everi": [195, 202], "evolut": 227, "evolv": 211, "exact": [4, 7, 41, 66, 73, 76, 81, 92, 122, 125, 141, 159, 166, 173, 180, 231], "exactli": [190, 193, 195], "examin": [211, 215, 235], "exampl": [0, 1, 3, 4, 58, 66, 73, 81, 89, 114, 122, 137, 138, 153, 154, 185, 187, 188, 189, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 214, 215, 218, 219, 220, 221, 225, 229, 230, 231], "exce": 196, "excel": [207, 208, 232], "except": [193, 196, 204, 209, 211, 213, 219, 235], "excess": 235, "exclud": [201, 222], "execut": 196, "executor": 229, "exhaust": 209, "exist": [204, 215, 216, 229], "exit": 196, "exot": 227, "expand": [196, 235], "expect": [185, 198, 222], "expens": [137, 231], "experi": [227, 230], "experiment": [206, 227], "explor": 206, "expon": 232, "exponenti": 209, "export": 215, "expos": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 106, 111, 119, 127, 134, 143, 148, 155, 161, 168, 175, 182, 211, 214, 224, 227], "extend": [209, 216, 227, 235], "extendedgener": [209, 213, 214, 216, 227], "extern": [188, 193, 194, 211], "extra": 235, "extrem": 197, "ey": [219, 222], "f": [201, 203, 211, 215, 221], "f2": [49, 190], "face": 213, "factor": [219, 220, 225], "fail": [100, 196, 209, 212, 235], "failur": [103, 196, 209, 235], "fall": [212, 218, 219], "fallback": [209, 212], "fals": [89, 103, 137, 138, 190, 193, 195, 198, 203, 205, 211, 215, 222, 229, 235], "famili": [1, 188, 192, 193, 194, 195, 202, 232, 235], "fast": [2, 3, 185, 188, 190, 192, 193, 194, 197, 198, 203, 204, 207, 208, 209, 211, 213, 227, 229, 230, 232, 233], "faster": [3, 195, 202, 206, 219, 220, 225, 232], "fastest": [185, 209, 219, 220, 225, 232], "favor": 209, "featur": [0, 1, 2, 3, 185, 188, 189, 190, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 213], "feiveson": [222, 225], "few": [198, 209, 211, 213], "fewer": [198, 231, 235], "file": [211, 215], "fill": [102, 215, 229], "filler": 209, "final": [1, 114, 189, 196, 201, 209, 211, 215, 220, 225, 231], "finalist": 185, "fine": 197, "first": [0, 114, 189, 196, 198, 201, 211, 215, 229, 231, 235], "five": [227, 231], "fix": [0, 1, 2, 3, 61, 76, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 230, 231], "flag": [89, 103, 138, 196, 211, 222], "flaw": 209, "float": [209, 211, 221, 225], "float128": 209, "float32": [211, 221], "float64": 221, "fold": 235, "folder": 215, "follow": [137, 220, 232], "form": [231, 235], "fortran": 209, "forum": [218, 219], "found": 209, "four": 229, "frac": 219, "fran\u00e7oi": [49, 190], "freedom": [222, 225], "frequenc": 205, "fresh": [107, 112, 197, 198], "from": [0, 1, 2, 4, 10, 15, 22, 27, 32, 37, 49, 51, 56, 58, 66, 73, 79, 81, 87, 89, 95, 107, 112, 114, 120, 122, 128, 135, 137, 138, 144, 149, 153, 154, 162, 169, 176, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 212, 214, 215, 218, 219, 220, 221, 222, 225, 227, 229, 231, 232, 234, 235], "from_cfunc": 211, "full": [189, 215, 220, 228, 231], "fulli": 209, "func": 194, "function": [0, 1, 2, 3, 5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 101, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 137, 139, 140, 146, 147, 151, 152, 153, 154, 156, 157, 158, 164, 165, 171, 172, 178, 179, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 215, 223, 225, 227, 231], "further": 206, "futur": [186, 194, 209, 227, 229, 234], "futurewarn": 213, "g": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 119, 127, 134, 143, 148, 155, 161, 168, 175, 182, 186, 187, 196, 211, 212, 213, 215, 218, 220, 221, 222, 224, 225, 228, 230], "g1": 219, "g2": 219, "gain": [209, 229], "gamma": [209, 218, 219, 232], "garc\u0131a": [222, 225], "gaussian": [218, 219, 220, 230], "gb": 235, "gb\u00b9": 235, "gen": [196, 211, 214, 232], "gener": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 191, 203, 209, 210, 211, 212, 213, 216, 230, 232, 233, 235], "generate_kei": [201, 209], "genrat": 211, "geometr": [220, 232], "georg": [189, 206], "get": [11, 16, 23, 28, 33, 38, 45, 52, 57, 65, 72, 80, 88, 96, 102, 103, 108, 113, 121, 129, 136, 145, 150, 153, 154, 156, 163, 170, 177, 184, 186, 204, 211, 217, 223], "getter": 211, "gil": 196, "git": [0, 1, 2, 3, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 205, 206, 207, 208], "github": [188, 194, 200], "given": [4, 9, 14, 21, 26, 31, 36, 43, 50, 55, 58, 63, 66, 70, 73, 78, 81, 86, 89, 94, 100, 106, 111, 119, 122, 127, 134, 138, 143, 148, 155, 161, 168, 175, 182, 212, 218, 219, 220, 221, 222, 224, 225, 231], "gj": 219, "go": 209, "goal": [216, 227], "golden": [69, 76, 77, 85, 133, 231], "good": [188, 192, 193, 194, 232], "gov": 189, "guarante": [0, 1, 2, 3, 137, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 220, 235], "gui": 189, "guid": [196, 200], "gumbel": 209, "h": [222, 225], "ha": [0, 1, 49, 89, 114, 138, 188, 189, 192, 193, 194, 195, 196, 197, 198, 200, 202, 205, 206, 207, 208, 209, 213, 216, 220, 222, 225, 226, 227, 228, 229, 235], "half": [188, 209, 211, 221], "halliwel": [218, 219], "handcraft": 205, "handl": 209, "happen": [103, 196], "haramoto": [2, 49, 190, 199], "hardwar": [230, 231, 232], "hart": 220, "has_uint": 211, "has_uint32": 211, "hash": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 51, 56, 79, 87, 95, 120, 128, 135, 144, 149, 162, 169, 176, 183, 185, 187, 188, 189, 190, 191, 192, 195, 199, 200, 202, 205, 206, 207, 208, 209, 212], "have": [0, 1, 2, 4, 8, 19, 20, 41, 42, 48, 49, 58, 61, 62, 66, 69, 73, 76, 77, 81, 85, 89, 92, 93, 117, 118, 122, 126, 133, 138, 141, 142, 159, 160, 166, 167, 173, 174, 180, 181, 188, 189, 190, 195, 196, 198, 199, 200, 202, 205, 206, 207, 208, 209, 212, 213, 215, 216, 219, 220, 221, 222, 225, 227, 228, 231, 232, 235], "hc": 32, "hc128": [185, 186, 227, 230, 231, 232, 235], "hc128_p3": 185, "he": 189, "heavili": 196, "heidelberg": 203, "held": [196, 211], "helper": [209, 231], "here": [2, 199, 211], "hex": 137, "hi": 188, "high": [1, 195, 197, 202, 209, 211, 215, 227], "higher": [187, 211, 220], "hill": 220, "hiroshi": [2, 49, 190, 199], "hiroshima": 49, "hold": [0, 1, 2, 3, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 205, 206, 207, 208], "home": 185, "hongjun": 185, "hood": 211, "horner": 49, "how": [211, 215, 227, 231], "howev": [196, 231], "html": [1, 185, 187, 189, 196, 198], "http": [0, 1, 3, 49, 137, 185, 187, 188, 189, 192, 193, 194, 196, 197, 198, 200, 201, 203, 205, 206, 207, 208, 218, 219, 233], "humphrei": [3, 198], "hypergeometr": 209, "i": [0, 1, 2, 3, 4, 7, 8, 9, 10, 14, 15, 20, 21, 22, 26, 27, 31, 32, 36, 37, 41, 42, 43, 44, 49, 50, 51, 55, 56, 58, 61, 62, 63, 64, 66, 69, 70, 71, 73, 76, 77, 78, 79, 81, 85, 86, 87, 89, 92, 93, 94, 95, 99, 100, 101, 102, 103, 106, 107, 111, 112, 114, 118, 119, 120, 122, 125, 126, 127, 128, 133, 134, 135, 137, 138, 141, 142, 143, 144, 148, 149, 155, 159, 160, 161, 162, 166, 167, 168, 169, 173, 174, 175, 176, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 227, 229, 230, 231, 232, 234, 235], "ia": 201, "id": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 51, 56, 79, 87, 95, 120, 128, 135, 144, 149, 162, 169, 176, 183, 185, 187, 189, 190, 191, 192, 195, 199, 200, 202, 205, 206, 207, 208, 212], "ident": [193, 195, 211, 219, 220, 222, 227, 235], "identifi": [219, 222, 225], "idx": [203, 204], "ignor": [99, 204], "ii": [219, 220], "iii": 189, "ij": 220, "im": [218, 219], "imaginari": [218, 219], "immateri": 209, "immedi": 235, "impact": 213, "implement": [2, 49, 84, 187, 188, 192, 193, 194, 196, 198, 199, 200, 203, 204, 206, 209, 211, 215, 219, 231], "implementationguide1": 200, "implemnt": 211, "impli": [218, 219], "import": [0, 1, 2, 3, 114, 137, 185, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 214, 215, 219, 220, 227, 229, 231, 234, 235], "impress": 211, "improv": [1, 189, 200, 205, 209, 227], "inbound": 209, "inc": [64, 71, 79, 87, 188, 192, 193, 194, 195, 209, 211], "includ": [137, 186, 188, 209, 215, 220, 227, 230, 231, 235], "inclus": [2, 22, 51, 56, 120, 189, 190, 191, 199, 227], "incorpor": [198, 227], "incorrect": [204, 209], "increas": [187, 209], "increment": [0, 1, 61, 64, 71, 76, 79, 87, 114, 188, 192, 193, 194, 195, 198, 200, 202, 205, 206, 207, 208, 209, 211, 230, 231, 232, 235], "incuffici": 137, "independ": 227, "index": [185, 190, 191, 203, 227, 231], "indic": [2, 89, 103, 138, 199, 211, 220, 222, 231, 235], "individu": 209, "ineffici": 209, "inform": [11, 16, 23, 28, 33, 38, 45, 49, 52, 57, 65, 72, 80, 88, 96, 102, 108, 113, 121, 129, 136, 145, 150, 163, 170, 177, 184, 190, 209, 215, 220, 222, 223, 225, 227], "inher": 215, "inherit": 209, "initi": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 44, 51, 56, 64, 71, 79, 87, 95, 107, 112, 120, 128, 135, 137, 144, 149, 162, 169, 176, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 231, 232, 235], "inlin": 211, "inner": [222, 225], "innov": 227, "input": [0, 1, 2, 44, 153, 154, 185, 190, 191, 197, 198, 199, 200, 204, 205, 206, 207, 208, 209, 211, 219, 220, 222, 225, 227, 231], "insid": 215, "inspect": 196, "instanc": [0, 1, 2, 3, 8, 10, 15, 20, 22, 27, 32, 42, 44, 49, 51, 56, 62, 69, 71, 77, 79, 85, 87, 93, 95, 99, 107, 112, 118, 120, 126, 128, 133, 135, 137, 142, 144, 149, 160, 167, 169, 174, 176, 181, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 213, 214, 217, 231], "instant": [211, 214], "instead": [196, 209, 220, 234], "instruct": [100, 196, 231], "int": [0, 1, 10, 15, 95, 107, 112, 144, 188, 193, 194, 195, 197, 198, 200, 202, 204, 210, 211, 212, 224, 229, 231], "int64": 209, "int_": 211, "integ": [0, 1, 2, 3, 4, 5, 6, 10, 12, 13, 15, 17, 18, 22, 24, 25, 27, 29, 30, 32, 34, 35, 37, 39, 40, 44, 46, 47, 51, 53, 54, 56, 58, 59, 60, 64, 66, 67, 68, 71, 73, 74, 75, 79, 81, 82, 83, 87, 89, 90, 91, 95, 97, 98, 104, 105, 109, 110, 114, 115, 116, 120, 122, 123, 124, 128, 130, 131, 132, 135, 137, 138, 139, 140, 144, 146, 147, 149, 151, 152, 157, 158, 162, 164, 165, 169, 171, 172, 176, 178, 179, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 212, 213, 215, 224, 230, 231, 233], "integr": 209, "intel": [196, 209, 232], "interact": 210, "interest": 216, "interfac": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 139, 140, 146, 147, 151, 152, 154, 157, 158, 164, 165, 171, 172, 178, 179, 209, 210, 211, 215, 227], "intern": [195, 202, 209], "intertwin": 235, "interv": [209, 221, 233], "intervent": 196, "intrins": 196, "intrinsicsguid": 196, "introduc": 227, "invalid": [196, 209, 215], "invert": 198, "involv": [204, 211], "io": 200, "irrespect": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 106, 111, 119, 127, 134, 143, 148, 155, 161, 168, 175, 182], "isinst": 211, "issu": [114, 188, 194, 196, 209, 211, 213, 235], "iter": [7, 8, 19, 20, 41, 42, 48, 49, 61, 62, 69, 76, 77, 84, 85, 92, 93, 99, 117, 118, 125, 126, 133, 141, 142, 159, 160, 166, 167, 173, 174, 180, 181, 187, 197, 198, 215], "its": [216, 220], "itself": 235, "ivi": 196, "j": [1, 201, 203, 218, 219, 220, 222, 225], "januari": 200, "jason": 200, "java": [189, 209], "jep": 189, "jit": [211, 215], "john": [195, 202], "jour": [222, 225], "journal": [49, 189, 190, 206, 222, 225], "jp": 49, "jsf": [186, 187, 211, 227, 230, 232, 235], "jsf32": 232, "jsf_next": 211, "jsf_next_sig": 211, "jsf_state": 211, "jsf_ubg": 211, "juli": 196, "jump": [0, 1, 2, 186, 189, 190, 195, 199, 200, 202, 205, 206, 207, 208, 209, 213, 227, 229, 235], "june": [0, 3, 188, 189, 194, 197], "j\u00e1imez": [222, 225], "k": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 114, 119, 127, 134, 137, 143, 148, 155, 161, 168, 175, 182, 195, 198, 202, 203, 211, 212, 218, 219, 220, 221, 222, 224, 225, 231, 232, 235], "karczewski": 203, "kei": [0, 1, 10, 15, 32, 95, 128, 137, 144, 185, 195, 200, 202, 204, 209, 211, 215, 227, 232], "keystream": 185, "keyword": [209, 229, 235], "known": [3, 213, 235], "l": [2, 49, 188, 190, 199, 222, 225], "lake": 232, "landingpag": 196, "laplac": 209, "larg": [114, 197, 200, 209, 229, 231, 232, 235], "larger": [197, 205, 229], "largest": 225, "last": [196, 198, 229], "last_bg": 229, "last_rng": 231, "later": 196, "latest": 209, "latter": 235, "lattic": 188, "lcg": [64, 71, 79, 87, 186, 189, 192, 193, 194, 209, 211, 227], "lcg128mix": [188, 194, 209, 227, 230, 231, 235], "lcg_mult": 188, "lead": [204, 209, 211, 220], "least": [137, 198, 209], "lectur": 203, "left": [187, 219], "legaci": [209, 213, 227], "legacygener": 209, "leigh": [218, 219], "lemir": [209, 233], "len": 231, "length": [185, 198, 235], "less": [58, 66, 73, 81, 89, 138, 196, 219, 220, 225], "let": 215, "level": [0, 1, 2, 3, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 205, 206, 207, 208, 220], "libnpyrandom": 209, "librari": 211, "like": [114, 194, 209, 212, 213, 220, 225, 227], "limit": [225, 230, 231, 235], "line": [196, 209], "linear": [2, 49, 189, 190, 199, 205, 207, 208, 211], "linux": 232, "list": [187, 188, 198, 220, 227, 231, 235], "liter": 211, "littl": 211, "live": 229, "llnl": 189, "lnc": 185, "lo": 188, "loc": [218, 219], "local": 231, "locat": [0, 200, 211, 220], "lock": [0, 1, 2, 3, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 199, 200, 201, 202, 203, 205, 206, 207, 208], "log": [215, 227, 230], "logist": 209, "logseri": 209, "long": [209, 215, 229, 231], "longdoubl": [209, 221], "longer": 209, "look": 211, "loop": [211, 229], "loui": 200, "low": [0, 1, 2, 3, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 205, 206, 207, 208, 209, 215, 235], "lower": [32, 185, 188, 196, 211], "lxm": [186, 209, 227, 230, 231, 232, 235], "m": [9, 14, 21, 26, 31, 36, 43, 49, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 119, 127, 134, 143, 148, 155, 161, 168, 175, 182, 188, 191, 193, 194, 195, 197, 202, 211, 212, 218, 219, 220, 221, 222, 224, 225, 229], "m1": [219, 220], "m2": [219, 220], "machin": 212, "made": [4, 58, 66, 73, 81, 89, 122, 138, 227, 231], "magnitud": 211, "mai": [49, 107, 112, 114, 186, 197, 198, 216, 219], "main": [2, 190, 191, 199, 209, 213, 227], "maintain": [213, 216], "mainten": 213, "make": [0, 1, 2, 3, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 212, 229, 235], "makoto": [2, 49, 190, 199], "manag": 211, "mani": [114, 187, 196, 209, 213, 227, 231, 235], "manipul": 223, "manual": [103, 196], "manylinux": 209, "map": [195, 198, 202, 230], "mardia": [222, 225], "mark": [195, 197, 202, 235], "marsaglia": [189, 206], "massiv": 196, "mat": 49, "match": [49, 190, 193, 195, 209, 211, 221], "math": 49, "mathemat": [188, 203, 219], "mathrm": 219, "matplotlib": 220, "matrix": [218, 219, 220, 222, 225], "matsumoto": [2, 49, 190, 191, 199, 206], "max_bit": 114, "maximum": [114, 196, 235], "mcgraw": 220, "mean": [196, 198, 211, 218, 219, 220, 229, 232], "mechan": [190, 193, 195, 198], "melissa": [188, 192, 193, 194], "member": [215, 235], "memori": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 139, 140, 146, 147, 151, 152, 157, 158, 164, 165, 171, 172, 178, 179, 204, 211], "memoti": 210, "merg": [216, 227], "mersenn": [209, 230, 232, 235], "method": [0, 1, 2, 4, 9, 10, 14, 15, 21, 26, 27, 31, 32, 36, 37, 43, 44, 49, 50, 55, 58, 63, 64, 66, 70, 71, 73, 78, 79, 81, 86, 87, 89, 94, 95, 106, 107, 111, 112, 114, 119, 122, 127, 128, 134, 135, 138, 143, 144, 148, 149, 155, 161, 162, 168, 169, 175, 176, 182, 183, 186, 188, 189, 190, 192, 193, 194, 195, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 214, 216, 219, 220, 222, 224, 225, 227, 231, 235], "middl": [137, 209], "might": [198, 200], "migrat": 216, "min_bit": 114, "minim": 215, "minimum": [114, 198, 209], "mix": [186, 189, 193, 197, 198, 209, 227], "mixer": [1, 188, 193], "mk": [219, 220], "mod": [188, 189, 193, 194], "mode": [0, 1, 2, 3, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211], "model": [191, 232], "moder": [229, 231], "modern": [209, 227], "modifi": 49, "modul": [2, 190, 191, 199, 227], "modulo": [89, 138], "modulu": 211, "mont": [2, 199], "mora": [195, 202], "more": [1, 4, 58, 66, 73, 81, 89, 122, 138, 196, 204, 209, 213, 215, 220, 222, 225, 227, 231], "most": [114, 137, 196, 204, 209, 220, 224, 227, 231, 235], "move": [209, 213], "mrng": 229, "mt": [49, 235], "mt19937": [186, 209, 214, 227, 230, 231, 232, 235], "mt19937\u2074": 235, "mt64": [186, 191, 209, 227, 230, 232], "mu": 219, "much": 196, "muller": 215, "mult": 194, "multibuild": 209, "multidimension": 209, "multinomi": 209, "multinorm": 220, "multipl": [0, 1, 2, 3, 49, 114, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 213, 220, 227, 229, 231, 235], "multipli": [186, 188, 193, 209, 211, 221, 227, 231], "multiprocess": 229, "multithread": 227, "multithreadedrng": 229, "multivari": [219, 220, 222, 225, 230], "multivariate_complex_norm": 209, "multivariate_norm": [209, 213, 219, 230], "murmur3": [188, 189], "murmur3_mix": 188, "murmurhash3": 189, "must": [0, 1, 2, 3, 58, 66, 71, 73, 81, 89, 101, 114, 130, 137, 138, 153, 154, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 211, 215, 218, 219, 220, 221, 225, 228, 231], "mutsuo": [2, 199], "n": [0, 9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 89, 92, 94, 100, 106, 111, 114, 119, 127, 134, 137, 138, 141, 143, 148, 155, 161, 168, 175, 182, 188, 193, 194, 195, 202, 211, 212, 215, 218, 219, 220, 221, 222, 224, 225, 229, 232], "name": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 139, 140, 146, 147, 151, 152, 157, 158, 164, 165, 171, 172, 178, 179, 188, 193, 195, 202, 209, 211, 213, 221], "nan": 209, "nation": 200, "nativ": 211, "natur": 235, "nb": 215, "ndarrai": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 114, 119, 127, 134, 137, 143, 148, 155, 161, 168, 175, 182, 212, 218, 219, 220, 221, 222, 224, 225], "necessari": 196, "necessarili": 204, "need": [196, 209, 211, 215, 229, 231, 232], "neg": [89, 138, 220], "neglig": 231, "neill": [188, 192, 193, 194], "net": [3, 187, 189, 198], "network": [195, 202], "neve": [203, 209], "never": 102, "new": [8, 20, 42, 49, 62, 69, 77, 85, 93, 99, 118, 126, 133, 142, 160, 167, 174, 181, 189, 195, 202, 209, 211, 213, 220, 231], "new_kei": 231, "newer": 232, "next": [0, 153, 154, 188, 196, 200, 201, 204, 209, 211, 215, 232], "next_32": [153, 154, 204, 211], "next_64": [153, 154, 204, 211], "next_doubl": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 139, 140, 146, 147, 151, 152, 153, 154, 157, 158, 164, 165, 171, 172, 178, 179, 204, 210, 211, 215], "next_gen": 231, "next_raw": [153, 154, 204, 211, 215], "next_uint32": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 139, 140, 146, 147, 151, 152, 157, 158, 164, 165, 171, 172, 178, 179, 210, 215], "next_uint64": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 139, 140, 146, 147, 151, 152, 157, 158, 164, 165, 171, 172, 178, 179, 210, 215], "next_valu": 211, "nextgen": 216, "nishimura": [49, 190, 191], "njsf": 211, "node4": 189, "nois": 209, "non": [0, 1, 114, 192, 193, 194, 195, 200, 202, 205, 206, 207, 208, 220, 222, 227, 235], "noncryptograph": 187, "none": [0, 1, 2, 3, 9, 10, 14, 15, 21, 22, 26, 27, 31, 32, 36, 37, 43, 44, 50, 51, 55, 56, 63, 64, 70, 71, 78, 79, 86, 87, 89, 94, 95, 100, 101, 106, 107, 111, 112, 114, 119, 120, 127, 128, 134, 135, 137, 138, 143, 144, 148, 149, 153, 154, 155, 161, 162, 168, 169, 175, 176, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 214, 218, 219, 220, 221, 222, 224, 225, 229, 235], "nonlinear": [197, 203], "nonneg": 220, "nopython": 215, "normal": [209, 211, 213, 215, 218, 219, 220, 222, 225, 229, 230, 232], "normals_zig": 215, "normalsj": 215, "note": [0, 1, 2, 3, 4, 7, 9, 10, 14, 15, 21, 26, 31, 36, 41, 43, 49, 50, 55, 58, 61, 62, 63, 66, 69, 70, 73, 76, 77, 78, 81, 85, 86, 89, 92, 94, 95, 99, 102, 103, 106, 111, 114, 119, 122, 125, 127, 128, 133, 134, 137, 138, 141, 143, 144, 148, 153, 154, 155, 159, 161, 166, 168, 173, 175, 180, 182, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 218, 219, 220, 222, 223, 224, 225, 231], "notebook": [204, 230], "notic": 211, "notimplementederror": [153, 154, 156, 204, 209, 211, 213], "novel": 216, "now": [209, 211, 213, 234], "np": [137, 198, 204, 209, 211, 215, 218, 219, 221, 229, 231, 235], "nsacyb": 200, "ntu": 185, "nuclear": 189, "null": 204, "num_stream": [197, 198, 231, 235], "numba": [153, 186, 188, 204, 209, 227, 230], "numbajsf": 211, "number": [0, 1, 2, 3, 4, 7, 8, 9, 10, 14, 15, 19, 20, 21, 22, 26, 27, 31, 32, 36, 37, 41, 42, 43, 44, 48, 49, 50, 51, 55, 56, 58, 61, 62, 63, 66, 69, 70, 71, 73, 76, 77, 78, 79, 81, 85, 86, 87, 89, 92, 93, 94, 95, 106, 111, 114, 117, 118, 119, 120, 122, 125, 126, 127, 128, 130, 133, 134, 135, 137, 138, 141, 142, 143, 144, 148, 149, 155, 159, 160, 161, 162, 166, 167, 168, 169, 173, 174, 175, 176, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 214, 215, 216, 221, 224, 227, 229, 235], "numer": [222, 225], "numpi": [0, 1, 2, 3, 114, 137, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 224, 225, 226, 227, 228, 229, 231, 232, 234, 235], "numpy_se": [190, 193, 195, 198], "ny": [195, 202], "nz_bit": 114, "o": [107, 112, 188, 192, 193, 194, 195, 197, 198, 202, 220], "object": [0, 1, 2, 3, 185, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 205, 206, 207, 208, 215, 229, 235], "observ": 137, "occur": [4, 58, 66, 73, 81, 89, 122, 138, 196, 209, 231], "odd": [114, 137, 188, 189, 198, 201, 231], "odel": [222, 225], "offici": [200, 209, 211, 213], "offset": [0, 200], "onc": [103, 137], "one": [4, 58, 66, 73, 81, 89, 122, 137, 138, 154, 198, 204, 209, 211, 215, 220, 227, 231, 232], "ones": [216, 219], "onli": [0, 1, 2, 89, 114, 137, 138, 185, 186, 187, 189, 190, 191, 195, 196, 199, 200, 202, 203, 205, 206, 207, 208, 209, 220, 229, 235], "onlin": [3, 49, 188, 189, 194, 196, 206], "opaqu": 215, "open": [3, 209, 221], "openjdk": 189, "openrand": [203, 209], "oper": [196, 201, 203, 209, 211, 213], "option": [15, 107, 112, 188, 189, 198, 201, 215, 227, 230], "order": 211, "org": [0, 137, 185, 188, 192, 193, 194, 197, 198, 201, 203, 204, 211, 218, 219, 233, 235], "orient": [2, 220], "origin": [2, 49, 187, 189, 190, 193, 199, 203, 205, 206, 207, 208, 209, 232], "other": [2, 22, 51, 56, 101, 120, 187, 190, 191, 196, 198, 199, 209, 215, 220, 224, 227, 230, 235], "otherwis": [218, 220, 221, 222, 225], "oubl": 211, "out": [9, 10, 14, 15, 21, 22, 26, 27, 31, 32, 36, 37, 43, 44, 50, 51, 55, 56, 63, 64, 70, 78, 79, 86, 87, 94, 95, 100, 106, 107, 111, 112, 119, 120, 127, 128, 134, 135, 143, 144, 148, 149, 155, 161, 162, 168, 169, 175, 176, 182, 183, 204, 209, 211, 215, 218, 219, 220, 221, 224, 229], "outcom": 211, "output": [0, 1, 2, 4, 9, 14, 21, 26, 31, 36, 43, 50, 55, 58, 63, 66, 70, 73, 78, 81, 86, 89, 94, 100, 106, 111, 119, 122, 127, 134, 138, 143, 148, 155, 161, 168, 175, 182, 185, 186, 187, 189, 190, 191, 193, 199, 200, 204, 205, 206, 207, 208, 209, 211, 212, 218, 219, 220, 221, 222, 224, 225, 227, 229, 231, 232, 235], "outsid": [89, 138], "over": 221, "overal": 232, "overhead": 229, "overlap": [0, 1, 192, 193, 194, 195, 197, 200, 202, 205, 206, 207, 208, 231], "overrid": 201, "overton": 197, "p": [3, 185, 187, 188, 211, 220, 222, 225], "p3cipher": 185, "pack": [219, 220, 225], "packag": 227, "page": 227, "panneton": [49, 190], "paper": [1, 209], "papouli": 220, "parallel": [1, 3, 99, 185, 197, 203, 209], "paramet": [0, 1, 2, 3, 4, 7, 8, 9, 10, 14, 19, 20, 21, 22, 26, 27, 31, 32, 36, 37, 41, 42, 43, 44, 48, 49, 50, 51, 55, 56, 58, 61, 62, 63, 64, 66, 69, 70, 71, 73, 76, 77, 78, 79, 81, 85, 86, 87, 89, 92, 93, 94, 95, 99, 100, 101, 106, 111, 114, 117, 118, 119, 120, 122, 125, 126, 127, 128, 130, 133, 134, 135, 137, 138, 141, 142, 143, 144, 148, 149, 153, 154, 155, 159, 160, 161, 162, 166, 167, 168, 169, 173, 174, 175, 176, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 214, 218, 219, 220, 221, 222, 224, 225], "parameter": [187, 218, 219], "parametr": 209, "particular": [4, 58, 66, 73, 81, 89, 122, 138, 212, 231], "pass": [3, 44, 101, 107, 112, 153, 154, 156, 196, 197, 198, 204, 211, 214, 215, 223, 227, 231, 235], "path": 209, "pattern": [89, 138, 220, 231], "paus": [196, 209], "pcg": [188, 192, 193, 194, 198, 209, 211, 214, 227, 231], "pcg32": [186, 209, 227, 230, 231], "pcg4": 230, "pcg64": [64, 186, 188, 192, 194, 209, 211, 213, 214, 227, 230, 231, 232, 235], "pcg64dxsm": [194, 209, 232, 235], "pcg64dxsm\u00b2": 235, "pcg64\u2075": 235, "pcg_default_multipli": 211, "pdf": [185, 200], "peak": 220, "per": [211, 229], "percentag": 232, "perform": [1, 9, 14, 21, 26, 31, 36, 43, 49, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 119, 127, 134, 143, 148, 155, 161, 168, 175, 182, 195, 196, 200, 202, 204, 209, 215, 225, 227, 231, 235], "period": [0, 1, 61, 62, 69, 188, 192, 193, 195, 198, 200, 202, 205, 206, 207, 208, 209, 227, 229, 231], "perman": 186, "permut": [137, 188, 209, 230], "phi": [61, 62, 69, 76, 77, 85, 133, 209, 231], "philox": [0, 186, 200, 202, 209, 227, 230, 231, 232], "philoxnxw": 195, "philox\u2075": 235, "pickl": 209, "pierr": [2, 49, 190, 199], "place": [209, 211, 213, 221], "plan": [213, 227], "platform": 196, "plot": 220, "plt": 220, "plu": [2, 190, 191, 199], "plusplu": 205, "point": [220, 225], "pointer": [0, 1, 2, 3, 5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 139, 140, 146, 147, 151, 152, 153, 154, 157, 158, 164, 165, 171, 172, 178, 179, 185, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 210, 211, 215], "polynomi": [2, 49, 190, 199], "pool": [0, 1, 212], "popular": 220, "portion": 216, "posit": [0, 1, 2, 89, 128, 137, 138, 190, 191, 195, 199, 200, 201, 202, 218, 219, 220, 225], "possibl": [0, 1, 2, 103, 114, 190, 191, 195, 196, 199, 200, 202, 205, 206, 207, 208, 211, 213, 214, 216, 227], "post": [188, 198, 209], "pp": [2, 49, 185, 189, 190, 199, 206], "ppam": 203, "pracrand": [3, 198], "practic": [3, 114, 196, 198, 224, 235], "practrand": [198, 209, 235], "pre": [4, 7, 41, 66, 73, 76, 81, 92, 122, 125, 137, 141, 159, 166, 173, 180, 194, 201, 209, 220, 225, 231], "precis": [209, 225], "precomput": 49, "predecessor": 216, "predefin": 188, "prefer": [188, 205, 209, 213], "prepar": 213, "present": [213, 214, 232], "prevent": 209, "previou": [209, 230], "previous": 114, "primari": 214, "print": [137, 211, 215, 229], "prng": [0, 1, 3, 7, 9, 10, 11, 14, 15, 16, 19, 21, 22, 23, 26, 27, 28, 31, 32, 33, 36, 37, 38, 41, 43, 44, 45, 48, 50, 51, 52, 55, 56, 57, 63, 64, 65, 70, 72, 78, 79, 80, 86, 87, 88, 92, 94, 95, 96, 102, 106, 107, 108, 111, 112, 113, 117, 119, 120, 121, 125, 127, 128, 129, 130, 134, 135, 136, 137, 141, 143, 144, 145, 148, 149, 150, 153, 154, 155, 159, 161, 162, 163, 166, 168, 169, 170, 173, 175, 176, 177, 180, 182, 183, 184, 185, 187, 189, 192, 195, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 227, 229, 232], "probabl": [209, 220, 231], "problem": 3, "procedur": [222, 225], "proceed": [195, 202], "process": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 51, 56, 79, 87, 95, 120, 128, 135, 144, 149, 162, 169, 176, 183, 185, 187, 189, 190, 191, 192, 195, 197, 198, 199, 200, 202, 203, 205, 206, 207, 208, 212, 220, 231], "processor": 196, "produc": [0, 1, 2, 3, 5, 6, 9, 12, 13, 14, 17, 18, 21, 24, 25, 26, 29, 30, 31, 34, 35, 36, 39, 40, 43, 44, 46, 47, 49, 50, 53, 54, 55, 59, 60, 63, 67, 68, 70, 74, 75, 78, 82, 83, 86, 90, 91, 94, 97, 98, 104, 105, 106, 109, 110, 111, 114, 115, 116, 119, 123, 124, 127, 131, 132, 134, 139, 140, 143, 146, 147, 148, 151, 152, 155, 157, 158, 161, 164, 165, 168, 171, 172, 175, 178, 179, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 215, 219, 224, 227, 229, 230, 231, 232, 235], "product": [218, 222, 225], "project": [216, 227], "proof": 209, "propag": 196, "proper": 220, "properti": [1, 153, 154, 188, 193, 194, 196, 204, 211, 220], "propos": [189, 209], "prototyp": 215, "provid": [0, 1, 2, 3, 10, 15, 71, 95, 99, 102, 144, 153, 154, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 211, 212, 214, 215, 219, 221, 230, 234], "pseudo": [0, 1, 2, 3, 9, 10, 14, 15, 21, 22, 26, 27, 31, 32, 36, 37, 43, 44, 50, 51, 55, 56, 63, 70, 71, 78, 79, 86, 87, 94, 95, 106, 111, 119, 120, 127, 128, 134, 135, 137, 143, 144, 148, 149, 155, 161, 162, 168, 169, 175, 176, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 199, 200, 201, 202, 203, 205, 206, 207, 208, 211, 213, 222, 224, 225, 227, 231], "pseudorandom": [2, 49, 199, 203], "psuedo": 210, "pull": [107, 112, 197, 198, 209, 216], "pure": [211, 215], "put": 216, "py_ssize_t": 215, "pycapsul": [196, 215], "pycapsule_getpoint": 215, "pycapsule_isvalid": 215, "pyerr_occur": 196, "pyplot": 220, "python": [0, 1, 2, 3, 10, 15, 95, 144, 185, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 213, 227, 229, 230], "python_pcg": 211, "pythonpcg64": 211, "pyx": [211, 215], "q": [185, 187, 211], "quad": 197, "qualifi": 209, "qualiti": [3, 185, 197, 205, 207, 208, 209, 227], "quasi": [2, 199], "quickli": 196, "r": [2, 187, 189, 190, 199, 203, 211, 220, 222, 225], "r1": 219, "r2": [215, 219], "rai": 200, "rais": [10, 15, 22, 27, 32, 37, 44, 51, 56, 64, 79, 87, 95, 100, 101, 107, 112, 120, 128, 135, 144, 149, 153, 154, 156, 162, 169, 176, 183, 196, 204, 209, 211, 212, 213, 215, 219], "raisinglock": 196, "rand": 187, "randint": [209, 213], "random": [0, 1, 2, 3, 4, 7, 8, 9, 10, 14, 15, 19, 20, 21, 22, 26, 27, 31, 32, 36, 37, 41, 42, 43, 44, 48, 49, 50, 51, 55, 56, 58, 61, 62, 63, 66, 69, 70, 71, 73, 76, 77, 78, 79, 81, 85, 86, 87, 89, 92, 93, 94, 95, 100, 106, 111, 117, 118, 119, 120, 122, 125, 126, 127, 128, 133, 134, 135, 137, 138, 141, 142, 143, 144, 148, 149, 153, 154, 155, 159, 160, 161, 162, 166, 167, 168, 169, 173, 174, 175, 176, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 222, 224, 225, 229, 230, 232, 233, 235], "random123": [209, 227], "random_entropi": [2, 190, 199, 212, 227, 230, 231], "random_gauss_zig": 215, "random_integ": [209, 213], "random_raw": [196, 197, 198, 209, 211], "random_sampl": [209, 213], "random_st": 229, "random_uinteg": 209, "random_valu": 215, "randomgen": [0, 1, 2, 3, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 226, 228, 229, 231, 234, 235], "randomgener": [209, 213], "randomli": 137, "randomst": [209, 213, 216, 227, 228, 232], "rang": [0, 1, 2, 10, 15, 22, 27, 32, 37, 44, 51, 56, 64, 79, 87, 89, 95, 107, 112, 120, 128, 130, 135, 138, 144, 149, 162, 169, 176, 183, 185, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 205, 206, 207, 208, 211, 215, 229, 230, 231, 235], "rank": 225, "rapidli": 215, "rare": 209, "rather": [185, 193], "ratio": [69, 76, 77, 85, 133, 231], "raw": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 106, 111, 119, 127, 134, 143, 148, 153, 154, 155, 161, 168, 175, 182, 211, 215, 224], "rdrand": [186, 209, 227, 230, 231, 232], "re": [10, 15, 27, 32, 37, 44, 64, 71, 79, 87, 95, 107, 112, 128, 135, 144, 149, 162, 169, 176, 183, 218, 219], "read": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 51, 56, 79, 87, 95, 120, 128, 135, 137, 144, 149, 162, 169, 176, 183, 185, 187, 189, 190, 191, 192, 195, 199, 200, 201, 202, 203, 205, 206, 207, 208, 211, 212, 227], "real": [218, 219], "realist": 204, "realli": 3, "reason": [4, 58, 66, 73, 81, 89, 122, 138, 229, 231, 232, 235], "receiv": 213, "recent": 227, "recogn": 209, "recommend": [196, 198, 209, 227, 235], "recurr": [2, 190, 199], "redirect": 209, "reduc": [1, 200], "refactor": 209, "refer": [0, 1, 2, 3, 49, 137, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 218, 219, 220, 222, 225, 227], "refil": 209, "reflect": 213, "regard": 201, "regener": 137, "regist": 209, "reject": [4, 58, 66, 73, 81, 89, 114, 122, 138, 231], "rel": [114, 219, 232, 235], "relat": [0, 1, 10, 15, 95, 128, 144, 185, 195, 200, 202, 205, 207, 208, 218, 219], "relationship": [4, 58, 66, 73, 81, 89, 122, 138, 231], "releas": [186, 209, 230], "relev": 235, "reli": [196, 209], "remain": [103, 201], "remov": [205, 209, 213, 215, 216, 226, 228, 234], "renam": [209, 213], "repeat": [137, 229, 231], "repetit": 201, "replac": [114, 193, 201, 209, 213], "replic": 209, "report": [196, 235], "repositori": [188, 194], "repres": [188, 192, 193, 194, 220], "represent": [10, 15, 95, 128, 144], "reproduc": [4, 7, 41, 66, 71, 73, 76, 81, 92, 122, 125, 141, 159, 166, 173, 180, 196, 212, 227, 229], "request": 216, "requir": [4, 7, 11, 16, 23, 28, 33, 38, 41, 45, 52, 57, 58, 65, 66, 72, 73, 76, 80, 81, 88, 89, 92, 96, 102, 108, 113, 121, 122, 125, 129, 136, 137, 138, 141, 145, 150, 159, 163, 166, 170, 173, 177, 180, 184, 201, 209, 215, 223, 229, 231, 232, 235], "rescal": 222, "research": 185, "resembl": 235, "reset": [4, 7, 41, 66, 73, 76, 81, 89, 92, 103, 122, 125, 138, 141, 159, 166, 173, 180, 209, 231], "reshap": 231, "restor": [102, 209], "result": [196, 204, 209, 221, 227, 231], "retain": 227, "retri": [100, 196, 209], "retriev": [0, 189, 197], "return": [4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 184, 187, 188, 193, 204, 209, 210, 211, 212, 213, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 231], "revamp": 216, "rg": [0, 1, 3, 185, 187, 189, 192, 193, 194, 195, 196, 200, 201, 202, 203, 205, 206, 207, 208, 214, 227, 229, 235], "rho": 219, "right": 219, "rng": [2, 4, 7, 10, 15, 41, 58, 61, 66, 73, 76, 81, 89, 92, 95, 122, 125, 137, 138, 141, 144, 159, 166, 173, 180, 188, 189, 192, 193, 194, 199, 201, 206, 209, 211, 213, 215, 227, 231], "rng_engin": 198, "rngman": 189, "robust": [219, 220, 225], "romu": [186, 209, 227, 232, 235], "ron": [195, 202], "rot": 211, "rotat": [187, 193, 203, 204, 205, 211, 227, 230], "rotate64": 211, "rotate64_sig": 211, "rotl": 187, "rotr_64": 211, "roughli": 220, "round": [1, 200, 209, 232, 235], "rq": 219, "rr": [188, 193, 195, 211], "rsa": 212, "rue": 201, "rule": 137, "run": [0, 1, 10, 15, 95, 144, 195, 196, 198, 200, 201, 202, 204, 211, 229, 232], "runtimeerror": [100, 196, 212], "runtimerror": 196, "rv": 204, "s_": [188, 193, 194, 211], "sai": 231, "said": 231, "saito": [2, 199, 206], "salmon": [195, 202], "salsa20": 1, "same": [0, 1, 2, 3, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 221, 227, 229, 231, 235], "sampl": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 114, 119, 127, 134, 143, 148, 155, 161, 168, 175, 182, 209, 212, 218, 219, 220, 221, 222, 224, 225, 235], "sampler": 114, "satisfi": [201, 229], "save": 211, "sc11": [195, 202], "scalar": [212, 213, 218, 219, 221], "scale": [222, 225, 229, 232], "scheme": [195, 202], "sci": 49, "scienc": 203, "scrambl": 206, "search": 227, "sebastiano": [205, 206, 207, 208], "second": [0, 1, 188, 189, 193, 194, 195, 196, 200, 202, 209, 231, 235], "secur": [1, 196, 200], "see": [0, 1, 9, 10, 14, 15, 21, 26, 31, 36, 43, 44, 50, 55, 63, 64, 70, 78, 86, 94, 95, 106, 111, 119, 127, 128, 134, 143, 144, 148, 153, 154, 155, 161, 168, 169, 175, 182, 185, 187, 188, 192, 195, 196, 200, 202, 204, 205, 206, 207, 208, 209, 211, 220, 227, 230, 235], "seed": [137, 186, 209, 211, 212, 227, 229, 231], "seed_seq": [0, 1, 2, 3, 114, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 231, 235], "seed_sequ": [209, 213], "seed_siz": [187, 211, 235], "seedsequ": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 44, 51, 56, 71, 79, 87, 95, 107, 112, 114, 120, 128, 135, 137, 144, 149, 162, 169, 176, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 213, 227, 232, 234, 235], "seedseuqnc": 194, "seen": 220, "segment": [0, 1, 2, 189, 190, 195, 199, 200, 202, 205, 206, 207, 208], "select": [137, 187, 201, 203, 219, 220, 225], "self": [4, 7, 19, 41, 48, 58, 61, 66, 73, 76, 81, 89, 92, 117, 122, 125, 130, 138, 141, 159, 166, 173, 180, 188, 194, 211, 229], "semi": [218, 219], "semidefinit": [219, 220, 225], "sens": 229, "sensit": 235, "sent": 209, "separ": 235, "septemb": 189, "sequenc": [0, 1, 2, 3, 22, 49, 51, 56, 71, 120, 137, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 227, 230, 235], "servic": 212, "set": [0, 1, 3, 10, 11, 15, 16, 23, 28, 33, 38, 45, 52, 57, 65, 71, 72, 80, 88, 95, 96, 102, 103, 108, 113, 114, 121, 128, 129, 136, 144, 145, 150, 153, 154, 156, 163, 170, 177, 184, 185, 186, 189, 190, 193, 195, 196, 198, 200, 201, 202, 203, 204, 209, 211, 212, 215, 219, 223, 225, 231, 235], "seta": [2, 190, 199], "settabl": 189, "setter": 211, "setup": [209, 215], "setuptool": 209, "sfc": [198, 209], "sfc64": [186, 209, 227, 230, 231, 232, 235], "sfc64\u2075": 235, "sfmt": [186, 209, 227, 230, 231, 232, 235], "sfmt\u2074": 235, "sg": 185, "shape": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 119, 127, 134, 143, 148, 155, 161, 168, 175, 182, 209, 212, 218, 219, 220, 221, 222, 224, 225], "share": [0, 1, 2, 3, 71, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 205, 206, 207, 208, 214, 227, 235], "shaw": [195, 202], "shift": [205, 209, 227, 230], "shootout": [189, 205, 206, 207, 208], "shor": 200, "short": [196, 235], "should": [0, 1, 2, 3, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 224, 226, 228, 235], "show": [0, 200, 211, 215, 220, 229, 231], "shutdown": 229, "sig": 211, "signatur": [153, 188, 204], "signature_or_funct": 211, "signific": [188, 194], "silent": 204, "sim": 219, "simd": 209, "similar": [0, 1, 2, 3, 185, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 205, 206, 207, 208, 230], "similarli": 209, "simon": 200, "simpl": [185, 188, 189, 192, 193, 194, 205, 206, 207, 208, 209, 211, 224], "simpler": [114, 211], "simplest": 215, "simpli": 235, "simplifi": 209, "simul": [4, 58, 66, 73, 81, 89, 122, 138, 191, 203, 222, 230, 231], "sinc": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 119, 127, 134, 143, 148, 155, 161, 168, 175, 182, 189, 196, 209, 211, 224, 227, 230, 231, 232, 234, 235], "singl": [0, 1, 2, 4, 9, 14, 21, 26, 31, 36, 43, 50, 55, 58, 63, 66, 70, 73, 78, 81, 86, 89, 94, 100, 106, 111, 119, 122, 127, 134, 138, 143, 148, 153, 154, 155, 161, 168, 175, 182, 185, 187, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 204, 205, 206, 207, 208, 211, 212, 218, 219, 220, 221, 222, 224, 225, 229, 231, 232, 235], "singular": [219, 220, 222, 225], "site": 196, "size": [9, 14, 21, 26, 31, 36, 37, 43, 50, 55, 58, 61, 62, 63, 66, 69, 70, 73, 76, 77, 78, 81, 85, 86, 89, 94, 100, 106, 111, 119, 127, 133, 134, 138, 143, 148, 155, 161, 168, 175, 182, 187, 188, 196, 205, 207, 208, 209, 211, 212, 218, 219, 220, 221, 222, 224, 225, 231, 235], "skip": 209, "skylak": 196, "slow": [114, 204, 211, 227, 230], "slower": [196, 197, 211, 219, 220, 225, 232], "slowest": [219, 220, 225], "small": [0, 1, 2, 114, 190, 191, 195, 197, 198, 199, 200, 202, 203, 205, 206, 207, 208, 209, 214, 215], "smaller": [1, 192, 206, 218], "smallprng": 187, "smith": 200, "so": [0, 1, 2, 3, 4, 58, 66, 73, 81, 89, 99, 114, 122, 138, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 212, 215, 216, 218, 220, 225, 227, 229, 231, 235], "societi": [218, 219], "softwar": [185, 189, 196, 206], "some": [196, 205, 209, 211, 214, 216, 222, 225, 227, 231, 235], "somewhat": 197, "sourc": [201, 211, 212, 214, 230], "sourceforg": [3, 198], "space": [2, 187, 188, 190, 192, 193, 194, 199, 220], "spars": 231, "spawn": [3, 188, 197, 201, 203, 231, 232, 235], "special": 196, "specif": [196, 209, 214, 231, 232, 235], "specifi": [209, 219, 220, 225], "speck128": [186, 200, 227, 230, 231, 232, 235], "spectral": [188, 193, 194], "spectrum": 215, "speed": [205, 209, 230], "spheric": 220, "sphinx": 209, "split": [2, 189, 190, 199, 205, 206, 207, 208], "splitmix64": [0, 1, 185, 200, 205, 206, 207, 208], "spread": 220, "springer": [2, 185, 199, 203], "sqrt": [215, 231], "squar": [3, 186, 209, 220, 227], "square_method": 201, "ss": [3, 137, 188, 201, 203], "sse2": 227, "st": [211, 215], "stabil": 228, "stabl": [227, 235], "stafford": 189, "standard": [0, 1, 189, 209, 211, 215, 218, 219, 220, 222, 225, 227, 235], "standard_exponenti": 209, "standard_gamma": 209, "standard_norm": [0, 1, 3, 185, 187, 189, 195, 196, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 215, 229], "standard_wishart": [209, 225], "start": [196, 198, 201, 211], "stat": [222, 225], "state": [4, 5, 6, 7, 8, 10, 12, 13, 15, 17, 18, 19, 20, 24, 25, 29, 30, 34, 35, 39, 40, 41, 42, 44, 46, 47, 48, 49, 53, 54, 58, 59, 60, 61, 62, 66, 67, 68, 69, 73, 74, 75, 76, 77, 81, 82, 83, 85, 89, 90, 91, 92, 93, 95, 97, 98, 104, 105, 107, 109, 110, 112, 115, 116, 117, 118, 122, 123, 124, 125, 126, 130, 131, 132, 133, 138, 139, 140, 141, 142, 144, 146, 147, 151, 152, 153, 154, 157, 158, 159, 160, 164, 165, 166, 167, 171, 172, 173, 174, 178, 179, 180, 181, 186, 209, 210, 211, 212, 215, 221, 227, 229, 235], "state_addr": 215, "state_address": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 139, 140, 146, 147, 151, 152, 157, 158, 164, 165, 171, 172, 178, 179, 210, 211, 215], "state_gett": [153, 154, 156, 204, 211], "state_sett": [153, 154, 156, 204, 211], "stateless": [99, 196], "statist": [3, 188, 189, 192, 193, 194, 198, 200, 205, 206, 207, 208, 222, 225, 227], "statu": [103, 196], "std": [211, 229], "stdlib": [2, 190, 191, 199], "steel": 189, "stefan": 200, "step": [0, 1, 4, 49, 58, 61, 62, 66, 69, 73, 76, 77, 81, 85, 89, 122, 130, 133, 138, 188, 192, 193, 194, 195, 200, 202, 209, 211, 227, 229, 231, 232], "still": [196, 215], "stochast": 220, "storag": [195, 202], "store": [89, 138, 195, 202, 211, 231], "stork": 220, "strategi": 231, "stream": [0, 1, 2, 3, 49, 114, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 227, 231, 232, 235], "struct": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 139, 140, 146, 147, 151, 152, 157, 158, 164, 165, 171, 172, 178, 179, 210, 211, 215], "structur": [188, 196, 209, 211, 215], "studi": 235, "subject": 231, "submit": 229, "subsampl": 137, "subsequ": [207, 208, 211], "substanti": [216, 227, 229], "subtract": 203, "succe": 227, "succeed": [103, 196, 216], "success": 196, "successor": 205, "suggest": 189, "suit": 187, "suitabl": [185, 230, 231], "sum": [3, 189], "summer": [49, 190], "suppli": [209, 227], "support": [0, 1, 2, 3, 185, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 205, 206, 207, 208, 209, 211, 213, 216, 222, 229, 230, 231], "svd": [219, 220, 225], "swap": 209, "switch": 209, "symmetr": [219, 220, 225], "sync": 209, "synchron": 209, "system": [71, 187, 188, 193, 194, 209, 227, 230, 231], "t": [191, 219, 220, 225], "tabl": [3, 188, 191, 232, 235], "take": [89, 138, 153, 154, 196, 204, 211], "taken": [213, 232, 235], "takuji": [49, 190], "tb\u00b9": 235, "te": 235, "temp": 211, "templat": 235, "test": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 102, 106, 111, 119, 127, 134, 143, 148, 155, 161, 168, 175, 182, 186, 209, 215, 227, 228, 230], "text": 196, "tf": 235, "than": [4, 58, 66, 73, 81, 89, 122, 138, 185, 193, 196, 211, 218, 219, 220, 225, 230, 231], "thei": [196, 213], "theme": 209, "theoret": 227, "theori": [222, 225], "thi": [0, 1, 2, 3, 4, 7, 9, 10, 14, 15, 21, 26, 27, 31, 32, 36, 37, 41, 43, 44, 50, 55, 58, 63, 64, 66, 70, 71, 73, 76, 78, 79, 81, 86, 87, 89, 92, 94, 95, 99, 102, 103, 106, 107, 111, 112, 114, 119, 122, 125, 127, 128, 134, 135, 137, 138, 141, 143, 144, 148, 149, 154, 155, 159, 161, 162, 166, 168, 169, 173, 175, 176, 180, 182, 183, 185, 188, 189, 190, 193, 194, 195, 196, 199, 200, 201, 204, 205, 206, 207, 208, 209, 211, 212, 215, 216, 219, 220, 223, 224, 225, 227, 229, 231, 235], "those": 235, "thread": [0, 1, 2, 3, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 205, 206, 207, 208, 229], "threadpoolexecutor": 229, "three": [187, 198, 215, 221, 235], "threefri": [0, 186, 195, 200, 209, 213, 227, 230, 231, 232, 235], "threefrynxw": 202, "through": [0, 1, 10, 15, 95, 128, 144, 156, 195, 200, 202, 211, 215, 223], "time": [0, 1, 2, 3, 7, 8, 10, 15, 19, 20, 22, 27, 32, 37, 41, 42, 48, 49, 51, 56, 61, 62, 69, 76, 77, 79, 85, 87, 92, 93, 95, 99, 117, 118, 120, 125, 126, 128, 133, 135, 141, 142, 144, 149, 159, 160, 162, 166, 167, 169, 173, 174, 176, 180, 181, 183, 185, 187, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 202, 205, 206, 207, 208, 209, 211, 212, 213, 227, 229, 231], "timeit": [211, 215, 229], "times2": 235, "tini": 197, "togeth": 220, "tol": [219, 220, 225], "toler": [219, 220, 225], "tolist": 231, "too": [3, 209, 227], "tool": 215, "trail": 222, "transact": 191, "transform": [190, 193, 195, 201, 205, 207, 208, 211, 220, 225, 235], "translat": [201, 203, 211], "treat": 209, "treatman": 200, "trio": [197, 232, 235], "trivari": 219, "trivial": 223, "true": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 89, 94, 100, 103, 106, 111, 119, 127, 134, 137, 138, 143, 148, 155, 161, 168, 175, 182, 188, 190, 193, 195, 196, 198, 203, 205, 211, 215, 220, 222], "truncat": 224, "trust": 193, "try": [79, 87, 192], "tupl": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 139, 140, 146, 147, 151, 152, 157, 158, 164, 165, 171, 172, 178, 179, 231], "twice": 220, "twister": [209, 230, 232, 235], "two": [0, 4, 10, 15, 58, 66, 73, 81, 89, 95, 122, 128, 138, 144, 189, 209, 211, 218, 219, 220, 221, 225, 231, 235], "txt": 198, "tych": [186, 209, 227], "tyche": 203, "type": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 155, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225], "typedef": 215, "typeerror": 101, "typic": 1, "u": [49, 196], "uhlig": [222, 225], "uint": 211, "uint32": [1, 153, 187, 210, 211, 232], "uint32_t": 215, "uint64": [0, 1, 9, 10, 14, 15, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 95, 100, 106, 111, 119, 127, 128, 134, 137, 143, 144, 148, 153, 155, 161, 168, 175, 182, 187, 188, 195, 200, 202, 204, 209, 210, 211, 231, 232], "uint64_t": 215, "uint8": [0, 211, 231], "uinteg": [211, 213, 230], "unavail": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 51, 56, 79, 87, 95, 120, 128, 135, 144, 149, 162, 169, 176, 183, 185, 187, 189, 190, 191, 192, 195, 199, 200, 202, 205, 206, 207, 208], "undefin": 220, "under": [211, 229], "underli": [4, 9, 14, 21, 26, 31, 36, 43, 50, 55, 58, 63, 66, 70, 73, 78, 81, 86, 89, 94, 100, 106, 111, 119, 122, 127, 134, 138, 143, 148, 153, 154, 155, 161, 168, 175, 182, 193, 211, 213, 224, 229, 231], "understand": 211, "unif": 221, "uniform": [191, 209, 213, 215, 221, 232], "uniformli": 114, "unimi": [189, 205, 206, 207, 208], "uniqu": [137, 196, 209, 231], "univari": 220, "univers": 231, "unix": [212, 230], "unless": [103, 137, 221, 232], "unlik": [0, 1, 10, 15, 95, 144, 195, 200, 202, 209], "unpack": 215, "unpickl": [102, 209], "unpredict": [107, 112, 197, 198], "unqiu": 137, "unsid": 187, "unsign": [0, 1, 2, 3, 9, 14, 21, 22, 26, 31, 36, 43, 50, 51, 55, 56, 63, 70, 78, 86, 94, 106, 111, 119, 120, 127, 134, 143, 148, 155, 161, 168, 175, 182, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 212, 215, 224, 230, 231], "unspecifi": 198, "untest": 200, "up": [196, 209, 211, 215], "updat": [3, 4, 58, 66, 73, 81, 89, 122, 138, 188, 189, 194, 209, 211, 231], "upper": [32, 185, 188, 211, 225, 235], "upstream": 209, "urandom": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 51, 56, 79, 87, 95, 120, 128, 135, 137, 144, 149, 162, 169, 176, 183, 185, 187, 189, 190, 191, 192, 195, 199, 200, 201, 202, 203, 205, 206, 207, 208, 212, 230], "us": [0, 1, 2, 3, 4, 9, 10, 14, 15, 21, 22, 26, 27, 31, 32, 36, 37, 43, 44, 49, 50, 51, 55, 56, 58, 63, 66, 70, 71, 73, 78, 79, 81, 84, 86, 87, 89, 94, 95, 99, 100, 101, 102, 106, 111, 114, 119, 120, 122, 127, 128, 134, 135, 137, 138, 143, 144, 148, 149, 153, 154, 155, 161, 162, 168, 169, 175, 176, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 222, 224, 225, 226, 227, 228, 229, 230, 232, 234, 235], "user": [0, 1, 188, 196, 209, 211, 215, 227], "userbitgener": [204, 209, 211, 215, 227, 230], "usual": [1, 211, 215], "util": [196, 215], "v": [222, 225], "v1": [213, 227], "v2": 227, "valid": [209, 211], "valu": [0, 1, 2, 3, 4, 9, 10, 14, 15, 21, 22, 26, 27, 31, 32, 36, 37, 43, 44, 50, 51, 55, 56, 58, 63, 64, 66, 70, 73, 78, 79, 81, 86, 87, 89, 94, 95, 100, 101, 102, 106, 107, 111, 112, 114, 119, 120, 122, 127, 128, 134, 135, 137, 138, 143, 144, 148, 149, 153, 154, 155, 161, 162, 168, 169, 175, 176, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 218, 219, 220, 221, 222, 224, 225, 229, 230, 231, 232, 235], "valueerror": [10, 15, 22, 27, 32, 37, 44, 51, 56, 64, 79, 87, 95, 107, 112, 120, 128, 135, 144, 149, 162, 169, 176, 183, 211, 215], "var": 215, "vari": [0, 200, 220, 231], "variabl": [58, 66, 73, 81, 89, 138, 218, 219, 220], "varianc": [201, 218, 220], "variant": [1, 193, 194, 195, 197, 200, 201, 202, 209, 211, 214, 227, 230, 232, 235], "variat": [153, 154, 188, 193, 194, 209, 214, 215, 222, 225], "varieti": 227, "vector": [0, 1, 2, 3, 185, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 203, 205, 206, 207, 208], "vendor": [209, 234], "veri": [114, 209, 232], "verifi": [49, 103], "verlag": 185, "version": [49, 195, 202, 205, 209, 211, 227, 230, 234, 235], "view": [211, 231], "vigna": [205, 206, 207, 208], "virtual": 213, "void": [153, 154, 204, 210, 211, 215], "void_p": 211, "voidp": 204, "vol": [49, 190, 203], "w": [89, 92, 93, 138, 141, 142, 195, 198, 202, 232], "wa": [185, 196, 209, 216, 227, 235], "wai": [193, 195, 215, 227, 231], "wait": [196, 229], "warm": 215, "warn": [213, 219, 220, 225, 229], "wast": 114, "wa\u015bniewski": 203, "we": [211, 220], "weaker": [195, 202], "weakli": 218, "week": 200, "welcom": 216, "well": [200, 229], "were": [209, 213, 227, 232, 235], "weyl": [114, 137, 198, 209, 227, 230, 232, 235], "weyl_inc": [198, 231], "weyl_incr": [198, 209, 231], "wheel": 209, "when": [0, 1, 3, 10, 15, 44, 61, 62, 64, 69, 76, 77, 85, 89, 95, 102, 114, 128, 133, 138, 144, 153, 154, 169, 185, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 209, 211, 219, 220, 222, 225, 229, 230, 231, 235], "where": [0, 1, 89, 137, 138, 187, 188, 189, 193, 194, 195, 196, 200, 202, 209, 211, 213, 218, 219, 220, 225, 231, 235], "whether": [89, 138, 188, 205, 222], "which": [0, 1, 2, 3, 9, 10, 14, 15, 21, 26, 31, 36, 43, 44, 50, 55, 63, 70, 71, 78, 86, 89, 94, 95, 100, 106, 111, 119, 127, 134, 137, 138, 143, 144, 148, 155, 161, 168, 175, 182, 187, 188, 189, 190, 193, 194, 195, 196, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 211, 212, 213, 215, 219, 220, 221, 222, 224, 229, 230, 231, 235], "while": [1, 189, 196, 204, 211, 215, 219, 220, 225, 231, 235], "wider": [227, 230], "width": [195, 202, 220], "widynski": [137, 201, 209], "wiki": [0, 201, 218, 219], "wikipedia": [0, 201, 218, 219], "wilei": 220, "window": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 51, 56, 79, 87, 95, 120, 128, 135, 137, 144, 149, 162, 169, 176, 183, 185, 187, 189, 190, 191, 192, 195, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 212], "winger": 200, "wire": 211, "wishart": [209, 222], "wit": 235, "within": [2, 190, 191, 199], "without": [0, 1, 2, 3, 114, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 231], "word": [137, 201, 220], "work": 201, "worker": [2, 189, 190, 199, 205, 206, 207, 208], "worri": 235, "would": [137, 211, 219, 220], "wrap": [196, 204, 211, 215], "wraparound": 215, "wrapper": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 139, 140, 146, 147, 157, 158, 164, 165, 171, 172, 178, 179, 186, 204, 209, 211], "writabl": 229, "write": [188, 196, 215, 227, 228], "written": [3, 153, 154, 204, 205, 207, 208, 209, 230], "wrong": 209, "wu": 185, "wuhj": 185, "www": [49, 185, 188, 192, 193, 194, 196, 197, 198], "wyrzykowski": 203, "x": [187, 200, 211, 213, 215, 219, 220], "x1": 215, "x2": 215, "x_1": 220, "x_2": 220, "x_i": 220, "x_j": 220, "x_n": 220, "xl": 211, "xor": [193, 203, 211, 227], "xoroshiro": [205, 207, 208, 227], "xoroshiro1024": 206, "xoroshiro120": 209, "xoroshiro128": [186, 206, 209, 215, 227, 230, 231], "xorshift": [189, 193, 194, 205, 206, 207, 208, 209, 227], "xorshift1024": [186, 205, 207, 208, 209, 227, 230, 231], "xorshift128": [205, 227], "xorshift256": 229, "xorshiro256": 227, "xorshiro512": 227, "xoshiro": 227, "xoshiro256": [186, 209, 227, 229, 230, 231, 232, 235], "xoshiro256starstar": 209, "xoshiro512": [186, 209, 227, 230, 231, 232, 235], "xoshiro512starstar": 209, "xsadd": [206, 227], "xsl": [188, 193, 195, 211], "y": [187, 219, 220], "york": [195, 202, 220], "you": [196, 213, 226, 228, 232], "your": 196, "yp": 1, "z": [188, 211, 219], "zero": [114, 211, 218, 219, 229, 231], "ziggurat": 215, "zimbri": 189, "zipf": 209, "\u00b2": 235, "\u00b3": 235, "\u00b5": [211, 229], "\u00b9": 235, "\u03c6": [186, 227], "\u2074": 235, "\u2075": 235}, "titles": ["AES Counter-based RNG", "ChaCha Cipher-based RNG", "Double SIMD Mersenne Twister (dSFMT)", "Entropy From Iteration, Indirection, Xor (EFIIX)  Generator", "randomgen.aes.AESCounter.advance", "randomgen.aes.AESCounter.cffi", "randomgen.aes.AESCounter.ctypes", "randomgen.aes.AESCounter.jump", "randomgen.aes.AESCounter.jumped", "randomgen.aes.AESCounter.random_raw", "randomgen.aes.AESCounter.seed", "randomgen.aes.AESCounter.state", "randomgen.chacha.ChaCha.cffi", "randomgen.chacha.ChaCha.ctypes", "randomgen.chacha.ChaCha.random_raw", "randomgen.chacha.ChaCha.seed", "randomgen.chacha.ChaCha.state", "randomgen.dsfmt.DSFMT.cffi", "randomgen.dsfmt.DSFMT.ctypes", "randomgen.dsfmt.DSFMT.jump", "randomgen.dsfmt.DSFMT.jumped", "randomgen.dsfmt.DSFMT.random_raw", "randomgen.dsfmt.DSFMT.seed", "randomgen.dsfmt.DSFMT.state", "randomgen.efiix64.EFIIX64.cffi", "randomgen.efiix64.EFIIX64.ctypes", "randomgen.efiix64.EFIIX64.random_raw", "randomgen.efiix64.EFIIX64.seed", "randomgen.efiix64.EFIIX64.state", "randomgen.hc128.HC128.cffi", "randomgen.hc128.HC128.ctypes", "randomgen.hc128.HC128.random_raw", "randomgen.hc128.HC128.seed", "randomgen.hc128.HC128.state", "randomgen.jsf.JSF.cffi", "randomgen.jsf.JSF.ctypes", "randomgen.jsf.JSF.random_raw", "randomgen.jsf.JSF.seed", "randomgen.jsf.JSF.state", "randomgen.lxm.LXM.cffi", "randomgen.lxm.LXM.ctypes", "randomgen.lxm.LXM.jump", "randomgen.lxm.LXM.jumped", "randomgen.lxm.LXM.random_raw", "randomgen.lxm.LXM.seed", "randomgen.lxm.LXM.state", "randomgen.mt19937.MT19937.cffi", "randomgen.mt19937.MT19937.ctypes", "randomgen.mt19937.MT19937.jump", "randomgen.mt19937.MT19937.jumped", "randomgen.mt19937.MT19937.random_raw", "randomgen.mt19937.MT19937.seed", "randomgen.mt19937.MT19937.state", "randomgen.mt64.MT64.cffi", "randomgen.mt64.MT64.ctypes", "randomgen.mt64.MT64.random_raw", "randomgen.mt64.MT64.seed", "randomgen.mt64.MT64.state", "randomgen.pcg32.PCG32.advance", "randomgen.pcg32.PCG32.cffi", "randomgen.pcg32.PCG32.ctypes", "randomgen.pcg32.PCG32.jump", "randomgen.pcg32.PCG32.jumped", "randomgen.pcg32.PCG32.random_raw", "randomgen.pcg32.PCG32.seed", "randomgen.pcg32.PCG32.state", "randomgen.pcg64.LCG128Mix.advance", "randomgen.pcg64.LCG128Mix.cffi", "randomgen.pcg64.LCG128Mix.ctypes", "randomgen.pcg64.LCG128Mix.jumped", "randomgen.pcg64.LCG128Mix.random_raw", "randomgen.pcg64.LCG128Mix.seed", "randomgen.pcg64.LCG128Mix.state", "randomgen.pcg64.PCG64.advance", "randomgen.pcg64.PCG64.cffi", "randomgen.pcg64.PCG64.ctypes", "randomgen.pcg64.PCG64.jump", "randomgen.pcg64.PCG64.jumped", "randomgen.pcg64.PCG64.random_raw", "randomgen.pcg64.PCG64.seed", "randomgen.pcg64.PCG64.state", "randomgen.pcg64.PCG64DXSM.advance", "randomgen.pcg64.PCG64DXSM.cffi", "randomgen.pcg64.PCG64DXSM.ctypes", "randomgen.pcg64.PCG64DXSM.jump", "randomgen.pcg64.PCG64DXSM.jumped", "randomgen.pcg64.PCG64DXSM.random_raw", "randomgen.pcg64.PCG64DXSM.seed", "randomgen.pcg64.PCG64DXSM.state", "randomgen.philox.Philox.advance", "randomgen.philox.Philox.cffi", "randomgen.philox.Philox.ctypes", "randomgen.philox.Philox.jump", "randomgen.philox.Philox.jumped", "randomgen.philox.Philox.random_raw", "randomgen.philox.Philox.seed", "randomgen.philox.Philox.state", "randomgen.rdrand.RDRAND.cffi", "randomgen.rdrand.RDRAND.ctypes", "randomgen.rdrand.RDRAND.jumped", "randomgen.rdrand.RDRAND.random_raw", "randomgen.rdrand.RDRAND.seed", "randomgen.rdrand.RDRAND.state", "randomgen.rdrand.RDRAND.success", "randomgen.romu.Romu.cffi", "randomgen.romu.Romu.ctypes", "randomgen.romu.Romu.random_raw", "randomgen.romu.Romu.seed", "randomgen.romu.Romu.state", "randomgen.sfc.SFC64.cffi", "randomgen.sfc.SFC64.ctypes", "randomgen.sfc.SFC64.random_raw", "randomgen.sfc.SFC64.seed", "randomgen.sfc.SFC64.state", "randomgen.sfc.SFC64.weyl_increments", "randomgen.sfmt.SFMT.cffi", "randomgen.sfmt.SFMT.ctypes", "randomgen.sfmt.SFMT.jump", "randomgen.sfmt.SFMT.jumped", "randomgen.sfmt.SFMT.random_raw", "randomgen.sfmt.SFMT.seed", "randomgen.sfmt.SFMT.state", "randomgen.speck128.SPECK128.advance", "randomgen.speck128.SPECK128.cffi", "randomgen.speck128.SPECK128.ctypes", "randomgen.speck128.SPECK128.jump", "randomgen.speck128.SPECK128.jumped", "randomgen.speck128.SPECK128.random_raw", "randomgen.speck128.SPECK128.seed", "randomgen.speck128.SPECK128.state", "randomgen.squares.Squares.advance", "randomgen.squares.Squares.cffi", "randomgen.squares.Squares.ctypes", "randomgen.squares.Squares.jumped", "randomgen.squares.Squares.random_raw", "randomgen.squares.Squares.seed", "randomgen.squares.Squares.state", "randomgen.squares.generate_keys", "randomgen.threefry.ThreeFry.advance", "randomgen.threefry.ThreeFry.cffi", "randomgen.threefry.ThreeFry.ctypes", "randomgen.threefry.ThreeFry.jump", "randomgen.threefry.ThreeFry.jumped", "randomgen.threefry.ThreeFry.random_raw", "randomgen.threefry.ThreeFry.seed", "randomgen.threefry.ThreeFry.state", "randomgen.tyche.Tyche.cffi", "randomgen.tyche.Tyche.ctypes", "randomgen.tyche.Tyche.random_raw", "randomgen.tyche.Tyche.seed", "randomgen.tyche.Tyche.state", "randomgen.wrapper.UserBitGenerator.cffi", "randomgen.wrapper.UserBitGenerator.ctypes", "randomgen.wrapper.UserBitGenerator.from_cfunc", "randomgen.wrapper.UserBitGenerator.from_ctypes", "randomgen.wrapper.UserBitGenerator.random_raw", "randomgen.wrapper.UserBitGenerator.state", "randomgen.xoroshiro128.Xoroshiro128.cffi", "randomgen.xoroshiro128.Xoroshiro128.ctypes", "randomgen.xoroshiro128.Xoroshiro128.jump", "randomgen.xoroshiro128.Xoroshiro128.jumped", "randomgen.xoroshiro128.Xoroshiro128.random_raw", "randomgen.xoroshiro128.Xoroshiro128.seed", "randomgen.xoroshiro128.Xoroshiro128.state", "randomgen.xorshift1024.Xorshift1024.cffi", "randomgen.xorshift1024.Xorshift1024.ctypes", "randomgen.xorshift1024.Xorshift1024.jump", "randomgen.xorshift1024.Xorshift1024.jumped", "randomgen.xorshift1024.Xorshift1024.random_raw", "randomgen.xorshift1024.Xorshift1024.seed", "randomgen.xorshift1024.Xorshift1024.state", "randomgen.xoshiro256.Xoshiro256.cffi", "randomgen.xoshiro256.Xoshiro256.ctypes", "randomgen.xoshiro256.Xoshiro256.jump", "randomgen.xoshiro256.Xoshiro256.jumped", "randomgen.xoshiro256.Xoshiro256.random_raw", "randomgen.xoshiro256.Xoshiro256.seed", "randomgen.xoshiro256.Xoshiro256.state", "randomgen.xoshiro512.Xoshiro512.cffi", "randomgen.xoshiro512.Xoshiro512.ctypes", "randomgen.xoshiro512.Xoshiro512.jump", "randomgen.xoshiro512.Xoshiro512.jumped", "randomgen.xoshiro512.Xoshiro512.random_raw", "randomgen.xoshiro512.Xoshiro512.seed", "randomgen.xoshiro512.Xoshiro512.state", "HC-128 Cipher Generator", "Bit Generators", "Jenkins Small Fast Generator", "128-bit Linear Congruential Generator (LCG) with Output Mixing", "LXM Generator", "Mersenne Twister (MT19937)", "64-bit Mersenne Twister", "Permuted Congruential Generator (32-bit, PCG32)", "Permuted Congruential Generator (64-bit, PCG64)", "Permuted Congruential Generator 2.0 (64-bit Multiplier, DXSM Output)", "Philox Counter-based RNG", "Hardware-based Random Number Generator (RDRAND)", "Rotate-Multiply (Romu) Generators", "SFC64 Generator", "SIMD-oriented Fast Mersenne Twister (SFMT)", "SPECK Counter-based RNG", "Middle Square with Weyl increment (64-bit, Squares)", "ThreeFry Counter-based RNG", "Tyche PRNG", "User-defined Bit Generators", "Xoroshiro128+", "Xorshift1024*\u03c6", "Xoshiro256**", "Xoshiro512**", "Change Log", "Shared functionality", "Writing a BitGenerator", "System Entropy", "Evolution of randomgen", "Extended Generator", "Extending", "Future Plans", "randomgen.generator.ExtendedGenerator.bit_generator", "randomgen.generator.ExtendedGenerator.complex_normal", "randomgen.generator.ExtendedGenerator.multivariate_complex_normal", "randomgen.generator.ExtendedGenerator.multivariate_normal", "randomgen.generator.ExtendedGenerator.random", "randomgen.generator.ExtendedGenerator.standard_wishart", "randomgen.generator.ExtendedGenerator.state", "randomgen.generator.ExtendedGenerator.uintegers", "randomgen.generator.ExtendedGenerator.wishart", "Random Generator", "RandomGen", "Legacy Random Generation", "Multithreaded Generation", "What\u2019s New or Different", "Parallel Random Number Generation", "Performance", "References", "Seed Sequences", "Quality Assurance"], "titleterms": {"": [227, 230, 231], "0": [194, 209, 235], "1": [209, 213, 230], "128": [185, 188], "15": 209, "16": [209, 213], "17": [209, 230], "18": [209, 213], "19": [209, 213], "2": [194, 209], "20": 209, "23": [209, 213], "26": 209, "3": 209, "32": 192, "4": 209, "5": 209, "6": 209, "64": [191, 193, 194, 201], "addit": 235, "advanc": [4, 58, 66, 73, 81, 89, 122, 130, 138, 231], "ae": [0, 4, 5, 6, 7, 8, 9, 10, 11], "aescount": [4, 5, 6, 7, 8, 9, 10, 11], "also": [137, 194, 201, 214, 218, 219, 222, 225], "assur": 235, "base": [0, 1, 195, 196, 200, 202], "between": 213, "bit": [186, 188, 191, 192, 193, 194, 201, 204, 215, 227], "bit_gener": 217, "bitgener": [211, 215], "cffi": [5, 12, 17, 24, 29, 34, 39, 46, 53, 59, 67, 74, 82, 90, 97, 104, 109, 115, 123, 131, 139, 146, 151, 157, 164, 171, 178], "chacha": [1, 12, 13, 14, 15, 16], "chang": [209, 213, 227], "cipher": [1, 185], "complex_norm": 218, "configur": 235, "congruenti": [188, 192, 193, 194], "core": 235, "correl": 235, "counter": [0, 195, 200, 202], "cryptograph": 231, "ctype": [6, 13, 18, 25, 30, 35, 40, 47, 54, 60, 68, 75, 83, 91, 98, 105, 110, 116, 124, 132, 140, 147, 152, 158, 165, 172, 179], "custom": 196, "cython": 215, "danger": [226, 227, 228], "defin": [186, 204], "differ": [227, 230], "distinct": 231, "distribut": 214, "doubl": 2, "dsfmt": [2, 17, 18, 19, 20, 21, 22, 23], "dxsm": 194, "efiix": 3, "efiix64": [24, 25, 26, 27, 28], "entropi": [3, 212], "evolut": 213, "exampl": 235, "experi": 235, "experiment": 186, "extend": [0, 1, 2, 3, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 214, 215], "extendedgener": [217, 218, 219, 220, 221, 222, 223, 224, 225], "fast": [187, 199], "featur": 227, "from": [3, 204, 230], "from_cfunc": 153, "from_ctyp": 154, "function": 210, "futur": 216, "gener": [0, 2, 3, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231], "generate_kei": 137, "hardwar": 196, "hc": 185, "hc128": [29, 30, 31, 32, 33], "histori": 227, "increment": 201, "indic": 227, "indirect": 3, "introduct": 227, "iter": 3, "jenkin": 187, "jsf": [34, 35, 36, 37, 38], "jump": [7, 8, 19, 20, 41, 42, 48, 49, 61, 62, 69, 76, 77, 84, 85, 92, 93, 99, 117, 118, 125, 126, 133, 141, 142, 159, 160, 166, 167, 173, 174, 180, 181, 231], "kei": [201, 231], "lcg": 188, "lcg128mix": [66, 67, 68, 69, 70, 71, 72], "legaci": 228, "level": 204, "linear": 188, "lock": 196, "log": 209, "low": 204, "lxm": [39, 40, 41, 42, 43, 44, 45, 189], "manipul": 214, "mersenn": [2, 190, 191, 199], "middl": 201, "mix": 188, "mt19937": [46, 47, 48, 49, 50, 51, 52, 190], "mt64": [53, 54, 55, 56, 57], "multipli": [194, 197], "multithread": 229, "multivariate_complex_norm": 219, "multivariate_norm": 220, "new": [215, 227, 230], "non": 231, "note": [232, 234, 235], "numba": [211, 215], "number": [196, 231], "numpi": 230, "object": 204, "orient": 199, "output": [188, 194], "parallel": [0, 2, 188, 189, 190, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 205, 206, 207, 208, 227, 231], "pcg32": [58, 59, 60, 61, 62, 63, 64, 65, 192], "pcg64": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 193], "pcg64dxsm": [81, 82, 83, 84, 85, 86, 87, 88], "perform": [211, 232], "permut": [192, 193, 194], "philox": [89, 90, 91, 92, 93, 94, 95, 96, 195], "plan": 216, "prng": [203, 231], "python": [211, 215], "qualiti": 235, "random": [196, 221, 226, 227, 228, 231], "random_raw": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 119, 127, 134, 143, 148, 155, 161, 168, 175, 182], "randomgen": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 213, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227], "rdrand": [97, 98, 99, 100, 101, 102, 103, 196], "recommend": 232, "refer": 233, "remov": 227, "reproduc": 231, "rng": [0, 1, 186, 195, 200, 202], "romu": [104, 105, 106, 107, 108, 197], "rotat": 197, "see": [137, 194, 201, 214, 218, 219, 222, 225], "seed": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 44, 51, 56, 64, 71, 79, 87, 95, 101, 107, 112, 120, 128, 135, 144, 149, 162, 169, 176, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 214, 234, 235], "seedsequ": 231, "sequenc": [231, 234], "sequenti": 235, "sfc": [109, 110, 111, 112, 113, 114], "sfc64": [109, 110, 111, 112, 113, 114, 198], "sfmt": [115, 116, 117, 118, 119, 120, 121, 199], "share": 210, "simd": [2, 199], "small": 187, "speck": 200, "speck128": [122, 123, 124, 125, 126, 127, 128, 129], "squar": [130, 131, 132, 133, 134, 135, 136, 137, 201], "stabl": 186, "standard_wishart": 222, "state": [0, 1, 2, 3, 11, 16, 23, 28, 33, 38, 45, 52, 57, 65, 72, 80, 88, 96, 102, 108, 113, 121, 129, 136, 145, 150, 156, 163, 170, 177, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 214, 223, 231], "success": 103, "support": 227, "system": 212, "tabl": 227, "test": [0, 1, 2, 3, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 235], "threefri": [138, 139, 140, 141, 142, 143, 144, 145, 202], "time": 232, "twister": [2, 190, 191, 199], "tych": [146, 147, 148, 149, 150, 203], "uinteg": 224, "us": [211, 231], "user": [186, 204], "userbitgener": [151, 152, 153, 154, 155, 156], "v1": 209, "v2": 209, "warn": 204, "weyl": [201, 231], "weyl_incr": 114, "what": [227, 230], "wishart": 225, "wrapper": [151, 152, 153, 154, 155, 156], "write": 211, "xor": 3, "xoroshiro128": [157, 158, 159, 160, 161, 162, 163, 205], "xorshift1024": [164, 165, 166, 167, 168, 169, 170, 206], "xoshiro256": [171, 172, 173, 174, 175, 176, 177, 207], "xoshiro512": [178, 179, 180, 181, 182, 183, 184, 208], "zero": 235, "\u03c6": 206}})