Search.setIndex({"titles": ["AES Counter-based RNG", "ChaCha Cipher-based RNG", "Double SIMD Mersenne Twister (dSFMT)", "HC-128 Cipher Generator", "randomgen.aes.AESCounter.advance", "randomgen.aes.AESCounter.cffi", "randomgen.aes.AESCounter.ctypes", "randomgen.aes.AESCounter.jump", "randomgen.aes.AESCounter.jumped", "randomgen.aes.AESCounter.random_raw", "randomgen.aes.AESCounter.seed", "randomgen.aes.AESCounter.state", "randomgen.chacha.ChaCha.advance", "randomgen.chacha.ChaCha.cffi", "randomgen.chacha.ChaCha.ctypes", "randomgen.chacha.ChaCha.jump", "randomgen.chacha.ChaCha.jumped", "randomgen.chacha.ChaCha.random_raw", "randomgen.chacha.ChaCha.seed", "randomgen.chacha.ChaCha.state", "randomgen.dsfmt.DSFMT.cffi", "randomgen.dsfmt.DSFMT.ctypes", "randomgen.dsfmt.DSFMT.jump", "randomgen.dsfmt.DSFMT.jumped", "randomgen.dsfmt.DSFMT.random_raw", "randomgen.dsfmt.DSFMT.seed", "randomgen.dsfmt.DSFMT.state", "randomgen.efiix64.EFIIX64.cffi", "randomgen.efiix64.EFIIX64.ctypes", "randomgen.efiix64.EFIIX64.random_raw", "randomgen.efiix64.EFIIX64.seed", "randomgen.efiix64.EFIIX64.state", "randomgen.hc128.HC128.cffi", "randomgen.hc128.HC128.ctypes", "randomgen.hc128.HC128.random_raw", "randomgen.hc128.HC128.seed", "randomgen.hc128.HC128.state", "randomgen.jsf.JSF.cffi", "randomgen.jsf.JSF.ctypes", "randomgen.jsf.JSF.random_raw", "randomgen.jsf.JSF.seed", "randomgen.jsf.JSF.state", "randomgen.lxm.LXM.cffi", "randomgen.lxm.LXM.ctypes", "randomgen.lxm.LXM.jump", "randomgen.lxm.LXM.jumped", "randomgen.lxm.LXM.random_raw", "randomgen.lxm.LXM.seed", "randomgen.lxm.LXM.state", "randomgen.mt19937.MT19937.cffi", "randomgen.mt19937.MT19937.ctypes", "randomgen.mt19937.MT19937.jump", "randomgen.mt19937.MT19937.jumped", "randomgen.mt19937.MT19937.random_raw", "randomgen.mt19937.MT19937.seed", "randomgen.mt19937.MT19937.state", "randomgen.mt64.MT64.cffi", "randomgen.mt64.MT64.ctypes", "randomgen.mt64.MT64.random_raw", "randomgen.mt64.MT64.seed", "randomgen.mt64.MT64.state", "randomgen.pcg32.PCG32.advance", "randomgen.pcg32.PCG32.cffi", "randomgen.pcg32.PCG32.ctypes", "randomgen.pcg32.PCG32.jump", "randomgen.pcg32.PCG32.jumped", "randomgen.pcg32.PCG32.random_raw", "randomgen.pcg32.PCG32.seed", "randomgen.pcg32.PCG32.state", "randomgen.pcg64.LCG128Mix.advance", "randomgen.pcg64.LCG128Mix.cffi", "randomgen.pcg64.LCG128Mix.ctypes", "randomgen.pcg64.LCG128Mix.jumped", "randomgen.pcg64.LCG128Mix.random_raw", "randomgen.pcg64.LCG128Mix.seed", "randomgen.pcg64.LCG128Mix.state", "randomgen.pcg64.PCG64.advance", "randomgen.pcg64.PCG64.cffi", "randomgen.pcg64.PCG64.ctypes", "randomgen.pcg64.PCG64.jump", "randomgen.pcg64.PCG64.jumped", "randomgen.pcg64.PCG64.random_raw", "randomgen.pcg64.PCG64.seed", "randomgen.pcg64.PCG64.state", "randomgen.pcg64.PCG64DXSM.advance", "randomgen.pcg64.PCG64DXSM.cffi", "randomgen.pcg64.PCG64DXSM.ctypes", "randomgen.pcg64.PCG64DXSM.jump", "randomgen.pcg64.PCG64DXSM.jumped", "randomgen.pcg64.PCG64DXSM.random_raw", "randomgen.pcg64.PCG64DXSM.seed", "randomgen.pcg64.PCG64DXSM.state", "randomgen.philox.Philox.advance", "randomgen.philox.Philox.cffi", "randomgen.philox.Philox.ctypes", "randomgen.philox.Philox.jump", "randomgen.philox.Philox.jumped", "randomgen.philox.Philox.random_raw", "randomgen.philox.Philox.seed", "randomgen.philox.Philox.state", "randomgen.rdrand.RDRAND.cffi", "randomgen.rdrand.RDRAND.ctypes", "randomgen.rdrand.RDRAND.jumped", "randomgen.rdrand.RDRAND.random_raw", "randomgen.rdrand.RDRAND.seed", "randomgen.rdrand.RDRAND.state", "randomgen.rdrand.RDRAND.success", "randomgen.romu.Romu.cffi", "randomgen.romu.Romu.ctypes", "randomgen.romu.Romu.random_raw", "randomgen.romu.Romu.seed", "randomgen.romu.Romu.state", "randomgen.sfc.SFC64.cffi", "randomgen.sfc.SFC64.ctypes", "randomgen.sfc.SFC64.random_raw", "randomgen.sfc.SFC64.seed", "randomgen.sfc.SFC64.state", "randomgen.sfc.SFC64.weyl_increments", "randomgen.sfmt.SFMT.cffi", "randomgen.sfmt.SFMT.ctypes", "randomgen.sfmt.SFMT.jump", "randomgen.sfmt.SFMT.jumped", "randomgen.sfmt.SFMT.random_raw", "randomgen.sfmt.SFMT.seed", "randomgen.sfmt.SFMT.state", "randomgen.speck128.SPECK128.advance", "randomgen.speck128.SPECK128.cffi", "randomgen.speck128.SPECK128.ctypes", "randomgen.speck128.SPECK128.jump", "randomgen.speck128.SPECK128.jumped", "randomgen.speck128.SPECK128.random_raw", "randomgen.speck128.SPECK128.seed", "randomgen.speck128.SPECK128.state", "randomgen.threefry.ThreeFry.advance", "randomgen.threefry.ThreeFry.cffi", "randomgen.threefry.ThreeFry.ctypes", "randomgen.threefry.ThreeFry.jump", "randomgen.threefry.ThreeFry.jumped", "randomgen.threefry.ThreeFry.random_raw", "randomgen.threefry.ThreeFry.seed", "randomgen.threefry.ThreeFry.state", "randomgen.wrapper.UserBitGenerator.cffi", "randomgen.wrapper.UserBitGenerator.ctypes", "randomgen.wrapper.UserBitGenerator.from_cfunc", "randomgen.wrapper.UserBitGenerator.from_ctypes", "randomgen.wrapper.UserBitGenerator.random_raw", "randomgen.wrapper.UserBitGenerator.state", "randomgen.xoroshiro128.Xoroshiro128.cffi", "randomgen.xoroshiro128.Xoroshiro128.ctypes", "randomgen.xoroshiro128.Xoroshiro128.jump", "randomgen.xoroshiro128.Xoroshiro128.jumped", "randomgen.xoroshiro128.Xoroshiro128.random_raw", "randomgen.xoroshiro128.Xoroshiro128.seed", "randomgen.xoroshiro128.Xoroshiro128.state", "randomgen.xorshift1024.Xorshift1024.cffi", "randomgen.xorshift1024.Xorshift1024.ctypes", "randomgen.xorshift1024.Xorshift1024.jump", "randomgen.xorshift1024.Xorshift1024.jumped", "randomgen.xorshift1024.Xorshift1024.random_raw", "randomgen.xorshift1024.Xorshift1024.seed", "randomgen.xorshift1024.Xorshift1024.state", "randomgen.xoshiro256.Xoshiro256.cffi", "randomgen.xoshiro256.Xoshiro256.ctypes", "randomgen.xoshiro256.Xoshiro256.jump", "randomgen.xoshiro256.Xoshiro256.jumped", "randomgen.xoshiro256.Xoshiro256.random_raw", "randomgen.xoshiro256.Xoshiro256.seed", "randomgen.xoshiro256.Xoshiro256.state", "randomgen.xoshiro512.Xoshiro512.cffi", "randomgen.xoshiro512.Xoshiro512.ctypes", "randomgen.xoshiro512.Xoshiro512.jump", "randomgen.xoshiro512.Xoshiro512.jumped", "randomgen.xoshiro512.Xoshiro512.random_raw", "randomgen.xoshiro512.Xoshiro512.seed", "randomgen.xoshiro512.Xoshiro512.state", "HC-128 Cipher Generator", "Bit Generators", "Jenkins Small Fast Generator", "128-bit Linear Congruential Generator (LCG) with Output Mixing", "LXM Generator", "Mersenne Twister (MT19937)", "64-bit Mersenne Twister", "Permuted Congruential Generator (32-bit, PCG32)", "Permuted Congruential Generator (64-bit, PCG64)", "Permuted Congruential Generator 2.0 (64-bit Multiplier, DXSM Output)", "Philox Counter-based RNG", "Hardware-based Random Number Generator (RDRAND)", "Rotate-Multiply (Romu) Generators", "SFC64 Generator", "SIMD-oriented Fast Mersenne Twister (SFMT)", "SPECK Counter-based RNG", "ThreeFry Counter-based RNG", "User-defined Bit Generators", "Xoroshiro128+", "Xorshift1024*\u03c6", "Xoshiro256**", "Xoshiro512**", "Change Log", "Writing a BitGenerator", "System Entropy", "Evolution of randomgen", "Extended Generator", "Extending", "Future Plans", "randomgen._seed_sequence.SeedSequence.generate_state", "randomgen._seed_sequence.SeedSequence.spawn", "randomgen._seed_sequence.SeedSequence.state", "randomgen.generator.ExtendedGenerator.bit_generator", "randomgen.generator.ExtendedGenerator.complex_normal", "randomgen.generator.ExtendedGenerator.multivariate_complex_normal", "randomgen.generator.ExtendedGenerator.multivariate_normal", "randomgen.generator.ExtendedGenerator.random", "randomgen.generator.ExtendedGenerator.standard_wishart", "randomgen.generator.ExtendedGenerator.state", "randomgen.generator.ExtendedGenerator.uintegers", "randomgen.generator.ExtendedGenerator.wishart", "Random Generator", "RandomGen", "Legacy Random Generation", "Multithreaded Generation", "What\u2019s New or Different", "Parallel Random Number Generation", "Performance", "References", "Seed Sequences", "Quality Assurance"], "terms": {"class": [0, 1, 2, 3, 9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 211, 216, 217, 218, 219, 224, 225], "randomgen": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 216, 218, 219, 220, 221, 224, 225], "aescount": [0, 1, 175, 190, 197, 200, 217, 220, 221, 222, 225], "none": [0, 1, 2, 3, 9, 10, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 58, 59, 66, 67, 73, 74, 81, 82, 89, 90, 92, 97, 98, 103, 104, 109, 110, 114, 115, 117, 122, 123, 130, 131, 133, 138, 139, 143, 144, 145, 151, 152, 158, 159, 165, 166, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 201, 208, 209, 210, 211, 212, 214, 215, 216, 218, 219, 224, 225], "kei": [0, 1, 10, 18, 35, 98, 131, 139, 175, 185, 190, 191, 197, 198, 202, 217, 222], "mode": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 217, 219], "contain": [0, 1, 2, 3, 5, 6, 11, 13, 14, 19, 20, 21, 26, 27, 28, 31, 32, 33, 35, 36, 37, 38, 41, 42, 43, 48, 49, 50, 55, 56, 57, 60, 62, 63, 68, 70, 71, 75, 77, 78, 83, 85, 86, 91, 93, 94, 99, 100, 101, 105, 107, 108, 111, 112, 113, 116, 117, 118, 119, 124, 126, 127, 131, 132, 134, 135, 140, 141, 142, 147, 148, 153, 154, 155, 160, 161, 162, 167, 168, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 202, 213, 217], "pseudo": [0, 1, 2, 3, 9, 10, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 58, 59, 66, 73, 74, 81, 82, 89, 90, 97, 98, 109, 114, 122, 123, 130, 131, 138, 139, 145, 151, 152, 158, 159, 165, 166, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 190, 191, 193, 194, 195, 196, 198, 200, 212, 214, 215, 217, 221], "random": [0, 1, 2, 3, 4, 7, 8, 9, 10, 12, 15, 16, 17, 18, 22, 23, 24, 25, 29, 30, 34, 35, 39, 40, 44, 45, 46, 47, 51, 52, 53, 54, 58, 59, 61, 64, 65, 66, 69, 72, 73, 74, 76, 79, 80, 81, 82, 84, 88, 89, 90, 92, 95, 96, 97, 98, 103, 109, 114, 120, 121, 122, 123, 125, 128, 129, 130, 131, 133, 136, 137, 138, 139, 143, 144, 145, 149, 150, 151, 152, 156, 157, 158, 159, 163, 164, 165, 166, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 208, 209, 210, 212, 214, 215, 219, 220, 222, 223, 224, 225], "number": [0, 1, 2, 3, 4, 7, 8, 9, 10, 12, 15, 16, 17, 18, 22, 23, 24, 25, 29, 30, 34, 35, 39, 40, 44, 45, 46, 47, 51, 52, 53, 54, 58, 59, 61, 64, 65, 66, 69, 72, 73, 74, 76, 79, 80, 81, 82, 84, 88, 89, 90, 92, 95, 96, 97, 98, 109, 114, 117, 120, 121, 122, 123, 125, 128, 129, 130, 131, 133, 136, 137, 138, 139, 145, 149, 150, 151, 152, 156, 157, 158, 159, 163, 164, 165, 166, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 211, 214, 217, 219, 224, 225], "paramet": [0, 1, 2, 3, 4, 7, 8, 9, 10, 12, 15, 16, 17, 22, 23, 24, 25, 29, 30, 34, 35, 39, 40, 44, 45, 46, 47, 51, 52, 53, 54, 58, 59, 61, 64, 65, 66, 67, 69, 72, 73, 74, 76, 79, 80, 81, 82, 84, 88, 89, 90, 92, 95, 96, 97, 98, 102, 103, 104, 109, 114, 117, 120, 121, 122, 123, 125, 128, 129, 130, 131, 133, 136, 137, 138, 139, 143, 144, 145, 149, 150, 151, 152, 156, 157, 158, 159, 163, 164, 165, 166, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 204, 205, 208, 209, 210, 211, 212, 214, 215, 217, 224], "initi": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 47, 54, 59, 67, 74, 82, 90, 98, 110, 115, 123, 131, 139, 152, 159, 166, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 221, 222, 224, 225], "can": [0, 1, 2, 3, 4, 10, 12, 18, 25, 30, 35, 40, 47, 54, 59, 61, 67, 69, 74, 76, 82, 84, 90, 92, 98, 102, 110, 115, 123, 125, 131, 133, 139, 152, 159, 166, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 210, 217, 219, 220, 221, 224], "an": [0, 1, 2, 3, 4, 10, 12, 18, 25, 30, 35, 40, 47, 54, 59, 61, 69, 74, 76, 82, 84, 90, 92, 98, 110, 115, 117, 123, 125, 131, 133, 139, 143, 144, 152, 159, 166, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 204, 209, 210, 215, 217, 219, 220, 221, 222, 223, 224, 225], "integ": [0, 1, 2, 3, 4, 5, 6, 10, 12, 13, 14, 18, 20, 21, 25, 27, 28, 30, 32, 33, 35, 37, 38, 40, 42, 43, 47, 49, 50, 54, 56, 57, 59, 61, 62, 63, 67, 69, 70, 71, 74, 76, 77, 78, 82, 84, 85, 86, 90, 92, 93, 94, 98, 100, 101, 107, 108, 112, 113, 117, 118, 119, 123, 125, 126, 127, 131, 133, 134, 135, 139, 141, 142, 147, 148, 152, 154, 155, 159, 161, 162, 166, 168, 169, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 202, 214, 220, 221, 223], "0": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 47, 54, 59, 67, 74, 82, 90, 92, 98, 106, 117, 123, 131, 133, 139, 143, 144, 152, 159, 166, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 198, 201, 202, 208, 209, 210, 211, 217, 219, 220, 221, 222, 224], "2": [0, 1, 2, 3, 7, 8, 10, 15, 16, 18, 22, 23, 25, 30, 35, 40, 44, 45, 47, 51, 52, 54, 59, 64, 65, 67, 72, 74, 79, 80, 82, 88, 90, 92, 95, 96, 98, 117, 120, 121, 123, 128, 129, 131, 133, 136, 137, 139, 149, 150, 152, 156, 157, 159, 163, 164, 166, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 198, 200, 202, 208, 209, 210, 211, 212, 215, 217, 219, 220, 221, 222, 225], "128": [0, 1, 2, 10, 18, 22, 23, 35, 44, 45, 51, 52, 72, 74, 79, 80, 82, 88, 90, 98, 120, 121, 131, 139, 163, 164, 176, 179, 180, 183, 184, 189, 190, 193, 195, 196, 197, 198, 217, 221, 222, 224, 225], "seedsequ": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 47, 54, 59, 74, 82, 90, 98, 110, 115, 117, 123, 131, 139, 152, 159, 166, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 200, 217, 222, 225], "instanc": [0, 1, 2, 3, 8, 10, 16, 18, 23, 25, 30, 35, 45, 47, 52, 54, 59, 65, 72, 74, 80, 82, 88, 90, 96, 98, 102, 110, 115, 121, 123, 129, 131, 137, 139, 150, 157, 159, 164, 166, 171, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 200, 201, 205, 207, 221], "default": [0, 1, 2, 3, 9, 10, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 58, 59, 66, 73, 74, 81, 82, 89, 90, 92, 97, 98, 103, 109, 114, 117, 122, 123, 130, 131, 133, 138, 139, 145, 151, 152, 158, 159, 165, 166, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 208, 209, 210, 211, 212, 214, 215, 220, 221, 224, 225], "If": [0, 1, 2, 3, 9, 10, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 58, 59, 66, 67, 73, 74, 81, 82, 89, 90, 92, 97, 98, 103, 104, 109, 110, 114, 115, 117, 122, 123, 130, 131, 133, 138, 139, 143, 144, 145, 146, 151, 152, 158, 159, 165, 166, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 201, 208, 209, 210, 211, 212, 214, 215], "i": [0, 1, 2, 3, 4, 7, 8, 9, 10, 12, 15, 16, 17, 18, 23, 24, 25, 29, 30, 34, 35, 39, 40, 44, 45, 46, 47, 52, 53, 54, 58, 59, 61, 64, 65, 66, 67, 69, 72, 73, 74, 76, 79, 80, 81, 82, 84, 88, 89, 90, 92, 95, 96, 97, 98, 102, 103, 104, 105, 106, 109, 110, 114, 115, 117, 121, 122, 123, 125, 128, 129, 130, 131, 133, 136, 137, 138, 139, 145, 149, 150, 151, 152, 156, 157, 158, 159, 163, 164, 165, 166, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 224, 225], "data": [0, 1, 3, 10, 18, 30, 35, 40, 82, 90, 98, 131, 139, 152, 159, 166, 173, 175, 177, 179, 182, 185, 190, 191, 193, 194, 195, 196, 202, 210, 225], "read": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 54, 59, 82, 90, 98, 123, 131, 139, 152, 159, 166, 173, 175, 177, 179, 180, 181, 182, 185, 189, 190, 191, 193, 194, 195, 196, 198, 199, 217], "from": [0, 1, 2, 3, 4, 10, 12, 18, 25, 30, 35, 40, 54, 59, 61, 69, 76, 82, 84, 90, 92, 98, 110, 115, 117, 123, 125, 131, 133, 139, 143, 144, 152, 159, 166, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 201, 202, 205, 208, 209, 210, 211, 212, 215, 217, 219, 221, 222, 224, 225], "dev": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 54, 59, 82, 90, 98, 123, 131, 139, 152, 159, 166, 173, 175, 177, 179, 180, 181, 182, 185, 189, 190, 191, 193, 194, 195, 196, 198, 199, 219, 220], "urandom": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 54, 59, 82, 90, 98, 123, 131, 139, 152, 159, 166, 173, 175, 177, 179, 180, 181, 182, 185, 189, 190, 191, 193, 194, 195, 196, 199, 220], "window": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 54, 59, 82, 90, 98, 123, 131, 139, 152, 159, 166, 173, 175, 177, 179, 180, 181, 182, 185, 189, 190, 191, 193, 194, 195, 196, 197, 199], "analog": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 54, 59, 82, 90, 98, 123, 131, 139, 152, 159, 166, 173, 175, 177, 179, 180, 181, 182, 185, 189, 190, 191, 193, 194, 195, 196, 210], "avail": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 52, 54, 59, 82, 90, 98, 117, 123, 131, 139, 146, 152, 159, 166, 173, 175, 177, 178, 179, 180, 181, 182, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 197, 198, 217, 220, 224], "unavail": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 54, 59, 82, 90, 98, 123, 131, 139, 152, 159, 166, 173, 175, 177, 179, 180, 181, 182, 185, 189, 190, 191, 193, 194, 195, 196], "hash": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 54, 59, 82, 90, 98, 123, 131, 139, 152, 159, 166, 173, 175, 177, 178, 179, 180, 181, 182, 185, 189, 190, 191, 193, 194, 195, 196, 197, 199], "time": [0, 1, 2, 3, 7, 8, 10, 15, 16, 18, 22, 23, 25, 30, 35, 40, 44, 45, 51, 52, 54, 59, 64, 65, 72, 79, 80, 82, 88, 90, 95, 96, 98, 102, 120, 121, 123, 128, 129, 131, 136, 137, 139, 149, 150, 152, 156, 157, 159, 163, 164, 166, 170, 171, 173, 175, 177, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 217, 219, 220, 221], "process": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 54, 59, 82, 90, 98, 123, 131, 139, 152, 159, 166, 173, 175, 177, 179, 180, 181, 182, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 199, 210, 221], "id": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 54, 59, 82, 90, 98, 123, 131, 139, 152, 159, 166, 173, 175, 177, 179, 180, 181, 182, 185, 189, 190, 191, 193, 194, 195, 196, 199], "us": [0, 1, 2, 3, 4, 9, 10, 12, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 52, 53, 54, 58, 59, 61, 66, 69, 73, 74, 76, 81, 82, 84, 87, 89, 90, 92, 97, 98, 102, 103, 104, 105, 109, 114, 117, 122, 123, 125, 130, 131, 133, 138, 139, 143, 144, 145, 151, 152, 158, 159, 165, 166, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 207, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 222, 225], "either": [0, 1, 2, 10, 18, 98, 117, 139, 175, 177, 180, 181, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 202, 204, 214, 220, 225], "python": [0, 1, 2, 3, 10, 18, 98, 139, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 217, 219, 220], "int": [0, 1, 10, 18, 98, 110, 115, 139, 178, 183, 184, 185, 187, 188, 190, 191, 192, 198, 219, 220, 221], "element": [0, 1, 2, 3, 10, 18, 92, 98, 131, 133, 139, 175, 177, 179, 180, 181, 185, 189, 190, 191, 193, 194, 195, 196, 210], "uint64": [0, 1, 9, 10, 17, 18, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 98, 103, 109, 114, 122, 130, 131, 138, 139, 143, 145, 151, 158, 165, 172, 177, 178, 185, 190, 191, 192, 197, 198, 204, 220, 221, 222], "arrai": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 47, 54, 59, 98, 117, 123, 131, 139, 152, 159, 166, 173, 175, 177, 179, 180, 181, 185, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 204, 209, 211, 212, 215, 219, 220, 221], "provid": [0, 1, 2, 3, 10, 18, 74, 98, 102, 105, 139, 143, 144, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 209, 211, 220], "unlik": [0, 1, 10, 18, 98, 139, 185, 190, 191, 197], "which": [0, 1, 2, 3, 9, 10, 17, 18, 24, 29, 34, 39, 46, 47, 53, 58, 66, 73, 74, 81, 89, 92, 97, 98, 103, 109, 114, 122, 130, 133, 138, 139, 145, 151, 158, 165, 172, 177, 178, 179, 180, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 209, 210, 211, 212, 214, 219, 220, 221, 224, 225], "run": [0, 1, 10, 18, 98, 139, 185, 186, 188, 190, 191, 198, 219, 222], "through": [0, 1, 10, 18, 98, 131, 139, 146, 185, 190, 191, 198, 202, 213], "anoth": [0, 1, 10, 18, 98, 139, 175, 185, 190, 191, 193, 194, 195, 196, 224], "befor": [0, 1, 10, 18, 98, 139, 178, 183, 185, 186, 190, 191, 197, 198, 199, 210, 215, 218, 219, 225], "valu": [0, 1, 2, 3, 4, 9, 10, 12, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 58, 59, 61, 66, 67, 69, 73, 76, 81, 82, 84, 89, 90, 92, 97, 98, 103, 104, 105, 109, 110, 114, 115, 117, 122, 123, 125, 130, 131, 133, 138, 139, 143, 144, 145, 151, 152, 158, 159, 165, 166, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 208, 209, 210, 211, 212, 214, 215, 219, 220, 221, 222, 224, 225], "directli": [0, 1, 2, 3, 9, 10, 17, 18, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 98, 109, 114, 122, 130, 138, 139, 145, 151, 158, 165, 172, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 202, 212, 213, 215, 217, 219], "set": [0, 1, 3, 10, 11, 18, 19, 26, 31, 36, 41, 48, 55, 60, 68, 74, 75, 83, 91, 98, 99, 105, 106, 111, 116, 117, 124, 131, 132, 139, 140, 143, 144, 146, 153, 160, 167, 174, 175, 176, 179, 185, 186, 188, 190, 191, 192, 197, 198, 199, 202, 209, 213, 215, 220, 221, 224, 225], "cannot": [0, 1, 10, 18, 35, 98, 139, 175, 185, 186, 190, 191, 221], "both": [0, 1, 10, 18, 35, 74, 92, 98, 131, 133, 139, 175, 185, 188, 190, 191, 193, 197, 198, 202, 208, 222], "The": [0, 1, 2, 3, 4, 8, 10, 12, 16, 18, 23, 35, 45, 47, 52, 61, 64, 65, 67, 69, 72, 74, 76, 79, 80, 82, 84, 88, 90, 92, 96, 98, 105, 117, 121, 125, 129, 131, 133, 137, 139, 150, 157, 164, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 207, 208, 209, 210, 211, 212, 215, 217, 219, 220, 221, 222, 224, 225], "legaci": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 189, 190, 191, 193, 194, 195, 196, 197, 200, 217, 220], "splitmix64": [0, 1, 2, 175, 177, 180, 181, 182, 183, 185, 189, 190, 191, 193, 194, 195, 196], "sequenc": [0, 1, 2, 3, 25, 52, 54, 59, 74, 123, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 217, 219, 220, 225], "transform": [0, 1, 2, 175, 177, 180, 181, 182, 183, 185, 189, 190, 191, 193, 194, 195, 196, 198, 210, 215, 225], "lock": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 189, 190, 191, 193, 194, 195, 196], "share": [0, 1, 2, 3, 74, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 201, 225], "so": [0, 1, 2, 3, 4, 12, 61, 69, 76, 84, 92, 102, 117, 125, 133, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 202, 203, 208, 210, 215, 217, 219, 221, 225], "same": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 211, 217, 219, 221, 225], "bit": [0, 1, 2, 3, 4, 5, 6, 8, 9, 12, 13, 14, 16, 17, 20, 21, 22, 23, 24, 25, 27, 28, 29, 32, 33, 34, 35, 37, 38, 39, 42, 43, 45, 46, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 65, 66, 69, 70, 71, 72, 73, 76, 77, 78, 80, 81, 82, 84, 85, 86, 88, 89, 90, 92, 93, 94, 96, 97, 100, 101, 102, 107, 108, 109, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 129, 130, 133, 134, 135, 137, 138, 141, 142, 143, 144, 145, 147, 148, 150, 151, 154, 155, 157, 158, 161, 162, 164, 165, 168, 169, 171, 172, 175, 177, 179, 180, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 207, 213, 214, 220, 221, 222, 224, 225], "git": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196], "multipl": [0, 1, 2, 3, 52, 117, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 197, 200, 210, 217, 219, 221, 225], "without": [0, 1, 2, 3, 117, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 197, 198, 221], "corrupt": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196], "code": [0, 1, 2, 3, 52, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 198, 202, 225], "should": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 204, 214, 216, 218, 220, 225], "hold": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196], "": [0, 1, 2, 3, 52, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 208, 213, 222, 225], "type": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 202, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 220], "thread": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 219, 224], "seed_seq": [0, 1, 2, 3, 117, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 221, 225], "note": [0, 1, 2, 3, 4, 7, 9, 10, 12, 15, 17, 18, 24, 29, 34, 39, 44, 46, 52, 53, 58, 61, 64, 65, 66, 69, 72, 73, 76, 79, 80, 81, 84, 88, 89, 92, 95, 97, 98, 102, 105, 106, 109, 114, 117, 122, 125, 128, 130, 131, 133, 136, 138, 139, 143, 144, 145, 149, 151, 156, 158, 163, 165, 170, 172, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 199, 204, 208, 209, 210, 212, 213, 214, 215, 220, 221], "64": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 20, 21, 24, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 42, 43, 46, 47, 49, 50, 53, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 77, 78, 80, 81, 82, 85, 86, 88, 89, 90, 93, 94, 97, 98, 100, 101, 107, 108, 109, 112, 113, 114, 117, 118, 119, 122, 126, 127, 128, 129, 130, 131, 134, 135, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 154, 155, 158, 159, 161, 162, 165, 166, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 182, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 202, 214, 217, 220, 221, 222, 225], "prng": [0, 1, 3, 7, 9, 10, 11, 15, 17, 18, 19, 22, 24, 25, 26, 29, 30, 31, 34, 35, 36, 39, 40, 41, 44, 46, 47, 48, 51, 53, 54, 55, 58, 59, 60, 66, 67, 68, 73, 75, 81, 82, 83, 89, 90, 91, 95, 97, 98, 99, 105, 109, 110, 111, 114, 115, 116, 120, 122, 123, 124, 128, 130, 131, 132, 136, 138, 139, 140, 143, 144, 145, 149, 151, 152, 153, 156, 158, 159, 160, 163, 165, 166, 167, 170, 172, 173, 174, 175, 177, 179, 182, 185, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 217, 219, 220, 222, 224], "design": [0, 1, 185, 186, 190, 191, 202], "cryptograph": [0, 3, 175, 185, 190, 191, 199, 217, 220], "function": [0, 1, 2, 3, 5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 104, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 143, 144, 146, 147, 148, 154, 155, 161, 162, 168, 169, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 213, 215, 217, 220, 221], "1": [0, 1, 2, 3, 7, 8, 15, 16, 22, 23, 25, 44, 45, 51, 52, 54, 59, 64, 65, 67, 72, 79, 80, 87, 88, 92, 95, 96, 102, 117, 120, 121, 123, 128, 129, 133, 136, 137, 143, 144, 149, 150, 156, 157, 163, 164, 170, 171, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 202, 203, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 221, 222, 225], "differ": [0, 1, 4, 12, 61, 69, 76, 84, 92, 125, 133, 178, 182, 183, 184, 185, 188, 190, 191, 195, 196, 198, 221, 224], "produc": [0, 1, 2, 3, 5, 6, 9, 13, 14, 17, 20, 21, 24, 27, 28, 29, 32, 33, 34, 37, 38, 39, 42, 43, 46, 47, 49, 50, 52, 53, 56, 57, 58, 62, 63, 66, 70, 71, 73, 77, 78, 81, 85, 86, 89, 93, 94, 97, 100, 101, 107, 108, 109, 112, 113, 114, 117, 118, 119, 122, 126, 127, 130, 134, 135, 138, 141, 142, 145, 147, 148, 151, 154, 155, 158, 161, 162, 165, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 202, 209, 214, 217, 219, 220, 221, 222, 225], "distinct": [0, 1, 2, 117, 175, 177, 179, 180, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 217, 222, 225], "ha": [0, 1, 52, 92, 117, 133, 178, 179, 182, 183, 184, 185, 186, 187, 188, 190, 191, 193, 194, 195, 196, 197, 200, 203, 210, 212, 215, 216, 217, 218, 219, 225], "period": [0, 1, 64, 65, 72, 178, 182, 183, 185, 188, 190, 191, 193, 194, 195, 196, 197, 217, 219, 221], "support": [0, 1, 2, 3, 175, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 200, 203, 212, 219, 220, 221], "arbitrari": [0, 1, 178, 182, 183, 184, 185, 190, 191, 217, 220, 221], "advanc": [0, 1, 2, 176, 178, 179, 180, 182, 183, 184, 185, 189, 190, 191, 193, 194, 195, 196, 198, 217, 219], "jump": [0, 1, 2, 176, 179, 180, 185, 189, 190, 191, 193, 194, 195, 196, 197, 200, 217, 219, 225], "increment": [0, 1, 64, 67, 74, 79, 82, 90, 117, 178, 182, 183, 184, 185, 188, 190, 191, 193, 194, 195, 196, 197, 198, 205, 220, 221, 222, 225], "These": [0, 1, 2, 3, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 198, 200, 202, 210, 214, 220, 221, 225], "featur": [0, 1, 2, 3, 175, 178, 179, 180, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 197, 200, 216], "allow": [0, 1, 2, 178, 179, 180, 185, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 202, 217, 219, 220], "non": [0, 1, 117, 182, 183, 184, 185, 190, 191, 193, 194, 195, 196, 210, 212, 217, 224, 225], "overlap": [0, 1, 182, 183, 184, 185, 187, 190, 191, 193, 194, 195, 196, 221, 224], "capsul": [0, 1, 2, 3, 175, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 202], "pointer": [0, 1, 2, 3, 5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 143, 144, 147, 148, 154, 155, 161, 162, 168, 169, 175, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 202], "doubl": [0, 1, 3, 5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 143, 144, 147, 148, 154, 155, 161, 162, 168, 169, 175, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 202, 210, 215, 220], "unsign": [0, 1, 2, 3, 9, 17, 24, 25, 29, 34, 39, 46, 53, 54, 58, 59, 66, 73, 81, 89, 97, 109, 114, 122, 123, 130, 138, 145, 151, 158, 165, 172, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 202, 214, 220, 221], "32": [0, 1, 2, 3, 4, 5, 6, 12, 13, 14, 20, 21, 25, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 54, 56, 57, 61, 62, 63, 69, 70, 71, 76, 77, 78, 84, 85, 86, 92, 93, 94, 100, 101, 107, 108, 112, 113, 117, 118, 119, 123, 125, 126, 127, 133, 134, 135, 141, 142, 143, 144, 147, 148, 154, 155, 161, 162, 168, 169, 175, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 214, 220, 221, 222, 225], "ar": [0, 1, 2, 3, 4, 7, 9, 10, 12, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 58, 59, 61, 66, 67, 69, 73, 76, 81, 82, 84, 89, 90, 92, 97, 98, 103, 105, 109, 110, 114, 115, 117, 122, 123, 125, 128, 130, 131, 133, 138, 139, 145, 146, 151, 152, 158, 159, 165, 166, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 214, 215, 217, 219, 220, 221, 222, 225], "consum": [0, 1, 2, 3, 175, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196], "must": [0, 1, 2, 3, 61, 69, 74, 76, 84, 92, 104, 117, 133, 143, 144, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 202, 208, 209, 210, 211, 215, 218, 221], "similar": [0, 1, 2, 3, 175, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 220], "object": [0, 1, 2, 3, 175, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 202, 219, 220], "low": [0, 1, 2, 3, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 202, 220, 225], "level": [0, 1, 2, 3, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 210, 220], "access": [0, 1, 2, 3, 52, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 201, 202, 214, 220], "see": [0, 1, 9, 10, 17, 18, 24, 29, 34, 39, 46, 47, 53, 58, 66, 67, 73, 81, 89, 97, 98, 109, 114, 122, 130, 131, 138, 139, 143, 144, 145, 151, 158, 159, 165, 172, 175, 177, 178, 182, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 217, 220, 225], "philox": [0, 176, 190, 191, 197, 217, 220, 221, 222], "threefri": [0, 176, 185, 190, 197, 200, 217, 220, 221, 222, 225], "relat": [0, 1, 10, 18, 98, 131, 139, 175, 185, 190, 191, 193, 195, 196, 208, 209], "vector": [0, 1, 2, 3, 175, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196], "consist": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197], "uint8": [0, 198, 221], "captur": [0, 1, 190], "buffer": [0, 1, 92, 105, 133, 175, 190, 197], "draw": [0, 1, 4, 12, 61, 69, 76, 84, 92, 117, 125, 133, 190, 197, 204, 208, 209, 210, 212, 215, 217, 220, 221], "distribut": [0, 1, 4, 12, 61, 69, 76, 84, 92, 125, 133, 190, 197, 200, 202, 203, 208, 209, 210, 211, 212, 215, 217, 219, 220, 221, 222], "22": [0, 3, 212, 215, 222], "11": [0, 198, 222], "128bit": 0, "8": [0, 1, 179, 181, 187, 194, 198, 209, 210, 222, 224, 225], "4": [0, 1, 3, 18, 98, 131, 139, 177, 178, 179, 185, 187, 188, 190, 191, 192, 194, 195, 196, 198, 209, 217, 219, 221, 222, 224, 225], "129": [0, 190, 222], "first": [0, 117, 179, 186, 188, 198, 202, 219, 221, 225], "two": [0, 4, 10, 12, 18, 61, 69, 76, 84, 92, 98, 125, 131, 133, 139, 179, 197, 198, 208, 209, 210, 211, 215, 221, 225], "user": [0, 1, 178, 186, 197, 198, 202, 217], "entropi": [0, 1, 2, 3, 30, 47, 67, 74, 82, 90, 110, 115, 123, 131, 139, 152, 159, 166, 173, 178, 179, 180, 182, 183, 184, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 217, 221, 224, 225], "pool": [0, 1, 199, 224], "offset": [0, 190], "vari": [0, 190, 210, 221], "between": [0, 2, 4, 12, 25, 54, 59, 61, 67, 69, 76, 84, 92, 117, 123, 125, 133, 177, 180, 181, 189, 190, 197, 208, 209, 217, 220, 221], "show": [0, 190, 198, 202, 210, 219, 221], "locat": [0, 190, 198, 210, 224], "next": [0, 143, 144, 178, 186, 190, 192, 197, 198, 202, 222], "singl": [0, 1, 2, 4, 9, 12, 17, 24, 29, 34, 39, 46, 53, 58, 61, 66, 69, 73, 76, 81, 84, 89, 92, 97, 103, 109, 114, 122, 125, 130, 133, 138, 143, 144, 145, 151, 158, 165, 172, 175, 177, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 208, 209, 210, 211, 212, 214, 215, 219, 220, 221, 222, 225], "In": [0, 1, 2, 3, 4, 12, 61, 69, 76, 84, 92, 117, 125, 133, 175, 178, 180, 181, 183, 184, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 210, 214, 215, 217, 219, 221], "case": [0, 1, 2, 9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 103, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172, 175, 180, 181, 183, 185, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 211, 212, 214, 221], "input": [0, 1, 2, 47, 143, 144, 175, 180, 181, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 209, 210, 212, 215, 217, 220, 221], "second": [0, 1, 178, 179, 183, 184, 185, 186, 190, 191, 221, 225], "output": [0, 1, 2, 4, 9, 12, 17, 24, 29, 34, 39, 46, 53, 58, 61, 66, 69, 73, 76, 81, 84, 89, 92, 97, 103, 109, 114, 122, 125, 130, 133, 138, 145, 151, 158, 165, 172, 175, 176, 177, 179, 180, 181, 183, 185, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 208, 209, 210, 211, 212, 214, 215, 217, 219, 221, 222, 225], "thi": [0, 1, 2, 3, 4, 7, 9, 10, 12, 15, 17, 18, 24, 29, 30, 34, 35, 39, 40, 44, 46, 47, 53, 58, 61, 66, 67, 69, 73, 74, 76, 79, 81, 82, 84, 89, 90, 92, 95, 97, 98, 102, 105, 106, 109, 110, 114, 115, 117, 122, 125, 128, 130, 131, 133, 136, 138, 139, 144, 145, 149, 151, 152, 156, 158, 159, 163, 165, 166, 170, 172, 173, 175, 178, 179, 180, 183, 184, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 209, 210, 213, 214, 215, 217, 219, 220, 221, 224, 225], "onli": [0, 1, 2, 92, 117, 133, 175, 176, 177, 179, 180, 181, 185, 186, 189, 190, 191, 193, 194, 195, 196, 197, 204, 210, 219, 224, 225], "small": [0, 1, 2, 117, 180, 181, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 201, 202, 220], "rang": [0, 1, 2, 10, 18, 25, 30, 35, 40, 47, 54, 59, 67, 82, 90, 92, 98, 110, 115, 123, 131, 133, 139, 152, 159, 166, 173, 175, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 198, 202, 219, 220, 221, 225], "possibl": [0, 1, 2, 106, 117, 180, 181, 185, 186, 189, 190, 191, 193, 194, 195, 196, 198, 200, 201, 203, 217], "applic": [0, 1, 2, 102, 175, 179, 180, 182, 183, 184, 185, 186, 187, 189, 190, 191, 193, 194, 195, 196, 197, 212, 215, 217, 220, 221, 222], "call": [0, 1, 2, 4, 10, 12, 18, 30, 35, 40, 47, 61, 67, 69, 74, 76, 82, 84, 90, 92, 98, 106, 110, 115, 125, 131, 133, 139, 144, 146, 152, 159, 166, 173, 179, 180, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 197, 198, 202, 204, 219, 221, 224], "method": [0, 1, 2, 4, 9, 10, 12, 17, 18, 24, 29, 30, 34, 35, 39, 40, 46, 47, 52, 53, 58, 61, 66, 67, 69, 73, 74, 76, 81, 82, 84, 89, 90, 92, 97, 98, 109, 110, 114, 115, 117, 122, 125, 130, 131, 133, 138, 139, 145, 151, 152, 158, 159, 165, 166, 172, 173, 176, 178, 179, 180, 182, 183, 184, 185, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 203, 204, 209, 210, 212, 214, 215, 217, 220, 221, 224, 225], "have": [0, 1, 2, 4, 8, 12, 15, 16, 22, 23, 44, 45, 51, 52, 61, 64, 65, 69, 72, 76, 79, 80, 84, 88, 92, 95, 96, 120, 121, 125, 129, 133, 136, 137, 149, 150, 156, 157, 163, 164, 170, 171, 178, 179, 180, 185, 186, 188, 189, 190, 191, 193, 194, 195, 196, 197, 199, 200, 202, 203, 209, 210, 211, 212, 215, 216, 217, 218, 221, 222, 225], "been": [0, 1, 2, 4, 8, 12, 15, 16, 22, 23, 44, 45, 51, 52, 61, 64, 65, 69, 72, 76, 79, 80, 84, 88, 92, 95, 96, 117, 120, 121, 125, 129, 133, 136, 137, 149, 150, 156, 157, 163, 164, 170, 171, 178, 179, 180, 185, 186, 189, 190, 191, 193, 194, 195, 196, 197, 200, 202, 203, 210, 215, 216, 217, 218, 221, 225], "altern": [0, 1, 175, 185, 190, 191, 211, 217, 222], "ani": [0, 1, 2, 4, 7, 12, 15, 25, 44, 54, 59, 69, 76, 79, 84, 92, 95, 104, 123, 125, 128, 133, 136, 149, 156, 163, 170, 180, 181, 185, 186, 189, 190, 191, 198, 200, 203, 219, 221, 222, 225], "posit": [0, 1, 2, 92, 131, 133, 180, 181, 185, 189, 190, 191, 208, 209, 210, 215], "step": [0, 1, 4, 12, 52, 61, 64, 65, 69, 72, 76, 79, 80, 84, 88, 92, 125, 133, 178, 182, 183, 184, 185, 190, 191, 197, 198, 217, 219, 220, 221, 222], "when": [0, 1, 3, 10, 18, 47, 64, 65, 67, 72, 79, 80, 88, 92, 98, 105, 117, 131, 133, 139, 143, 144, 159, 175, 183, 185, 186, 187, 188, 190, 191, 197, 198, 209, 210, 212, 215, 219, 220, 221, 224, 225], "all": [0, 1, 2, 9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 106, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172, 179, 180, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 200, 202, 208, 211, 214, 215, 219, 220, 222, 224, 225], "ensur": [0, 1, 2, 4, 7, 12, 15, 44, 69, 76, 79, 84, 95, 106, 125, 128, 136, 149, 156, 163, 170, 179, 180, 185, 186, 189, 190, 191, 193, 194, 195, 196, 198, 221, 225], "segment": [0, 1, 2, 179, 180, 185, 189, 190, 191, 193, 194, 195, 196], "come": [0, 1, 2, 179, 180, 185, 189, 190, 191, 193, 194, 195, 196], "numpi": [0, 1, 2, 3, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 208, 209, 210, 216, 217, 218, 219, 221, 222, 224, 225], "import": [0, 1, 2, 3, 117, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 209, 210, 217, 219, 221, 224, 225], "rg": [0, 1, 3, 175, 177, 179, 182, 183, 184, 185, 186, 190, 191, 193, 194, 195, 196, 201, 217, 219, 225], "1234": [0, 1, 3, 175, 177, 179, 182, 183, 184, 185, 190, 191, 193, 194, 195, 196], "_": [0, 1, 2, 180, 185, 186, 189, 190, 191, 193, 194, 195, 196, 219, 221, 225], "10": [0, 1, 2, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 196, 197, 198, 202, 219, 220, 222, 224], "each": [0, 1, 2, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 193, 194, 195, 196, 198, 204, 209, 210, 212, 215, 219, 225], "bit_gener": [0, 1, 2, 8, 16, 23, 45, 52, 65, 72, 80, 88, 96, 102, 121, 129, 137, 150, 157, 164, 171, 180, 182, 183, 184, 185, 189, 190, 191, 193, 194, 195, 196, 198, 200, 201, 216, 218], "where": [0, 1, 92, 133, 177, 178, 179, 183, 184, 185, 186, 190, 191, 197, 198, 200, 208, 209, 210, 215, 221, 225], "93": [0, 1, 190], "65": [0, 1, 185, 190, 191], "33": [0, 1, 185, 190, 191, 222], "17": [0, 1, 92, 133, 177, 185, 190, 191, 217, 218, 219, 222], "9": [0, 1, 185, 190, 191, 198, 219, 222], "compat": [0, 1, 2, 3, 92, 102, 104, 133, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 210, 218, 222, 225], "guarante": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 210, 225], "make": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 199, 219, 225], "fix": [0, 1, 2, 3, 64, 79, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 220, 221], "alwai": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 203, 210, 225], "stream": [0, 1, 2, 3, 52, 117, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 217, 221, 222, 224, 225], "exampl": [0, 1, 3, 4, 12, 61, 69, 76, 84, 92, 117, 125, 133, 143, 144, 175, 177, 178, 179, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 208, 209, 210, 211, 215, 219, 220, 221], "standard_norm": [0, 1, 3, 175, 177, 179, 185, 186, 190, 191, 193, 194, 195, 196, 197, 198, 202, 219, 220], "123": [0, 1, 3, 175, 177, 179, 185, 186, 190, 191, 193, 194, 195, 196], "refer": [0, 1, 2, 3, 52, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 208, 209, 210, 212, 215, 217], "encrypt": [0, 175, 190], "standard": [0, 1, 179, 198, 202, 208, 209, 210, 212, 215, 217, 220, 225], "n": [0, 9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 92, 95, 97, 103, 109, 114, 117, 122, 130, 133, 136, 138, 145, 151, 158, 165, 172, 178, 183, 184, 185, 191, 198, 199, 202, 208, 209, 210, 211, 212, 214, 215, 219, 220, 222, 224], "d": [0, 1, 177, 179, 198, 209, 210, 211], "wikipedia": [0, 208, 209], "retriev": [0, 179, 187], "june": [0, 3, 178, 179, 184, 187], "2019": [0, 179, 190], "http": [0, 1, 3, 52, 175, 177, 178, 179, 182, 183, 184, 186, 187, 188, 190, 193, 194, 195, 196, 208, 209, 223], "en": [0, 186, 208, 209], "org": [0, 175, 178, 182, 183, 184, 187, 188, 192, 198, 208, 209, 223, 225], "wiki": [0, 208, 209], "advanced_encryption_standard": 0, "counter": [1, 3, 10, 18, 92, 98, 131, 133, 139, 176, 188, 197, 217, 221], "round": [1, 190, 222, 225], "20": [1, 52, 180, 198, 217, 222, 225], "famili": [1, 178, 182, 183, 184, 185, 191, 222, 225], "256": [1, 18, 35, 98, 131, 139, 170, 171, 175, 187, 188, 190, 195, 196, 220, 221, 224, 225], "mixer": [1, 178, 183], "even": [1, 105, 179, 185, 188, 191, 219], "smaller": [1, 182, 194, 208], "usual": [1, 198, 202], "more": [1, 4, 12, 61, 69, 76, 84, 92, 125, 133, 186, 192, 197, 200, 202, 217, 221], "reduc": [1, 190], "secur": [1, 186, 190], "properti": [1, 143, 144, 178, 183, 184, 186, 192, 198, 210, 220], "while": [1, 179, 186, 192, 198, 202, 209, 210, 215, 221, 225], "improv": [1, 179, 190, 193, 197, 217], "perform": [1, 9, 17, 24, 29, 34, 39, 46, 52, 53, 58, 66, 73, 81, 89, 97, 103, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172, 185, 186, 190, 191, 192, 197, 202, 215, 217, 221, 225], "16": [1, 3, 4, 12, 61, 69, 76, 84, 92, 125, 133, 175, 178, 184, 194, 217, 221, 222, 225], "uint32": [1, 143, 177, 198, 204, 220, 222], "high": [1, 185, 187, 191, 197, 198, 202, 217, 220], "final": [1, 117, 179, 186, 198, 202, 210, 215, 221], "typic": 1, "12": [1, 190, 198, 222], "bernstein": 1, "j": [1, 208, 209, 210, 212, 215], "variant": [1, 183, 184, 185, 187, 190, 191, 197, 198, 201, 217, 220, 222, 225], "salsa20": 1, "cr": 1, "yp": 1, "paper": 1, "html": [1, 175, 177, 179, 186, 188], "2008": [1, 2, 52, 175, 180, 189], "01": [1, 179], "28": [1, 179, 222], "base": [2, 4, 12, 61, 69, 76, 84, 92, 125, 133, 175, 177, 178, 180, 181, 182, 183, 187, 189, 193, 194, 195, 196, 197, 202, 217, 220, 221, 222], "rng": [2, 4, 7, 10, 12, 15, 18, 44, 61, 64, 69, 76, 79, 84, 92, 95, 98, 125, 128, 133, 136, 139, 149, 156, 163, 170, 178, 179, 182, 183, 184, 189, 194, 197, 198, 200, 202, 217, 221], "inclus": [2, 25, 54, 59, 123, 179, 180, 181, 189, 217], "other": [2, 25, 54, 59, 104, 123, 177, 180, 181, 186, 188, 189, 197, 202, 210, 214, 217, 220, 225], "764": [2, 25], "stdlib": [2, 180, 181, 189], "modul": [2, 180, 181, 189, 217], "also": [2, 3, 74, 92, 110, 115, 133, 176, 177, 180, 181, 183, 186, 187, 188, 189, 194, 197, 200, 202, 217, 221, 222], "384": 2, "plu": [2, 180, 181, 189], "382": [2, 189], "indic": [2, 92, 106, 133, 189, 198, 210, 212, 221, 225], "current": [2, 176, 180, 181, 189, 197, 202, 205], "within": [2, 180, 181, 189], "main": [2, 180, 181, 189, 197, 200, 217], "implement": [2, 52, 87, 177, 178, 182, 183, 184, 186, 188, 189, 190, 192, 194, 197, 198, 202, 220, 221], "here": [2, 189, 198], "augment": [2, 189], "effici": [2, 52, 176, 178, 180, 182, 183, 184, 189], "origin": [2, 52, 177, 179, 180, 183, 189, 193, 194, 195, 196, 197, 222], "split": [2, 179, 180, 189, 193, 194, 195, 196], "worker": [2, 179, 180, 189, 193, 194, 195, 196], "random_entropi": [2, 180, 189, 199, 217, 220, 221], "r": [2, 177, 179, 180, 189, 198, 210, 212, 215], "mutsuo": [2, 189], "saito": [2, 189, 194], "makoto": [2, 52, 180, 189], "matsumoto": [2, 52, 180, 181, 189, 194], "orient": [2, 210], "fast": [2, 3, 175, 178, 180, 182, 183, 184, 187, 188, 192, 195, 196, 197, 198, 200, 217, 219, 220, 222, 223], "pseudorandom": [2, 52, 189], "mont": [2, 189], "carlo": [2, 189], "quasi": [2, 189], "2006": [2, 189], "springer": [2, 175, 189], "pp": [2, 52, 175, 179, 180, 189, 194], "607": [2, 189], "622": [2, 189], "hiroshi": [2, 52, 180, 189], "haramoto": [2, 52, 180, 189], "pierr": [2, 52, 180, 189], "l": [2, 52, 178, 180, 189, 212, 215], "ecuy": [2, 52, 178, 180, 189], "A": [2, 3, 110, 115, 143, 144, 177, 178, 180, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 198, 199, 200, 203, 204, 209, 210, 212, 215, 220, 221, 224, 225], "ahead": [2, 52, 180, 189], "algorithm": [2, 177, 178, 180, 182, 183, 184, 187, 188, 189, 190, 199], "linear": [2, 52, 179, 180, 189, 193, 195, 196, 198], "recurr": [2, 180, 189], "polynomi": [2, 52, 180, 189], "space": [2, 177, 178, 180, 182, 183, 184, 189, 210], "Their": [2, 180, 189], "seta": [2, 180, 189], "290": [2, 180, 189], "298": [2, 180, 189], "efiix64": [3, 176, 197, 217, 222, 225], "efiix64x384": 3, "known": [3, 200, 225], "written": [3, 143, 144, 192, 193, 195, 196, 197, 220], "chri": [3, 188], "doti": [3, 188], "humphrei": [3, 188], "It": [3, 10, 18, 30, 35, 40, 47, 67, 74, 82, 90, 98, 110, 115, 131, 139, 152, 159, 166, 173, 175, 178, 183, 186, 187, 192, 193, 195, 196, 197, 198, 200, 201, 210, 215, 217, 225], "tabl": [3, 178, 181, 222, 225], "statist": [3, 178, 179, 182, 183, 184, 188, 190, 193, 194, 195, 196, 212, 215, 217], "qualiti": [3, 175, 187, 193, 195, 196, 197, 217], "faster": [3, 185, 191, 194, 209, 210, 215, 220, 222], "addit": [3, 175, 178, 179, 183, 184, 201, 217, 219, 220, 221], "3": [3, 52, 117, 177, 178, 179, 180, 181, 184, 185, 187, 188, 191, 194, 198, 209, 210, 211, 212, 215, 217, 219, 222, 225], "constant": [3, 179, 197], "updat": [3, 4, 12, 61, 69, 76, 84, 92, 125, 133, 178, 179, 184, 197, 198, 221], "pass": [3, 47, 104, 110, 115, 143, 144, 146, 186, 187, 188, 192, 198, 201, 202, 213, 217, 221, 224, 225], "parallel": [3, 102, 175, 187, 197, 220], "combin": [3, 179, 222], "spawn": [3, 178, 187, 217, 221, 222, 224, 225], "ss": [3, 178], "8509285875904376097169743623867": 3, "bit_gen": [3, 117, 178, 187, 188, 198, 225], "child": [3, 178, 187, 205, 221, 225], "1024": [3, 175, 193, 194, 195, 196, 221], "p": [3, 175, 177, 178, 198, 210, 212, 215], "2020": [3, 52, 178, 179, 184, 186, 187], "practic": [3, 117, 186, 188, 214, 224, 225], "discuss": [3, 178], "open": [3, 197, 211, 220], "too": [3, 197, 217], "chi": 3, "squar": [3, 210], "sum": [3, 179], "realli": 3, "problem": 3, "onlin": [3, 52, 178, 179, 184, 186, 194], "sourceforg": [3, 188], "net": [3, 177, 179, 188], "pracrand": [3, 188], "366935": 3, "c73ddb7b": 3, "d0fc": 3, "delta": [4, 12, 61, 69, 76, 84, 92, 125, 133], "underli": [4, 9, 12, 17, 24, 29, 34, 39, 46, 53, 58, 61, 66, 69, 73, 76, 81, 84, 89, 92, 97, 103, 109, 114, 122, 125, 130, 133, 138, 143, 144, 145, 151, 158, 165, 172, 183, 198, 200, 214, 219, 220, 221], "occur": [4, 12, 61, 69, 76, 84, 92, 125, 133, 186, 197, 221], "return": [4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 177, 178, 183, 192, 197, 198, 199, 200, 202, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 221], "self": [4, 7, 12, 15, 22, 44, 51, 61, 64, 69, 76, 79, 84, 92, 95, 120, 125, 128, 133, 136, 149, 156, 163, 170, 178, 184, 198, 219], "state": [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 21, 22, 23, 27, 28, 32, 33, 37, 38, 42, 43, 44, 45, 47, 49, 50, 51, 52, 56, 57, 61, 62, 63, 64, 65, 69, 70, 71, 72, 76, 77, 78, 79, 80, 84, 85, 86, 88, 92, 93, 94, 95, 96, 98, 100, 101, 107, 108, 110, 112, 113, 115, 118, 119, 120, 121, 125, 126, 127, 128, 129, 133, 134, 135, 136, 137, 139, 141, 142, 143, 144, 147, 148, 149, 150, 154, 155, 156, 157, 161, 162, 163, 164, 168, 169, 170, 171, 176, 197, 198, 199, 202, 204, 211, 217, 219, 220, 225], "given": [4, 9, 12, 17, 24, 29, 34, 39, 46, 53, 58, 61, 66, 69, 73, 76, 81, 84, 89, 92, 97, 103, 109, 114, 122, 125, 130, 133, 138, 145, 151, 158, 165, 172, 185, 199, 208, 209, 210, 211, 212, 214, 215, 220, 221], "made": [4, 12, 61, 69, 76, 84, 92, 125, 133, 217, 221], "gener": [4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 181, 197, 198, 199, 200, 203, 220, 222, 223, 225], "one": [4, 12, 61, 69, 76, 84, 92, 125, 133, 144, 188, 197, 198, 202, 210, 217, 221, 222], "relationship": [4, 12, 61, 69, 76, 84, 92, 125, 133, 221], "particular": [4, 12, 61, 69, 76, 84, 92, 125, 133, 199, 221], "core": [4, 12, 61, 69, 76, 84, 92, 125, 133, 186, 200, 201, 217, 219, 220, 221], "reason": [4, 12, 61, 69, 76, 84, 92, 125, 133, 219, 221, 222, 224, 225], "simul": [4, 12, 61, 69, 76, 84, 92, 125, 133, 181, 212, 220, 221], "reject": [4, 12, 61, 69, 76, 84, 92, 117, 125, 133, 221], "averag": [4, 12, 61, 69, 76, 84, 92, 125, 133, 175, 210, 221], "than": [4, 12, 61, 69, 76, 84, 92, 125, 133, 175, 183, 186, 198, 208, 209, 210, 215, 220, 221], "requir": [4, 7, 11, 12, 15, 19, 26, 31, 36, 41, 44, 48, 55, 60, 61, 68, 69, 75, 76, 79, 83, 84, 91, 92, 95, 99, 105, 111, 116, 124, 125, 128, 132, 133, 136, 140, 149, 153, 156, 160, 163, 167, 170, 174, 185, 197, 202, 213, 218, 219, 221, 222, 225], "For": [4, 10, 12, 18, 47, 61, 67, 69, 76, 84, 92, 98, 117, 125, 131, 133, 139, 159, 197, 220, 221, 222], "reset": [4, 7, 12, 15, 44, 69, 76, 79, 84, 92, 95, 106, 125, 128, 133, 136, 149, 156, 163, 170, 197, 221], "pre": [4, 7, 12, 15, 44, 69, 76, 79, 84, 95, 125, 128, 136, 149, 156, 163, 170, 184, 197, 210, 215, 221], "comput": [4, 7, 12, 15, 44, 52, 69, 76, 79, 84, 95, 125, 128, 136, 149, 156, 163, 170, 178, 179, 180, 181, 185, 191, 209, 210, 215, 221, 222], "exact": [4, 7, 12, 15, 44, 69, 76, 79, 84, 95, 125, 128, 136, 149, 156, 163, 170, 221], "reproduc": [4, 7, 12, 15, 44, 69, 74, 76, 79, 84, 95, 125, 128, 136, 149, 156, 163, 170, 186, 199, 217, 219, 224], "interfac": [5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 144, 147, 148, 154, 155, 161, 162, 168, 169, 197, 198, 202], "name": [5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 147, 148, 154, 155, 161, 162, 168, 169, 178, 183, 185, 191, 197, 198, 200, 211], "tupl": [5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 147, 148, 154, 155, 161, 162, 168, 169, 221], "wrapper": [5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 147, 148, 154, 155, 161, 162, 168, 169, 176, 192, 197, 198], "state_address": [5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 147, 148, 154, 155, 161, 162, 168, 169, 198, 202], "memori": [5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 147, 148, 154, 155, 161, 162, 168, 169, 192, 198], "address": [5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 147, 148, 154, 155, 161, 162, 168, 169, 192, 198, 202], "struct": [5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 147, 148, 154, 155, 161, 162, 168, 169, 198, 202], "next_uint64": [5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 147, 148, 154, 155, 161, 162, 168, 169, 202], "next_uint32": [5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 147, 148, 154, 155, 161, 162, 168, 169, 202], "next_doubl": [5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 143, 144, 147, 148, 154, 155, 161, 162, 168, 169, 192, 198, 202], "bitgen": [5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 147, 148, 154, 155, 161, 162, 168, 169, 186, 200, 202], "namedtupl": [5, 6, 13, 14, 20, 21, 27, 28, 32, 33, 37, 38, 42, 43, 49, 50, 56, 57, 62, 63, 70, 71, 77, 78, 85, 86, 93, 94, 100, 101, 107, 108, 112, 113, 118, 119, 126, 127, 134, 135, 141, 142, 147, 148, 154, 155, 161, 162, 168, 169], "iter": [7, 8, 15, 16, 22, 23, 44, 45, 64, 65, 72, 79, 80, 87, 88, 95, 96, 102, 120, 121, 128, 129, 136, 137, 149, 150, 156, 157, 163, 164, 170, 171, 177, 187, 188, 202], "new": [8, 16, 23, 45, 52, 65, 72, 80, 88, 96, 102, 121, 129, 137, 150, 157, 164, 171, 179, 185, 191, 197, 198, 200, 210, 221], "big": [8, 16, 23, 45, 52, 65, 72, 80, 88, 96, 121, 129, 137, 150, 157, 164, 171, 178], "size": [9, 17, 24, 29, 34, 39, 40, 46, 53, 58, 61, 64, 65, 66, 69, 72, 73, 76, 79, 80, 81, 84, 88, 89, 92, 97, 103, 109, 114, 122, 130, 133, 138, 145, 151, 158, 165, 172, 177, 178, 186, 193, 195, 196, 197, 198, 199, 204, 208, 209, 210, 211, 212, 214, 215, 221, 224, 225], "true": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 92, 97, 103, 106, 109, 114, 122, 130, 133, 138, 145, 151, 158, 165, 172, 178, 186, 193, 198, 202, 210, 212, 220, 224], "bitgener": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 103, 109, 110, 114, 115, 122, 130, 138, 145, 151, 158, 165, 172, 186, 187, 188, 197, 200, 204, 207, 217, 224], "shape": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 103, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172, 197, 199, 204, 208, 209, 210, 211, 212, 214, 215], "e": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 103, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172, 176, 177, 178, 182, 183, 184, 185, 186, 188, 191, 198, 199, 200, 208, 209, 210, 211, 212, 214, 220, 224], "g": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 103, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172, 176, 177, 186, 198, 199, 200, 202, 208, 210, 211, 212, 214, 215, 220], "m": [9, 17, 24, 29, 34, 39, 46, 52, 53, 58, 66, 73, 81, 89, 97, 103, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172, 178, 181, 183, 184, 185, 187, 191, 198, 199, 208, 209, 210, 211, 212, 214, 215, 219], "k": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 103, 109, 114, 117, 122, 130, 138, 145, 151, 158, 165, 172, 185, 188, 191, 198, 199, 208, 209, 210, 211, 212, 214, 215, 221, 222, 225], "sampl": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 103, 109, 114, 117, 122, 130, 138, 145, 151, 158, 165, 172, 197, 199, 208, 209, 210, 211, 212, 214, 215, 220, 225], "drawn": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 103, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172, 199, 208, 209, 210, 211, 212, 214, 221], "test": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 103, 105, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172, 176, 197, 202, 217, 220], "sinc": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 103, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172, 179, 186, 197, 198, 214, 217, 220, 221, 222, 225], "out": [9, 10, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 58, 59, 66, 67, 73, 81, 82, 89, 90, 97, 98, 103, 109, 110, 114, 115, 122, 123, 130, 131, 138, 139, 145, 151, 152, 158, 159, 165, 166, 172, 173, 192, 197, 198, 202, 208, 209, 210, 211, 214, 219, 220], "ndarrai": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 103, 109, 114, 117, 122, 130, 138, 145, 151, 158, 165, 172, 208, 209, 210, 211, 212, 214, 215], "expos": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172, 198, 201, 214, 217, 220], "raw": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 109, 114, 122, 130, 138, 143, 144, 145, 151, 158, 165, 172, 198, 202, 214], "irrespect": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172], "docstr": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172, 197], "again": [10, 18, 30, 35, 40, 47, 67, 74, 82, 90, 98, 110, 115, 131, 139, 152, 159, 166, 173], "re": [10, 18, 30, 35, 40, 47, 67, 74, 82, 90, 98, 110, 115, 131, 139, 152, 159, 166, 173, 208, 209], "detail": [10, 18, 47, 67, 98, 131, 139, 159, 217], "rais": [10, 18, 25, 30, 35, 40, 47, 54, 59, 67, 82, 90, 98, 103, 104, 110, 115, 123, 131, 139, 143, 144, 146, 152, 159, 166, 173, 186, 192, 197, 198, 199, 200, 202, 209], "valueerror": [10, 18, 25, 30, 35, 40, 47, 54, 59, 67, 82, 90, 98, 104, 110, 115, 123, 131, 139, 152, 159, 166, 173, 198, 202], "represent": [10, 18, 98, 131, 139], "get": [11, 19, 26, 31, 36, 41, 48, 55, 60, 68, 75, 83, 91, 99, 105, 106, 111, 116, 124, 132, 140, 143, 144, 146, 153, 160, 167, 174, 176, 192, 198, 206, 207, 213, 220, 224], "dictionari": [11, 19, 26, 31, 36, 41, 48, 55, 60, 68, 75, 83, 91, 99, 105, 111, 116, 124, 132, 140, 153, 160, 167, 174, 213], "inform": [11, 19, 26, 31, 36, 41, 48, 52, 55, 60, 68, 75, 83, 91, 99, 105, 111, 116, 124, 132, 140, 153, 160, 167, 174, 180, 197, 202, 213, 217], "describ": [11, 19, 26, 31, 36, 41, 48, 55, 60, 68, 75, 83, 91, 99, 105, 111, 116, 124, 132, 140, 153, 160, 167, 174, 213], "dict": [11, 19, 26, 31, 36, 41, 48, 55, 60, 68, 75, 83, 91, 99, 105, 111, 116, 124, 132, 140, 153, 160, 167, 174, 198, 213], "array_lik": [18, 110, 115, 187, 188, 204], "option": [18, 110, 115, 178, 179, 188, 202, 217, 220], "lower": [35, 175, 178, 186, 198], "upper": [35, 175, 178, 198, 215, 225], "hc": 35, "cipher": [35, 220, 221], "modifi": 52, "version": [52, 185, 191, 193, 197, 198, 217, 218, 220, 225], "horner": 52, "precomput": 52, "verifi": [52, 106], "match": [52, 180, 183, 197, 198, 211], "disjoint": 52, "mai": [52, 110, 115, 117, 176, 187, 188, 203, 209, 220], "6": [52, 179, 190, 194, 198, 210, 217, 219, 222], "www": [52, 175, 178, 182, 183, 184, 186, 187, 188], "math": 52, "sci": 52, "hiroshima": 52, "u": [52, 186], "ac": 52, "jp": 52, "mat": 52, "mt": [52, 225], "takuji": [52, 180], "nishimura": [52, 180, 181], "fran\u00e7oi": [52, 180], "panneton": [52, 180], "f2": [52, 180], "journal": [52, 179, 180, 194, 212, 215], "ON": [52, 180], "vol": [52, 180], "No": [52, 180, 186], "summer": [52, 180], "385": [52, 180], "390": [52, 180], "624": [54, 123, 180, 189], "312": [59, 181], "less": [61, 69, 76, 84, 92, 133, 186, 209, 210, 215], "variabl": [61, 69, 76, 84, 92, 133, 208, 209, 210, 220], "11400714819323198486": [64, 65], "phi": [64, 65, 72, 79, 80, 88, 197, 221], "divid": [64, 65, 72, 79, 80, 88], "inc": [67, 74, 82, 90, 178, 182, 183, 184, 198], "pcg64": [67, 176, 178, 182, 184, 197, 198, 200, 201, 217, 220, 221, 222, 225], "lcg": [67, 74, 82, 90, 176, 179, 182, 183, 184, 197, 198, 217], "golden": [72, 79, 80, 88, 221], "ratio": [72, 79, 80, 88, 221], "system": [74, 177, 178, 183, 184, 197, 217, 220, 221], "210306068529402873165736369884012333108": 79, "try": [82, 90, 182], "els": [82, 90, 198, 225], "Not": [87, 104], "take": [92, 133, 143, 144, 186, 192, 198], "neg": [92, 133, 210], "outsid": [92, 133], "w": [92, 95, 96, 133, 136, 137, 185, 188, 191, 222], "convert": [92, 133], "modulo": [92, 133], "flag": [92, 106, 133, 186, 198, 212], "whether": [92, 133, 178, 193, 212], "pattern": [92, 133, 210, 221], "chang": [92, 133, 178, 193, 198, 201, 220, 225], "fals": [92, 106, 133, 193, 198, 202, 212, 219, 225], "To": [92, 133, 186, 211, 225], "delta_new": [92, 133], "store": [92, 133, 185, 191, 198, 221, 224], "backward": [92, 133, 197, 210, 218, 222, 225], "stateless": [102, 186], "ignor": [102, 219], "api": [102, 197, 200], "runtimeerror": [103, 186, 199], "instruct": [103, 186, 221], "fail": [103, 186, 197, 199, 225], "after": [103, 178, 198, 202, 219, 220], "retri": [103, 186, 197], "fill": [105, 202, 219, 220], "never": 105, "restor": [105, 197], "unpickl": [105, 197], "succeed": [106, 186, 203], "failur": [106, 186, 197, 225], "bool": 106, "onc": [106, 224], "statu": [106, 186], "remain": [106, 220], "unless": [106, 211, 222], "manual": [106, 186], "happen": [106, 186], "fresh": [110, 115, 187, 188], "unpredict": [110, 115, 187, 188], "pull": [110, 115, 187, 188, 197, 203], "o": [110, 115, 178, 182, 183, 184, 185, 187, 188, 191, 210], "deriv": [110, 115, 179, 187, 188], "One": [110, 115, 177, 185, 187, 188, 191, 211], "max_bit": 117, "min_bit": 117, "weyl": [117, 188, 197, 217, 220, 222, 225], "construct": [117, 143, 144, 192, 195, 196, 225], "maximum": [117, 186, 220, 225], "zero": [117, 198, 208, 209, 219, 221], "minimum": [117, 188, 197], "odd": [117, 178, 179, 188, 221], "4893028492374823749823": 117, "1000": [117, 198, 208, 221], "larg": [117, 187, 190, 197, 219, 220, 221, 222, 225], "rel": [117, 209, 222, 225], "configur": [117, 184, 185, 217, 221], "veri": [117, 197, 222, 224], "slow": [117, 192, 198, 217, 220], "most": [117, 186, 192, 197, 210, 214, 217, 221, 225], "2080": 117, "simpler": [117, 198, 220], "sampler": 117, "wast": 117, "mani": [117, 177, 186, 197, 200, 204, 217, 221, 225], "like": [117, 184, 197, 199, 200, 210, 215, 217], "issu": [117, 178, 184, 186, 197, 198, 200, 225], "close": [117, 185, 191, 197, 220, 222], "chosen": [117, 178], "uniformli": 117, "nz_bit": 117, "63": [117, 198, 212, 215], "replac": [117, 183, 197, 200, 220], "previous": 117, "classmethod": [143, 144], "next_raw": [143, 144, 192, 198, 202], "next_64": [143, 144, 192, 198], "next_32": [143, 144, 192, 198], "state_gett": [143, 144, 146, 192, 198], "state_sett": [143, 144, 146, 192, 198], "ctype": [143, 144, 178, 192, 197, 198, 202, 220], "numba": [143, 176, 178, 192, 197, 217, 220], "callback": [143, 198], "signatur": [143, 178, 192], "void": [143, 144, 192, 198, 202], "variat": [143, 144, 178, 183, 184, 197, 201, 202, 212, 215], "callabl": [143, 144, 192, 198], "notimplementederror": [143, 144, 146, 192, 197, 198, 200], "document": [143, 144, 192, 197, 217], "cfunctiontyp": 144, "c_uint64": 144, "c_void_p": [144, 198], "c": [144, 177, 192, 197, 198, 200, 202, 209, 220], "512": [156, 157, 175, 193, 194, 195, 196, 221], "hc128": [175, 176, 217, 220, 221, 222, 225], "wa": [175, 186, 197, 203, 217, 220, 225], "develop": [175, 186], "hongjun": 175, "wu": 175, "estream": 175, "finalist": 175, "keystream": 175, "suitabl": [175, 220, 221], "cycl": [175, 179, 186, 188], "length": [175, 188, 225], "expect": [175, 188, 212], "32777": 175, "fastest": [175, 197, 209, 210, 215, 222], "softwar": [175, 179, 186, 194], "about": [175, 188, 197, 198, 200, 217, 225], "50": [175, 188, 221, 225], "aesni": 175, "chacha": [175, 176, 202, 217, 220, 221, 222, 225], "block": [175, 198, 215, 221], "rather": [175, 183], "q": [175, 177, 198], "index": [175, 180, 181, 217, 221], "simpl": [175, 178, 179, 182, 183, 184, 193, 194, 195, 196, 197, 198, 214], "ecrypt": 175, "eu": 175, "p3cipher": 175, "hc128_p3": 175, "pdf": [175, 190], "lnc": 175, "4986": 175, "39": [175, 198, 222], "47": 175, "verlag": 175, "ntu": 175, "edu": 175, "sg": 175, "home": 175, "wuhj": 175, "research": 175, "do": [176, 197, 219, 222], "seed": [176, 197, 198, 199, 204, 217, 219, 220, 221], "consumpt": 176, "includ": [176, 178, 197, 202, 210, 217, 220, 221, 225], "futur": [176, 184, 197, 217, 219], "releas": [176, 197, 216, 218, 220], "ae": [176, 217], "dsfmt": [176, 197, 217, 220, 221, 222, 225], "jsf": [176, 177, 198, 217, 220, 222, 225], "lxm": [176, 197, 217, 220, 221, 222, 225], "mt19937": [176, 197, 201, 217, 220, 221, 222, 225], "mt64": [176, 181, 197, 217, 220, 222], "pcg32": [176, 197, 217, 220, 221], "multipli": [176, 178, 183, 197, 198, 211, 217, 221], "dxsm": [176, 178, 183, 197, 201, 217, 220, 222, 225], "mix": [176, 179, 183, 187, 188, 197, 217, 224], "rdrand": [176, 197, 217, 220, 221, 222], "romu": [176, 197, 217, 222, 225], "sfc64": [176, 197, 217, 220, 221, 222, 225], "sfmt": [176, 197, 217, 220, 221, 222, 225], "speck128": [176, 190, 217, 220, 221, 222, 225], "xoroshiro128": [176, 194, 197, 202, 217, 220, 221], "xoshiro256": [176, 197, 217, 219, 220, 221, 222, 225], "xoshiro512": [176, 197, 217, 220, 221, 222, 225], "perman": 176, "xorshift1024": [176, 193, 195, 196, 197, 217, 220, 221], "\u03c6": [176, 217], "seed_siz": [177, 198, 225], "higher": [177, 198, 210], "increas": 177, "better": [177, 178, 179, 182, 183, 184, 217], "suit": 177, "three": [177, 188, 202, 211, 225], "defin": [177, 178, 197, 217], "select": [177, 209, 210, 215, 220, 224], "list": [177, 178, 188, 205, 210, 217, 221, 225], "b": [177, 179, 198, 211], "depend": [177, 186, 188, 198, 209, 221], "rotl": 177, "end": [177, 209], "x": [177, 190, 198, 200, 202, 209, 210], "y": [177, 209, 210], "left": [177, 209], "rotat": [177, 183, 192, 193, 198, 217, 220], "27": [177, 178, 222], "7": [177, 197, 198, 200, 209, 219, 222, 225], "13": [177, 197, 198, 222, 223, 225], "37": [177, 198, 225], "There": [177, 200, 221], "parameter": [177, 208, 209], "attribut": [177, 219, 225], "unsid": 177, "bob": 177, "2009": 177, "noncryptograph": 177, "burtleburtl": 177, "rand": [177, 220], "smallprng": 177, "lcg128mix": [178, 184, 197, 217, 220, 221, 225], "47026247687942121848144207491837523525": 178, "xsl": [178, 183, 198], "rr": [178, 183, 198], "dxsm_multipli": 178, "15750249268501108917": 178, "post": [178, 188, 197], "customiz": 178, "add": [178, 197, 203, 211, 217], "good": [178, 182, 183, 184, 222], "ad": [178, 179, 188, 197, 203, 220], "pcg": [178, 182, 183, 184, 188, 197, 198, 201, 217, 221], "murmur3": [178, 179], "appli": [178, 197, 198, 202, 210, 215], "neill": [178, 182, 183, 184], "permut": [178, 197, 220], "assum": [178, 210, 215], "appropri": [178, 204, 224], "s_": [178, 183, 184, 198], "mod": [178, 179, 183, 184], "spectral": [178, 183, 184], "predefin": 178, "repres": [178, 182, 183, 184, 210], "extern": [178, 183, 184, 198], "custom": 178, "creat": [178, 179, 198, 205, 219, 221, 224], "lcg_mult": 178, "0x1da942042e4dd58b5": 178, "dxsm_mult": 178, "0xff37f1f758180525": 178, "write": [178, 186, 202, 217], "half": [178, 197, 198, 211], "cfunc": [178, 198], "def": [178, 192, 198, 202, 219], "murmur3_mix": 178, "hi": 178, "lo": 178, "z": [178, 198, 209], "30": [178, 181, 222], "0xbf58476d1ce4e5b9": 178, "0x94d049bb133111eb": 178, "31": [178, 198, 222], "cpcg": 178, "0xdead10cc": 178, "prefer": [178, 193, 197, 200, 220], "coupl": 178, "37548236789240574857439075": 178, "children": [178, 221, 224], "melissa": [178, 182, 183, 184], "1999": 178, "lattic": 178, "structur": [178, 186, 197, 198, 202], "mathemat": 178, "68": 178, "225": 178, "249": [178, 222], "260": 178, "github": [178, 184, 190], "repositori": [178, 184], "By": [178, 184, 225], "signific": [178, 184], "danger": [178, 184], "correl": [178, 184, 193, 209, 221], "com": [178, 179, 184, 186], "16313": [178, 184], "3037000493": 179, "propos": [179, 197], "java": [179, 197], "2862933555777941757": 179, "settabl": 179, "5": [179, 198, 202, 208, 209, 211, 217, 219, 221, 222], "xorshift": [179, 183, 184, 193, 194, 195, 196, 197, 217], "suggest": 179, "david": [179, 185, 191, 193, 195, 196], "stafford": 179, "clear": [179, 186, 198], "appear": [179, 197], "constraint": [179, 200], "he": 179, "append": [179, 219, 221, 225], "alter": 179, "full": [179, 202, 210, 220, 221], "gui": 179, "steel": 179, "21": [179, 198, 222, 225], "jep": 179, "356": 179, "enhanc": [179, 197], "openjdk": 179, "marsaglia": [179, 194], "georg": [179, 194], "14": [179, 194, 198, 222], "2003": [179, 194], "shootout": [179, 193, 194, 195, 196], "di": [179, 193, 194, 195, 196], "unimi": [179, 193, 194, 195, 196], "2011": [179, 185, 191], "septemb": 179, "murmurhash3": 179, "zimbri": 179, "blogspot": 179, "09": 179, "bret": 179, "beck": 179, "eugen": 179, "brook": 179, "iii": 179, "2000": [179, 181], "decemb": 179, "congruenti": [179, 198, 220], "nuclear": 179, "llnl": 179, "gov": 179, "cnp": 179, "rngman": 179, "node4": 179, "mechan": 180, "exactli": 180, "768": [180, 189], "t": [181, 209, 210, 215], "1998": 181, "623": 181, "dimension": [181, 209, 210], "equidistribut": 181, "uniform": [181, 197, 200, 202, 211, 220, 222], "acm": [181, 185, 191], "transact": 181, "model": [181, 222], "348": 181, "357": 181, "correspond": 183, "alias": 183, "ident": [183, 198, 209, 210, 212, 217, 225], "except": [183, 186, 197, 198, 200, 209, 225], "cheap": 183, "cm": [183, 201, 220], "trust": 183, "chose": [183, 188], "wai": [183, 202, 217, 221, 224], "addition": [183, 220, 221], "check": [183, 186, 188, 197, 202, 209, 210, 215, 225], "xor": [183, 198, 217], "pcg64dxsm": [184, 197, 222, 225], "mult": 184, "func": 184, "alia": [184, 197], "becom": [184, 197], "seedseuqnc": 184, "width": [185, 191, 210], "map": [185, 188, 191, 220], "scheme": [185, 191], "philoxnxw": 185, "realiz": 185, "weaker": [185, 191], "encod": [185, 191, 221], "everi": [185, 191], "determin": [185, 186, 191, 210, 211, 215], "196": [185, 191, 222, 225], "132": [185, 191], "john": [185, 191], "salmon": [185, 191], "mark": [185, 187, 191, 225], "mora": [185, 191], "ron": [185, 191], "dror": [185, 191], "shaw": [185, 191], "As": [185, 191], "easi": [185, 191], "proceed": [185, 191], "intern": [185, 191, 197, 224], "confer": [185, 191], "network": [185, 191], "storag": [185, 191], "analysi": [185, 191, 212, 215], "sc11": [185, 191], "york": [185, 191, 210], "ny": [185, 191], "On": [186, 199, 212, 215], "cpu": 186, "heavili": 186, "util": [186, 202], "paus": [186, 197], "wait": [186, 219], "specif": [186, 197, 201, 221, 222, 225], "140": 186, "skylak": 186, "recommend": [186, 188, 197, 217, 225], "intel": [186, 197, 222], "you": [186, 197, 200, 216, 218, 220, 222, 224], "up": [186, 197, 198, 202], "your": 186, "platform": 186, "error": 186, "although": [186, 203, 222], "100": [186, 198, 210, 219, 222], "processor": 186, "ivi": 186, "bridg": 186, "line": [186, 197], "2012": 186, "later": 186, "amd": 186, "start": [186, 188, 198], "2015": [186, 208, 209], "audit": 186, "report": [186, 225], "much": [186, 220], "slower": [186, 187, 198, 209, 210, 215, 222], "result": [186, 197, 211, 217, 221], "NOT": [186, 199], "doe": [186, 197, 198, 199, 213, 219, 221], "propag": 186, "quickli": 186, "determinist": [186, 197], "chaotic": [186, 188, 220], "With": 186, "short": [186, 225], "massiv": 186, "necessari": 186, "exce": 186, "howev": [186, 221], "oper": [186, 197, 198, 200, 220], "gil": 186, "mean": [186, 188, 198, 208, 209, 210, 219, 222], "thei": [186, 200], "instead": [186, 197, 210], "detect": [186, 221], "runtimerror": 186, "automat": [186, 199, 215], "attach": 186, "exit": 186, "pycapsul": [186, 202], "need": [186, 197, 198, 202, 219, 221, 222], "pyerr_occur": 186, "dure": 186, "invalid": [186, 197, 202], "gen": [186, 198, 201, 222], "command": [186, 199], "random_raw": [186, 187, 188, 197, 198], "success": 186, "abl": 186, "reli": [186, 197], "inspect": 186, "assert": 186, "still": [186, 202], "ever": 186, "assertionerror": 186, "execut": 186, "some": [186, 193, 198, 201, 203, 212, 215, 217, 221, 225], "intervent": 186, "intrins": 186, "guid": [186, 190], "site": 186, "landingpag": 186, "intrinsicsguid": 186, "text": 186, "_mm_paus": 186, "expand": [186, 225], "4141": 186, "juli": 186, "digit": 186, "drng": 186, "content": 186, "articl": 186, "raisinglock": 186, "wrap": [186, 192, 198, 202], "last": [186, 188, 219], "held": [186, 198], "acquir": 186, "special": 186, "uniqu": [186, 197, 216, 221], "quad": 187, "overton": 187, "trio": [187, 222, 225], "somewhat": 187, "larger": [187, 193, 219, 224], "192": [187, 222], "capac": 187, "tini": 187, "chanc": 187, "especi": 187, "extrem": 187, "num_stream": [187, 188, 221, 225], "8192": 187, "489048146361948": 187, "bg": [187, 192], "9130649916277841551": 187, "2156737186088199787": 187, "12803009197309261862": 187, "nonlinear": 187, "april": 187, "fine": [187, 204], "26": 187, "sfc": [188, 197], "unspecifi": 188, "few": [188, 197, 198, 200], "might": [188, 190], "255": 188, "incorpor": [188, 217], "absolut": 188, "least": [188, 197], "coeffici": 188, "fewer": [188, 221, 225], "np": [188, 192, 197, 198, 202, 204, 208, 209, 211, 219, 220, 221, 224, 225], "8196": [188, 221, 225], "325874985469": 188, "weyl_inc": [188, 221], "weyl_incr": [188, 197, 221], "13020151409549081939": 188, "8062752282355435850": 188, "13933250373249421220": 188, "practrand": [188, 197, 225], "rng_engin": 188, "txt": 188, "invert": 188, "34": [190, 222], "offici": [190, 197, 198, 200], "untest": 190, "well": [190, 219], "96": [190, 221, 222], "rai": 190, "beaulieu": 190, "dougla": 190, "shor": 190, "jason": 190, "smith": 190, "stefan": 190, "treatman": 190, "clark": 190, "bryan": 190, "week": 190, "loui": 190, "winger": 190, "simon": 190, "nation": 190, "agenc": 190, "januari": 190, "15": [190, 198, 217, 222, 225], "nsacyb": 190, "io": 190, "implementationguide1": 190, "threefrynxw": 191, "cython": [192, 197, 198, 217, 220], "lead": [192, 197, 198, 210], "best": [192, 198, 221, 224, 225], "necessarili": 192, "involv": [192, 198], "userbitgener": [192, 197, 198, 202, 217, 220], "exist": [192, 202, 203, 219, 220], "demonstr": [192, 220], "notebook": [192, 220], "accept": [192, 198, 220], "null": 192, "across": [192, 197, 221, 225], "rv": 192, "7713239619832409074": 192, "17318243661941184039": 192, "14412717025735663865": 192, "521015634160378615": 192, "dtype": [192, 197, 198, 204, 211, 220, 221], "voidp": 192, "idx": 192, "realist": 192, "plusplu": 193, "successor": 193, "xorshift128": [193, 217], "blackman": [193, 195, 196], "sebastiano": [193, 194, 195, 196], "vigna": [193, 194, 195, 196], "carefulli": [193, 195, 196], "handcraft": 193, "shift": [193, 197, 217, 220], "speed": [193, 197, 220], "remov": [193, 197, 200, 202, 203, 216, 218], "frequenc": 193, "xoroshiro": [193, 195, 196, 217], "xsadd": [194, 217], "xoroshiro1024": 194, "experiment": [194, 217], "explor": 194, "scrambl": 194, "corr": [194, 223], "ab": [194, 223], "1402": 194, "6246": 194, "2014": 194, "further": 194, "1403": 194, "0930": 194, "excel": [195, 196, 222], "subsequ": [195, 196, 198], "deprec": [197, 200, 220], "randomst": [197, 200, 203, 217, 218, 222], "maintain": [197, 200, 203], "regist": 197, "pickl": [197, 224], "canon": 197, "fulli": 197, "qualifi": 197, "done": 197, "avoid": [197, 220], "ambigu": 197, "suppli": [197, 217], "bug": 197, "wrong": 197, "buggi": 197, "similarli": 197, "long": [197, 202, 219, 221], "longdoubl": [197, 211], "extend": [197, 203, 205, 217, 225], "precis": [197, 215], "float": [197, 198, 211, 215], "extendedgener": [197, 200, 201, 203, 216, 217, 218], "eg": [197, 201, 209], "20210501": 197, "66851489": 197, "01769784": 197, "87316102": 197, "86532386": 197, "85384162": 197, "float128": 197, "affect": 197, "standard_gamma": [197, 220], "fortran": 197, "contigu": [197, 219], "multivariate_complex_norm": 197, "standard_wishart": [197, 215], "wishart": [197, 212], "sync": 197, "upstream": 197, "correct": [197, 224], "prevent": 197, "being": [197, 200, 217], "proof": 197, "setup": [197, 202], "against": 197, "setuptool": 197, "distutil": 197, "exhaust": 197, "consider": 197, "among": 197, "simplifi": 197, "complet": [197, 198, 217], "assur": [197, 217], "4tb": [197, 225], "1tb": 197, "flaw": 197, "broadcast": [197, 200, 208, 209, 210, 215, 220], "multivariate_norm": [197, 200, 209, 220], "incorrect": 197, "were": [197, 217, 222, 225], "choic": [197, 220, 222, 224], "choos": 197, "probabl": [197, 210, 221, 224], "randint": [197, 200, 220], "inbound": 197, "interv": [197, 211, 220, 223], "redirect": 197, "erron": 197, "sent": 197, "path": 197, "ineffici": 197, "break": 197, "int64": 197, "bring": 197, "deprecationwarn": [197, 200], "go": 197, "abrupt": 197, "renam": [197, 200], "brng_t": 197, "bitgen_t": [197, 202], "randomgener": [197, 200], "random_integ": [197, 200, 220], "random_sampl": [197, 200, 220], "place": [197, 198, 200, 211], "basic": [197, 200, 217], "doc": 197, "simd": 197, "mersenn": [197, 220, 222, 225], "twister": [197, 220, 222, 225], "xoshiro256starstar": 197, "xoshiro512starstar": 197, "skip": 197, "laplac": 197, "gumbel": 197, "logseri": 197, "normal": [197, 198, 200, 202, 208, 209, 210, 212, 215, 219, 220, 222], "standard_exponenti": [197, 220], "exponenti": [197, 220], "logist": 197, "could": 197, "nan": 197, "rare": 197, "circumst": [197, 219], "53": [197, 198, 221], "keyword": [197, 219, 220, 225], "valid": [197, 198], "treat": 197, "refactor": 197, "condit": 197, "compil": [197, 198, 202, 220], "brng": [197, 200], "multidimension": [197, 220], "gain": [197, 219, 224], "1000x": [197, 198], "multinomi": [197, 220], "edg": 197, "zipf": 197, "hypergeometr": 197, "9710": 197, "xoroshiro120": 197, "author": [197, 217], "latest": 197, "parametr": 197, "synchron": 197, "integr": 197, "move": [197, 200, 216], "individu": 197, "random_uinteg": 197, "clone": [197, 198], "legacygener": 197, "longer": [197, 220], "cffi": [197, 202, 220], "gamma": [197, 208, 209, 220, 222], "381": 197, "previou": [197, 220], "refil": 197, "fallback": [197, 199], "byte": [197, 225], "encount": 197, "random123": [197, 217], "did": 197, "specifi": [197, 209, 210, 215], "bound": [197, 202, 214, 220], "lemir": [197, 220, 223], "empti": [197, 202, 219], "absolute_import": 197, "nois": 197, "replic": 197, "handl": [197, 224], "switch": [197, 220], "filler": 197, "build": 197, "manylinux": 197, "wheel": 197, "multibuild": 197, "pyx": [198, 202], "file": [198, 202], "sourc": [198, 199, 201, 220, 224], "pure": [198, 202], "librari": 198, "dll": [198, 202], "we": [198, 210], "examin": [198, 202, 225], "begin": [198, 209, 225], "understand": 198, "evolv": 198, "accord": 198, "xl": 198, "below": [198, 221, 222, 225], "built": 198, "littl": [198, 224], "rotr_64": 198, "rot": 198, "uint": [198, 214], "pythonpcg64": 198, "pcg_default_multipli": 198, "2549297995355413924": 198, "4865540595714422341": 198, "modulu": 198, "__init__": [198, 219], "_has_uint32": 198, "_uinteg": 198, "_next_32": 198, "_next_64": 198, "0xffffffffffffffff": 198, "122": [198, 222], "cast": [198, 202, 210, 215], "wire": 198, "closur": 198, "void_p": 198, "save": 198, "next_valu": 198, "0xffffffff": 198, "f": [198, 202, 211], "under": [198, 219], "hood": 198, "print": [198, 202, 219], "python_pcg": 198, "35399562948360463058890781895381311971": 198, "87136372517582989555478159403783844777": 198, "11749869230777074271": 198, "4976686463289251617": 198, "755828109848996024": 198, "304881062738325533": 198, "15002187965291974971": 198, "std": [198, 219], "133411349017971402732463711865589153492": 198, "36159505490948474": 198, "9405893610231781608176235507540826829": 198, "would": [198, 209, 210], "how": [198, 202, 217, 221], "order": 198, "magnitud": 198, "timeit": [198, 202, 219], "08": 198, "24": [198, 222], "\u00b5": [198, 219], "per": [198, 219], "loop": [198, 219], "55": [198, 222], "000": [198, 202, 222], "from_cfunc": 198, "manag": 198, "decor": 198, "carrai": 198, "jit": [198, 202], "rotate64_sig": 198, "int_": 198, "signature_or_funct": 198, "inlin": 198, "rotate64": 198, "jsf_next_sig": 198, "jsf_next": 198, "liter": 198, "translat": 198, "numbajsf": 198, "isinst": 198, "has_uint": 198, "uinteg": [198, 200, 220], "_state": 198, "_next_raw": 198, "_next_doubl": 198, "0xf1ea5e": 198, "data_a": 198, "sig": 198, "cpointer": 198, "st": [198, 202], "bit_gen_st": 198, "0x1": 198, "genrat": 198, "oubl": 198, "9007199254740992": 198, "__name__": 198, "temp": 198, "instant": [198, 201], "look": 198, "0x77": 198, "0x5e": 198, "0xb7": 198, "0x11": 198, "0x14": 198, "0x3f": 198, "0xd1": 198, "0x0e": 198, "view": [198, 221], "njsf": 198, "1167245051188668936": 198, "13259944246262022926": 198, "8870424784319794977": 198, "9596734350428388680": 198, "getter": 198, "setter": 198, "jsf_ubg": 198, "602963287911976729": 198, "5264292724725465572": 198, "530704699024515781": 198, "2740075917084007745": 198, "5336551313612926520": 198, "float32": [198, 211, 220], "now": [198, 200], "notic": 198, "16430795192718506": 198, "13952735719045862400": 198, "12103276313412614439": 198, "5553417437478470678": 198, "14241860431798867506": 198, "3315941531": 198, "assess": 198, "compar": [198, 217, 219], "impress": 198, "outcom": 198, "1000000": [198, 202], "62": [198, 222], "19": [198, 217, 222, 225], "nativ": 198, "jsf_state": 198, "17190901158427765818": 198, "14501513697102443756": 198, "15715724510248929625": 198, "12712143389959007425": 198, "has_uint32": 198, "implemnt": 198, "3814417803339974021": 198, "15780814468893899944": 198, "17400468283504521969": 198, "17987378307908897868": 198, "18034113569054765009": 198, "auto": 199, "attempt": 199, "fall": [199, 208, 209, 224], "back": [199, 224], "scalar": [199, 200, 208, 209, 211], "unix": [199, 220], "machin": 199, "rsa": 199, "servic": 199, "effect": [199, 214], "face": 200, "warn": [200, 209, 210, 215, 219], "futurewarn": [200, 219], "receiv": 200, "virtual": 200, "mainten": 200, "activ": 200, "present": [200, 201, 222], "complex_norm": [200, 201, 209, 220], "complex": [200, 208, 209, 220], "plan": [200, 217], "v1": [200, 217], "reflect": 200, "decis": 200, "taken": [200, 222, 225], "conjunct": 200, "prepar": 200, "impact": 200, "basic_rng": 200, "primari": 201, "203": [201, 212, 215], "936j": 201, "tool": 202, "export": 202, "box": [202, 220], "muller": [202, 220], "nb": 202, "state_addr": 202, "x1": 202, "x2": 202, "r2": [202, 209], "sqrt": [202, 221], "log": [202, 217, 220, 224], "var": 202, "warm": 202, "normalsj": 202, "nopython": 202, "complic": 202, "folder": 202, "unpack": 202, "random_gauss_zig": 202, "ziggurat": [202, 220], "caveat": 202, "around": [202, 221], "align": [202, 219], "cimport": 202, "cpython": 202, "pycapsule_isvalid": 202, "pycapsule_getpoint": 202, "common": [202, 219, 225], "boundscheck": 202, "wraparound": 202, "normals_zig": 202, "py_ssize_t": 202, "cdef": 202, "const": 202, "char": 202, "capsule_nam": 202, "random_valu": 202, "anon_func_st": 202, "asarrai": 202, "member": [202, 225], "along": [202, 210, 220, 221], "minim": 202, "simplest": 202, "typedef": 202, "uint64_t": 202, "uint32_t": 202, "opaqu": 202, "insid": 202, "bitgen_st": 202, "let": 202, "inher": 202, "rapidli": 202, "prototyp": 202, "spectrum": 202, "substanti": [203, 217, 219], "portion": 203, "merg": [203, 217, 220], "revamp": 203, "goal": [203, 217], "project": [203, 217, 220], "its": [203, 204, 210], "predecessor": 203, "nextgen": 203, "23": [203, 216, 217, 218, 222], "put": 203, "novel": 203, "migrat": 203, "request": [203, 204], "welcom": 203, "interest": 203, "capabl": [203, 217], "ones": [203, 209], "n_word": 204, "word": [204, 210], "constructor": [204, 219], "properli": 204, "itself": [204, 225], "string": 204, "twice": [204, 210], "conveni": [204, 220], "express": 204, "n_children": 205, "spawn_kei": [205, 224], "seq": 205, "loc": [208, 209], "gaussian": [208, 209, 210, 220], "varianc": [208, 210], "compon": [208, 209, 217], "otherwis": [208, 210, 211, 212, 215], "real": [208, 209], "bivari": [208, 209], "imaginari": [208, 209], "covari": [208, 209, 210, 212, 215], "im": [208, 209], "impli": [208, 209], "matrix": [208, 209, 210, 212, 215], "semi": [208, 209], "definit": [208, 209, 210], "weakli": 208, "product": [208, 212, 215], "deviat": [208, 210, 225], "complex_normal_distribut": [208, 209], "leigh": [208, 209], "halliwel": [208, 209], "casualti": [208, 209], "actuari": [208, 209], "societi": [208, 209], "forum": [208, 209], "check_valid": [209, 210, 215], "tol": [209, 210, 215], "1e": [209, 210], "svd": [209, 210, 215], "multivari": [209, 210, 212, 215, 220], "m1": [209, 210], "m2": [209, 210], "mk": [209, 210], "g1": 209, "g2": 209, "gj": 209, "r1": 209, "rq": 209, "circularli": 209, "symmetr": [209, 210, 215], "identifi": [209, 212, 215], "pack": [209, 210, 215], "arrang": [209, 210, 215], "becaus": [209, 210, 215], "behavior": [209, 210, 215], "semidefinit": [209, 210, 215], "toler": [209, 210, 215], "singular": [209, 210, 212, 215], "cov": [209, 210, 215], "factor": [209, 210, 215], "argument": [209, 210, 215, 219, 220, 225], "slowest": [209, 210, 215], "choleski": [209, 210, 215], "robust": [209, 210, 215], "eigh": [209, 210, 215], "eigen": [209, 210, 215], "decomposit": [209, 210, 215], "sim": 209, "mathrm": 209, "mu": 209, "right": 209, "frac": 209, "cc": 209, "ii": [209, 210], "42551611": 209, "44163456j": 209, "18366146": 209, "88380663j": 209, "3035725": 209, "19754723j": 209, "86649667": 209, "88447445j": 209, "04913229": 209, "04674949j": 209, "28145563": 209, "04682163j": 209, "trivari": 209, "center": [209, 210], "rho": 209, "ey": [209, 212], "diag": 209, "32699266": 209, "57787275j": 209, "46716898": 209, "06687298j": 209, "31483301": 209, "17233599j": 209, "28036548": 209, "56994348j": 209, "18011468": 209, "50539209j": 209, "35185607": 209, "15184288j": 209, "1866397": 209, "2701576j": 209, "18419364": 209, "06912343j": 209, "66462037": 209, "73939778j": 209, "7j": 209, "4j": 209, "0j": 209, "1j": 209, "97279918": 209, "64185732j": 209, "32361134": 209, "23587346j": 209, "91476019": 209, "91802901j": 209, "76788821": 209, "84832672j": 209, "44740101": 209, "93782402j": 209, "59809459": 209, "35360097j": 209, "multinorm": 210, "dimens": [210, 212, 215], "Such": 210, "c1": [210, 215], "c2": [210, 215], "cj": [210, 215], "proper": 210, "entri": 210, "coordin": 210, "peak": 210, "bell": 210, "curv": 210, "univari": 210, "togeth": 210, "x_1": 210, "x_2": 210, "x_n": 210, "c_": 210, "ij": 210, "x_i": 210, "x_j": 210, "spread": 210, "popular": 210, "approxim": 210, "spheric": 210, "diagon": 210, "geometr": [210, 222], "seen": 210, "plot": 210, "point": [210, 215], "axi": [210, 220], "erg": 210, "matplotlib": 210, "pyplot": 210, "plt": 210, "5000": 210, "equal": [210, 222], "nonneg": 210, "undefin": 210, "papouli": 210, "stochast": 210, "3rd": 210, "ed": 210, "mcgraw": 210, "hill": 210, "1991": 210, "duda": 210, "hart": 210, "stork": 210, "classif": 210, "2nd": 210, "wilei": 210, "2001": 210, "follow": [210, 222], "roughli": 210, "continu": [211, 220], "over": [211, 220], "unif": 211, "desir": 211, "float64": [211, 220], "47108547995356098": 211, "30220482": 211, "86820401": 211, "1654503": 211, "11659149": 211, "54323428": 211, "99149989": 211, "52338984": 211, "99091858": 211, "79479508": 211, "23204345": 211, "75224494": 211, "df": [212, 215], "dim": [212, 215], "rescal": 212, "degre": [212, 215], "freedom": [212, 215], "exclud": 212, "trail": 212, "scale": [212, 215, 219, 222], "odel": [212, 215], "feiveson": [212, 215], "inner": [212, 215], "h": [212, 215], "1966": [212, 215], "numer": [212, 215], "procedur": [212, 215], "jour": [212, 215], "amer": [212, 215], "stat": [212, 215], "assoc": [212, 215], "61": [212, 215, 222], "199": [212, 215, 222], "uhlig": [212, 215], "1994": [212, 215], "beta": [212, 215], "annal": [212, 215], "395": [212, 215], "405": [212, 215], "d\u0131az": [212, 215], "garc\u0131a": [212, 215], "j\u00e1imez": [212, 215], "mardia": [212, 215], "v": [212, 215], "1997": [212, 215], "theori": [212, 215], "73": [212, 215, 222], "87": [212, 215], "trivial": 213, "manipul": 213, "truncat": 214, "rank": 215, "d1": 215, "d2": 215, "dk": 215, "limit": [215, 220, 221, 225], "largest": 215, "eigenvalu": 215, "associ": 215, "default_rng": [216, 218, 225], "evolut": 217, "packag": 217, "12345": 217, "began": 217, "modern": [217, 220], "succe": 217, "deem": 217, "exot": 217, "retain": 217, "alongsid": 217, "wider": [217, 220], "varieti": 217, "cryptographi": [217, 222], "five": [217, 221], "innov": 217, "sse2": 217, "enabl": [217, 221], "theoret": 217, "page": 217, "xorshiro256": 217, "xorshiro512": 217, "recent": 217, "introduc": 217, "xoshiro": 217, "amount": [217, 220], "independ": [217, 224], "stabl": [217, 225], "_seed_sequ": [217, 224], "generate_st": [217, 224], "multithread": [217, 220], "experi": [217, 220], "mtrand": [217, 218], "18": [217, 222], "search": 217, "compata": 218, "older": 218, "four": 219, "behav": 219, "writabl": 219, "satisfi": 219, "concurr": 219, "live": 219, "repeat": [219, 221], "overhead": 219, "creation": 219, "xorshift2014": 219, "sens": 219, "multiprocess": 219, "filterwarn": 219, "multithreadedrng": 219, "last_bg": 219, "cpu_count": 219, "_random_gener": 219, "executor": 219, "threadpoolexecutor": 219, "ceil": 219, "astyp": 219, "_fill": 219, "random_st": 219, "arg": 219, "submit": 219, "__del__": 219, "shutdown": 219, "mrng": 219, "10000000": 219, "5228567175856316": 219, "85": [219, 222], "66": [219, 222], "171": 219, "moder": [219, 221], "due": [219, 225], "76": 219, "208": [219, 222], "pcg4": 220, "direct": 220, "hardwar": [220, 221, 222], "randn": 220, "tomaxint": 220, "seedabl": 220, "part": 220, "multivariate_hypergeometr": 220, "port": 220, "shuffl": 220, "use_mask": 220, "mask": 220, "superior": 220, "via": 220, "downstream": 220, "previs": 220, "chunk": 220, "endpoint": 220, "particularli": 220, "help": 220, "work": [220, 224], "strategi": 221, "local": 221, "concern": 221, "univers": 221, "sai": 221, "collis": 221, "neglig": 221, "said": 221, "difficult": 221, "corner": 221, "603484028490308141": 221, "form": [221, 224, 225], "tolist": 221, "reshap": 221, "essenti": 221, "len": 221, "new_kei": 221, "next_gen": 221, "expens": 221, "19937": 221, "enough": 221, "blocked_rng": 221, "last_rng": 221, "spars": 221, "helper": 221, "subject": 221, "newer": 222, "acceler": 222, "effic64": 222, "effix64": 222, "expon": 222, "jsf32": 222, "36": 222, "49": 222, "54": 222, "136": 222, "139": 222, "287": 222, "percentag": 222, "overal": 222, "219": 222, "282": 222, "278": 222, "215": 222, "217": 222, "189": 222, "244": 222, "283": 222, "210": 222, "213": 222, "205": 222, "118": 222, "185": 222, "242": 222, "285": 222, "212": 222, "202": 222, "119": 222, "229": 222, "279": 222, "198": 222, "163": 222, "190": 222, "271": 222, "182": 222, "183": 222, "126": 222, "155": 222, "193": 222, "250": 222, "197": 222, "120": 222, "154": 222, "264": 222, "195": [222, 225], "181": 222, "149": 222, "184": 222, "246": 222, "178": 222, "186": 222, "175": 222, "111": 222, "131": 222, "176": 222, "170": 222, "104": 222, "143": 222, "228": 222, "167": 222, "114": 222, "135": 222, "164": 222, "227": 222, "177": 222, "162": 222, "105": 222, "138": 222, "165": 222, "234": 222, "160": 222, "172": 222, "158": 222, "110": 222, "206": 222, "156": 222, "117": 222, "168": 222, "145": 222, "99": 222, "108": 222, "134": 222, "174": 222, "91": 222, "98": 222, "124": 222, "75": 222, "79": 222, "95": 222, "147": 222, "112": 222, "67": 222, "77": 222, "102": 222, "109": 222, "78": 222, "74": 222, "80": 222, "72": 222, "71": 222, "84": 222, "152": 222, "130": 222, "101": 222, "121": 222, "57": 222, "59": 222, "127": 222, "83": 222, "51": 222, "45": 222, "56": 222, "35": 222, "82": 222, "81": 222, "69": 222, "48": 222, "linux": 222, "cascad": 222, "lake": 222, "1ghz": 222, "daniel": 223, "aug": 223, "2018": 223, "arxiv": 223, "1805": 223, "10941": 223, "seedsequec": 224, "vendor": 224, "copi": 224, "seed_sequ": 224, "pool_siz": 224, "n_children_spawn": 224, "instanti": 224, "third": 224, "give": 224, "alreadi": 224, "reconstruct": 224, "serial": 224, "achiev": 224, "sq1": 224, "243799254704924441050048792905230269161": 224, "sq2": 224, "relev": 225, "128gb": 225, "fold": 225, "wit": 225, "dsfmt\u2074": 225, "gb\u00b9": 225, "mt19937\u2074": 225, "\u2075": 225, "pcg64dxsm\u00b2": 225, "pcg64\u2075": 225, "philox\u2075": 225, "sfc64\u2075": 225, "3394385948627484371": 225, "\u00b3": 225, "sfmt\u2074": 225, "tb\u00b9": 225, "\u00b9": 225, "extra": 225, "bt": 225, "te": 225, "tf": 225, "abov": 225, "\u00b2": 225, "latter": 225, "separ": 225, "\u2074": 225, "64gb": 225, "studi": 225, "templat": 225, "simpli": 225, "86316980830225721106033794313786972513572058861498566720023788662568817403978": 225, "bit_generator_kwarg": 225, "base_gen": 225, "elif": 225, "excess": 225, "sensit": 225, "natur": 225, "worri": 225, "bad": 225, "those": 225, "escap": 225, "immedi": 225, "commonli": 225, "brank": 225, "5897100938578919857511": 225, "resembl": 225, "intertwin": 225, "gb": 225, "times2": 225}, "objects": {"": [[222, 0, 0, 1, "randomgen", ""]], "randomgen": [[224, 0, 0, 1, "_seed_sequence", ""], [0, 0, 0, 1, "aes", ""], [1, 0, 0, 1, "chacha", ""], [2, 0, 0, 1, "dsfmt", ""], [3, 0, 0, 1, "efiix64", ""], [199, 0, 0, 1, "entropy", ""], [175, 0, 0, 1, "hc128", ""], [177, 0, 0, 1, "jsf", ""], [179, 0, 0, 1, "lxm", ""], [180, 0, 0, 1, "mt19937", ""], [181, 0, 0, 1, "mt64", ""], [182, 0, 0, 1, "pcg32", ""], [183, 0, 0, 1, "pcg64", ""], [185, 0, 0, 1, "philox", ""], [186, 0, 0, 1, "rdrand", ""], [187, 0, 0, 1, "romu", ""], [188, 0, 0, 1, "sfc", ""], [189, 0, 0, 1, "sfmt", ""], [190, 0, 0, 1, "speck128", ""], [191, 0, 0, 1, "threefry", ""], [192, 0, 0, 1, "wrapper", ""], [193, 0, 0, 1, "xoroshiro128", ""], [194, 0, 0, 1, "xorshift1024", ""], [195, 0, 0, 1, "xoshiro256", ""], [196, 0, 0, 1, "xoshiro512", ""]], "randomgen._seed_sequence": [[224, 1, 1, 0, "SeedSequence", "SeedSequence mixes sources of entropy in a reproducible way to set the initial state for independent and very probably non-overlapping BitGenerators."]], "randomgen._seed_sequence.SeedSequence.__init__": [[224, 2, 2, 0, "entropy", "The entropy for creating a SeedSequence."], [224, 2, 2, 0, "n_children_spawned", "The number of children already spawned. Only pass this if reconstructing a SeedSequence from a serialized form."], [224, 2, 2, 0, "pool_size", "Size of the pooled entropy to store. Default is 4 to give a 128-bit entropy pool. 8 (for 256 bits) is another reasonable choice if working with larger PRNGs, but there is very little to be gained by selecting another value."], [224, 2, 2, 0, "spawn_key", "A third source of entropy, used internally when calling SeedSequence.spawn"]], "randomgen._seed_sequence.SeedSequence": [[204, 3, 1, 0, "generate_state", "Return the requested number of words for PRNG seeding."], [205, 3, 1, 0, "spawn", "Spawn a number of child SeedSequence instances by extending the spawn_key."], [206, 4, 1, 0, "state", "Get the state of the SeedSequence"]], "randomgen._seed_sequence.SeedSequence.generate_state": [[204, 2, 2, 0, "dtype", "The size of each word. This should only be either uint32 or uint64. Strings (\"uint32\", \"uint64\") are fine. Note that requesting uint64 will draw twice as many bits as uint32 for the same n_words. This is a convenience for BitGenerator`s that express their states as `uint64 arrays."], [204, 2, 2, 0, "n_words", ""]], "randomgen._seed_sequence.SeedSequence.spawn": [[205, 2, 2, 0, "n_children", "Number of child SeedSequences to create from the current instance"]], "randomgen.aes": [[0, 1, 1, 0, "AESCounter", "Container for the AES Counter pseudo-random number generator."]], "randomgen.aes.AESCounter.__init__": [[0, 2, 2, 0, "counter", "Counter to use in the AESCounter state. Can be either a Python int in [0, 2**128) or a 2-element uint64 array. If not provided, the counter is initialized at 0."], [0, 2, 2, 0, "key", "Key to use in the AESCounter state. Unlike seed, which is run through another RNG before use, the value in key is directly set. Can be either a Python int in [0, 2**128) or a 2-element uint64 array. key and seed cannot both be used."], [0, 2, 2, 0, "mode", "The seeding mode to use. \"legacy\" uses the legacy SplitMix64-based initialization. \"sequence\" uses a SeedSequence to transforms the seed into an initial state. None defaults to \"sequence\"."], [0, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**128), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]], "randomgen.aes.AESCounter": [[4, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [5, 4, 1, 0, "cffi", "CFFI interface"], [6, 4, 1, 0, "ctypes", "ctypes interface"], [7, 3, 1, 0, "jump", "Jumps the state as-if iter * 2**64 random numbers are generated"], [8, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [0, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [9, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [10, 3, 1, 0, "seed", "Seed the generator"], [0, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence. None if mode is \"legacy\"."], [11, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.aes.AESCounter.advance": [[4, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.aes.AESCounter.jump": [[7, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.aes.AESCounter.jumped": [[8, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.aes.AESCounter.random_raw": [[9, 2, 2, 0, "output", "Output values. Used for performance testing since the generated values are not returned."], [9, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned."]], "randomgen.aes.AESCounter.seed": [[10, 2, 2, 0, "counter", "Counter to use in the AESCounter state. Can be either a Python int in [0, 2**128) or a 2-element uint64 array. If not provided, the counter is initialized at 0."], [10, 2, 2, 0, "key", "Key to use in the AESCounter state. Unlike seed, which is run through another RNG before use, the value in key is directly set. Can be either a Python int in [0, 2**128) or a 2-element uint64 array. key and seed cannot both be used."], [10, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**128), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]], "randomgen.chacha": [[1, 1, 1, 0, "ChaCha", "Container for the ChaCha family of Counter pseudo-random number generators"]], "randomgen.chacha.ChaCha.__init__": [[1, 2, 2, 0, "counter", "Counter to use in the ChaCha state. Can be either a Python int in [0, 2**128) or a 2-element uint64 array. If not provided, the counter is initialized at 0."], [1, 2, 2, 0, "key", "Key to use in the ChaCha state. Unlike seed, which is run through another RNG before use, the value in key is directly set. Can be either a Python int in [0, 2**256) or a 4-element uint64 array. key and seed cannot both be used."], [1, 2, 2, 0, "mode", "The seeding mode to use. \"legacy\" uses the legacy SplitMix64-based initialization. \"sequence\" uses a SeedSequence to transforms the seed into an initial state. None defaults to \"sequence\"."], [1, 2, 2, 0, "rounds", "Number of rounds to run the ChaCha mixer. Must be an even integer. The standard number of rounds in 20. Smaller values, usually 8 or more, can be used to reduce security properties of the random stream while improving performance."], [1, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**256), an array of 4 uint64 values, a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]], "randomgen.chacha.ChaCha": [[12, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [13, 4, 1, 0, "cffi", "CFFI interface"], [14, 4, 1, 0, "ctypes", "ctypes interface"], [15, 3, 1, 0, "jump", "Jumps the state as-if 2**64 random numbers have been generated."], [16, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [1, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [17, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [18, 3, 1, 0, "seed", "Seed the generator"], [1, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence. None if mode is \"legacy\"."], [19, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.chacha.ChaCha.advance": [[12, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.chacha.ChaCha.jump": [[15, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.chacha.ChaCha.jumped": [[16, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.chacha.ChaCha.random_raw": [[17, 2, 2, 0, "output", "Output values. Used for performance testing since the generated values are not returned."], [17, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned."]], "randomgen.dsfmt": [[2, 1, 1, 0, "DSFMT", "Container for the SIMD-based Mersenne Twister pseudo RNG."]], "randomgen.dsfmt.DSFMT.__init__": [[2, 2, 2, 0, "mode", "The seeding mode to use. \"legacy\" uses the legacy SplitMix64-based initialization. \"sequence\" uses a SeedSequence to transforms the seed into an initial state.  None defaults to \"sequence\"."], [2, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator. Can be any integer between 0 and 2**32 - 1 inclusive, an array (or other sequence) of unsigned 32-bit integers, a SeedSequence instance or None (the default). If seed is None, then 764 32-bit unsigned integers are read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]], "randomgen.dsfmt.DSFMT": [[20, 4, 1, 0, "cffi", "CFFI interface"], [21, 4, 1, 0, "ctypes", "ctypes interface"], [22, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated."], [23, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [2, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [24, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [25, 3, 1, 0, "seed", "Seed the generator"], [2, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence. None if mode is \"legacy\"."], [26, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.dsfmt.DSFMT.jump": [[22, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator."]], "randomgen.dsfmt.DSFMT.jumped": [[23, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.dsfmt.DSFMT.random_raw": [[24, 2, 2, 0, "output", "Output values. Used for performance testing since the generated values are not returned."], [24, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned."]], "randomgen.dsfmt.DSFMT.seed": [[25, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator. Can be any integer between 0 and 2**32 - 1 inclusive, an array (or other sequence) of unsigned 32-bit integers, a SeedSequence instance or None (the default). If seed is None, then 764 32-bit unsigned integers are read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]], "randomgen.efiix64": [[3, 1, 1, 0, "EFIIX64", "Container for the EFIIX64x384 pseudo-random number generator."]], "randomgen.efiix64.EFIIX64.__init__": [[3, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]], "randomgen.efiix64.EFIIX64": [[27, 4, 1, 0, "cffi", "CFFI interface"], [28, 4, 1, 0, "ctypes", "ctypes interface"], [3, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [29, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [30, 3, 1, 0, "seed", "Seed the generator"], [3, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence. None if mode is \"legacy\"."], [31, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.efiix64.EFIIX64.random_raw": [[29, 2, 2, 0, "output", "Output values. Used for performance testing since the generated values are not returned."], [29, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned."]], "randomgen.efiix64.EFIIX64.seed": [[30, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]], "randomgen.entropy": [[199, 5, 1, 0, "random_entropy", "Read entropy from the system cryptographic provider"]], "randomgen.entropy.random_entropy": [[199, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned."], [199, 2, 2, 0, "source", "Source of entropy. 'system' uses system cryptographic pool. 'fallback' uses a hash of the time and process id. 'auto' attempts 'system' before automatically falling back to 'fallback'"]], "randomgen.generator": [[201, 1, 1, 0, "ExtendedGenerator", "Additional random value generator using a bit generator source."], [216, 1, 1, 0, "Generator", "Generator has been removed in the 1.23 release."]], "randomgen.generator.ExtendedGenerator.__init__": [[201, 2, 2, 0, "bit_generator", "Bit generator to use as the core generator. If none is provided, uses PCG64(variant=\"cm-dxsm\")."]], "randomgen.generator.ExtendedGenerator": [[207, 4, 1, 0, "bit_generator", "Gets the bit generator instance used by the generator"], [208, 3, 1, 0, "complex_normal", "Draw random samples from a complex normal (Gaussian) distribution."], [209, 3, 1, 0, "multivariate_complex_normal", "Draw random samples from a multivariate complex normal (Gaussian) distribution."], [210, 3, 1, 0, "multivariate_normal", "Draw random samples from a multivariate normal distribution."], [211, 3, 1, 0, "random", "Return random floats in the half-open interval [0.0, 1.0)."], [212, 3, 1, 0, "standard_wishart", "Draw samples from the Standard Wishart and Pseudo-Wishart distributions"], [213, 4, 1, 0, "state", "Get or set the bit generator's state"], [214, 3, 1, 0, "uintegers", "Return random unsigned integers"], [215, 3, 1, 0, "wishart", "Draw samples from the Wishart and pseudo-Wishart distributions."]], "randomgen.generator.ExtendedGenerator.complex_normal": [[208, 2, 2, 0, "gamma", "Variance of the distribution"], [208, 2, 2, 0, "loc", "Mean of the distribution."], [208, 2, 2, 0, "relation", "Relation between the two component normals"], [208, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. If size is None (default), a single value is returned if loc, gamma and relation are all scalars. Otherwise, np.broadcast(loc, gamma, relation).size samples are drawn."]], "randomgen.generator.ExtendedGenerator.multivariate_complex_normal": [[209, 2, 2, 0, "check_valid", "Behavior when the covariance matrix implied by gamma and relation is not positive semidefinite."], [209, 2, 2, 0, "gamma", "Covariance of the real component of the distribution.  Must have shape (g1, g2, ..., gj, N, N) where (g1, g2, ..., gj) would broadcast with (m1, m2, ..., mk) and (r1, r2, ..., rq). If not provided, an identity matrix is used which produces the circularly-symmetric complex normal when relation is an array of 0."], [209, 2, 2, 0, "loc", "Mean of the distribution.  Must have shape (m1, m2, ..., mk, N) where (m1, m2, ..., mk) would broadcast with (g1, g2, ..., gj) and (r1, r2, ..., rq)."], [209, 2, 2, 0, "method", "The cov input is used to compute a factor matrix A such that A @ A.T = cov. This argument is used to select the method used to compute the factor matrix A for the covariance implied by gamma and relation. The default method 'svd' is the slowest, while 'cholesky' is the fastest but less robust than the slowest method. The method eigh uses eigen decomposition to compute A and is faster than svd but slower than cholesky."], [209, 2, 2, 0, "relation", "Relation between the two component normals. (r1, r2, ..., rq, N, N) where (r1, r2, ..., rq, N, N) would broadcast with (m1, m2, ..., mk) and (g1, g2, ..., gj). If not provided, set to zero which produces the circularly-symmetric complex normal when gamma is an identify matrix."], [209, 2, 2, 0, "size", "Given a shape of, for example, (m,n,k), m*n*k samples are generated, and packed in an m-by-n-by-k arrangement.  Because each sample is N-dimensional, the output shape is (m,n,k,N). If no shape is specified, a single (N-D) sample is returned."], [209, 2, 2, 0, "tol", "Tolerance when checking the singular values in the covariance matrix implied by gamma and relation."]], "randomgen.generator.ExtendedGenerator.multivariate_normal": [[210, 2, 2, 0, "check_valid", "Behavior when the covariance matrix is not positive semidefinite."], [210, 2, 2, 0, "cov", "Covariance matrix of the distribution. It must be symmetric and positive-semidefinite for proper sampling. Must have shape (c1, c2, ..., cj, N, N) where (c1, c2, ..., cj) would broadcast with (m1, m2, ..., mk)."], [210, 2, 2, 0, "mean", "Mean of the distribution. Must have shape (m1, m2, ..., mk, N) where (m1, m2, ..., mk) would broadcast with (c1, c2, ..., cj)."], [210, 2, 2, 0, "method", "The cov input is used to compute a factor matrix A such that A @ A.T = cov. This argument is used to select the method used to compute the factor matrix A. The default method 'svd' is the slowest, while 'cholesky' is the fastest but less robust than the slowest method. The method eigh uses eigen decomposition to compute A and is faster than svd but slower than cholesky. factor assumes that cov has been pre-factored so that no transformation is applied."], [210, 2, 2, 0, "size", "Given a shape of, for example, (m,n,k), m*n*k samples are generated, and packed in an m-by-n-by-k arrangement.  Because each sample is N-dimensional, the output shape is (m,n,k,N). If no shape is specified, a single (N-D) sample is returned."], [210, 2, 2, 0, "tol", "Tolerance when checking the singular values in covariance matrix. cov is cast to double before the check."]], "randomgen.generator.ExtendedGenerator.random": [[211, 2, 2, 0, "dtype", "Desired dtype of the result. One of 'd' ('float64' or np.float64), 'f' ('float32' of np.float32), or 'longdouble' (np.longdouble). All dtypes are determined by their name. The default value is 'd'."], [211, 2, 2, 0, "out", "Alternative output array in which to place the result. If size is not None, it must have the same shape as the provided size and must match the type of the output values."], [211, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned."]], "randomgen.generator.ExtendedGenerator.standard_wishart": [[212, 2, 2, 0, "df", "The degree-of-freedom for the simulated Wishart variates."], [212, 2, 2, 0, "dim", "The dimension of the simulated Wishart variates."], [212, 2, 2, 0, "rescale", "Flag indicating whether to rescale the outputs to have expectation identity. The default is True. If rescale is False, then the expected value of the generated variates is df * eye(dim)."], [212, 2, 2, 0, "size", "Output shape, excluding trailing dims. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn, each with shape (dim, dim). The output then has shape (m, n, k, dim, dim). Default is None, in which case a single value with shape (dim, dim) is returned."]], "randomgen.generator.ExtendedGenerator.uintegers": [[214, 2, 2, 0, "bits", "Size of the unsigned integer to return, either 32 bit or 64 bit."], [214, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned."]], "randomgen.generator.ExtendedGenerator.wishart": [[215, 2, 2, 0, "check_valid", "Behavior when the covariance matrix has rank less than rank."], [215, 2, 2, 0, "df", "Degree-of-freedom values. In array-like must broadcast with all but the final two dimensions of shape."], [215, 2, 2, 0, "method", "The cov input is used to compute a factor matrix A such that A @ A.T = cov. This argument is used to select the method used to compute the factor matrix A. The default method 'svd' is the slowest, while 'cholesky' is the fastest but less robust than the slowest method. The method eigh uses eigen decomposition to compute A and is faster than svd but slower than cholesky. When rank is less than N, then the N largest eigenvalues and their associated eigenvalues are used when method is svd or eigh. When method is 'cholesky, then the Cholesky of the upper rank by rank block is used. factor assumes that scale has been pre-factored so that no transformation is applied. When using factor, no check is performed on the rank."], [215, 2, 2, 0, "rank", "The rank of shape when generating from the Singular Wishart distribution. If None, then rank is set of N so that the draws from the standard Wishart or pseudo-Wishart are generated."], [215, 2, 2, 0, "scale", "Shape matrix of the distribution. It must be symmetric and positive-semidefinite for sampling. Must have shape (c1, c2, ..., cj, N, N) where (c1, c2, ..., cj) broadcasts with the degree of freedom shape (d1, d2, ..., dk)."], [215, 2, 2, 0, "size", "Given a shape of, for example, (m,n,k), m*n*k samples are generated, and packed in an m-by-n-by-k arrangement.  Because each sample is N by N, the output shape is (m,n,k,N,N). If no shape is specified, a single (N by N) sample is returned."], [215, 2, 2, 0, "tol", "Tolerance when checking the rank of shape. shape is cast to double before the check. If None, then the tolerance is automatically determined as a function of N and the limit of floating point precision."]], "randomgen.hc128": [[175, 1, 1, 0, "HC128", "Container for the HC-128 cipher-based pseudo-random number generator"]], "randomgen.hc128.HC128.__init__": [[175, 2, 2, 0, "key", "Key for HC128. The key is a 256-bit integer that contains both the key (lower 128 bits) and initial values (upper 128-bits) for the HC-128 cipher. key and seed cannot both be used."], [175, 2, 2, 0, "mode", "The seeding mode to use. \"legacy\" uses the legacy SplitMix64-based initialization. \"sequence\" uses a SeedSequence to transforms the seed into an initial state.  None defaults to \"sequence\"."], [175, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]], "randomgen.hc128.HC128": [[32, 4, 1, 0, "cffi", "CFFI interface"], [33, 4, 1, 0, "ctypes", "ctypes interface"], [175, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [34, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [35, 3, 1, 0, "seed", "Seed the generator"], [175, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence. None if mode is \"legacy\"."], [36, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.hc128.HC128.random_raw": [[34, 2, 2, 0, "output", "Output values. Used for performance testing since the generated values are not returned."], [34, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned."]], "randomgen.hc128.HC128.seed": [[35, 2, 2, 0, "key", "Key for HC128. The key is a 256-bit integer that contains both the key (lower 128 bits) and initial values (upper 128-bits) for the HC-128 cipher. key and seed cannot both be used."], [35, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]], "randomgen.jsf": [[177, 1, 1, 0, "JSF", "Container for Jenkins's Fast Small (JSF) pseudo-random number generator"]], "randomgen.jsf.JSF.__init__": [[177, 2, 2, 0, "mode", "The seeding mode to use. \"legacy\" uses the legacy SplitMix64-based initialization. \"sequence\" uses a SeedSequence to transforms the seed into an initial state.  None defaults to \"sequence\"."], [177, 2, 2, 0, "p", "One the the three parameters that defines JSF. See Notes. If not provided uses the default values for the selected size listed in Notes."], [177, 2, 2, 0, "q", "One the the three parameters that defines JSF. See Notes. If not provided uses the default values for the selected size listed in Notes."], [177, 2, 2, 0, "r", "One the the three parameters that defines JSF. See Notes. If not provided uses the default values for the selected size listed in Notes."], [177, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**size), an array of integers in [0, 2**size), a SeedSequence or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."], [177, 2, 2, 0, "seed_size", "Number of distinct seed values used to initialize JSF. The original implementation uses 1 (default). Higher values increase the size of the seed space which is 2**(size*seed_size)."], [177, 2, 2, 0, "size", "Output size of a single iteration of JSF. 32 is better suited to 32-bit systems."]], "randomgen.jsf.JSF": [[37, 4, 1, 0, "cffi", "CFFI interface"], [38, 4, 1, 0, "ctypes", "ctypes interface"], [177, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [39, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [40, 3, 1, 0, "seed", "Seed the generator"], [177, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence. None if mode is \"legacy\"."], [41, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.jsf.JSF.random_raw": [[39, 2, 2, 0, "output", "Output values. Used for performance testing since the generated values are not returned."], [39, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned."]], "randomgen.jsf.JSF.seed": [[40, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**size), an array of integers in [0, 2**size), a SeedSequence or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]], "randomgen.lxm": [[179, 1, 1, 0, "LXM", "Container for the LXM pseudo-random number generator."]], "randomgen.lxm.LXM.__init__": [[179, 2, 2, 0, "b", "The additive constant in the LCG update. Must be odd, and so 1 is added if even. The default value is 3037000493."], [179, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]], "randomgen.lxm.LXM": [[42, 4, 1, 0, "cffi", "CFFI interface"], [43, 4, 1, 0, "ctypes", "ctypes interface"], [44, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated"], [45, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [179, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [46, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [47, 3, 1, 0, "seed", "Seed the generator"], [179, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence. None if mode is \"legacy\"."], [48, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.lxm.LXM.jump": [[44, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.lxm.LXM.jumped": [[45, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.lxm.LXM.random_raw": [[46, 2, 2, 0, "output", "Output values. Used for performance testing since the generated values are not returned."], [46, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned."]], "randomgen.lxm.LXM.seed": [[47, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). The input is passed to SeedSequence which produces the values used to initialize the state."]], "randomgen.mt19937": [[180, 1, 1, 0, "MT19937", "Container for the Mersenne Twister pseudo-random number generator."]], "randomgen.mt19937.MT19937.__init__": [[180, 2, 2, 0, "mode", "The seeding mode to use. \"legacy\" uses the legacy SplitMix64-based initialization. \"sequence\" uses a SeedSequence to transforms the seed into an initial state. None defaults to \"sequence\". \"numpy\" uses the same seeding mechanism as NumPy and so matches exactly."], [180, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator. Can be any integer between 0 and 2**32 - 1 inclusive, an array (or other sequence) of unsigned 32-bit integers, a SeedSequence instance or None (the default). If seed is None, then 624 32-bit unsigned integers are read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]], "randomgen.mt19937.MT19937": [[49, 4, 1, 0, "cffi", "CFFI interface"], [50, 4, 1, 0, "ctypes", "ctypes interface"], [51, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated."], [52, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [180, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [53, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [54, 3, 1, 0, "seed", "Seed the generator"], [180, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence. None if mode is \"legacy\"."], [55, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.mt19937.MT19937.jump": [[51, 2, 2, 0, "jumps", "Number of times to jump the state of the bit generator."]], "randomgen.mt19937.MT19937.jumped": [[52, 2, 2, 0, "jumps", "Number of times to jump the state of the bit generator returned"]], "randomgen.mt19937.MT19937.random_raw": [[53, 2, 2, 0, "output", "Output values. Used for performance testing since the generated values are not returned."], [53, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned."]], "randomgen.mt19937.MT19937.seed": [[54, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator. Can be any integer between 0 and 2**32 - 1 inclusive, an array (or other sequence) of unsigned 32-bit integers, a SeedSequence instance or None (the default). If seed is None, then 624 32-bit unsigned integers are read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]], "randomgen.mt64": [[181, 1, 1, 0, "MT64", "Container for the 64-bit Mersenne Twister pseudo-random number generator"]], "randomgen.mt64.MT64.__init__": [[181, 2, 2, 0, "mode", "The seeding mode to use. \"legacy\" uses the legacy SplitMix64-based initialization. \"sequence\" uses a SeedSequence to transforms the seed into an initial state.  None defaults to \"sequence\"."], [181, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator. Can be any integer between 0 and 2**64 - 1 inclusive, an array (or other sequence) of unsigned 64-bit integers, a SeedSequence instance or None (the default). If seed is None, then 312 64-bit unsigned integers are read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]], "randomgen.mt64.MT64": [[56, 4, 1, 0, "cffi", "CFFI interface"], [57, 4, 1, 0, "ctypes", "ctypes interface"], [181, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [58, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [59, 3, 1, 0, "seed", "Seed the generator"], [181, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence. None if mode is \"legacy\"."], [60, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.mt64.MT64.random_raw": [[58, 2, 2, 0, "output", "Output values. Used for performance testing since the generated values are not returned."], [58, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned."]], "randomgen.mt64.MT64.seed": [[59, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator. Can be any integer between 0 and 2**64 - 1 inclusive, an array (or other sequence) of unsigned 64-bit integers, a SeedSequence instance or None (the default). If seed is None, then 312 64-bit unsigned integers are read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]], "randomgen.mtrand": [[218, 1, 1, 0, "RandomState", "RandomState has been removed in the 1.23 release."]], "randomgen.pcg32": [[182, 1, 1, 0, "PCG32", "Container for the PCG-32 pseudo-random number generator."]], "randomgen.pcg32.PCG32.__init__": [[182, 2, 2, 0, "inc", "The increment in the LCG. Can be an integer in [0, 2**64] or None. The default is 0. If inc is None, then it is initialized using entropy."], [182, 2, 2, 0, "mode", "The seeding mode to use. \"legacy\" uses the legacy SplitMix64-based initialization. \"sequence\" uses a SeedSequence to transforms the seed into an initial state.  None defaults to \"sequence\"."], [182, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**64], a SeedSequence instance or None (the default). If seed is None, then PCG32 will try to read data from /dev/urandom (or the Windows analog) if available. If unavailable, a 64-bit hash of the time and process ID is used."]], "randomgen.pcg32.PCG32": [[61, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [62, 4, 1, 0, "cffi", "CFFI interface"], [63, 4, 1, 0, "ctypes", "ctypes interface"], [64, 3, 1, 0, "jump", "Jump the state a fixed increment"], [65, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [182, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [66, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [67, 3, 1, 0, "seed", "Seed the generator"], [182, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence. None if mode is \"legacy\"."], [68, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.pcg32.PCG32.advance": [[61, 2, 2, 0, "delta", "Number of draws to advance the RNG. Must be less than the size state variable in the underlying RNG."]], "randomgen.pcg32.PCG32.jump": [[64, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.pcg32.PCG32.jumped": [[65, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.pcg32.PCG32.random_raw": [[66, 2, 2, 0, "output", "Output values. Used for performance testing since the generated values are not returned."], [66, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned."]], "randomgen.pcg32.PCG32.seed": [[67, 2, 2, 0, "inc", "The increment in the LCG. Integer between 0 and 2**64-1. If None, seeded with entropy."], [67, 2, 2, 0, "seed", "Seed for PCG64. Integer between 0 and 2**64-1. If None, seeded with entropy."]], "randomgen.pcg64": [[178, 1, 1, 0, "LCG128Mix", "Customizable 128-bit LCG bit generator with output mixing"], [183, 1, 1, 0, "PCG64", "Container for the PCG-64 pseudo-random number generator."], [184, 1, 1, 0, "PCG64DXSM", "Container for the PCG-64 updated with a 64-bit mult using DXSM output func."]], "randomgen.pcg64.LCG128Mix.__init__": [[178, 2, 2, 0, "dxsm_multiplier", "The multiplier to use in the DXSM output function. The default is the DXSM multipler in PCG 2.0."], [178, 2, 2, 0, "inc", "The increment in the LCG. Can be an integer in [0, 2**128) or None. If inc is None, then it is initialized using the same``SeedSequence`` used by seed."], [178, 2, 2, 0, "multiplier", "The multipler to use in the LCG. Must be an odd integer in (0, 2**128)."], [178, 2, 2, 0, "output", "The name of the output function or a ctypes function or function pointer with a signature uint64(uint64, uint64). Supported options are:"], [178, 2, 2, 0, "post", "Whether the mix the output before or after the next increment of the LCG is computed. True updates the state and then mixes the updated state."], [178, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer, a sequence of integers, a SeedSequence instance or None (the default). If seed is None, then PCG64 use a SeedSequence initialized with system-provided entropy."]], "randomgen.pcg64.LCG128Mix": [[69, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [70, 4, 1, 0, "cffi", "CFFI interface"], [71, 4, 1, 0, "ctypes", "ctypes interface"], [72, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [178, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [73, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [74, 3, 1, 0, "seed", "Seed the generator"], [178, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence. None if mode is \"legacy\"."], [75, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.pcg64.LCG128Mix.advance": [[69, 2, 2, 0, "delta", "Number of draws to advance the RNG. Must be less than the size state variable in the underlying RNG."]], "randomgen.pcg64.LCG128Mix.jumped": [[72, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.pcg64.LCG128Mix.random_raw": [[73, 2, 2, 0, "output", "Output values. Used for performance testing since the generated values are not returned."], [73, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned."]], "randomgen.pcg64.LCG128Mix.seed": [[74, 2, 2, 0, "inc", "The increment in the LCG. Can be an integer in [0, 2**128) or None. If inc is None, then it is initialized using a SeedSequence (which is shared with seed if seed is also None)."], [74, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**128), a SeedSequence instance or None (the default). If seed is None, then PCG64 will seed using a SeedSequence which initializes using system-provided entropy."]], "randomgen.pcg64.PCG64.__init__": [[183, 2, 2, 0, "inc", "The increment in the LCG. Can be an integer in [0, 2**128) or None. If inc is None, then it is initialized using entropy. The default is None."], [183, 2, 2, 0, "mode", "The seeding mode to use. \"legacy\" uses the legacy SplitMix64-based initialization. \"sequence\" uses a SeedSequence to transforms the seed into an initial state. \"numpy\" also uses a SeedSequence but seeds the generator in a way that is identical to NumPy. When using \"numpy\", inc must be None. Additionally, to match NumPy, variant must be xsl-rr (this is not checked). None defaults to \"sequence\"."], [183, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**128), a SeedSequence instance or None (the default). If seed is None, then PCG64 will used a SeedSequence initialized with system entropy to Seed the generator"], [183, 2, 2, 0, "variant", "Name of PCG64 variant to use. \"xsl-rr\" corresponds to the original PCG64 (1.0). 1 and \"1.0\" are aliases for \"xsl-rr\". \"dxsm-128\" is identical to the original except that it replaces the mixing function with DXSM. \"dxsm\" uses a cheap multiplier (64-bit, rather than 128-bit) in the underlying LCG and the DXSM output mixer. It also returns the value before advancing the state. This variant is PCG64 2.0. \"cm-dxsm\" (cheap multiplier-dxsm), 2 and \"2.0\" are aliases for \"dxsm\". None trusts randomgen to chose the variant."]], "randomgen.pcg64.PCG64": [[76, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [77, 4, 1, 0, "cffi", "CFFI interface"], [78, 4, 1, 0, "ctypes", "ctypes interface"], [79, 3, 1, 0, "jump", "Jump the state a fixed increment"], [80, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [183, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [81, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [82, 3, 1, 0, "seed", "Seed the generator"], [183, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence. None if mode is \"legacy\"."], [83, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.pcg64.PCG64.advance": [[76, 2, 2, 0, "delta", "Number of draws to advance the RNG. Must be less than the size state variable in the underlying RNG."]], "randomgen.pcg64.PCG64.jump": [[79, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.pcg64.PCG64.jumped": [[80, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.pcg64.PCG64.random_raw": [[81, 2, 2, 0, "output", "Output values. Used for performance testing since the generated values are not returned."], [81, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned."]], "randomgen.pcg64.PCG64.seed": [[82, 2, 2, 0, "inc", "The increment in the LCG. Can be an integer in [0, 2**128) or None. If inc is None, then it is initialized using entropy. The default is None if seed is None, else 0."], [82, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**128), a SeedSequence instance or None (the default). If seed is None, then PCG64 will try to read data from /dev/urandom (or the Windows analog) if available. If unavailable, a 64-bit hash of the time and process ID is used."]], "randomgen.pcg64.PCG64DXSM.__init__": [[184, 2, 2, 0, "inc", "The increment in the LCG. Can be an integer in [0, 2**128) or None. If inc is None, then it is initialized using the same SeedSeuqnce used for seed."], [184, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**128), a SeedSequence instance or None (the default). If seed is None, then PCG64DXSM will used a SeedSequence initialized with system entropy to Seed the generator"]], "randomgen.pcg64.PCG64DXSM": [[84, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [85, 4, 1, 0, "cffi", "CFFI interface"], [86, 4, 1, 0, "ctypes", "ctypes interface"], [87, 3, 1, 0, "jump", "Not implemented. Use jumped."], [88, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [184, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [89, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [90, 3, 1, 0, "seed", "Seed the generator"], [184, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence. None if mode is \"legacy\"."], [91, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.pcg64.PCG64DXSM.advance": [[84, 2, 2, 0, "delta", "Number of draws to advance the RNG. Must be less than the size state variable in the underlying RNG."]], "randomgen.pcg64.PCG64DXSM.jumped": [[88, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.pcg64.PCG64DXSM.random_raw": [[89, 2, 2, 0, "output", "Output values. Used for performance testing since the generated values are not returned."], [89, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned."]], "randomgen.pcg64.PCG64DXSM.seed": [[90, 2, 2, 0, "inc", "The increment in the LCG. Can be an integer in [0, 2**128) or None. If inc is None, then it is initialized using entropy. The default is None if seed is None, else 0."], [90, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**128), a SeedSequence instance or None (the default). If seed is None, then PCG64 will try to read data from /dev/urandom (or the Windows analog) if available. If unavailable, a 64-bit hash of the time and process ID is used."]], "randomgen.philox": [[185, 1, 1, 0, "Philox", "Container for the Philox family of pseudo-random number generators."]], "randomgen.philox.Philox.__init__": [[185, 2, 2, 0, "counter", "Counter to use in the Philox state. Can be either a Python int in [0, 2**(N*W)) where N is number of W is the width, or a M-element uint64 array where M = N*W // 64. If not provided, the counter is initialized at 0."], [185, 2, 2, 0, "key", "Key to use in the Philox state. Unlike seed, which is run through another RNG before use, the value in key is directly set. Can be either a Python int in [0, 2**(N*W//2)) or a m-element uint64 array where m = N*W // (2 * 64). If number=2 and width=32, then the value must be in [0, 2**32) even if stored in a uint64 array. key and seed cannot both be used."], [185, 2, 2, 0, "mode", "The seeding mode to use. \"legacy\" uses the legacy SplitMix64-based initialization. \"sequence\" uses a SeedSequence to transforms the seed into an initial state.  None defaults to \"sequence\". Using \"numpy\" ensures that the generator is configurated using the same parameters required to produce the same sequence that is realized in NumPy, for a given SeedSequence."], [185, 2, 2, 0, "number", "Number of values to produce in a single call. Maps to N in the Philox variant naming scheme PhiloxNxW."], [185, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, data will be read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."], [185, 2, 2, 0, "width", "Bit width the values produced. Maps to W in the Philox variant naming scheme PhiloxNxW."]], "randomgen.philox.Philox": [[92, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [93, 4, 1, 0, "cffi", "CFFI interface"], [94, 4, 1, 0, "ctypes", "ctypes interface"], [95, 3, 1, 0, "jump", "Jumps the state as-if 2**(W*N/2) random numbers have been generated."], [96, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [185, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [97, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [98, 3, 1, 0, "seed", "Seed the generator"], [185, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence. None if mode is \"legacy\"."], [99, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.philox.Philox.advance": [[92, 2, 2, 0, "counter", "Flag indicating whether the advance the counter only or both the counter and the buffer position. The default is True, which has been the pattern in in randomgen <= 1.16. This is changing to False for randomgen > 1.17. To convert between the two, use delta_new = delta * number where number is the number of elements in the generator, delta is the step size when counter=False and delta_new is the step size for counter=True"], [92, 2, 2, 0, "delta", "Number of draws to advance the RNG. Must be less than the size state variable in the underlying RNG. delta can take any value and can be negative. Values outside 0 and  2**(N*W+N/2) are converted into this range by taking the modulo."]], "randomgen.philox.Philox.jump": [[95, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.philox.Philox.jumped": [[96, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.philox.Philox.random_raw": [[97, 2, 2, 0, "output", "Output values. Used for performance testing since the generated values are not returned."], [97, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned."]], "randomgen.philox.Philox.seed": [[98, 2, 2, 0, "counter", "Counter to use in the Philox state. Can be either a Python int in [0, 2**256) or a 4-element uint64 array. If not provided, the counter is initialized at 0."], [98, 2, 2, 0, "key", "Key to use in the Philox state. Unlike seed, which is run through another RNG before use, the value in key is directly set. Can be either a Python int in [0, 2**128) or a 2-element uint64 array. key and seed cannot both be used."], [98, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, data will be read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]], "randomgen.rdrand": [[186, 1, 1, 0, "RDRAND", "Container for the hardware RDRAND random number generator."], [186, 1, 1, 0, "RaisingLock", "A Lock that wraps threading.Lock can can raise errors."]], "randomgen.rdrand.RDRAND.__init__": [[186, 2, 2, 0, "retries", "The number of times to retry. On CPUs with many cores it is possible for RDRAND to fail if heavily utilized. retries sets the number of retries before a RuntimeError is raised. Each retry issues a pause instruction which waits a CPU-specific number of cycles (140 on Skylake 1). The default value of 10 is recommended by Intel (2). You can set any value up-to the maximum integer size on your platform if you have issues with errors, although the practical maximum is less than 100. See Notes for more on the error state."], [186, 2, 2, 0, "seed", "Must be None. Raises if any other value is passed."]], "randomgen.rdrand.RDRAND": [[100, 4, 1, 0, "cffi", "CFFI interface"], [101, 4, 1, 0, "ctypes", "ctypes interface"], [102, 3, 1, 0, "jumped", "Returns a new bit generator"], [186, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [103, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [104, 3, 1, 0, "seed", "Compatibility function. Not used."], [186, 4, 1, 0, "seed_seq", "Always None since RDRAND cannot be seeded."], [105, 4, 1, 0, "state", "Get or set the PRNG state"], [106, 4, 1, 0, "success", "Gets the flag indicating that all calls to RDRAND succeeded"]], "randomgen.rdrand.RDRAND.jumped": [[102, 2, 2, 0, "iter", "This parameter is ignored"]], "randomgen.rdrand.RDRAND.random_raw": [[103, 2, 2, 0, "output", "Output values. Used for performance testing since the generated values are not returned."], [103, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned."]], "randomgen.rdrand.RDRAND.seed": [[104, 2, 2, 0, "seed", "Must be None. Raises if any other value is passed."]], "randomgen.romu": [[187, 1, 1, 0, "Romu", "Mark A. Overton's quad and trio rotate-multiply-based generators"]], "randomgen.romu.Romu.__init__": [[187, 2, 2, 0, "seed", "A seed to initialize the BitGenerator. If None, then fresh, unpredictable entropy will be pulled from the OS. If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state. One may also pass in a SeedSequence instance."], [187, 2, 2, 0, "variant", "The variant to use. The Quad variant is somewhat slower but has a larger state."]], "randomgen.romu.Romu": [[107, 4, 1, 0, "cffi", "CFFI interface"], [108, 4, 1, 0, "ctypes", "ctypes interface"], [109, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [110, 3, 1, 0, "seed", "Seed the generator"], [111, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.romu.Romu.random_raw": [[109, 2, 2, 0, "output", "Output values. Used for performance testing since the generated values are not returned."], [109, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned."]], "randomgen.sfc": [[188, 1, 1, 0, "SFC64", "Chris Doty-Humphrey's Small Fast Chaotic PRNG with optional Weyl Sequence"]], "randomgen.sfc.SFC64.__init__": [[188, 2, 2, 0, "k", "The increment to the Weyl sequence. Must be odd, and if even, 1 is added. If None, then k is generated from the `SeedSequence."], [188, 2, 2, 0, "mode", "The default uses a seed sequence to initialize all unspecified values. When using \"numpy\" uses the seed sequence to initialize three values and checks that both w and k are 1."], [188, 2, 2, 0, "seed", "A seed to initialize the BitGenerator. If None, then fresh, unpredictable entropy will be pulled from the OS. If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state. One may also pass in a SeedSequence instance."], [188, 2, 2, 0, "w", "The starting value of the Weyl sequence. If None, then the initial value is generated from the SeedSequence."]], "randomgen.sfc.SFC64": [[112, 4, 1, 0, "cffi", "CFFI interface"], [113, 4, 1, 0, "ctypes", "ctypes interface"], [114, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [115, 3, 1, 0, "seed", "Seed the generator"], [116, 4, 1, 0, "state", "Get or set the PRNG state"], [117, 3, 1, 0, "weyl_increments", "Generate distinct Weyl increments to construct multiple streams"]], "randomgen.sfc.SFC64.random_raw": [[114, 2, 2, 0, "output", "Output values. Used for performance testing since the generated values are not returned."], [114, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned."]], "randomgen.sfc.SFC64.weyl_increments": [[117, 2, 2, 0, "max_bits", "Maximum number of non-zero bits in the values returned."], [117, 2, 2, 0, "min_bits", "The minimum number of non-zero bits in the values returned. The default set min_bits to max_bits. Must be <= max_bits"], [117, 2, 2, 0, "n", "Number of distinct values to generate."]], "randomgen.sfmt": [[189, 1, 1, 0, "SFMT", "Container for the SIMD-based Mersenne Twister pseudo RNG."]], "randomgen.sfmt.SFMT.__init__": [[189, 2, 2, 0, "mode", "The seeding mode to use. \"legacy\" uses the legacy SplitMix64-based initialization. \"sequence\" uses a SeedSequence to transforms the seed into an initial state.  None defaults to \"sequence\"."], [189, 2, 2, 0, "seed", "Entropy used to initialize the pseudo-random number generator. Can be any integer between 0 and 2**32 - 1 inclusive, an array (or other sequence) of unsigned 32-bit integers, , a SeedSequence instance or None (the default). If seed is None, the 624 32-bit unsigned integers are read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]], "randomgen.sfmt.SFMT": [[118, 4, 1, 0, "cffi", "CFFI interface"], [119, 4, 1, 0, "ctypes", "ctypes interface"], [120, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated."], [121, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [189, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [122, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [123, 3, 1, 0, "seed", "Seed the generator"], [189, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence. None if mode is \"legacy\"."], [124, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.sfmt.SFMT.jump": [[120, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator."]], "randomgen.sfmt.SFMT.jumped": [[121, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.sfmt.SFMT.random_raw": [[122, 2, 2, 0, "output", "Output values. Used for performance testing since the generated values are not returned."], [122, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned."]], "randomgen.sfmt.SFMT.seed": [[123, 2, 2, 0, "seed", "Entropy used to initialize the pseudo-random number generator. Can be any integer between 0 and 2**32 - 1 inclusive, an array (or other sequence) of unsigned 32-bit integers, , a SeedSequence instance or None (the default). If seed is None, the 624 32-bit unsigned integers are read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]], "randomgen.speck128": [[190, 1, 1, 0, "SPECK128", "Container for the SPECK (128 x 256) pseudo-random number generator."]], "randomgen.speck128.SPECK128.__init__": [[190, 2, 2, 0, "counter", "Counter to use in the SPECK128 state. Can be either a Python int in [0, 2**128) or a 2-element uint64 array. If not provided, the counter is initialized at 0."], [190, 2, 2, 0, "key", "Key to use in the SPECK128 state. Unlike seed, which is run through another RNG before use, the value in key is directly set. Can be either a Python int in [0, 2**256) or a 4-element uint64 array. key and seed cannot both be used."], [190, 2, 2, 0, "mode", "The seeding mode to use. \"legacy\" uses the legacy SplitMix64-based initialization. \"sequence\" uses a SeedSequence to transforms the seed into an initial state.  None defaults to \"sequence\"."], [190, 2, 2, 0, "rounds", "Number of rounds of the SPECK algorithm to run. The default value 34 is the official value used in encryption. Reduced-round variant might (untested) perform well statistically with improved performance."], [190, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**256), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]], "randomgen.speck128.SPECK128": [[125, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [126, 4, 1, 0, "cffi", "CFFI interface"], [127, 4, 1, 0, "ctypes", "ctypes interface"], [128, 3, 1, 0, "jump", "Jumps the state as-if iter * 2**64 random numbers are generated"], [129, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [190, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [130, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [131, 3, 1, 0, "seed", "Seed the generator"], [190, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence. None if mode is \"legacy\"."], [132, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.speck128.SPECK128.advance": [[125, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.speck128.SPECK128.jump": [[128, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.speck128.SPECK128.jumped": [[129, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.speck128.SPECK128.random_raw": [[130, 2, 2, 0, "output", "Output values. Used for performance testing since the generated values are not returned."], [130, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned."]], "randomgen.speck128.SPECK128.seed": [[131, 2, 2, 0, "counter", "Integer in [0,2**128) containing the counter position or a 2-element array of uint64 containing the counter"], [131, 2, 2, 0, "key", "Integer in [0,2**256) containing the key or a 4-element array of uint64 containing the key"], [131, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**256), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]], "randomgen.threefry": [[191, 1, 1, 0, "ThreeFry", "Container for the ThreeFry family of pseudo-random number generators."]], "randomgen.threefry.ThreeFry.__init__": [[191, 2, 2, 0, "counter", "Counter to use in the ThreeFry state. Can be either a Python int in [0, 2**(N*W)) where N is number of W is the width, or a M-element uint64 array where M = N*W // 64. If not provided, the counter is initialized at 0."], [191, 2, 2, 0, "key", "Key to use in the ThreeFry state. Unlike seed, which is run through another RNG before use, the value in key is directly set. Can be either a Python int in [0, 2**(N*W//2)) or a m-element uint64 array where m = N*W // (2 * 64). If number=2 and width=32, then the value must be in [0, 2**32) even if stored in a uint64 array. key and seed cannot both be used."], [191, 2, 2, 0, "mode", "The seeding mode to use. \"legacy\" uses the legacy SplitMix64-based initialization. \"sequence\" uses a SeedSequence to transforms the seed into an initial state.  None defaults to \"sequence\"."], [191, 2, 2, 0, "number", "Number of values to produce in a single call. Maps to N in the ThreeFry variant naming scheme ThreeFryNxW."], [191, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, data will be read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."], [191, 2, 2, 0, "width", "Bit width the values produced. Maps to W in the ThreeFry variant naming scheme ThreeFryNxW."]], "randomgen.threefry.ThreeFry": [[133, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [134, 4, 1, 0, "cffi", "CFFI interface"], [135, 4, 1, 0, "ctypes", "ctypes interface"], [136, 3, 1, 0, "jump", "Jumps the state as-if 2**(W*N/2) random numbers have been generated."], [137, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [191, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [138, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [139, 3, 1, 0, "seed", "Seed the generator"], [191, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence. None if mode is \"legacy\"."], [140, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.threefry.ThreeFry.advance": [[133, 2, 2, 0, "counter", "Flag indicating whether the advance the counter only or both the counter and the buffer position. The default is True, which has been the pattern in in randomgen <= 1.16. This is changing to False for randomgen > 1.17. To convert between the two, use delta_new = delta * number where number is the number of elements in the generator, delta is the step size when counter=False and delta_new is the step size for counter=True"], [133, 2, 2, 0, "delta", "Number of draws to advance the RNG. Must be less than the size state variable in the underlying RNG. delta can take any value and can be negative. Values outside 0 and  2**(N*W+N/2) are converted into this range by taking the modulo."]], "randomgen.threefry.ThreeFry.jump": [[136, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.threefry.ThreeFry.jumped": [[137, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.threefry.ThreeFry.random_raw": [[138, 2, 2, 0, "output", "Output values. Used for performance testing since the generated values are not returned."], [138, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned."]], "randomgen.threefry.ThreeFry.seed": [[139, 2, 2, 0, "counter", "Counter to use in the ThreeFry state. Can be either a Python int in [0, 2**256) or a 4-element uint64 array. If not provided, the counter is initialized at 0."], [139, 2, 2, 0, "key", "Key to use in the ThreeFry state. Unlike seed, which is run through another RNG before use, the value in key is directly set. Can be either a Python int in [0, 2**128) or a 2-element uint64 array. key and seed cannot both be used."], [139, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, data will be read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]], "randomgen.wrapper": [[192, 1, 1, 0, "UserBitGenerator", "next_double=None, state=None, state_getter=None, state_setter=None)"]], "randomgen.wrapper.UserBitGenerator": [[141, 4, 1, 0, "cffi", "CFFI interface"], [142, 4, 1, 0, "ctypes", "ctypes interface"], [143, 3, 1, 0, "from_cfunc", "state_getter=None, state_setter=None)"], [144, 3, 1, 0, "from_ctypes", "state_getter=None, state_setter=None)"], [145, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [146, 4, 1, 0, "state", "Get or set the state"]], "randomgen.wrapper.UserBitGenerator.from_cfunc": [[143, 2, 2, 0, "next_32", "A numba callback with a signature uint32(void) the return the next 32 bits from the underlying PRNG."], [143, 2, 2, 0, "next_64", "A numba callback with a signature uint64(void) the return the next 64 bits from the underlying PRNG."], [143, 2, 2, 0, "next_double", "A numba callback with a signature uint32(void) the return the next double in [0,1) from the underlying PRNG."], [143, 2, 2, 0, "next_raw", "A numba callback with a signature uint64(void) the return the next raw value from the underlying PRNG."], [143, 2, 2, 0, "state", "A void pointer to the state. Passed to the next functions when generating random variates."], [143, 2, 2, 0, "state_getter", "A callable that returns the state of the bit generator. If not provided, getting the state property will raise NotImplementedError."], [143, 2, 2, 0, "state_setter", "A callable that sets the state of the bit generator. Must take a single input. If not provided, getting the state property will raise NotImplementedError."]], "randomgen.wrapper.UserBitGenerator.from_ctypes": [[144, 2, 2, 0, "next_32", "A CFunctionType returning ctypes.c_uint64 and taking one ctypes.c_void_p input that returns the next 32 bits from the underlying PRNG."], [144, 2, 2, 0, "next_64", "A CFunctionType returning ctypes.c_uint64 and taking one ctypes.c_void_p input that returns the next 64 bits from the underlying PRNG."], [144, 2, 2, 0, "next_double", "A CFunctionType returning ctypes.c_uint64 and taking one ctypes.c_void_p input that returns the next double in [0,1) value from the underlying PRNG."], [144, 2, 2, 0, "next_raw", "A CFunctionType returning ctypes.c_uint64 and taking one ctypes.c_void_p input that returns the next raw value from the underlying PRNG."], [144, 2, 2, 0, "state", "A void pointer to the state. Passed to the next functions when generating random variates."], [144, 2, 2, 0, "state_getter", "A callable that returns the state of the bit generator. If not provided, getting the state property will raise NotImplementedError."], [144, 2, 2, 0, "state_setter", "A callable that sets the state of the bit generator. Must take a single input. If not provided, getting the state property will raise NotImplementedError."]], "randomgen.wrapper.UserBitGenerator.random_raw": [[145, 2, 2, 0, "output", "Output values. Used for performance testing since the generated values are not returned."], [145, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned."]], "randomgen.xoroshiro128": [[193, 1, 1, 0, "Xoroshiro128", "Container for the xoroshiro128+/++ pseudo-random number generator."]], "randomgen.xoroshiro128.Xoroshiro128.__init__": [[193, 2, 2, 0, "mode", "The seeding mode to use. \"legacy\" uses the legacy SplitMix64-based initialization. \"sequence\" uses a SeedSequence to transforms the seed into an initial state.  None defaults to \"sequence\"."], [193, 2, 2, 0, "plusplus", "Whether to use the ++ version (xoroshiro128++). The default is False which uses the xoroshiro128+ PRNG which"], [193, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence, or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]], "randomgen.xoroshiro128.Xoroshiro128": [[147, 4, 1, 0, "cffi", "CFFI interface"], [148, 4, 1, 0, "ctypes", "ctypes interface"], [149, 3, 1, 0, "jump", "Jumps the state as-if 2**64 random numbers have been generated."], [150, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [193, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [151, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [152, 3, 1, 0, "seed", "Seed the generator"], [193, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence. None if mode is \"legacy\"."], [153, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.xoroshiro128.Xoroshiro128.jump": [[149, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.xoroshiro128.Xoroshiro128.jumped": [[150, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.xoroshiro128.Xoroshiro128.random_raw": [[151, 2, 2, 0, "output", "Output values. Used for performance testing since the generated values are not returned."], [151, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned."]], "randomgen.xoroshiro128.Xoroshiro128.seed": [[152, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence, or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]], "randomgen.xorshift1024": [[194, 1, 1, 0, "Xorshift1024", "Container for the xorshift1024*\u03c6 pseudo-random number generator."]], "randomgen.xorshift1024.Xorshift1024.__init__": [[194, 2, 2, 0, "mode", "The seeding mode to use. \"legacy\" uses the legacy SplitMix64-based initialization. \"sequence\" uses a SeedSequence to transforms the seed into an initial state.  None defaults to \"sequence\"."], [194, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]], "randomgen.xorshift1024.Xorshift1024": [[154, 4, 1, 0, "cffi", "CFFI interface"], [155, 4, 1, 0, "ctypes", "ctypes interface"], [156, 3, 1, 0, "jump", "Jumps the state as-if 2**512 random numbers have been generated"], [157, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [194, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [158, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [159, 3, 1, 0, "seed", "Seed the generator"], [194, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence. None if mode is \"legacy\"."], [160, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.xorshift1024.Xorshift1024.jump": [[156, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.xorshift1024.Xorshift1024.jumped": [[157, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.xorshift1024.Xorshift1024.random_raw": [[158, 2, 2, 0, "output", "Output values. Used for performance testing since the generated values are not returned."], [158, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned."]], "randomgen.xorshift1024.Xorshift1024.seed": [[159, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]], "randomgen.xoshiro256": [[195, 1, 1, 0, "Xoshiro256", "Container for the xoshiro256** pseudo-random number generator."]], "randomgen.xoshiro256.Xoshiro256.__init__": [[195, 2, 2, 0, "mode", "The seeding mode to use. \"legacy\" uses the legacy SplitMix64-based initialization. \"sequence\" uses a SeedSequence to transforms the seed into an initial state.  None defaults to \"sequence\"."], [195, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]], "randomgen.xoshiro256.Xoshiro256": [[161, 4, 1, 0, "cffi", "CFFI interface"], [162, 4, 1, 0, "ctypes", "ctypes interface"], [163, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated."], [164, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [195, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [165, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [166, 3, 1, 0, "seed", "Seed the generator"], [195, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence. None if mode is \"legacy\"."], [167, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.xoshiro256.Xoshiro256.jump": [[163, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.xoshiro256.Xoshiro256.jumped": [[164, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.xoshiro256.Xoshiro256.random_raw": [[165, 2, 2, 0, "output", "Output values. Used for performance testing since the generated values are not returned."], [165, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned."]], "randomgen.xoshiro256.Xoshiro256.seed": [[166, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]], "randomgen.xoshiro512": [[196, 1, 1, 0, "Xoshiro512", "Container for the xoshiro512** pseudo-random number generator."]], "randomgen.xoshiro512.Xoshiro512.__init__": [[196, 2, 2, 0, "mode", "The seeding mode to use. \"legacy\" uses the legacy SplitMix64-based initialization. \"sequence\" uses a SeedSequence to transforms the seed into an initial state.  None defaults to \"sequence\"."], [196, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]], "randomgen.xoshiro512.Xoshiro512": [[168, 4, 1, 0, "cffi", "CFFI interface"], [169, 4, 1, 0, "ctypes", "ctypes interface"], [170, 3, 1, 0, "jump", "Jumps the state as-if 2**256 random numbers have been generated."], [171, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [196, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [172, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [173, 3, 1, 0, "seed", "Seed the generator"], [196, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence. None if mode is \"legacy\"."], [174, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.xoshiro512.Xoshiro512.jump": [[170, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.xoshiro512.Xoshiro512.jumped": [[171, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.xoshiro512.Xoshiro512.random_raw": [[172, 2, 2, 0, "output", "Output values. Used for performance testing since the generated values are not returned."], [172, 2, 2, 0, "size", "Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned."]], "randomgen.xoshiro512.Xoshiro512.seed": [[173, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available. If unavailable, a hash of the time and process ID is used."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:parameter", "3": "py:method", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"ae": [0, 4, 5, 6, 7, 8, 9, 10, 11], "counter": [0, 185, 190, 191], "base": [0, 1, 185, 186, 190, 191], "rng": [0, 1, 176, 185, 190, 191], "seed": [0, 1, 2, 3, 10, 18, 25, 30, 35, 40, 47, 54, 59, 67, 74, 82, 90, 98, 104, 110, 115, 123, 131, 139, 152, 159, 166, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 201, 224, 225], "state": [0, 1, 2, 3, 11, 19, 26, 31, 36, 41, 48, 55, 60, 68, 75, 83, 91, 99, 105, 111, 116, 124, 132, 140, 146, 153, 160, 167, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 201, 206, 213, 221, 224], "parallel": [0, 1, 2, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 193, 194, 195, 196, 217, 221], "gener": [0, 1, 2, 3, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 201, 202, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221], "extend": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 201, 202], "test": [0, 1, 2, 3, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 225], "chacha": [1, 12, 13, 14, 15, 16, 17, 18, 19], "cipher": [1, 3, 175], "doubl": 2, "simd": [2, 189], "mersenn": [2, 180, 181, 189], "twister": [2, 180, 181, 189], "dsfmt": [2, 20, 21, 22, 23, 24, 25, 26], "hc": [3, 175], "128": [3, 175, 178], "randomgen": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 200, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217], "aescount": [4, 5, 6, 7, 8, 9, 10, 11], "advanc": [4, 12, 61, 69, 76, 84, 92, 125, 133, 221], "cffi": [5, 13, 20, 27, 32, 37, 42, 49, 56, 62, 70, 77, 85, 93, 100, 107, 112, 118, 126, 134, 141, 147, 154, 161, 168], "ctype": [6, 14, 21, 28, 33, 38, 43, 50, 57, 63, 71, 78, 86, 94, 101, 108, 113, 119, 127, 135, 142, 148, 155, 162, 169], "jump": [7, 8, 15, 16, 22, 23, 44, 45, 51, 52, 64, 65, 72, 79, 80, 87, 88, 95, 96, 102, 120, 121, 128, 129, 136, 137, 149, 150, 156, 157, 163, 164, 170, 171, 221], "random_raw": [9, 17, 24, 29, 34, 39, 46, 53, 58, 66, 73, 81, 89, 97, 103, 109, 114, 122, 130, 138, 145, 151, 158, 165, 172], "efiix64": [27, 28, 29, 30, 31], "hc128": [32, 33, 34, 35, 36], "jsf": [37, 38, 39, 40, 41], "lxm": [42, 43, 44, 45, 46, 47, 48, 179], "mt19937": [49, 50, 51, 52, 53, 54, 55, 180], "mt64": [56, 57, 58, 59, 60], "pcg32": [61, 62, 63, 64, 65, 66, 67, 68, 182], "pcg64": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 183], "lcg128mix": [69, 70, 71, 72, 73, 74, 75], "pcg64dxsm": [84, 85, 86, 87, 88, 89, 90, 91], "philox": [92, 93, 94, 95, 96, 97, 98, 99, 185], "rdrand": [100, 101, 102, 103, 104, 105, 106, 186], "success": 106, "romu": [107, 108, 109, 110, 111, 187], "sfc": [112, 113, 114, 115, 116, 117], "sfc64": [112, 113, 114, 115, 116, 117, 188], "weyl_incr": 117, "sfmt": [118, 119, 120, 121, 122, 123, 124, 189], "speck128": [125, 126, 127, 128, 129, 130, 131, 132], "threefri": [133, 134, 135, 136, 137, 138, 139, 140, 191], "wrapper": [141, 142, 143, 144, 145, 146], "userbitgener": [141, 142, 143, 144, 145, 146], "from_cfunc": 143, "from_ctyp": 144, "xoroshiro128": [147, 148, 149, 150, 151, 152, 153, 193], "xorshift1024": [154, 155, 156, 157, 158, 159, 160, 194], "xoshiro256": [161, 162, 163, 164, 165, 166, 167, 195], "xoshiro512": [168, 169, 170, 171, 172, 173, 174, 196], "bit": [176, 178, 181, 182, 183, 184, 192, 202, 217], "stabl": 176, "experiment": 176, "user": [176, 192], "defin": [176, 192], "jenkin": 177, "small": 177, "fast": [177, 189], "linear": 178, "congruenti": [178, 182, 183, 184], "lcg": 178, "output": [178, 184], "mix": 178, "64": [181, 183, 184], "permut": [182, 183, 184], "32": 182, "2": [184, 197], "0": [184, 197, 225], "multipli": [184, 187], "dxsm": 184, "see": [184, 201, 208, 209, 212, 215, 216, 218], "also": [184, 201, 208, 209, 212, 215, 216, 218], "hardwar": 186, "random": [186, 211, 216, 217, 218, 221], "number": [186, 221], "custom": 186, "lock": 186, "rotat": 187, "orient": 189, "speck": 190, "from": [192, 220], "low": 192, "level": 192, "object": 192, "\u03c6": 194, "chang": [197, 200, 217], "log": 197, "v1": 197, "23": [197, 200], "1": [197, 200, 220], "20": 197, "19": [197, 200], "3": 197, "18": [197, 200], "17": [197, 220], "16": [197, 200], "6": 197, "5": 197, "4": 197, "15": 197, "write": 198, "bitgener": [198, 202], "us": [198, 221, 224], "python": [198, 202], "perform": [198, 222], "numba": [198, 202], "system": 199, "entropi": 199, "evolut": 200, "between": 200, "manipul": 201, "distribut": 201, "cython": 202, "new": [202, 217, 220], "futur": 203, "plan": 203, "_seed_sequ": [204, 205, 206], "seedsequ": [204, 205, 206, 221, 224], "generate_st": 204, "spawn": 205, "extendedgener": [207, 208, 209, 210, 211, 212, 213, 214, 215], "bit_gener": 207, "complex_norm": 208, "multivariate_complex_norm": 209, "multivariate_norm": 210, "standard_wishart": 212, "uinteg": 214, "wishart": 215, "danger": [216, 217, 218], "introduct": 217, "histori": 217, "what": [217, 220], "": [217, 220, 221], "differ": [217, 220], "support": 217, "featur": 217, "remov": 217, "indic": 217, "tabl": 217, "legaci": 218, "multithread": 219, "numpi": 220, "befor": 220, "distinct": 221, "kei": 221, "cryptograph": 221, "prng": 221, "weyl": 221, "sequenc": [221, 224], "non": 221, "reproduc": 221, "recommend": 222, "time": 222, "note": [222, 224, 225], "refer": 223, "qualiti": 225, "assur": 225, "core": 225, "exampl": 225, "configur": 225, "addit": 225, "experi": 225, "correl": 225, "sequenti": 225, "zero": 225}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "nbsphinx": 4, "sphinx": 58}, "alltitles": {"AES Counter-based RNG": [[0, "module-randomgen.aes"]], "Seeding and State": [[0, "seeding-and-state"], [1, "seeding-and-state"], [2, "seeding-and-state"], [3, "seeding-and-state"], [175, "seeding-and-state"], [177, "seeding-and-state"], [178, "seeding-and-state"], [179, "seeding-and-state"], [180, "seeding-and-state"], [181, "seeding-and-state"], [182, "seeding-and-state"], [183, "seeding-and-state"], [184, "seeding-and-state"], [185, "seeding-and-state"], [186, "seeding-and-state"], [187, "seeding-and-state"], [188, "seeding-and-state"], [189, "seeding-and-state"], [190, "seeding-and-state"], [191, "seeding-and-state"], [193, "seeding-and-state"], [194, "seeding-and-state"], [195, "seeding-and-state"], [196, "seeding-and-state"]], "Parallel generation": [[0, "parallel-generation"], [1, "parallel-generation"], [2, "parallel-generation"], [178, "parallel-generation"], [179, "parallel-generation"], [180, "parallel-generation"], [182, "parallel-generation"], [183, "parallel-generation"], [184, "parallel-generation"], [185, "parallel-generation"], [186, "parallel-generation"], [189, "parallel-generation"], [190, "parallel-generation"], [191, "parallel-generation"], [193, "parallel-generation"], [194, "parallel-generation"], [195, "parallel-generation"], [196, "parallel-generation"]], "Extending": [[0, "extending"], [1, "extending"], [2, "extending"], [3, "extending"], [175, "extending"], [177, "extending"], [178, "extending"], [179, "extending"], [180, "extending"], [181, "extending"], [182, "extending"], [183, "extending"], [184, "extending"], [185, "extending"], [186, "extending"], [187, "extending"], [188, "extending"], [189, "extending"], [190, "extending"], [191, "extending"], [192, "extending"], [193, "extending"], [194, "extending"], [195, "extending"], [196, "extending"], [202, "extending"]], "Testing": [[0, "testing"], [1, "testing"], [2, "testing"], [3, "testing"], [175, "testing"], [177, "testing"], [178, "testing"], [179, "testing"], [180, "testing"], [181, "testing"], [182, "testing"], [183, "testing"], [184, "testing"], [185, "testing"], [186, "testing"], [187, "testing"], [188, "testing"], [189, "testing"], [190, "testing"], [191, "testing"], [192, "testing"], [193, "testing"], [194, "testing"], [195, "testing"], [196, "testing"]], "ChaCha Cipher-based RNG": [[1, "module-randomgen.chacha"]], "Double SIMD Mersenne Twister (dSFMT)": [[2, "module-randomgen.dsfmt"]], "HC-128 Cipher Generator": [[3, "module-randomgen.efiix64"], [175, "module-randomgen.hc128"]], "randomgen.aes.AESCounter.advance": [[4, "randomgen-aes-aescounter-advance"]], "randomgen.aes.AESCounter.cffi": [[5, "randomgen-aes-aescounter-cffi"]], "randomgen.aes.AESCounter.ctypes": [[6, "randomgen-aes-aescounter-ctypes"]], "randomgen.aes.AESCounter.jump": [[7, "randomgen-aes-aescounter-jump"]], "randomgen.aes.AESCounter.jumped": [[8, "randomgen-aes-aescounter-jumped"]], "randomgen.aes.AESCounter.random_raw": [[9, "randomgen-aes-aescounter-random-raw"]], "randomgen.aes.AESCounter.seed": [[10, "randomgen-aes-aescounter-seed"]], "randomgen.aes.AESCounter.state": [[11, "randomgen-aes-aescounter-state"]], "randomgen.chacha.ChaCha.advance": [[12, "randomgen-chacha-chacha-advance"]], "randomgen.chacha.ChaCha.cffi": [[13, "randomgen-chacha-chacha-cffi"]], "randomgen.chacha.ChaCha.ctypes": [[14, "randomgen-chacha-chacha-ctypes"]], "randomgen.chacha.ChaCha.jump": [[15, "randomgen-chacha-chacha-jump"]], "randomgen.chacha.ChaCha.jumped": [[16, "randomgen-chacha-chacha-jumped"]], "randomgen.chacha.ChaCha.random_raw": [[17, "randomgen-chacha-chacha-random-raw"]], "randomgen.chacha.ChaCha.seed": [[18, "randomgen-chacha-chacha-seed"]], "randomgen.chacha.ChaCha.state": [[19, "randomgen-chacha-chacha-state"]], "randomgen.dsfmt.DSFMT.cffi": [[20, "randomgen-dsfmt-dsfmt-cffi"]], "randomgen.dsfmt.DSFMT.ctypes": [[21, "randomgen-dsfmt-dsfmt-ctypes"]], "randomgen.dsfmt.DSFMT.jump": [[22, "randomgen-dsfmt-dsfmt-jump"]], "randomgen.dsfmt.DSFMT.jumped": [[23, "randomgen-dsfmt-dsfmt-jumped"]], "randomgen.dsfmt.DSFMT.random_raw": [[24, "randomgen-dsfmt-dsfmt-random-raw"]], "randomgen.dsfmt.DSFMT.seed": [[25, "randomgen-dsfmt-dsfmt-seed"]], "randomgen.dsfmt.DSFMT.state": [[26, "randomgen-dsfmt-dsfmt-state"]], "randomgen.efiix64.EFIIX64.cffi": [[27, "randomgen-efiix64-efiix64-cffi"]], "randomgen.efiix64.EFIIX64.ctypes": [[28, "randomgen-efiix64-efiix64-ctypes"]], "randomgen.efiix64.EFIIX64.random_raw": [[29, "randomgen-efiix64-efiix64-random-raw"]], "randomgen.efiix64.EFIIX64.seed": [[30, "randomgen-efiix64-efiix64-seed"]], "randomgen.efiix64.EFIIX64.state": [[31, "randomgen-efiix64-efiix64-state"]], "randomgen.hc128.HC128.cffi": [[32, "randomgen-hc128-hc128-cffi"]], "randomgen.hc128.HC128.ctypes": [[33, "randomgen-hc128-hc128-ctypes"]], "randomgen.hc128.HC128.random_raw": [[34, "randomgen-hc128-hc128-random-raw"]], "randomgen.hc128.HC128.seed": [[35, "randomgen-hc128-hc128-seed"]], "randomgen.hc128.HC128.state": [[36, "randomgen-hc128-hc128-state"]], "randomgen.jsf.JSF.cffi": [[37, "randomgen-jsf-jsf-cffi"]], "randomgen.jsf.JSF.ctypes": [[38, "randomgen-jsf-jsf-ctypes"]], "randomgen.jsf.JSF.random_raw": [[39, "randomgen-jsf-jsf-random-raw"]], "randomgen.jsf.JSF.seed": [[40, "randomgen-jsf-jsf-seed"]], "randomgen.jsf.JSF.state": [[41, "randomgen-jsf-jsf-state"]], "randomgen.lxm.LXM.cffi": [[42, "randomgen-lxm-lxm-cffi"]], "randomgen.lxm.LXM.ctypes": [[43, "randomgen-lxm-lxm-ctypes"]], "randomgen.lxm.LXM.jump": [[44, "randomgen-lxm-lxm-jump"]], "randomgen.lxm.LXM.jumped": [[45, "randomgen-lxm-lxm-jumped"]], "randomgen.lxm.LXM.random_raw": [[46, "randomgen-lxm-lxm-random-raw"]], "randomgen.lxm.LXM.seed": [[47, "randomgen-lxm-lxm-seed"]], "randomgen.lxm.LXM.state": [[48, "randomgen-lxm-lxm-state"]], "randomgen.mt19937.MT19937.cffi": [[49, "randomgen-mt19937-mt19937-cffi"]], "randomgen.mt19937.MT19937.ctypes": [[50, "randomgen-mt19937-mt19937-ctypes"]], "randomgen.mt19937.MT19937.jump": [[51, "randomgen-mt19937-mt19937-jump"]], "randomgen.mt19937.MT19937.jumped": [[52, "randomgen-mt19937-mt19937-jumped"]], "randomgen.mt19937.MT19937.random_raw": [[53, "randomgen-mt19937-mt19937-random-raw"]], "randomgen.mt19937.MT19937.seed": [[54, "randomgen-mt19937-mt19937-seed"]], "randomgen.mt19937.MT19937.state": [[55, "randomgen-mt19937-mt19937-state"]], "randomgen.mt64.MT64.cffi": [[56, "randomgen-mt64-mt64-cffi"]], "randomgen.mt64.MT64.ctypes": [[57, "randomgen-mt64-mt64-ctypes"]], "randomgen.mt64.MT64.random_raw": [[58, "randomgen-mt64-mt64-random-raw"]], "randomgen.mt64.MT64.seed": [[59, "randomgen-mt64-mt64-seed"]], "randomgen.mt64.MT64.state": [[60, "randomgen-mt64-mt64-state"]], "randomgen.pcg32.PCG32.advance": [[61, "randomgen-pcg32-pcg32-advance"]], "randomgen.pcg32.PCG32.cffi": [[62, "randomgen-pcg32-pcg32-cffi"]], "randomgen.pcg32.PCG32.ctypes": [[63, "randomgen-pcg32-pcg32-ctypes"]], "randomgen.pcg32.PCG32.jump": [[64, "randomgen-pcg32-pcg32-jump"]], "randomgen.pcg32.PCG32.jumped": [[65, "randomgen-pcg32-pcg32-jumped"]], "randomgen.pcg32.PCG32.random_raw": [[66, "randomgen-pcg32-pcg32-random-raw"]], "randomgen.pcg32.PCG32.seed": [[67, "randomgen-pcg32-pcg32-seed"]], "randomgen.pcg32.PCG32.state": [[68, "randomgen-pcg32-pcg32-state"]], "randomgen.pcg64.LCG128Mix.advance": [[69, "randomgen-pcg64-lcg128mix-advance"]], "randomgen.pcg64.LCG128Mix.cffi": [[70, "randomgen-pcg64-lcg128mix-cffi"]], "randomgen.pcg64.LCG128Mix.ctypes": [[71, "randomgen-pcg64-lcg128mix-ctypes"]], "randomgen.pcg64.LCG128Mix.jumped": [[72, "randomgen-pcg64-lcg128mix-jumped"]], "randomgen.pcg64.LCG128Mix.random_raw": [[73, "randomgen-pcg64-lcg128mix-random-raw"]], "randomgen.pcg64.LCG128Mix.seed": [[74, "randomgen-pcg64-lcg128mix-seed"]], "randomgen.pcg64.LCG128Mix.state": [[75, "randomgen-pcg64-lcg128mix-state"]], "randomgen.pcg64.PCG64.advance": [[76, "randomgen-pcg64-pcg64-advance"]], "randomgen.pcg64.PCG64.cffi": [[77, "randomgen-pcg64-pcg64-cffi"]], "randomgen.pcg64.PCG64.ctypes": [[78, "randomgen-pcg64-pcg64-ctypes"]], "randomgen.pcg64.PCG64.jump": [[79, "randomgen-pcg64-pcg64-jump"]], "randomgen.pcg64.PCG64.jumped": [[80, "randomgen-pcg64-pcg64-jumped"]], "randomgen.pcg64.PCG64.random_raw": [[81, "randomgen-pcg64-pcg64-random-raw"]], "randomgen.pcg64.PCG64.seed": [[82, "randomgen-pcg64-pcg64-seed"]], "randomgen.pcg64.PCG64.state": [[83, "randomgen-pcg64-pcg64-state"]], "randomgen.pcg64.PCG64DXSM.advance": [[84, "randomgen-pcg64-pcg64dxsm-advance"]], "randomgen.pcg64.PCG64DXSM.cffi": [[85, "randomgen-pcg64-pcg64dxsm-cffi"]], "randomgen.pcg64.PCG64DXSM.ctypes": [[86, "randomgen-pcg64-pcg64dxsm-ctypes"]], "randomgen.pcg64.PCG64DXSM.jump": [[87, "randomgen-pcg64-pcg64dxsm-jump"]], "randomgen.pcg64.PCG64DXSM.jumped": [[88, "randomgen-pcg64-pcg64dxsm-jumped"]], "randomgen.pcg64.PCG64DXSM.random_raw": [[89, "randomgen-pcg64-pcg64dxsm-random-raw"]], "randomgen.pcg64.PCG64DXSM.seed": [[90, "randomgen-pcg64-pcg64dxsm-seed"]], "randomgen.pcg64.PCG64DXSM.state": [[91, "randomgen-pcg64-pcg64dxsm-state"]], "randomgen.philox.Philox.advance": [[92, "randomgen-philox-philox-advance"]], "randomgen.philox.Philox.cffi": [[93, "randomgen-philox-philox-cffi"]], "randomgen.philox.Philox.ctypes": [[94, "randomgen-philox-philox-ctypes"]], "randomgen.philox.Philox.jump": [[95, "randomgen-philox-philox-jump"]], "randomgen.philox.Philox.jumped": [[96, "randomgen-philox-philox-jumped"]], "randomgen.philox.Philox.random_raw": [[97, "randomgen-philox-philox-random-raw"]], "randomgen.philox.Philox.seed": [[98, "randomgen-philox-philox-seed"]], "randomgen.philox.Philox.state": [[99, "randomgen-philox-philox-state"]], "randomgen.rdrand.RDRAND.cffi": [[100, "randomgen-rdrand-rdrand-cffi"]], "randomgen.rdrand.RDRAND.ctypes": [[101, "randomgen-rdrand-rdrand-ctypes"]], "randomgen.rdrand.RDRAND.jumped": [[102, "randomgen-rdrand-rdrand-jumped"]], "randomgen.rdrand.RDRAND.random_raw": [[103, "randomgen-rdrand-rdrand-random-raw"]], "randomgen.rdrand.RDRAND.seed": [[104, "randomgen-rdrand-rdrand-seed"]], "randomgen.rdrand.RDRAND.state": [[105, "randomgen-rdrand-rdrand-state"]], "randomgen.rdrand.RDRAND.success": [[106, "randomgen-rdrand-rdrand-success"]], "randomgen.romu.Romu.cffi": [[107, "randomgen-romu-romu-cffi"]], "randomgen.romu.Romu.ctypes": [[108, "randomgen-romu-romu-ctypes"]], "randomgen.romu.Romu.random_raw": [[109, "randomgen-romu-romu-random-raw"]], "randomgen.romu.Romu.seed": [[110, "randomgen-romu-romu-seed"]], "randomgen.romu.Romu.state": [[111, "randomgen-romu-romu-state"]], "randomgen.sfc.SFC64.cffi": [[112, "randomgen-sfc-sfc64-cffi"]], "randomgen.sfc.SFC64.ctypes": [[113, "randomgen-sfc-sfc64-ctypes"]], "randomgen.sfc.SFC64.random_raw": [[114, "randomgen-sfc-sfc64-random-raw"]], "randomgen.sfc.SFC64.seed": [[115, "randomgen-sfc-sfc64-seed"]], "randomgen.sfc.SFC64.state": [[116, "randomgen-sfc-sfc64-state"]], "randomgen.sfc.SFC64.weyl_increments": [[117, "randomgen-sfc-sfc64-weyl-increments"]], "randomgen.sfmt.SFMT.cffi": [[118, "randomgen-sfmt-sfmt-cffi"]], "randomgen.sfmt.SFMT.ctypes": [[119, "randomgen-sfmt-sfmt-ctypes"]], "randomgen.sfmt.SFMT.jump": [[120, "randomgen-sfmt-sfmt-jump"]], "randomgen.sfmt.SFMT.jumped": [[121, "randomgen-sfmt-sfmt-jumped"]], "randomgen.sfmt.SFMT.random_raw": [[122, "randomgen-sfmt-sfmt-random-raw"]], "randomgen.sfmt.SFMT.seed": [[123, "randomgen-sfmt-sfmt-seed"]], "randomgen.sfmt.SFMT.state": [[124, "randomgen-sfmt-sfmt-state"]], "randomgen.speck128.SPECK128.advance": [[125, "randomgen-speck128-speck128-advance"]], "randomgen.speck128.SPECK128.cffi": [[126, "randomgen-speck128-speck128-cffi"]], "randomgen.speck128.SPECK128.ctypes": [[127, "randomgen-speck128-speck128-ctypes"]], "randomgen.speck128.SPECK128.jump": [[128, "randomgen-speck128-speck128-jump"]], "randomgen.speck128.SPECK128.jumped": [[129, "randomgen-speck128-speck128-jumped"]], "randomgen.speck128.SPECK128.random_raw": [[130, "randomgen-speck128-speck128-random-raw"]], "randomgen.speck128.SPECK128.seed": [[131, "randomgen-speck128-speck128-seed"]], "randomgen.speck128.SPECK128.state": [[132, "randomgen-speck128-speck128-state"]], "randomgen.threefry.ThreeFry.advance": [[133, "randomgen-threefry-threefry-advance"]], "randomgen.threefry.ThreeFry.cffi": [[134, "randomgen-threefry-threefry-cffi"]], "randomgen.threefry.ThreeFry.ctypes": [[135, "randomgen-threefry-threefry-ctypes"]], "randomgen.threefry.ThreeFry.jump": [[136, "randomgen-threefry-threefry-jump"]], "randomgen.threefry.ThreeFry.jumped": [[137, "randomgen-threefry-threefry-jumped"]], "randomgen.threefry.ThreeFry.random_raw": [[138, "randomgen-threefry-threefry-random-raw"]], "randomgen.threefry.ThreeFry.seed": [[139, "randomgen-threefry-threefry-seed"]], "randomgen.threefry.ThreeFry.state": [[140, "randomgen-threefry-threefry-state"]], "randomgen.wrapper.UserBitGenerator.cffi": [[141, "randomgen-wrapper-userbitgenerator-cffi"]], "randomgen.wrapper.UserBitGenerator.ctypes": [[142, "randomgen-wrapper-userbitgenerator-ctypes"]], "randomgen.wrapper.UserBitGenerator.from_cfunc": [[143, "randomgen-wrapper-userbitgenerator-from-cfunc"]], "randomgen.wrapper.UserBitGenerator.from_ctypes": [[144, "randomgen-wrapper-userbitgenerator-from-ctypes"]], "randomgen.wrapper.UserBitGenerator.random_raw": [[145, "randomgen-wrapper-userbitgenerator-random-raw"]], "randomgen.wrapper.UserBitGenerator.state": [[146, "randomgen-wrapper-userbitgenerator-state"]], "randomgen.xoroshiro128.Xoroshiro128.cffi": [[147, "randomgen-xoroshiro128-xoroshiro128-cffi"]], "randomgen.xoroshiro128.Xoroshiro128.ctypes": [[148, "randomgen-xoroshiro128-xoroshiro128-ctypes"]], "randomgen.xoroshiro128.Xoroshiro128.jump": [[149, "randomgen-xoroshiro128-xoroshiro128-jump"]], "randomgen.xoroshiro128.Xoroshiro128.jumped": [[150, "randomgen-xoroshiro128-xoroshiro128-jumped"]], "randomgen.xoroshiro128.Xoroshiro128.random_raw": [[151, "randomgen-xoroshiro128-xoroshiro128-random-raw"]], "randomgen.xoroshiro128.Xoroshiro128.seed": [[152, "randomgen-xoroshiro128-xoroshiro128-seed"]], "randomgen.xoroshiro128.Xoroshiro128.state": [[153, "randomgen-xoroshiro128-xoroshiro128-state"]], "randomgen.xorshift1024.Xorshift1024.cffi": [[154, "randomgen-xorshift1024-xorshift1024-cffi"]], "randomgen.xorshift1024.Xorshift1024.ctypes": [[155, "randomgen-xorshift1024-xorshift1024-ctypes"]], "randomgen.xorshift1024.Xorshift1024.jump": [[156, "randomgen-xorshift1024-xorshift1024-jump"]], "randomgen.xorshift1024.Xorshift1024.jumped": [[157, "randomgen-xorshift1024-xorshift1024-jumped"]], "randomgen.xorshift1024.Xorshift1024.random_raw": [[158, "randomgen-xorshift1024-xorshift1024-random-raw"]], "randomgen.xorshift1024.Xorshift1024.seed": [[159, "randomgen-xorshift1024-xorshift1024-seed"]], "randomgen.xorshift1024.Xorshift1024.state": [[160, "randomgen-xorshift1024-xorshift1024-state"]], "randomgen.xoshiro256.Xoshiro256.cffi": [[161, "randomgen-xoshiro256-xoshiro256-cffi"]], "randomgen.xoshiro256.Xoshiro256.ctypes": [[162, "randomgen-xoshiro256-xoshiro256-ctypes"]], "randomgen.xoshiro256.Xoshiro256.jump": [[163, "randomgen-xoshiro256-xoshiro256-jump"]], "randomgen.xoshiro256.Xoshiro256.jumped": [[164, "randomgen-xoshiro256-xoshiro256-jumped"]], "randomgen.xoshiro256.Xoshiro256.random_raw": [[165, "randomgen-xoshiro256-xoshiro256-random-raw"]], "randomgen.xoshiro256.Xoshiro256.seed": [[166, "randomgen-xoshiro256-xoshiro256-seed"]], "randomgen.xoshiro256.Xoshiro256.state": [[167, "randomgen-xoshiro256-xoshiro256-state"]], "randomgen.xoshiro512.Xoshiro512.cffi": [[168, "randomgen-xoshiro512-xoshiro512-cffi"]], "randomgen.xoshiro512.Xoshiro512.ctypes": [[169, "randomgen-xoshiro512-xoshiro512-ctypes"]], "randomgen.xoshiro512.Xoshiro512.jump": [[170, "randomgen-xoshiro512-xoshiro512-jump"]], "randomgen.xoshiro512.Xoshiro512.jumped": [[171, "randomgen-xoshiro512-xoshiro512-jumped"]], "randomgen.xoshiro512.Xoshiro512.random_raw": [[172, "randomgen-xoshiro512-xoshiro512-random-raw"]], "randomgen.xoshiro512.Xoshiro512.seed": [[173, "randomgen-xoshiro512-xoshiro512-seed"]], "randomgen.xoshiro512.Xoshiro512.state": [[174, "randomgen-xoshiro512-xoshiro512-state"]], "Bit Generators": [[176, "bit-generators"], [217, "bit-generators"]], "Stable RNGs": [[176, "stable-rngs"]], "Experimental RNGs": [[176, "experimental-rngs"]], "User-defined Bit Generators": [[176, "user-defined-bit-generators"], [192, "user-defined-bit-generators"]], "Jenkins Small Fast Generator": [[177, "module-randomgen.jsf"]], "128-bit Linear Congruential Generator (LCG) with Output Mixing": [[178, "bit-linear-congruential-generator-lcg-with-output-mixing"]], "LXM Generator": [[179, "module-randomgen.lxm"]], "Mersenne Twister (MT19937)": [[180, "module-randomgen.mt19937"]], "64-bit Mersenne Twister": [[181, "module-randomgen.mt64"]], "Permuted Congruential Generator (32-bit, PCG32)": [[182, "module-randomgen.pcg32"]], "Permuted Congruential Generator (64-bit, PCG64)": [[183, "module-randomgen.pcg64"]], "Permuted Congruential Generator 2.0 (64-bit Multiplier, DXSM Output)": [[184, "permuted-congruential-generator-2-0-64-bit-multiplier-dxsm-output"]], "See also": [[184, null], [201, null], [208, null], [209, null], [212, null], [215, null], [216, null], [218, null]], "Philox Counter-based RNG": [[185, "module-randomgen.philox"]], "Hardware-based Random Number Generator (RDRAND)": [[186, "module-randomgen.rdrand"]], "Custom Lock": [[186, "custom-lock"]], "Rotate-Multiply (Romu) Generators": [[187, "module-randomgen.romu"]], "SFC64 Generator": [[188, "module-randomgen.sfc"]], "Parallelization": [[188, "parallelization"]], "SIMD-oriented Fast Mersenne Twister (SFMT)": [[189, "module-randomgen.sfmt"]], "SPECK Counter-based RNG": [[190, "module-randomgen.speck128"]], "ThreeFry Counter-based RNG": [[191, "module-randomgen.threefry"]], "From Low-level Objects": [[192, "from-low-level-objects"]], "State": [[192, "state"], [224, "state"]], "Xoroshiro128+": [[193, "module-randomgen.xoroshiro128"]], "Xorshift1024*\u03c6": [[194, "module-randomgen.xorshift1024"]], "Xoshiro256**": [[195, "module-randomgen.xoshiro256"]], "Xoshiro512**": [[196, "module-randomgen.xoshiro512"]], "Change Log": [[197, "change-log"]], "v1.23.1": [[197, "v1-23-1"]], "v1.23.0": [[197, "v1-23-0"]], "v1.20.2": [[197, "v1-20-2"]], "v1.20.1": [[197, "v1-20-1"]], "v1.20.0": [[197, "v1-20-0"]], "v1.19.3": [[197, "v1-19-3"]], "v1.19.2": [[197, "v1-19-2"]], "v1.19.1": [[197, "v1-19-1"]], "v1.19.0": [[197, "v1-19-0"]], "v1.18.0": [[197, "v1-18-0"]], "v1.17.0": [[197, "v1-17-0"]], "v1.16.6": [[197, "v1-16-6"]], "v1.16.5": [[197, "v1-16-5"]], "v1.16.4": [[197, "v1-16-4"]], "v1.16.3": [[197, "v1-16-3"]], "v1.16.2": [[197, "v1-16-2"]], "v1.16.1": [[197, "v1-16-1"]], "v1.16.0": [[197, "v1-16-0"]], "v1.15.1": [[197, "v1-15-1"]], "v1.15": [[197, "v1-15"]], "Writing a BitGenerator": [[198, "Writing-a-BitGenerator"]], "Using Python": [[198, "Using-Python"]], "Performance": [[198, "Performance"], [198, "id1"], [222, "module-randomgen"]], "Using numba": [[198, "Using-numba"]], "System Entropy": [[199, "module-randomgen.entropy"]], "Evolution of randomgen": [[200, "evolution-of-randomgen"]], "Changes in 1.23": [[200, "changes-in-1-23"]], "Changes in 1.19": [[200, "changes-in-1-19"]], "Changes between 1.16 and 1.18": [[200, "changes-between-1-16-and-1-18"]], "Extended Generator": [[201, "extended-generator"]], "Seed and State Manipulation": [[201, "seed-and-state-manipulation"]], "Distributions": [[201, "distributions"]], "Numba": [[202, "numba"]], "Cython": [[202, "cython"]], "New Bit Generators": [[202, "new-bit-generators"]], "Python BitGenerators": [[202, "python-bitgenerators"]], "Future Plans": [[203, "future-plans"]], "randomgen._seed_sequence.SeedSequence.generate_state": [[204, "randomgen-seed-sequence-seedsequence-generate-state"]], "randomgen._seed_sequence.SeedSequence.spawn": [[205, "randomgen-seed-sequence-seedsequence-spawn"]], "randomgen._seed_sequence.SeedSequence.state": [[206, "randomgen-seed-sequence-seedsequence-state"]], "randomgen.generator.ExtendedGenerator.bit_generator": [[207, "randomgen-generator-extendedgenerator-bit-generator"]], "randomgen.generator.ExtendedGenerator.complex_normal": [[208, "randomgen-generator-extendedgenerator-complex-normal"]], "randomgen.generator.ExtendedGenerator.multivariate_complex_normal": [[209, "randomgen-generator-extendedgenerator-multivariate-complex-normal"]], "randomgen.generator.ExtendedGenerator.multivariate_normal": [[210, "randomgen-generator-extendedgenerator-multivariate-normal"]], "randomgen.generator.ExtendedGenerator.random": [[211, "randomgen-generator-extendedgenerator-random"]], "randomgen.generator.ExtendedGenerator.standard_wishart": [[212, "randomgen-generator-extendedgenerator-standard-wishart"]], "randomgen.generator.ExtendedGenerator.state": [[213, "randomgen-generator-extendedgenerator-state"]], "randomgen.generator.ExtendedGenerator.uintegers": [[214, "randomgen-generator-extendedgenerator-uintegers"]], "randomgen.generator.ExtendedGenerator.wishart": [[215, "randomgen-generator-extendedgenerator-wishart"]], "Random Generator": [[216, "random-generator"], [217, "random-generator"]], "Danger": [[216, null], [217, null], [218, null]], "RandomGen": [[217, "randomgen"]], "Introduction": [[217, "introduction"]], "History": [[217, "history"]], "What\u2019s New or Different": [[217, "what-s-new-or-different"], [220, "what-s-new-or-different"]], "Parallel Generation": [[217, "parallel-generation"]], "Supported Generators": [[217, "supported-generators"]], "New Features": [[217, "new-features"]], "Removed Features": [[217, "removed-features"]], "Changes": [[217, "changes"]], "Indices and tables": [[217, "indices-and-tables"]], "Legacy Random Generation": [[218, "legacy-random-generation"]], "Multithreaded Generation": [[219, "multithreaded-generation"]], "Differences from NumPy (1.17+)": [[220, "differences-from-numpy-1-17"]], "Differences from NumPy before 1.17": [[220, "differences-from-numpy-before-1-17"]], "Parallel Random Number Generation": [[221, "parallel-random-number-generation"]], "Using a SeedSequence": [[221, "using-a-seedsequence"], [224, "using-a-seedsequence"]], "Distinct Keys in Cryptographic Generators": [[221, "distinct-keys-in-cryptographic-generators"]], "Advancing the PRNG\u2019s state": [[221, "advancing-the-prng-s-state"]], "Jumping the PRNG state": [[221, "jumping-the-prng-state"]], "Weyl Sequences": [[221, "weyl-sequences"]], "Non-reproducible Sequences": [[221, "non-reproducible-sequences"]], "Recommendation": [[222, "recommendation"]], "Timings": [[222, "timings"]], "Note": [[222, null], [224, null]], "References": [[223, "references"]], "Seed Sequences": [[224, "module-randomgen._seed_sequence"]], "Quality Assurance": [[225, "quality-assurance"]], "Core Testing": [[225, "core-testing"]], "Notes": [[225, "notes"]], "Example Configuration": [[225, "example-configuration"]], "Additional Experiments": [[225, "additional-experiments"]], "Correlated Seeds": [[225, "correlated-seeds"]], "Sequential Seeds": [[225, "sequential-seeds"]], "Zero (0) Seeding": [[225, "zero-0-seeding"]]}, "indexentries": {"aescounter (class in randomgen.aes)": [[0, "randomgen.aes.AESCounter"]], "lock (randomgen.aes.aescounter attribute)": [[0, "randomgen.aes.AESCounter.lock"]], "module": [[0, "module-randomgen.aes"], [1, "module-randomgen.chacha"], [2, "module-randomgen.dsfmt"], [3, "module-randomgen.efiix64"], [175, "module-randomgen.hc128"], [177, "module-randomgen.jsf"], [179, "module-randomgen.lxm"], [180, "module-randomgen.mt19937"], [181, "module-randomgen.mt64"], [182, "module-randomgen.pcg32"], [183, "module-randomgen.pcg64"], [185, "module-randomgen.philox"], [186, "module-randomgen.rdrand"], [187, "module-randomgen.romu"], [188, "module-randomgen.sfc"], [189, "module-randomgen.sfmt"], [190, "module-randomgen.speck128"], [191, "module-randomgen.threefry"], [192, "module-randomgen.wrapper"], [193, "module-randomgen.xoroshiro128"], [194, "module-randomgen.xorshift1024"], [195, "module-randomgen.xoshiro256"], [196, "module-randomgen.xoshiro512"], [199, "module-randomgen.entropy"], [222, "module-randomgen"], [224, "module-randomgen._seed_sequence"]], "randomgen.aes": [[0, "module-randomgen.aes"]], "seed_seq (randomgen.aes.aescounter attribute)": [[0, "randomgen.aes.AESCounter.seed_seq"]], "chacha (class in randomgen.chacha)": [[1, "randomgen.chacha.ChaCha"]], "lock (randomgen.chacha.chacha attribute)": [[1, "randomgen.chacha.ChaCha.lock"]], "randomgen.chacha": [[1, "module-randomgen.chacha"]], "seed_seq (randomgen.chacha.chacha attribute)": [[1, "randomgen.chacha.ChaCha.seed_seq"]], "dsfmt (class in randomgen.dsfmt)": [[2, "randomgen.dsfmt.DSFMT"]], "lock (randomgen.dsfmt.dsfmt attribute)": [[2, "randomgen.dsfmt.DSFMT.lock"]], "randomgen.dsfmt": [[2, "module-randomgen.dsfmt"]], "seed_seq (randomgen.dsfmt.dsfmt attribute)": [[2, "randomgen.dsfmt.DSFMT.seed_seq"]], "efiix64 (class in randomgen.efiix64)": [[3, "randomgen.efiix64.EFIIX64"]], "lock (randomgen.efiix64.efiix64 attribute)": [[3, "randomgen.efiix64.EFIIX64.lock"]], "randomgen.efiix64": [[3, "module-randomgen.efiix64"]], "seed_seq (randomgen.efiix64.efiix64 attribute)": [[3, "randomgen.efiix64.EFIIX64.seed_seq"]], "advance() (randomgen.aes.aescounter method)": [[4, "randomgen.aes.AESCounter.advance"]], "cffi (randomgen.aes.aescounter attribute)": [[5, "randomgen.aes.AESCounter.cffi"]], "ctypes (randomgen.aes.aescounter attribute)": [[6, "randomgen.aes.AESCounter.ctypes"]], "jump() (randomgen.aes.aescounter method)": [[7, "randomgen.aes.AESCounter.jump"]], "jumped() (randomgen.aes.aescounter method)": [[8, "randomgen.aes.AESCounter.jumped"]], "random_raw() (randomgen.aes.aescounter method)": [[9, "randomgen.aes.AESCounter.random_raw"]], "seed() (randomgen.aes.aescounter method)": [[10, "randomgen.aes.AESCounter.seed"]], "state (randomgen.aes.aescounter attribute)": [[11, "randomgen.aes.AESCounter.state"]], "advance() (randomgen.chacha.chacha method)": [[12, "randomgen.chacha.ChaCha.advance"]], "cffi (randomgen.chacha.chacha attribute)": [[13, "randomgen.chacha.ChaCha.cffi"]], "ctypes (randomgen.chacha.chacha attribute)": [[14, "randomgen.chacha.ChaCha.ctypes"]], "jump() (randomgen.chacha.chacha method)": [[15, "randomgen.chacha.ChaCha.jump"]], "jumped() (randomgen.chacha.chacha method)": [[16, "randomgen.chacha.ChaCha.jumped"]], "random_raw() (randomgen.chacha.chacha method)": [[17, "randomgen.chacha.ChaCha.random_raw"]], "seed() (randomgen.chacha.chacha method)": [[18, "randomgen.chacha.ChaCha.seed"]], "state (randomgen.chacha.chacha attribute)": [[19, "randomgen.chacha.ChaCha.state"]], "cffi (randomgen.dsfmt.dsfmt attribute)": [[20, "randomgen.dsfmt.DSFMT.cffi"]], "ctypes (randomgen.dsfmt.dsfmt attribute)": [[21, "randomgen.dsfmt.DSFMT.ctypes"]], "jump() (randomgen.dsfmt.dsfmt method)": [[22, "randomgen.dsfmt.DSFMT.jump"]], "jumped() (randomgen.dsfmt.dsfmt method)": [[23, "randomgen.dsfmt.DSFMT.jumped"]], "random_raw() (randomgen.dsfmt.dsfmt method)": [[24, "randomgen.dsfmt.DSFMT.random_raw"]], "seed() (randomgen.dsfmt.dsfmt method)": [[25, "randomgen.dsfmt.DSFMT.seed"]], "state (randomgen.dsfmt.dsfmt attribute)": [[26, "randomgen.dsfmt.DSFMT.state"]], "cffi (randomgen.efiix64.efiix64 attribute)": [[27, "randomgen.efiix64.EFIIX64.cffi"]], "ctypes (randomgen.efiix64.efiix64 attribute)": [[28, "randomgen.efiix64.EFIIX64.ctypes"]], "random_raw() (randomgen.efiix64.efiix64 method)": [[29, "randomgen.efiix64.EFIIX64.random_raw"]], "seed() (randomgen.efiix64.efiix64 method)": [[30, "randomgen.efiix64.EFIIX64.seed"]], "state (randomgen.efiix64.efiix64 attribute)": [[31, "randomgen.efiix64.EFIIX64.state"]], "cffi (randomgen.hc128.hc128 attribute)": [[32, "randomgen.hc128.HC128.cffi"]], "ctypes (randomgen.hc128.hc128 attribute)": [[33, "randomgen.hc128.HC128.ctypes"]], "random_raw() (randomgen.hc128.hc128 method)": [[34, "randomgen.hc128.HC128.random_raw"]], "seed() (randomgen.hc128.hc128 method)": [[35, "randomgen.hc128.HC128.seed"]], "state (randomgen.hc128.hc128 attribute)": [[36, "randomgen.hc128.HC128.state"]], "cffi (randomgen.jsf.jsf attribute)": [[37, "randomgen.jsf.JSF.cffi"]], "ctypes (randomgen.jsf.jsf attribute)": [[38, "randomgen.jsf.JSF.ctypes"]], "random_raw() (randomgen.jsf.jsf method)": [[39, "randomgen.jsf.JSF.random_raw"]], "seed() (randomgen.jsf.jsf method)": [[40, "randomgen.jsf.JSF.seed"]], "state (randomgen.jsf.jsf attribute)": [[41, "randomgen.jsf.JSF.state"]], "cffi (randomgen.lxm.lxm attribute)": [[42, "randomgen.lxm.LXM.cffi"]], "ctypes (randomgen.lxm.lxm attribute)": [[43, "randomgen.lxm.LXM.ctypes"]], "jump() (randomgen.lxm.lxm method)": [[44, "randomgen.lxm.LXM.jump"]], "jumped() (randomgen.lxm.lxm method)": [[45, "randomgen.lxm.LXM.jumped"]], "random_raw() (randomgen.lxm.lxm method)": [[46, "randomgen.lxm.LXM.random_raw"]], "seed() (randomgen.lxm.lxm method)": [[47, "randomgen.lxm.LXM.seed"]], "state (randomgen.lxm.lxm attribute)": [[48, "randomgen.lxm.LXM.state"]], "cffi (randomgen.mt19937.mt19937 attribute)": [[49, "randomgen.mt19937.MT19937.cffi"]], "ctypes (randomgen.mt19937.mt19937 attribute)": [[50, "randomgen.mt19937.MT19937.ctypes"]], "jump() (randomgen.mt19937.mt19937 method)": [[51, "randomgen.mt19937.MT19937.jump"]], "jumped() (randomgen.mt19937.mt19937 method)": [[52, "randomgen.mt19937.MT19937.jumped"]], "random_raw() (randomgen.mt19937.mt19937 method)": [[53, "randomgen.mt19937.MT19937.random_raw"]], "seed() (randomgen.mt19937.mt19937 method)": [[54, "randomgen.mt19937.MT19937.seed"]], "state (randomgen.mt19937.mt19937 attribute)": [[55, "randomgen.mt19937.MT19937.state"]], "cffi (randomgen.mt64.mt64 attribute)": [[56, "randomgen.mt64.MT64.cffi"]], "ctypes (randomgen.mt64.mt64 attribute)": [[57, "randomgen.mt64.MT64.ctypes"]], "random_raw() (randomgen.mt64.mt64 method)": [[58, "randomgen.mt64.MT64.random_raw"]], "seed() (randomgen.mt64.mt64 method)": [[59, "randomgen.mt64.MT64.seed"]], "state (randomgen.mt64.mt64 attribute)": [[60, "randomgen.mt64.MT64.state"]], "advance() (randomgen.pcg32.pcg32 method)": [[61, "randomgen.pcg32.PCG32.advance"]], "cffi (randomgen.pcg32.pcg32 attribute)": [[62, "randomgen.pcg32.PCG32.cffi"]], "ctypes (randomgen.pcg32.pcg32 attribute)": [[63, "randomgen.pcg32.PCG32.ctypes"]], "jump() (randomgen.pcg32.pcg32 method)": [[64, "randomgen.pcg32.PCG32.jump"]], "jumped() (randomgen.pcg32.pcg32 method)": [[65, "randomgen.pcg32.PCG32.jumped"]], "random_raw() (randomgen.pcg32.pcg32 method)": [[66, "randomgen.pcg32.PCG32.random_raw"]], "seed() (randomgen.pcg32.pcg32 method)": [[67, "randomgen.pcg32.PCG32.seed"]], "state (randomgen.pcg32.pcg32 attribute)": [[68, "randomgen.pcg32.PCG32.state"]], "advance() (randomgen.pcg64.lcg128mix method)": [[69, "randomgen.pcg64.LCG128Mix.advance"]], "cffi (randomgen.pcg64.lcg128mix attribute)": [[70, "randomgen.pcg64.LCG128Mix.cffi"]], "ctypes (randomgen.pcg64.lcg128mix attribute)": [[71, "randomgen.pcg64.LCG128Mix.ctypes"]], "jumped() (randomgen.pcg64.lcg128mix method)": [[72, "randomgen.pcg64.LCG128Mix.jumped"]], "random_raw() (randomgen.pcg64.lcg128mix method)": [[73, "randomgen.pcg64.LCG128Mix.random_raw"]], "seed() (randomgen.pcg64.lcg128mix method)": [[74, "randomgen.pcg64.LCG128Mix.seed"]], "state (randomgen.pcg64.lcg128mix attribute)": [[75, "randomgen.pcg64.LCG128Mix.state"]], "advance() (randomgen.pcg64.pcg64 method)": [[76, "randomgen.pcg64.PCG64.advance"]], "cffi (randomgen.pcg64.pcg64 attribute)": [[77, "randomgen.pcg64.PCG64.cffi"]], "ctypes (randomgen.pcg64.pcg64 attribute)": [[78, "randomgen.pcg64.PCG64.ctypes"]], "jump() (randomgen.pcg64.pcg64 method)": [[79, "randomgen.pcg64.PCG64.jump"]], "jumped() (randomgen.pcg64.pcg64 method)": [[80, "randomgen.pcg64.PCG64.jumped"]], "random_raw() (randomgen.pcg64.pcg64 method)": [[81, "randomgen.pcg64.PCG64.random_raw"]], "seed() (randomgen.pcg64.pcg64 method)": [[82, "randomgen.pcg64.PCG64.seed"]], "state (randomgen.pcg64.pcg64 attribute)": [[83, "randomgen.pcg64.PCG64.state"]], "advance() (randomgen.pcg64.pcg64dxsm method)": [[84, "randomgen.pcg64.PCG64DXSM.advance"]], "cffi (randomgen.pcg64.pcg64dxsm attribute)": [[85, "randomgen.pcg64.PCG64DXSM.cffi"]], "ctypes (randomgen.pcg64.pcg64dxsm attribute)": [[86, "randomgen.pcg64.PCG64DXSM.ctypes"]], "jump() (randomgen.pcg64.pcg64dxsm method)": [[87, "randomgen.pcg64.PCG64DXSM.jump"]], "jumped() (randomgen.pcg64.pcg64dxsm method)": [[88, "randomgen.pcg64.PCG64DXSM.jumped"]], "random_raw() (randomgen.pcg64.pcg64dxsm method)": [[89, "randomgen.pcg64.PCG64DXSM.random_raw"]], "seed() (randomgen.pcg64.pcg64dxsm method)": [[90, "randomgen.pcg64.PCG64DXSM.seed"]], "state (randomgen.pcg64.pcg64dxsm attribute)": [[91, "randomgen.pcg64.PCG64DXSM.state"]], "advance() (randomgen.philox.philox method)": [[92, "randomgen.philox.Philox.advance"]], "cffi (randomgen.philox.philox attribute)": [[93, "randomgen.philox.Philox.cffi"]], "ctypes (randomgen.philox.philox attribute)": [[94, "randomgen.philox.Philox.ctypes"]], "jump() (randomgen.philox.philox method)": [[95, "randomgen.philox.Philox.jump"]], "jumped() (randomgen.philox.philox method)": [[96, "randomgen.philox.Philox.jumped"]], "random_raw() (randomgen.philox.philox method)": [[97, "randomgen.philox.Philox.random_raw"]], "seed() (randomgen.philox.philox method)": [[98, "randomgen.philox.Philox.seed"]], "state (randomgen.philox.philox attribute)": [[99, "randomgen.philox.Philox.state"]], "cffi (randomgen.rdrand.rdrand attribute)": [[100, "randomgen.rdrand.RDRAND.cffi"]], "ctypes (randomgen.rdrand.rdrand attribute)": [[101, "randomgen.rdrand.RDRAND.ctypes"]], "jumped() (randomgen.rdrand.rdrand method)": [[102, "randomgen.rdrand.RDRAND.jumped"]], "random_raw() (randomgen.rdrand.rdrand method)": [[103, "randomgen.rdrand.RDRAND.random_raw"]], "seed() (randomgen.rdrand.rdrand method)": [[104, "randomgen.rdrand.RDRAND.seed"]], "state (randomgen.rdrand.rdrand attribute)": [[105, "randomgen.rdrand.RDRAND.state"]], "success (randomgen.rdrand.rdrand attribute)": [[106, "randomgen.rdrand.RDRAND.success"]], "cffi (randomgen.romu.romu attribute)": [[107, "randomgen.romu.Romu.cffi"]], "ctypes (randomgen.romu.romu attribute)": [[108, "randomgen.romu.Romu.ctypes"]], "random_raw() (randomgen.romu.romu method)": [[109, "randomgen.romu.Romu.random_raw"]], "seed() (randomgen.romu.romu method)": [[110, "randomgen.romu.Romu.seed"]], "state (randomgen.romu.romu attribute)": [[111, "randomgen.romu.Romu.state"]], "cffi (randomgen.sfc.sfc64 attribute)": [[112, "randomgen.sfc.SFC64.cffi"]], "ctypes (randomgen.sfc.sfc64 attribute)": [[113, "randomgen.sfc.SFC64.ctypes"]], "random_raw() (randomgen.sfc.sfc64 method)": [[114, "randomgen.sfc.SFC64.random_raw"]], "seed() (randomgen.sfc.sfc64 method)": [[115, "randomgen.sfc.SFC64.seed"]], "state (randomgen.sfc.sfc64 attribute)": [[116, "randomgen.sfc.SFC64.state"]], "weyl_increments() (randomgen.sfc.sfc64 method)": [[117, "randomgen.sfc.SFC64.weyl_increments"]], "cffi (randomgen.sfmt.sfmt attribute)": [[118, "randomgen.sfmt.SFMT.cffi"]], "ctypes (randomgen.sfmt.sfmt attribute)": [[119, "randomgen.sfmt.SFMT.ctypes"]], "jump() (randomgen.sfmt.sfmt method)": [[120, "randomgen.sfmt.SFMT.jump"]], "jumped() (randomgen.sfmt.sfmt method)": [[121, "randomgen.sfmt.SFMT.jumped"]], "random_raw() (randomgen.sfmt.sfmt method)": [[122, "randomgen.sfmt.SFMT.random_raw"]], "seed() (randomgen.sfmt.sfmt method)": [[123, "randomgen.sfmt.SFMT.seed"]], "state (randomgen.sfmt.sfmt attribute)": [[124, "randomgen.sfmt.SFMT.state"]], "advance() (randomgen.speck128.speck128 method)": [[125, "randomgen.speck128.SPECK128.advance"]], "cffi (randomgen.speck128.speck128 attribute)": [[126, "randomgen.speck128.SPECK128.cffi"]], "ctypes (randomgen.speck128.speck128 attribute)": [[127, "randomgen.speck128.SPECK128.ctypes"]], "jump() (randomgen.speck128.speck128 method)": [[128, "randomgen.speck128.SPECK128.jump"]], "jumped() (randomgen.speck128.speck128 method)": [[129, "randomgen.speck128.SPECK128.jumped"]], "random_raw() (randomgen.speck128.speck128 method)": [[130, "randomgen.speck128.SPECK128.random_raw"]], "seed() (randomgen.speck128.speck128 method)": [[131, "randomgen.speck128.SPECK128.seed"]], "state (randomgen.speck128.speck128 attribute)": [[132, "randomgen.speck128.SPECK128.state"]], "advance() (randomgen.threefry.threefry method)": [[133, "randomgen.threefry.ThreeFry.advance"]], "cffi (randomgen.threefry.threefry attribute)": [[134, "randomgen.threefry.ThreeFry.cffi"]], "ctypes (randomgen.threefry.threefry attribute)": [[135, "randomgen.threefry.ThreeFry.ctypes"]], "jump() (randomgen.threefry.threefry method)": [[136, "randomgen.threefry.ThreeFry.jump"]], "jumped() (randomgen.threefry.threefry method)": [[137, "randomgen.threefry.ThreeFry.jumped"]], "random_raw() (randomgen.threefry.threefry method)": [[138, "randomgen.threefry.ThreeFry.random_raw"]], "seed() (randomgen.threefry.threefry method)": [[139, "randomgen.threefry.ThreeFry.seed"]], "state (randomgen.threefry.threefry attribute)": [[140, "randomgen.threefry.ThreeFry.state"]], "cffi (randomgen.wrapper.userbitgenerator attribute)": [[141, "randomgen.wrapper.UserBitGenerator.cffi"]], "ctypes (randomgen.wrapper.userbitgenerator attribute)": [[142, "randomgen.wrapper.UserBitGenerator.ctypes"]], "from_cfunc() (randomgen.wrapper.userbitgenerator class method)": [[143, "randomgen.wrapper.UserBitGenerator.from_cfunc"]], "from_ctypes() (randomgen.wrapper.userbitgenerator class method)": [[144, "randomgen.wrapper.UserBitGenerator.from_ctypes"]], "random_raw() (randomgen.wrapper.userbitgenerator method)": [[145, "randomgen.wrapper.UserBitGenerator.random_raw"]], "state (randomgen.wrapper.userbitgenerator attribute)": [[146, "randomgen.wrapper.UserBitGenerator.state"]], "cffi (randomgen.xoroshiro128.xoroshiro128 attribute)": [[147, "randomgen.xoroshiro128.Xoroshiro128.cffi"]], "ctypes (randomgen.xoroshiro128.xoroshiro128 attribute)": [[148, "randomgen.xoroshiro128.Xoroshiro128.ctypes"]], "jump() (randomgen.xoroshiro128.xoroshiro128 method)": [[149, "randomgen.xoroshiro128.Xoroshiro128.jump"]], "jumped() (randomgen.xoroshiro128.xoroshiro128 method)": [[150, "randomgen.xoroshiro128.Xoroshiro128.jumped"]], "random_raw() (randomgen.xoroshiro128.xoroshiro128 method)": [[151, "randomgen.xoroshiro128.Xoroshiro128.random_raw"]], "seed() (randomgen.xoroshiro128.xoroshiro128 method)": [[152, "randomgen.xoroshiro128.Xoroshiro128.seed"]], "state (randomgen.xoroshiro128.xoroshiro128 attribute)": [[153, "randomgen.xoroshiro128.Xoroshiro128.state"]], "cffi (randomgen.xorshift1024.xorshift1024 attribute)": [[154, "randomgen.xorshift1024.Xorshift1024.cffi"]], "ctypes (randomgen.xorshift1024.xorshift1024 attribute)": [[155, "randomgen.xorshift1024.Xorshift1024.ctypes"]], "jump() (randomgen.xorshift1024.xorshift1024 method)": [[156, "randomgen.xorshift1024.Xorshift1024.jump"]], "jumped() (randomgen.xorshift1024.xorshift1024 method)": [[157, "randomgen.xorshift1024.Xorshift1024.jumped"]], "random_raw() (randomgen.xorshift1024.xorshift1024 method)": [[158, "randomgen.xorshift1024.Xorshift1024.random_raw"]], "seed() (randomgen.xorshift1024.xorshift1024 method)": [[159, "randomgen.xorshift1024.Xorshift1024.seed"]], "state (randomgen.xorshift1024.xorshift1024 attribute)": [[160, "randomgen.xorshift1024.Xorshift1024.state"]], "cffi (randomgen.xoshiro256.xoshiro256 attribute)": [[161, "randomgen.xoshiro256.Xoshiro256.cffi"]], "ctypes (randomgen.xoshiro256.xoshiro256 attribute)": [[162, "randomgen.xoshiro256.Xoshiro256.ctypes"]], "jump() (randomgen.xoshiro256.xoshiro256 method)": [[163, "randomgen.xoshiro256.Xoshiro256.jump"]], "jumped() (randomgen.xoshiro256.xoshiro256 method)": [[164, "randomgen.xoshiro256.Xoshiro256.jumped"]], "random_raw() (randomgen.xoshiro256.xoshiro256 method)": [[165, "randomgen.xoshiro256.Xoshiro256.random_raw"]], "seed() (randomgen.xoshiro256.xoshiro256 method)": [[166, "randomgen.xoshiro256.Xoshiro256.seed"]], "state (randomgen.xoshiro256.xoshiro256 attribute)": [[167, "randomgen.xoshiro256.Xoshiro256.state"]], "cffi (randomgen.xoshiro512.xoshiro512 attribute)": [[168, "randomgen.xoshiro512.Xoshiro512.cffi"]], "ctypes (randomgen.xoshiro512.xoshiro512 attribute)": [[169, "randomgen.xoshiro512.Xoshiro512.ctypes"]], "jump() (randomgen.xoshiro512.xoshiro512 method)": [[170, "randomgen.xoshiro512.Xoshiro512.jump"]], "jumped() (randomgen.xoshiro512.xoshiro512 method)": [[171, "randomgen.xoshiro512.Xoshiro512.jumped"]], "random_raw() (randomgen.xoshiro512.xoshiro512 method)": [[172, "randomgen.xoshiro512.Xoshiro512.random_raw"]], "seed() (randomgen.xoshiro512.xoshiro512 method)": [[173, "randomgen.xoshiro512.Xoshiro512.seed"]], "state (randomgen.xoshiro512.xoshiro512 attribute)": [[174, "randomgen.xoshiro512.Xoshiro512.state"]], "hc128 (class in randomgen.hc128)": [[175, "randomgen.hc128.HC128"]], "lock (randomgen.hc128.hc128 attribute)": [[175, "randomgen.hc128.HC128.lock"]], "randomgen.hc128": [[175, "module-randomgen.hc128"]], "seed_seq (randomgen.hc128.hc128 attribute)": [[175, "randomgen.hc128.HC128.seed_seq"]], "jsf (class in randomgen.jsf)": [[177, "randomgen.jsf.JSF"]], "lock (randomgen.jsf.jsf attribute)": [[177, "randomgen.jsf.JSF.lock"]], "randomgen.jsf": [[177, "module-randomgen.jsf"]], "seed_seq (randomgen.jsf.jsf attribute)": [[177, "randomgen.jsf.JSF.seed_seq"]], "lcg128mix (class in randomgen.pcg64)": [[178, "randomgen.pcg64.LCG128Mix"]], "lock (randomgen.pcg64.lcg128mix attribute)": [[178, "randomgen.pcg64.LCG128Mix.lock"]], "seed_seq (randomgen.pcg64.lcg128mix attribute)": [[178, "randomgen.pcg64.LCG128Mix.seed_seq"]], "lxm (class in randomgen.lxm)": [[179, "randomgen.lxm.LXM"]], "lock (randomgen.lxm.lxm attribute)": [[179, "randomgen.lxm.LXM.lock"]], "randomgen.lxm": [[179, "module-randomgen.lxm"]], "seed_seq (randomgen.lxm.lxm attribute)": [[179, "randomgen.lxm.LXM.seed_seq"]], "mt19937 (class in randomgen.mt19937)": [[180, "randomgen.mt19937.MT19937"]], "lock (randomgen.mt19937.mt19937 attribute)": [[180, "randomgen.mt19937.MT19937.lock"]], "randomgen.mt19937": [[180, "module-randomgen.mt19937"]], "seed_seq (randomgen.mt19937.mt19937 attribute)": [[180, "randomgen.mt19937.MT19937.seed_seq"]], "mt64 (class in randomgen.mt64)": [[181, "randomgen.mt64.MT64"]], "lock (randomgen.mt64.mt64 attribute)": [[181, "randomgen.mt64.MT64.lock"]], "randomgen.mt64": [[181, "module-randomgen.mt64"]], "seed_seq (randomgen.mt64.mt64 attribute)": [[181, "randomgen.mt64.MT64.seed_seq"]], "pcg32 (class in randomgen.pcg32)": [[182, "randomgen.pcg32.PCG32"]], "lock (randomgen.pcg32.pcg32 attribute)": [[182, "randomgen.pcg32.PCG32.lock"]], "randomgen.pcg32": [[182, "module-randomgen.pcg32"]], "seed_seq (randomgen.pcg32.pcg32 attribute)": [[182, "randomgen.pcg32.PCG32.seed_seq"]], "pcg64 (class in randomgen.pcg64)": [[183, "randomgen.pcg64.PCG64"]], "lock (randomgen.pcg64.pcg64 attribute)": [[183, "randomgen.pcg64.PCG64.lock"]], "randomgen.pcg64": [[183, "module-randomgen.pcg64"]], "seed_seq (randomgen.pcg64.pcg64 attribute)": [[183, "randomgen.pcg64.PCG64.seed_seq"]], "pcg64dxsm (class in randomgen.pcg64)": [[184, "randomgen.pcg64.PCG64DXSM"]], "lock (randomgen.pcg64.pcg64dxsm attribute)": [[184, "randomgen.pcg64.PCG64DXSM.lock"]], "seed_seq (randomgen.pcg64.pcg64dxsm attribute)": [[184, "randomgen.pcg64.PCG64DXSM.seed_seq"]], "philox (class in randomgen.philox)": [[185, "randomgen.philox.Philox"]], "lock (randomgen.philox.philox attribute)": [[185, "randomgen.philox.Philox.lock"]], "randomgen.philox": [[185, "module-randomgen.philox"]], "seed_seq (randomgen.philox.philox attribute)": [[185, "randomgen.philox.Philox.seed_seq"]], "rdrand (class in randomgen.rdrand)": [[186, "randomgen.rdrand.RDRAND"]], "raisinglock (class in randomgen.rdrand)": [[186, "randomgen.rdrand.RaisingLock"]], "lock (randomgen.rdrand.rdrand attribute)": [[186, "randomgen.rdrand.RDRAND.lock"]], "randomgen.rdrand": [[186, "module-randomgen.rdrand"]], "seed_seq (randomgen.rdrand.rdrand attribute)": [[186, "randomgen.rdrand.RDRAND.seed_seq"]], "romu (class in randomgen.romu)": [[187, "randomgen.romu.Romu"]], "randomgen.romu": [[187, "module-randomgen.romu"]], "sfc64 (class in randomgen.sfc)": [[188, "randomgen.sfc.SFC64"]], "randomgen.sfc": [[188, "module-randomgen.sfc"]], "sfmt (class in randomgen.sfmt)": [[189, "randomgen.sfmt.SFMT"]], "lock (randomgen.sfmt.sfmt attribute)": [[189, "randomgen.sfmt.SFMT.lock"]], "randomgen.sfmt": [[189, "module-randomgen.sfmt"]], "seed_seq (randomgen.sfmt.sfmt attribute)": [[189, "randomgen.sfmt.SFMT.seed_seq"]], "speck128 (class in randomgen.speck128)": [[190, "randomgen.speck128.SPECK128"]], "lock (randomgen.speck128.speck128 attribute)": [[190, "randomgen.speck128.SPECK128.lock"]], "randomgen.speck128": [[190, "module-randomgen.speck128"]], "seed_seq (randomgen.speck128.speck128 attribute)": [[190, "randomgen.speck128.SPECK128.seed_seq"]], "threefry (class in randomgen.threefry)": [[191, "randomgen.threefry.ThreeFry"]], "lock (randomgen.threefry.threefry attribute)": [[191, "randomgen.threefry.ThreeFry.lock"]], "randomgen.threefry": [[191, "module-randomgen.threefry"]], "seed_seq (randomgen.threefry.threefry attribute)": [[191, "randomgen.threefry.ThreeFry.seed_seq"]], "userbitgenerator (class in randomgen.wrapper)": [[192, "randomgen.wrapper.UserBitGenerator"]], "randomgen.wrapper": [[192, "module-randomgen.wrapper"]], "xoroshiro128 (class in randomgen.xoroshiro128)": [[193, "randomgen.xoroshiro128.Xoroshiro128"]], "lock (randomgen.xoroshiro128.xoroshiro128 attribute)": [[193, "randomgen.xoroshiro128.Xoroshiro128.lock"]], "randomgen.xoroshiro128": [[193, "module-randomgen.xoroshiro128"]], "seed_seq (randomgen.xoroshiro128.xoroshiro128 attribute)": [[193, "randomgen.xoroshiro128.Xoroshiro128.seed_seq"]], "xorshift1024 (class in randomgen.xorshift1024)": [[194, "randomgen.xorshift1024.Xorshift1024"]], "lock (randomgen.xorshift1024.xorshift1024 attribute)": [[194, "randomgen.xorshift1024.Xorshift1024.lock"]], "randomgen.xorshift1024": [[194, "module-randomgen.xorshift1024"]], "seed_seq (randomgen.xorshift1024.xorshift1024 attribute)": [[194, "randomgen.xorshift1024.Xorshift1024.seed_seq"]], "xoshiro256 (class in randomgen.xoshiro256)": [[195, "randomgen.xoshiro256.Xoshiro256"]], "lock (randomgen.xoshiro256.xoshiro256 attribute)": [[195, "randomgen.xoshiro256.Xoshiro256.lock"]], "randomgen.xoshiro256": [[195, "module-randomgen.xoshiro256"]], "seed_seq (randomgen.xoshiro256.xoshiro256 attribute)": [[195, "randomgen.xoshiro256.Xoshiro256.seed_seq"]], "xoshiro512 (class in randomgen.xoshiro512)": [[196, "randomgen.xoshiro512.Xoshiro512"]], "lock (randomgen.xoshiro512.xoshiro512 attribute)": [[196, "randomgen.xoshiro512.Xoshiro512.lock"]], "randomgen.xoshiro512": [[196, "module-randomgen.xoshiro512"]], "seed_seq (randomgen.xoshiro512.xoshiro512 attribute)": [[196, "randomgen.xoshiro512.Xoshiro512.seed_seq"]], "random_entropy() (in module randomgen.entropy)": [[199, "randomgen.entropy.random_entropy"]], "randomgen.entropy": [[199, "module-randomgen.entropy"]], "extendedgenerator (class in randomgen.generator)": [[201, "randomgen.generator.ExtendedGenerator"]], "generate_state() (randomgen._seed_sequence.seedsequence method)": [[204, "randomgen._seed_sequence.SeedSequence.generate_state"]], "spawn() (randomgen._seed_sequence.seedsequence method)": [[205, "randomgen._seed_sequence.SeedSequence.spawn"]], "state (randomgen._seed_sequence.seedsequence attribute)": [[206, "randomgen._seed_sequence.SeedSequence.state"]], "bit_generator (randomgen.generator.extendedgenerator attribute)": [[207, "randomgen.generator.ExtendedGenerator.bit_generator"]], "complex_normal() (randomgen.generator.extendedgenerator method)": [[208, "randomgen.generator.ExtendedGenerator.complex_normal"]], "multivariate_complex_normal() (randomgen.generator.extendedgenerator method)": [[209, "randomgen.generator.ExtendedGenerator.multivariate_complex_normal"]], "multivariate_normal() (randomgen.generator.extendedgenerator method)": [[210, "randomgen.generator.ExtendedGenerator.multivariate_normal"]], "random() (randomgen.generator.extendedgenerator method)": [[211, "randomgen.generator.ExtendedGenerator.random"]], "standard_wishart() (randomgen.generator.extendedgenerator method)": [[212, "randomgen.generator.ExtendedGenerator.standard_wishart"]], "state (randomgen.generator.extendedgenerator attribute)": [[213, "randomgen.generator.ExtendedGenerator.state"]], "uintegers() (randomgen.generator.extendedgenerator method)": [[214, "randomgen.generator.ExtendedGenerator.uintegers"]], "wishart() (randomgen.generator.extendedgenerator method)": [[215, "randomgen.generator.ExtendedGenerator.wishart"]], "generator (class in randomgen.generator)": [[216, "randomgen.generator.Generator"]], "randomstate (class in randomgen.mtrand)": [[218, "randomgen.mtrand.RandomState"]], "randomgen": [[222, "module-randomgen"]], "seedsequence (class in randomgen._seed_sequence)": [[224, "randomgen._seed_sequence.SeedSequence"]], "randomgen._seed_sequence": [[224, "module-randomgen._seed_sequence"]]}, "docurls": ["bit_generators/aesctr.html", "bit_generators/chacha.html", "bit_generators/dsfmt.html", "bit_generators/efiix64.html", "bit_generators/generated/randomgen.aes.AESCounter.advance.html", "bit_generators/generated/randomgen.aes.AESCounter.cffi.html", "bit_generators/generated/randomgen.aes.AESCounter.ctypes.html", "bit_generators/generated/randomgen.aes.AESCounter.jump.html", "bit_generators/generated/randomgen.aes.AESCounter.jumped.html", "bit_generators/generated/randomgen.aes.AESCounter.random_raw.html", "bit_generators/generated/randomgen.aes.AESCounter.seed.html", "bit_generators/generated/randomgen.aes.AESCounter.state.html", "bit_generators/generated/randomgen.chacha.ChaCha.advance.html", "bit_generators/generated/randomgen.chacha.ChaCha.cffi.html", "bit_generators/generated/randomgen.chacha.ChaCha.ctypes.html", "bit_generators/generated/randomgen.chacha.ChaCha.jump.html", "bit_generators/generated/randomgen.chacha.ChaCha.jumped.html", "bit_generators/generated/randomgen.chacha.ChaCha.random_raw.html", "bit_generators/generated/randomgen.chacha.ChaCha.seed.html", "bit_generators/generated/randomgen.chacha.ChaCha.state.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.cffi.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.ctypes.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.jump.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.jumped.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.random_raw.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.seed.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.state.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.cffi.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.ctypes.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.random_raw.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.seed.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.state.html", "bit_generators/generated/randomgen.hc128.HC128.cffi.html", "bit_generators/generated/randomgen.hc128.HC128.ctypes.html", "bit_generators/generated/randomgen.hc128.HC128.random_raw.html", "bit_generators/generated/randomgen.hc128.HC128.seed.html", "bit_generators/generated/randomgen.hc128.HC128.state.html", "bit_generators/generated/randomgen.jsf.JSF.cffi.html", "bit_generators/generated/randomgen.jsf.JSF.ctypes.html", "bit_generators/generated/randomgen.jsf.JSF.random_raw.html", "bit_generators/generated/randomgen.jsf.JSF.seed.html", "bit_generators/generated/randomgen.jsf.JSF.state.html", "bit_generators/generated/randomgen.lxm.LXM.cffi.html", "bit_generators/generated/randomgen.lxm.LXM.ctypes.html", "bit_generators/generated/randomgen.lxm.LXM.jump.html", "bit_generators/generated/randomgen.lxm.LXM.jumped.html", "bit_generators/generated/randomgen.lxm.LXM.random_raw.html", "bit_generators/generated/randomgen.lxm.LXM.seed.html", "bit_generators/generated/randomgen.lxm.LXM.state.html", "bit_generators/generated/randomgen.mt19937.MT19937.cffi.html", "bit_generators/generated/randomgen.mt19937.MT19937.ctypes.html", "bit_generators/generated/randomgen.mt19937.MT19937.jump.html", "bit_generators/generated/randomgen.mt19937.MT19937.jumped.html", "bit_generators/generated/randomgen.mt19937.MT19937.random_raw.html", "bit_generators/generated/randomgen.mt19937.MT19937.seed.html", "bit_generators/generated/randomgen.mt19937.MT19937.state.html", "bit_generators/generated/randomgen.mt64.MT64.cffi.html", "bit_generators/generated/randomgen.mt64.MT64.ctypes.html", "bit_generators/generated/randomgen.mt64.MT64.random_raw.html", "bit_generators/generated/randomgen.mt64.MT64.seed.html", "bit_generators/generated/randomgen.mt64.MT64.state.html", "bit_generators/generated/randomgen.pcg32.PCG32.advance.html", "bit_generators/generated/randomgen.pcg32.PCG32.cffi.html", "bit_generators/generated/randomgen.pcg32.PCG32.ctypes.html", "bit_generators/generated/randomgen.pcg32.PCG32.jump.html", "bit_generators/generated/randomgen.pcg32.PCG32.jumped.html", "bit_generators/generated/randomgen.pcg32.PCG32.random_raw.html", "bit_generators/generated/randomgen.pcg32.PCG32.seed.html", "bit_generators/generated/randomgen.pcg32.PCG32.state.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.advance.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.cffi.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.ctypes.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.jumped.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.random_raw.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.seed.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.state.html", "bit_generators/generated/randomgen.pcg64.PCG64.advance.html", "bit_generators/generated/randomgen.pcg64.PCG64.cffi.html", "bit_generators/generated/randomgen.pcg64.PCG64.ctypes.html", "bit_generators/generated/randomgen.pcg64.PCG64.jump.html", "bit_generators/generated/randomgen.pcg64.PCG64.jumped.html", "bit_generators/generated/randomgen.pcg64.PCG64.random_raw.html", "bit_generators/generated/randomgen.pcg64.PCG64.seed.html", "bit_generators/generated/randomgen.pcg64.PCG64.state.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.advance.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.cffi.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.ctypes.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.jump.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.jumped.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.random_raw.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.seed.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.state.html", "bit_generators/generated/randomgen.philox.Philox.advance.html", "bit_generators/generated/randomgen.philox.Philox.cffi.html", "bit_generators/generated/randomgen.philox.Philox.ctypes.html", "bit_generators/generated/randomgen.philox.Philox.jump.html", "bit_generators/generated/randomgen.philox.Philox.jumped.html", "bit_generators/generated/randomgen.philox.Philox.random_raw.html", "bit_generators/generated/randomgen.philox.Philox.seed.html", "bit_generators/generated/randomgen.philox.Philox.state.html", "bit_generators/generated/randomgen.rdrand.RDRAND.cffi.html", "bit_generators/generated/randomgen.rdrand.RDRAND.ctypes.html", "bit_generators/generated/randomgen.rdrand.RDRAND.jumped.html", "bit_generators/generated/randomgen.rdrand.RDRAND.random_raw.html", "bit_generators/generated/randomgen.rdrand.RDRAND.seed.html", "bit_generators/generated/randomgen.rdrand.RDRAND.state.html", "bit_generators/generated/randomgen.rdrand.RDRAND.success.html", "bit_generators/generated/randomgen.romu.Romu.cffi.html", "bit_generators/generated/randomgen.romu.Romu.ctypes.html", "bit_generators/generated/randomgen.romu.Romu.random_raw.html", "bit_generators/generated/randomgen.romu.Romu.seed.html", "bit_generators/generated/randomgen.romu.Romu.state.html", "bit_generators/generated/randomgen.sfc.SFC64.cffi.html", "bit_generators/generated/randomgen.sfc.SFC64.ctypes.html", "bit_generators/generated/randomgen.sfc.SFC64.random_raw.html", "bit_generators/generated/randomgen.sfc.SFC64.seed.html", "bit_generators/generated/randomgen.sfc.SFC64.state.html", "bit_generators/generated/randomgen.sfc.SFC64.weyl_increments.html", "bit_generators/generated/randomgen.sfmt.SFMT.cffi.html", "bit_generators/generated/randomgen.sfmt.SFMT.ctypes.html", "bit_generators/generated/randomgen.sfmt.SFMT.jump.html", "bit_generators/generated/randomgen.sfmt.SFMT.jumped.html", "bit_generators/generated/randomgen.sfmt.SFMT.random_raw.html", "bit_generators/generated/randomgen.sfmt.SFMT.seed.html", "bit_generators/generated/randomgen.sfmt.SFMT.state.html", "bit_generators/generated/randomgen.speck128.SPECK128.advance.html", "bit_generators/generated/randomgen.speck128.SPECK128.cffi.html", "bit_generators/generated/randomgen.speck128.SPECK128.ctypes.html", "bit_generators/generated/randomgen.speck128.SPECK128.jump.html", "bit_generators/generated/randomgen.speck128.SPECK128.jumped.html", "bit_generators/generated/randomgen.speck128.SPECK128.random_raw.html", "bit_generators/generated/randomgen.speck128.SPECK128.seed.html", "bit_generators/generated/randomgen.speck128.SPECK128.state.html", "bit_generators/generated/randomgen.threefry.ThreeFry.advance.html", "bit_generators/generated/randomgen.threefry.ThreeFry.cffi.html", "bit_generators/generated/randomgen.threefry.ThreeFry.ctypes.html", "bit_generators/generated/randomgen.threefry.ThreeFry.jump.html", "bit_generators/generated/randomgen.threefry.ThreeFry.jumped.html", "bit_generators/generated/randomgen.threefry.ThreeFry.random_raw.html", "bit_generators/generated/randomgen.threefry.ThreeFry.seed.html", "bit_generators/generated/randomgen.threefry.ThreeFry.state.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.cffi.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.ctypes.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.from_cfunc.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.from_ctypes.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.random_raw.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.state.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.cffi.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.ctypes.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.jump.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.jumped.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.random_raw.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.seed.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.state.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.cffi.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.ctypes.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.jump.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.jumped.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.random_raw.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.seed.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.state.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.cffi.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.ctypes.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.jump.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.jumped.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.random_raw.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.seed.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.state.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.cffi.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.ctypes.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.jump.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.jumped.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.random_raw.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.seed.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.state.html", "bit_generators/hc128.html", "bit_generators/index.html", "bit_generators/jsf.html", "bit_generators/lcg128mix.html", "bit_generators/lxm.html", "bit_generators/mt19937.html", "bit_generators/mt64.html", "bit_generators/pcg32.html", "bit_generators/pcg64.html", "bit_generators/pcg64dxsm.html", "bit_generators/philox.html", "bit_generators/rdrand.html", "bit_generators/romu.html", "bit_generators/sfc.html", "bit_generators/sfmt.html", "bit_generators/speck128.html", "bit_generators/threefry.html", "bit_generators/userbitgenerator.html", "bit_generators/xoroshiro128.html", "bit_generators/xorshift1024.html", "bit_generators/xoshiro256.html", "bit_generators/xoshiro512.html", "change-log.html", "custom-bit-generators.html", "entropy.html", "evolution.html", "extended-generator.html", "extending.html", "future.html", "generated/randomgen._seed_sequence.SeedSequence.generate_state.html", "generated/randomgen._seed_sequence.SeedSequence.spawn.html", "generated/randomgen._seed_sequence.SeedSequence.state.html", "generated/randomgen.generator.ExtendedGenerator.bit_generator.html", "generated/randomgen.generator.ExtendedGenerator.complex_normal.html", "generated/randomgen.generator.ExtendedGenerator.multivariate_complex_normal.html", "generated/randomgen.generator.ExtendedGenerator.multivariate_normal.html", "generated/randomgen.generator.ExtendedGenerator.random.html", "generated/randomgen.generator.ExtendedGenerator.standard_wishart.html", "generated/randomgen.generator.ExtendedGenerator.state.html", "generated/randomgen.generator.ExtendedGenerator.uintegers.html", "generated/randomgen.generator.ExtendedGenerator.wishart.html", "generator.html", "index.html", "legacy.html", "multithreading.html", "new-or-different.html", "parallel.html", "performance.html", "references.html", "seed_sequence.html", "testing.html"]})