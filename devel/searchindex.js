Search.setIndex({"alltitles": {"128-bit Linear Congruential Generator (LCG) with Output Mixing": [[175, null]], "64-bit Mersenne Twister": [[178, null]], "AES Counter-based RNG": [[0, null]], "Additional Experiments": [[219, "additional-experiments"]], "Advancing the PRNG\u2019s state": [[215, "advancing-the-prng-s-state"]], "Bit Generators": [[173, null], [211, "bit-generators"]], "ChaCha Cipher-based RNG": [[1, null]], "Change Log": [[194, null]], "Changes": [[211, "changes"]], "Changes between 1.16 and 1.18": [[197, "changes-between-1-16-and-1-18"]], "Changes in 1.19": [[197, "changes-in-1-19"]], "Changes in 1.23": [[197, "changes-in-1-23"]], "Core Testing": [[219, "core-testing"]], "Correlated Seeds": [[219, "correlated-seeds"]], "Custom Lock": [[183, "custom-lock"]], "Cython": [[199, "cython"]], "Danger": [[210, null], [211, null], [212, null]], "Differences from NumPy (1.17+)": [[214, "differences-from-numpy-1-17"]], "Distinct Keys in Cryptographic Generators": [[215, "distinct-keys-in-cryptographic-generators"]], "Distributions": [[198, "distributions"]], "Double SIMD Mersenne Twister (dSFMT)": [[2, null]], "Entropy From Iteration, Indirection, Xor (EFIIX)  Generator": [[3, null]], "Evolution of randomgen": [[197, null]], "Example Configuration": [[219, "example-configuration"]], "Experimental RNGs": [[173, "experimental-rngs"]], "Extended Generator": [[198, null]], "Extending": [[0, "extending"], [1, "extending"], [2, "extending"], [3, "extending"], [172, "extending"], [174, "extending"], [175, "extending"], [176, "extending"], [177, "extending"], [178, "extending"], [179, "extending"], [180, "extending"], [181, "extending"], [182, "extending"], [183, "extending"], [184, "extending"], [185, "extending"], [186, "extending"], [187, "extending"], [188, "extending"], [189, "extending"], [190, "extending"], [191, "extending"], [192, "extending"], [193, "extending"], [199, null]], "From Low-level Objects": [[189, "from-low-level-objects"]], "Future Plans": [[200, null]], "HC-128 Cipher Generator": [[172, null]], "Hardware-based Random Number Generator (RDRAND)": [[183, null]], "History": [[211, "history"]], "Indices and tables": [[211, "indices-and-tables"]], "Introduction": [[211, "introduction"]], "Jenkins Small Fast Generator": [[174, null]], "Jumping the PRNG state": [[215, "jumping-the-prng-state"]], "LXM Generator": [[176, null]], "Legacy Random Generation": [[212, null]], "Mersenne Twister (MT19937)": [[177, null]], "Multithreaded Generation": [[213, null]], "New Bit Generators": [[199, "new-bit-generators"]], "New Features": [[211, "new-features"]], "Non-reproducible Sequences": [[215, "non-reproducible-sequences"]], "Note": [[216, null], [218, null]], "Notes": [[219, "notes"]], "Numba": [[199, "numba"]], "Parallel Generation": [[211, "parallel-generation"]], "Parallel Random Number Generation": [[215, null]], "Parallel generation": [[0, "parallel-generation"], [2, "parallel-generation"], [175, "parallel-generation"], [176, "parallel-generation"], [177, "parallel-generation"], [179, "parallel-generation"], [180, "parallel-generation"], [181, "parallel-generation"], [182, "parallel-generation"], [183, "parallel-generation"], [186, "parallel-generation"], [187, "parallel-generation"], [188, "parallel-generation"], [190, "parallel-generation"], [191, "parallel-generation"], [192, "parallel-generation"], [193, "parallel-generation"]], "Parallelization": [[185, "parallelization"]], "Performance": [[195, "Performance"], [195, "id1"], [216, null]], "Permuted Congruential Generator (32-bit, PCG32)": [[179, null]], "Permuted Congruential Generator (64-bit, PCG64)": [[180, null]], "Permuted Congruential Generator 2.0 (64-bit Multiplier, DXSM Output)": [[181, null]], "Philox Counter-based RNG": [[182, null]], "Python BitGenerators": [[199, "python-bitgenerators"]], "Quality Assurance": [[219, null]], "Random Generator": [[210, null], [211, "random-generator"]], "RandomGen": [[211, "randomgen"]], "Recommendation": [[216, "recommendation"]], "References": [[217, null]], "Removed Features": [[211, "removed-features"]], "Rotate-Multiply (Romu) Generators": [[184, null]], "SFC64 Generator": [[185, null]], "SIMD-oriented Fast Mersenne Twister (SFMT)": [[186, null]], "SPECK Counter-based RNG": [[187, null]], "See also": [[181, null], [198, null], [202, null], [203, null], [206, null], [209, null]], "Seed Sequences": [[218, null]], "Seed and State Manipulation": [[198, "seed-and-state-manipulation"]], "Seeding and State": [[0, "seeding-and-state"], [1, "seeding-and-state"], [2, "seeding-and-state"], [3, "seeding-and-state"], [172, "seeding-and-state"], [174, "seeding-and-state"], [175, "seeding-and-state"], [176, "seeding-and-state"], [177, "seeding-and-state"], [178, "seeding-and-state"], [179, "seeding-and-state"], [180, "seeding-and-state"], [181, "seeding-and-state"], [182, "seeding-and-state"], [183, "seeding-and-state"], [184, "seeding-and-state"], [185, "seeding-and-state"], [186, "seeding-and-state"], [187, "seeding-and-state"], [188, "seeding-and-state"], [190, "seeding-and-state"], [191, "seeding-and-state"], [192, "seeding-and-state"], [193, "seeding-and-state"]], "Sequential Seeds": [[219, "sequential-seeds"]], "Stable RNGs": [[173, "stable-rngs"]], "State": [[189, "state"]], "Supported Generators": [[211, "supported-generators"]], "System Entropy": [[196, null]], "Testing": [[0, "testing"], [1, "testing"], [2, "testing"], [3, "testing"], [172, "testing"], [174, "testing"], [175, "testing"], [176, "testing"], [177, "testing"], [178, "testing"], [179, "testing"], [180, "testing"], [181, "testing"], [182, "testing"], [183, "testing"], [184, "testing"], [185, "testing"], [186, "testing"], [187, "testing"], [188, "testing"], [189, "testing"], [190, "testing"], [191, "testing"], [192, "testing"], [193, "testing"]], "ThreeFry Counter-based RNG": [[188, null]], "Timings": [[216, "timings"]], "User-defined Bit Generators": [[173, "user-defined-bit-generators"], [189, null]], "Using Python": [[195, "Using-Python"]], "Using a SeedSequence": [[215, "using-a-seedsequence"]], "Using numba": [[195, "Using-numba"]], "Weyl Sequences": [[215, "weyl-sequences"]], "What\u2019s New or Different": [[211, "what-s-new-or-different"], [214, null]], "Writing a BitGenerator": [[195, null]], "Xoroshiro128+": [[190, null]], "Xorshift1024*\u03c6": [[191, null]], "Xoshiro256**": [[192, null]], "Xoshiro512**": [[193, null]], "Zero (0) Seeding": [[219, "zero-0-seeding"]], "randomgen.aes.AESCounter.advance": [[4, null]], "randomgen.aes.AESCounter.cffi": [[5, null]], "randomgen.aes.AESCounter.ctypes": [[6, null]], "randomgen.aes.AESCounter.jump": [[7, null]], "randomgen.aes.AESCounter.jumped": [[8, null]], "randomgen.aes.AESCounter.random_raw": [[9, null]], "randomgen.aes.AESCounter.seed": [[10, null]], "randomgen.aes.AESCounter.state": [[11, null]], "randomgen.chacha.ChaCha.cffi": [[12, null]], "randomgen.chacha.ChaCha.ctypes": [[13, null]], "randomgen.chacha.ChaCha.random_raw": [[14, null]], "randomgen.chacha.ChaCha.seed": [[15, null]], "randomgen.chacha.ChaCha.state": [[16, null]], "randomgen.dsfmt.DSFMT.cffi": [[17, null]], "randomgen.dsfmt.DSFMT.ctypes": [[18, null]], "randomgen.dsfmt.DSFMT.jump": [[19, null]], "randomgen.dsfmt.DSFMT.jumped": [[20, null]], "randomgen.dsfmt.DSFMT.random_raw": [[21, null]], "randomgen.dsfmt.DSFMT.seed": [[22, null]], "randomgen.dsfmt.DSFMT.state": [[23, null]], "randomgen.efiix64.EFIIX64.cffi": [[24, null]], "randomgen.efiix64.EFIIX64.ctypes": [[25, null]], "randomgen.efiix64.EFIIX64.random_raw": [[26, null]], "randomgen.efiix64.EFIIX64.seed": [[27, null]], "randomgen.efiix64.EFIIX64.state": [[28, null]], "randomgen.generator.ExtendedGenerator.bit_generator": [[201, null]], "randomgen.generator.ExtendedGenerator.complex_normal": [[202, null]], "randomgen.generator.ExtendedGenerator.multivariate_complex_normal": [[203, null]], "randomgen.generator.ExtendedGenerator.multivariate_normal": [[204, null]], "randomgen.generator.ExtendedGenerator.random": [[205, null]], "randomgen.generator.ExtendedGenerator.standard_wishart": [[206, null]], "randomgen.generator.ExtendedGenerator.state": [[207, null]], "randomgen.generator.ExtendedGenerator.uintegers": [[208, null]], "randomgen.generator.ExtendedGenerator.wishart": [[209, null]], "randomgen.hc128.HC128.cffi": [[29, null]], "randomgen.hc128.HC128.ctypes": [[30, null]], "randomgen.hc128.HC128.random_raw": [[31, null]], "randomgen.hc128.HC128.seed": [[32, null]], "randomgen.hc128.HC128.state": [[33, null]], "randomgen.jsf.JSF.cffi": [[34, null]], "randomgen.jsf.JSF.ctypes": [[35, null]], "randomgen.jsf.JSF.random_raw": [[36, null]], "randomgen.jsf.JSF.seed": [[37, null]], "randomgen.jsf.JSF.state": [[38, null]], "randomgen.lxm.LXM.cffi": [[39, null]], "randomgen.lxm.LXM.ctypes": [[40, null]], "randomgen.lxm.LXM.jump": [[41, null]], "randomgen.lxm.LXM.jumped": [[42, null]], "randomgen.lxm.LXM.random_raw": [[43, null]], "randomgen.lxm.LXM.seed": [[44, null]], "randomgen.lxm.LXM.state": [[45, null]], "randomgen.mt19937.MT19937.cffi": [[46, null]], "randomgen.mt19937.MT19937.ctypes": [[47, null]], "randomgen.mt19937.MT19937.jump": [[48, null]], "randomgen.mt19937.MT19937.jumped": [[49, null]], "randomgen.mt19937.MT19937.random_raw": [[50, null]], "randomgen.mt19937.MT19937.seed": [[51, null]], "randomgen.mt19937.MT19937.state": [[52, null]], "randomgen.mt64.MT64.cffi": [[53, null]], "randomgen.mt64.MT64.ctypes": [[54, null]], "randomgen.mt64.MT64.random_raw": [[55, null]], "randomgen.mt64.MT64.seed": [[56, null]], "randomgen.mt64.MT64.state": [[57, null]], "randomgen.pcg32.PCG32.advance": [[58, null]], "randomgen.pcg32.PCG32.cffi": [[59, null]], "randomgen.pcg32.PCG32.ctypes": [[60, null]], "randomgen.pcg32.PCG32.jump": [[61, null]], "randomgen.pcg32.PCG32.jumped": [[62, null]], "randomgen.pcg32.PCG32.random_raw": [[63, null]], "randomgen.pcg32.PCG32.seed": [[64, null]], "randomgen.pcg32.PCG32.state": [[65, null]], "randomgen.pcg64.LCG128Mix.advance": [[66, null]], "randomgen.pcg64.LCG128Mix.cffi": [[67, null]], "randomgen.pcg64.LCG128Mix.ctypes": [[68, null]], "randomgen.pcg64.LCG128Mix.jumped": [[69, null]], "randomgen.pcg64.LCG128Mix.random_raw": [[70, null]], "randomgen.pcg64.LCG128Mix.seed": [[71, null]], "randomgen.pcg64.LCG128Mix.state": [[72, null]], "randomgen.pcg64.PCG64.advance": [[73, null]], "randomgen.pcg64.PCG64.cffi": [[74, null]], "randomgen.pcg64.PCG64.ctypes": [[75, null]], "randomgen.pcg64.PCG64.jump": [[76, null]], "randomgen.pcg64.PCG64.jumped": [[77, null]], "randomgen.pcg64.PCG64.random_raw": [[78, null]], "randomgen.pcg64.PCG64.seed": [[79, null]], "randomgen.pcg64.PCG64.state": [[80, null]], "randomgen.pcg64.PCG64DXSM.advance": [[81, null]], "randomgen.pcg64.PCG64DXSM.cffi": [[82, null]], "randomgen.pcg64.PCG64DXSM.ctypes": [[83, null]], "randomgen.pcg64.PCG64DXSM.jump": [[84, null]], "randomgen.pcg64.PCG64DXSM.jumped": [[85, null]], "randomgen.pcg64.PCG64DXSM.random_raw": [[86, null]], "randomgen.pcg64.PCG64DXSM.seed": [[87, null]], "randomgen.pcg64.PCG64DXSM.state": [[88, null]], "randomgen.philox.Philox.advance": [[89, null]], "randomgen.philox.Philox.cffi": [[90, null]], "randomgen.philox.Philox.ctypes": [[91, null]], "randomgen.philox.Philox.jump": [[92, null]], "randomgen.philox.Philox.jumped": [[93, null]], "randomgen.philox.Philox.random_raw": [[94, null]], "randomgen.philox.Philox.seed": [[95, null]], "randomgen.philox.Philox.state": [[96, null]], "randomgen.rdrand.RDRAND.cffi": [[97, null]], "randomgen.rdrand.RDRAND.ctypes": [[98, null]], "randomgen.rdrand.RDRAND.jumped": [[99, null]], "randomgen.rdrand.RDRAND.random_raw": [[100, null]], "randomgen.rdrand.RDRAND.seed": [[101, null]], "randomgen.rdrand.RDRAND.state": [[102, null]], "randomgen.rdrand.RDRAND.success": [[103, null]], "randomgen.romu.Romu.cffi": [[104, null]], "randomgen.romu.Romu.ctypes": [[105, null]], "randomgen.romu.Romu.random_raw": [[106, null]], "randomgen.romu.Romu.seed": [[107, null]], "randomgen.romu.Romu.state": [[108, null]], "randomgen.sfc.SFC64.cffi": [[109, null]], "randomgen.sfc.SFC64.ctypes": [[110, null]], "randomgen.sfc.SFC64.random_raw": [[111, null]], "randomgen.sfc.SFC64.seed": [[112, null]], "randomgen.sfc.SFC64.state": [[113, null]], "randomgen.sfc.SFC64.weyl_increments": [[114, null]], "randomgen.sfmt.SFMT.cffi": [[115, null]], "randomgen.sfmt.SFMT.ctypes": [[116, null]], "randomgen.sfmt.SFMT.jump": [[117, null]], "randomgen.sfmt.SFMT.jumped": [[118, null]], "randomgen.sfmt.SFMT.random_raw": [[119, null]], "randomgen.sfmt.SFMT.seed": [[120, null]], "randomgen.sfmt.SFMT.state": [[121, null]], "randomgen.speck128.SPECK128.advance": [[122, null]], "randomgen.speck128.SPECK128.cffi": [[123, null]], "randomgen.speck128.SPECK128.ctypes": [[124, null]], "randomgen.speck128.SPECK128.jump": [[125, null]], "randomgen.speck128.SPECK128.jumped": [[126, null]], "randomgen.speck128.SPECK128.random_raw": [[127, null]], "randomgen.speck128.SPECK128.seed": [[128, null]], "randomgen.speck128.SPECK128.state": [[129, null]], "randomgen.threefry.ThreeFry.advance": [[130, null]], "randomgen.threefry.ThreeFry.cffi": [[131, null]], "randomgen.threefry.ThreeFry.ctypes": [[132, null]], "randomgen.threefry.ThreeFry.jump": [[133, null]], "randomgen.threefry.ThreeFry.jumped": [[134, null]], "randomgen.threefry.ThreeFry.random_raw": [[135, null]], "randomgen.threefry.ThreeFry.seed": [[136, null]], "randomgen.threefry.ThreeFry.state": [[137, null]], "randomgen.wrapper.UserBitGenerator.cffi": [[138, null]], "randomgen.wrapper.UserBitGenerator.ctypes": [[139, null]], "randomgen.wrapper.UserBitGenerator.from_cfunc": [[140, null]], "randomgen.wrapper.UserBitGenerator.from_ctypes": [[141, null]], "randomgen.wrapper.UserBitGenerator.random_raw": [[142, null]], "randomgen.wrapper.UserBitGenerator.state": [[143, null]], "randomgen.xoroshiro128.Xoroshiro128.cffi": [[144, null]], "randomgen.xoroshiro128.Xoroshiro128.ctypes": [[145, null]], "randomgen.xoroshiro128.Xoroshiro128.jump": [[146, null]], "randomgen.xoroshiro128.Xoroshiro128.jumped": [[147, null]], "randomgen.xoroshiro128.Xoroshiro128.random_raw": [[148, null]], "randomgen.xoroshiro128.Xoroshiro128.seed": [[149, null]], "randomgen.xoroshiro128.Xoroshiro128.state": [[150, null]], "randomgen.xorshift1024.Xorshift1024.cffi": [[151, null]], "randomgen.xorshift1024.Xorshift1024.ctypes": [[152, null]], "randomgen.xorshift1024.Xorshift1024.jump": [[153, null]], "randomgen.xorshift1024.Xorshift1024.jumped": [[154, null]], "randomgen.xorshift1024.Xorshift1024.random_raw": [[155, null]], "randomgen.xorshift1024.Xorshift1024.seed": [[156, null]], "randomgen.xorshift1024.Xorshift1024.state": [[157, null]], "randomgen.xoshiro256.Xoshiro256.cffi": [[158, null]], "randomgen.xoshiro256.Xoshiro256.ctypes": [[159, null]], "randomgen.xoshiro256.Xoshiro256.jump": [[160, null]], "randomgen.xoshiro256.Xoshiro256.jumped": [[161, null]], "randomgen.xoshiro256.Xoshiro256.random_raw": [[162, null]], "randomgen.xoshiro256.Xoshiro256.seed": [[163, null]], "randomgen.xoshiro256.Xoshiro256.state": [[164, null]], "randomgen.xoshiro512.Xoshiro512.cffi": [[165, null]], "randomgen.xoshiro512.Xoshiro512.ctypes": [[166, null]], "randomgen.xoshiro512.Xoshiro512.jump": [[167, null]], "randomgen.xoshiro512.Xoshiro512.jumped": [[168, null]], "randomgen.xoshiro512.Xoshiro512.random_raw": [[169, null]], "randomgen.xoshiro512.Xoshiro512.seed": [[170, null]], "randomgen.xoshiro512.Xoshiro512.state": [[171, null]], "v1.15": [[194, "v1-15"]], "v1.15.1": [[194, "v1-15-1"]], "v1.16.0": [[194, "v1-16-0"]], "v1.16.1": [[194, "v1-16-1"]], "v1.16.2": [[194, "v1-16-2"]], "v1.16.3": [[194, "v1-16-3"]], "v1.16.4": [[194, "v1-16-4"]], "v1.16.5": [[194, "v1-16-5"]], "v1.16.6": [[194, "v1-16-6"]], "v1.17.0": [[194, "v1-17-0"]], "v1.18.0": [[194, "v1-18-0"]], "v1.19.0": [[194, "v1-19-0"]], "v1.19.1": [[194, "v1-19-1"]], "v1.19.2": [[194, "v1-19-2"]], "v1.19.3": [[194, "v1-19-3"]], "v1.20.0": [[194, "v1-20-0"]], "v1.20.1": [[194, "v1-20-1"]], "v1.20.2": [[194, "v1-20-2"]], "v1.23.0": [[194, "v1-23-0"]], "v1.23.1": [[194, "v1-23-1"]], "v1.26.0": [[194, "v1-26-0"]], "v1.26.1": [[194, "v1-26-1"]], "v2.0.0": [[194, "v2-0-0"]]}, "docurls": ["bit_generators/aesctr.html", "bit_generators/chacha.html", "bit_generators/dsfmt.html", "bit_generators/efiix64.html", "bit_generators/generated/randomgen.aes.AESCounter.advance.html", "bit_generators/generated/randomgen.aes.AESCounter.cffi.html", "bit_generators/generated/randomgen.aes.AESCounter.ctypes.html", "bit_generators/generated/randomgen.aes.AESCounter.jump.html", "bit_generators/generated/randomgen.aes.AESCounter.jumped.html", "bit_generators/generated/randomgen.aes.AESCounter.random_raw.html", "bit_generators/generated/randomgen.aes.AESCounter.seed.html", "bit_generators/generated/randomgen.aes.AESCounter.state.html", "bit_generators/generated/randomgen.chacha.ChaCha.cffi.html", "bit_generators/generated/randomgen.chacha.ChaCha.ctypes.html", "bit_generators/generated/randomgen.chacha.ChaCha.random_raw.html", "bit_generators/generated/randomgen.chacha.ChaCha.seed.html", "bit_generators/generated/randomgen.chacha.ChaCha.state.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.cffi.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.ctypes.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.jump.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.jumped.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.random_raw.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.seed.html", "bit_generators/generated/randomgen.dsfmt.DSFMT.state.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.cffi.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.ctypes.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.random_raw.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.seed.html", "bit_generators/generated/randomgen.efiix64.EFIIX64.state.html", "bit_generators/generated/randomgen.hc128.HC128.cffi.html", "bit_generators/generated/randomgen.hc128.HC128.ctypes.html", "bit_generators/generated/randomgen.hc128.HC128.random_raw.html", "bit_generators/generated/randomgen.hc128.HC128.seed.html", "bit_generators/generated/randomgen.hc128.HC128.state.html", "bit_generators/generated/randomgen.jsf.JSF.cffi.html", "bit_generators/generated/randomgen.jsf.JSF.ctypes.html", "bit_generators/generated/randomgen.jsf.JSF.random_raw.html", "bit_generators/generated/randomgen.jsf.JSF.seed.html", "bit_generators/generated/randomgen.jsf.JSF.state.html", "bit_generators/generated/randomgen.lxm.LXM.cffi.html", "bit_generators/generated/randomgen.lxm.LXM.ctypes.html", "bit_generators/generated/randomgen.lxm.LXM.jump.html", "bit_generators/generated/randomgen.lxm.LXM.jumped.html", "bit_generators/generated/randomgen.lxm.LXM.random_raw.html", "bit_generators/generated/randomgen.lxm.LXM.seed.html", "bit_generators/generated/randomgen.lxm.LXM.state.html", "bit_generators/generated/randomgen.mt19937.MT19937.cffi.html", "bit_generators/generated/randomgen.mt19937.MT19937.ctypes.html", "bit_generators/generated/randomgen.mt19937.MT19937.jump.html", "bit_generators/generated/randomgen.mt19937.MT19937.jumped.html", "bit_generators/generated/randomgen.mt19937.MT19937.random_raw.html", "bit_generators/generated/randomgen.mt19937.MT19937.seed.html", "bit_generators/generated/randomgen.mt19937.MT19937.state.html", "bit_generators/generated/randomgen.mt64.MT64.cffi.html", "bit_generators/generated/randomgen.mt64.MT64.ctypes.html", "bit_generators/generated/randomgen.mt64.MT64.random_raw.html", "bit_generators/generated/randomgen.mt64.MT64.seed.html", "bit_generators/generated/randomgen.mt64.MT64.state.html", "bit_generators/generated/randomgen.pcg32.PCG32.advance.html", "bit_generators/generated/randomgen.pcg32.PCG32.cffi.html", "bit_generators/generated/randomgen.pcg32.PCG32.ctypes.html", "bit_generators/generated/randomgen.pcg32.PCG32.jump.html", "bit_generators/generated/randomgen.pcg32.PCG32.jumped.html", "bit_generators/generated/randomgen.pcg32.PCG32.random_raw.html", "bit_generators/generated/randomgen.pcg32.PCG32.seed.html", "bit_generators/generated/randomgen.pcg32.PCG32.state.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.advance.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.cffi.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.ctypes.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.jumped.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.random_raw.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.seed.html", "bit_generators/generated/randomgen.pcg64.LCG128Mix.state.html", "bit_generators/generated/randomgen.pcg64.PCG64.advance.html", "bit_generators/generated/randomgen.pcg64.PCG64.cffi.html", "bit_generators/generated/randomgen.pcg64.PCG64.ctypes.html", "bit_generators/generated/randomgen.pcg64.PCG64.jump.html", "bit_generators/generated/randomgen.pcg64.PCG64.jumped.html", "bit_generators/generated/randomgen.pcg64.PCG64.random_raw.html", "bit_generators/generated/randomgen.pcg64.PCG64.seed.html", "bit_generators/generated/randomgen.pcg64.PCG64.state.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.advance.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.cffi.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.ctypes.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.jump.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.jumped.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.random_raw.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.seed.html", "bit_generators/generated/randomgen.pcg64.PCG64DXSM.state.html", "bit_generators/generated/randomgen.philox.Philox.advance.html", "bit_generators/generated/randomgen.philox.Philox.cffi.html", "bit_generators/generated/randomgen.philox.Philox.ctypes.html", "bit_generators/generated/randomgen.philox.Philox.jump.html", "bit_generators/generated/randomgen.philox.Philox.jumped.html", "bit_generators/generated/randomgen.philox.Philox.random_raw.html", "bit_generators/generated/randomgen.philox.Philox.seed.html", "bit_generators/generated/randomgen.philox.Philox.state.html", "bit_generators/generated/randomgen.rdrand.RDRAND.cffi.html", "bit_generators/generated/randomgen.rdrand.RDRAND.ctypes.html", "bit_generators/generated/randomgen.rdrand.RDRAND.jumped.html", "bit_generators/generated/randomgen.rdrand.RDRAND.random_raw.html", "bit_generators/generated/randomgen.rdrand.RDRAND.seed.html", "bit_generators/generated/randomgen.rdrand.RDRAND.state.html", "bit_generators/generated/randomgen.rdrand.RDRAND.success.html", "bit_generators/generated/randomgen.romu.Romu.cffi.html", "bit_generators/generated/randomgen.romu.Romu.ctypes.html", "bit_generators/generated/randomgen.romu.Romu.random_raw.html", "bit_generators/generated/randomgen.romu.Romu.seed.html", "bit_generators/generated/randomgen.romu.Romu.state.html", "bit_generators/generated/randomgen.sfc.SFC64.cffi.html", "bit_generators/generated/randomgen.sfc.SFC64.ctypes.html", "bit_generators/generated/randomgen.sfc.SFC64.random_raw.html", "bit_generators/generated/randomgen.sfc.SFC64.seed.html", "bit_generators/generated/randomgen.sfc.SFC64.state.html", "bit_generators/generated/randomgen.sfc.SFC64.weyl_increments.html", "bit_generators/generated/randomgen.sfmt.SFMT.cffi.html", "bit_generators/generated/randomgen.sfmt.SFMT.ctypes.html", "bit_generators/generated/randomgen.sfmt.SFMT.jump.html", "bit_generators/generated/randomgen.sfmt.SFMT.jumped.html", "bit_generators/generated/randomgen.sfmt.SFMT.random_raw.html", "bit_generators/generated/randomgen.sfmt.SFMT.seed.html", "bit_generators/generated/randomgen.sfmt.SFMT.state.html", "bit_generators/generated/randomgen.speck128.SPECK128.advance.html", "bit_generators/generated/randomgen.speck128.SPECK128.cffi.html", "bit_generators/generated/randomgen.speck128.SPECK128.ctypes.html", "bit_generators/generated/randomgen.speck128.SPECK128.jump.html", "bit_generators/generated/randomgen.speck128.SPECK128.jumped.html", "bit_generators/generated/randomgen.speck128.SPECK128.random_raw.html", "bit_generators/generated/randomgen.speck128.SPECK128.seed.html", "bit_generators/generated/randomgen.speck128.SPECK128.state.html", "bit_generators/generated/randomgen.threefry.ThreeFry.advance.html", "bit_generators/generated/randomgen.threefry.ThreeFry.cffi.html", "bit_generators/generated/randomgen.threefry.ThreeFry.ctypes.html", "bit_generators/generated/randomgen.threefry.ThreeFry.jump.html", "bit_generators/generated/randomgen.threefry.ThreeFry.jumped.html", "bit_generators/generated/randomgen.threefry.ThreeFry.random_raw.html", "bit_generators/generated/randomgen.threefry.ThreeFry.seed.html", "bit_generators/generated/randomgen.threefry.ThreeFry.state.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.cffi.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.ctypes.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.from_cfunc.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.from_ctypes.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.random_raw.html", "bit_generators/generated/randomgen.wrapper.UserBitGenerator.state.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.cffi.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.ctypes.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.jump.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.jumped.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.random_raw.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.seed.html", "bit_generators/generated/randomgen.xoroshiro128.Xoroshiro128.state.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.cffi.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.ctypes.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.jump.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.jumped.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.random_raw.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.seed.html", "bit_generators/generated/randomgen.xorshift1024.Xorshift1024.state.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.cffi.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.ctypes.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.jump.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.jumped.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.random_raw.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.seed.html", "bit_generators/generated/randomgen.xoshiro256.Xoshiro256.state.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.cffi.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.ctypes.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.jump.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.jumped.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.random_raw.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.seed.html", "bit_generators/generated/randomgen.xoshiro512.Xoshiro512.state.html", "bit_generators/hc128.html", "bit_generators/index.html", "bit_generators/jsf.html", "bit_generators/lcg128mix.html", "bit_generators/lxm.html", "bit_generators/mt19937.html", "bit_generators/mt64.html", "bit_generators/pcg32.html", "bit_generators/pcg64.html", "bit_generators/pcg64dxsm.html", "bit_generators/philox.html", "bit_generators/rdrand.html", "bit_generators/romu.html", "bit_generators/sfc.html", "bit_generators/sfmt.html", "bit_generators/speck128.html", "bit_generators/threefry.html", "bit_generators/userbitgenerator.html", "bit_generators/xoroshiro128.html", "bit_generators/xorshift1024.html", "bit_generators/xoshiro256.html", "bit_generators/xoshiro512.html", "change-log.html", "custom-bit-generators.html", "entropy.html", "evolution.html", "extended-generator.html", "extending.html", "future.html", "generated/randomgen.generator.ExtendedGenerator.bit_generator.html", "generated/randomgen.generator.ExtendedGenerator.complex_normal.html", "generated/randomgen.generator.ExtendedGenerator.multivariate_complex_normal.html", "generated/randomgen.generator.ExtendedGenerator.multivariate_normal.html", "generated/randomgen.generator.ExtendedGenerator.random.html", "generated/randomgen.generator.ExtendedGenerator.standard_wishart.html", "generated/randomgen.generator.ExtendedGenerator.state.html", "generated/randomgen.generator.ExtendedGenerator.uintegers.html", "generated/randomgen.generator.ExtendedGenerator.wishart.html", "generator.html", "index.html", "legacy.html", "multithreading.html", "new-or-different.html", "parallel.html", "performance.html", "references.html", "seed_sequence.html", "testing.html"], "envversion": {"nbsphinx": 4, "sphinx": 63, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1}, "indexentries": {"advance() (randomgen.aes.aescounter method)": [[4, "randomgen.aes.AESCounter.advance", false]], "advance() (randomgen.pcg32.pcg32 method)": [[58, "randomgen.pcg32.PCG32.advance", false]], "advance() (randomgen.pcg64.lcg128mix method)": [[66, "randomgen.pcg64.LCG128Mix.advance", false]], "advance() (randomgen.pcg64.pcg64 method)": [[73, "randomgen.pcg64.PCG64.advance", false]], "advance() (randomgen.pcg64.pcg64dxsm method)": [[81, "randomgen.pcg64.PCG64DXSM.advance", false]], "advance() (randomgen.philox.philox method)": [[89, "randomgen.philox.Philox.advance", false]], "advance() (randomgen.speck128.speck128 method)": [[122, "randomgen.speck128.SPECK128.advance", false]], "advance() (randomgen.threefry.threefry method)": [[130, "randomgen.threefry.ThreeFry.advance", false]], "aescounter (class in randomgen.aes)": [[0, "randomgen.aes.AESCounter", false]], "bit_generator (randomgen.generator.extendedgenerator attribute)": [[201, "randomgen.generator.ExtendedGenerator.bit_generator", false]], "cffi (randomgen.aes.aescounter attribute)": [[5, "randomgen.aes.AESCounter.cffi", false]], "cffi (randomgen.chacha.chacha attribute)": [[12, "randomgen.chacha.ChaCha.cffi", false]], "cffi (randomgen.dsfmt.dsfmt attribute)": [[17, "randomgen.dsfmt.DSFMT.cffi", false]], "cffi (randomgen.efiix64.efiix64 attribute)": [[24, "randomgen.efiix64.EFIIX64.cffi", false]], "cffi (randomgen.hc128.hc128 attribute)": [[29, "randomgen.hc128.HC128.cffi", false]], "cffi (randomgen.jsf.jsf attribute)": [[34, "randomgen.jsf.JSF.cffi", false]], "cffi (randomgen.lxm.lxm attribute)": [[39, "randomgen.lxm.LXM.cffi", false]], "cffi (randomgen.mt19937.mt19937 attribute)": [[46, "randomgen.mt19937.MT19937.cffi", false]], "cffi (randomgen.mt64.mt64 attribute)": [[53, "randomgen.mt64.MT64.cffi", false]], "cffi (randomgen.pcg32.pcg32 attribute)": [[59, "randomgen.pcg32.PCG32.cffi", false]], "cffi (randomgen.pcg64.lcg128mix attribute)": [[67, "randomgen.pcg64.LCG128Mix.cffi", false]], "cffi (randomgen.pcg64.pcg64 attribute)": [[74, "randomgen.pcg64.PCG64.cffi", false]], "cffi (randomgen.pcg64.pcg64dxsm attribute)": [[82, "randomgen.pcg64.PCG64DXSM.cffi", false]], "cffi (randomgen.philox.philox attribute)": [[90, "randomgen.philox.Philox.cffi", false]], "cffi (randomgen.rdrand.rdrand attribute)": [[97, "randomgen.rdrand.RDRAND.cffi", false]], "cffi (randomgen.romu.romu attribute)": [[104, "randomgen.romu.Romu.cffi", false]], "cffi (randomgen.sfc.sfc64 attribute)": [[109, "randomgen.sfc.SFC64.cffi", false]], "cffi (randomgen.sfmt.sfmt attribute)": [[115, "randomgen.sfmt.SFMT.cffi", false]], "cffi (randomgen.speck128.speck128 attribute)": [[123, "randomgen.speck128.SPECK128.cffi", false]], "cffi (randomgen.threefry.threefry attribute)": [[131, "randomgen.threefry.ThreeFry.cffi", false]], "cffi (randomgen.wrapper.userbitgenerator attribute)": [[138, "randomgen.wrapper.UserBitGenerator.cffi", false]], "cffi (randomgen.xoroshiro128.xoroshiro128 attribute)": [[144, "randomgen.xoroshiro128.Xoroshiro128.cffi", false]], "cffi (randomgen.xorshift1024.xorshift1024 attribute)": [[151, "randomgen.xorshift1024.Xorshift1024.cffi", false]], "cffi (randomgen.xoshiro256.xoshiro256 attribute)": [[158, "randomgen.xoshiro256.Xoshiro256.cffi", false]], "cffi (randomgen.xoshiro512.xoshiro512 attribute)": [[165, "randomgen.xoshiro512.Xoshiro512.cffi", false]], "chacha (class in randomgen.chacha)": [[1, "randomgen.chacha.ChaCha", false]], "complex_normal() (randomgen.generator.extendedgenerator method)": [[202, "randomgen.generator.ExtendedGenerator.complex_normal", false]], "ctypes (randomgen.aes.aescounter attribute)": [[6, "randomgen.aes.AESCounter.ctypes", false]], "ctypes (randomgen.chacha.chacha attribute)": [[13, "randomgen.chacha.ChaCha.ctypes", false]], "ctypes (randomgen.dsfmt.dsfmt attribute)": [[18, "randomgen.dsfmt.DSFMT.ctypes", false]], "ctypes (randomgen.efiix64.efiix64 attribute)": [[25, "randomgen.efiix64.EFIIX64.ctypes", false]], "ctypes (randomgen.hc128.hc128 attribute)": [[30, "randomgen.hc128.HC128.ctypes", false]], "ctypes (randomgen.jsf.jsf attribute)": [[35, "randomgen.jsf.JSF.ctypes", false]], "ctypes (randomgen.lxm.lxm attribute)": [[40, "randomgen.lxm.LXM.ctypes", false]], "ctypes (randomgen.mt19937.mt19937 attribute)": [[47, "randomgen.mt19937.MT19937.ctypes", false]], "ctypes (randomgen.mt64.mt64 attribute)": [[54, "randomgen.mt64.MT64.ctypes", false]], "ctypes (randomgen.pcg32.pcg32 attribute)": [[60, "randomgen.pcg32.PCG32.ctypes", false]], "ctypes (randomgen.pcg64.lcg128mix attribute)": [[68, "randomgen.pcg64.LCG128Mix.ctypes", false]], "ctypes (randomgen.pcg64.pcg64 attribute)": [[75, "randomgen.pcg64.PCG64.ctypes", false]], "ctypes (randomgen.pcg64.pcg64dxsm attribute)": [[83, "randomgen.pcg64.PCG64DXSM.ctypes", false]], "ctypes (randomgen.philox.philox attribute)": [[91, "randomgen.philox.Philox.ctypes", false]], "ctypes (randomgen.rdrand.rdrand attribute)": [[98, "randomgen.rdrand.RDRAND.ctypes", false]], "ctypes (randomgen.romu.romu attribute)": [[105, "randomgen.romu.Romu.ctypes", false]], "ctypes (randomgen.sfc.sfc64 attribute)": [[110, "randomgen.sfc.SFC64.ctypes", false]], "ctypes (randomgen.sfmt.sfmt attribute)": [[116, "randomgen.sfmt.SFMT.ctypes", false]], "ctypes (randomgen.speck128.speck128 attribute)": [[124, "randomgen.speck128.SPECK128.ctypes", false]], "ctypes (randomgen.threefry.threefry attribute)": [[132, "randomgen.threefry.ThreeFry.ctypes", false]], "ctypes (randomgen.wrapper.userbitgenerator attribute)": [[139, "randomgen.wrapper.UserBitGenerator.ctypes", false]], "ctypes (randomgen.xoroshiro128.xoroshiro128 attribute)": [[145, "randomgen.xoroshiro128.Xoroshiro128.ctypes", false]], "ctypes (randomgen.xorshift1024.xorshift1024 attribute)": [[152, "randomgen.xorshift1024.Xorshift1024.ctypes", false]], "ctypes (randomgen.xoshiro256.xoshiro256 attribute)": [[159, "randomgen.xoshiro256.Xoshiro256.ctypes", false]], "ctypes (randomgen.xoshiro512.xoshiro512 attribute)": [[166, "randomgen.xoshiro512.Xoshiro512.ctypes", false]], "dsfmt (class in randomgen.dsfmt)": [[2, "randomgen.dsfmt.DSFMT", false]], "efiix64 (class in randomgen.efiix64)": [[3, "randomgen.efiix64.EFIIX64", false]], "extendedgenerator (class in randomgen.generator)": [[198, "randomgen.generator.ExtendedGenerator", false]], "from_cfunc() (randomgen.wrapper.userbitgenerator class method)": [[140, "randomgen.wrapper.UserBitGenerator.from_cfunc", false]], "from_ctypes() (randomgen.wrapper.userbitgenerator class method)": [[141, "randomgen.wrapper.UserBitGenerator.from_ctypes", false]], "hc128 (class in randomgen.hc128)": [[172, "randomgen.hc128.HC128", false]], "jsf (class in randomgen.jsf)": [[174, "randomgen.jsf.JSF", false]], "jump() (randomgen.aes.aescounter method)": [[7, "randomgen.aes.AESCounter.jump", false]], "jump() (randomgen.dsfmt.dsfmt method)": [[19, "randomgen.dsfmt.DSFMT.jump", false]], "jump() (randomgen.lxm.lxm method)": [[41, "randomgen.lxm.LXM.jump", false]], "jump() (randomgen.mt19937.mt19937 method)": [[48, "randomgen.mt19937.MT19937.jump", false]], "jump() (randomgen.pcg32.pcg32 method)": [[61, "randomgen.pcg32.PCG32.jump", false]], "jump() (randomgen.pcg64.pcg64 method)": [[76, "randomgen.pcg64.PCG64.jump", false]], "jump() (randomgen.pcg64.pcg64dxsm method)": [[84, "randomgen.pcg64.PCG64DXSM.jump", false]], "jump() (randomgen.philox.philox method)": [[92, "randomgen.philox.Philox.jump", false]], "jump() (randomgen.sfmt.sfmt method)": [[117, "randomgen.sfmt.SFMT.jump", false]], "jump() (randomgen.speck128.speck128 method)": [[125, "randomgen.speck128.SPECK128.jump", false]], "jump() (randomgen.threefry.threefry method)": [[133, "randomgen.threefry.ThreeFry.jump", false]], "jump() (randomgen.xoroshiro128.xoroshiro128 method)": [[146, "randomgen.xoroshiro128.Xoroshiro128.jump", false]], "jump() (randomgen.xorshift1024.xorshift1024 method)": [[153, "randomgen.xorshift1024.Xorshift1024.jump", false]], "jump() (randomgen.xoshiro256.xoshiro256 method)": [[160, "randomgen.xoshiro256.Xoshiro256.jump", false]], "jump() (randomgen.xoshiro512.xoshiro512 method)": [[167, "randomgen.xoshiro512.Xoshiro512.jump", false]], "jumped() (randomgen.aes.aescounter method)": [[8, "randomgen.aes.AESCounter.jumped", false]], "jumped() (randomgen.dsfmt.dsfmt method)": [[20, "randomgen.dsfmt.DSFMT.jumped", false]], "jumped() (randomgen.lxm.lxm method)": [[42, "randomgen.lxm.LXM.jumped", false]], "jumped() (randomgen.mt19937.mt19937 method)": [[49, "randomgen.mt19937.MT19937.jumped", false]], "jumped() (randomgen.pcg32.pcg32 method)": [[62, "randomgen.pcg32.PCG32.jumped", false]], "jumped() (randomgen.pcg64.lcg128mix method)": [[69, "randomgen.pcg64.LCG128Mix.jumped", false]], "jumped() (randomgen.pcg64.pcg64 method)": [[77, "randomgen.pcg64.PCG64.jumped", false]], "jumped() (randomgen.pcg64.pcg64dxsm method)": [[85, "randomgen.pcg64.PCG64DXSM.jumped", false]], "jumped() (randomgen.philox.philox method)": [[93, "randomgen.philox.Philox.jumped", false]], "jumped() (randomgen.rdrand.rdrand method)": [[99, "randomgen.rdrand.RDRAND.jumped", false]], "jumped() (randomgen.sfmt.sfmt method)": [[118, "randomgen.sfmt.SFMT.jumped", false]], "jumped() (randomgen.speck128.speck128 method)": [[126, "randomgen.speck128.SPECK128.jumped", false]], "jumped() (randomgen.threefry.threefry method)": [[134, "randomgen.threefry.ThreeFry.jumped", false]], "jumped() (randomgen.xoroshiro128.xoroshiro128 method)": [[147, "randomgen.xoroshiro128.Xoroshiro128.jumped", false]], "jumped() (randomgen.xorshift1024.xorshift1024 method)": [[154, "randomgen.xorshift1024.Xorshift1024.jumped", false]], "jumped() (randomgen.xoshiro256.xoshiro256 method)": [[161, "randomgen.xoshiro256.Xoshiro256.jumped", false]], "jumped() (randomgen.xoshiro512.xoshiro512 method)": [[168, "randomgen.xoshiro512.Xoshiro512.jumped", false]], "lcg128mix (class in randomgen.pcg64)": [[175, "randomgen.pcg64.LCG128Mix", false]], "lock (randomgen.aes.aescounter attribute)": [[0, "randomgen.aes.AESCounter.lock", false]], "lock (randomgen.chacha.chacha attribute)": [[1, "randomgen.chacha.ChaCha.lock", false]], "lock (randomgen.dsfmt.dsfmt attribute)": [[2, "randomgen.dsfmt.DSFMT.lock", false]], "lock (randomgen.efiix64.efiix64 attribute)": [[3, "randomgen.efiix64.EFIIX64.lock", false]], "lock (randomgen.hc128.hc128 attribute)": [[172, "randomgen.hc128.HC128.lock", false]], "lock (randomgen.jsf.jsf attribute)": [[174, "randomgen.jsf.JSF.lock", false]], "lock (randomgen.lxm.lxm attribute)": [[176, "randomgen.lxm.LXM.lock", false]], "lock (randomgen.mt19937.mt19937 attribute)": [[177, "randomgen.mt19937.MT19937.lock", false]], "lock (randomgen.mt64.mt64 attribute)": [[178, "randomgen.mt64.MT64.lock", false]], "lock (randomgen.pcg32.pcg32 attribute)": [[179, "randomgen.pcg32.PCG32.lock", false]], "lock (randomgen.pcg64.lcg128mix attribute)": [[175, "randomgen.pcg64.LCG128Mix.lock", false]], "lock (randomgen.pcg64.pcg64 attribute)": [[180, "randomgen.pcg64.PCG64.lock", false]], "lock (randomgen.pcg64.pcg64dxsm attribute)": [[181, "randomgen.pcg64.PCG64DXSM.lock", false]], "lock (randomgen.philox.philox attribute)": [[182, "randomgen.philox.Philox.lock", false]], "lock (randomgen.rdrand.rdrand attribute)": [[183, "randomgen.rdrand.RDRAND.lock", false]], "lock (randomgen.sfmt.sfmt attribute)": [[186, "randomgen.sfmt.SFMT.lock", false]], "lock (randomgen.speck128.speck128 attribute)": [[187, "randomgen.speck128.SPECK128.lock", false]], "lock (randomgen.threefry.threefry attribute)": [[188, "randomgen.threefry.ThreeFry.lock", false]], "lock (randomgen.xoroshiro128.xoroshiro128 attribute)": [[190, "randomgen.xoroshiro128.Xoroshiro128.lock", false]], "lock (randomgen.xorshift1024.xorshift1024 attribute)": [[191, "randomgen.xorshift1024.Xorshift1024.lock", false]], "lock (randomgen.xoshiro256.xoshiro256 attribute)": [[192, "randomgen.xoshiro256.Xoshiro256.lock", false]], "lock (randomgen.xoshiro512.xoshiro512 attribute)": [[193, "randomgen.xoshiro512.Xoshiro512.lock", false]], "lxm (class in randomgen.lxm)": [[176, "randomgen.lxm.LXM", false]], "module": [[0, "module-randomgen.aes", false], [1, "module-randomgen.chacha", false], [2, "module-randomgen.dsfmt", false], [3, "module-randomgen.efiix64", false], [172, "module-randomgen.hc128", false], [174, "module-randomgen.jsf", false], [176, "module-randomgen.lxm", false], [177, "module-randomgen.mt19937", false], [178, "module-randomgen.mt64", false], [179, "module-randomgen.pcg32", false], [180, "module-randomgen.pcg64", false], [182, "module-randomgen.philox", false], [183, "module-randomgen.rdrand", false], [184, "module-randomgen.romu", false], [185, "module-randomgen.sfc", false], [186, "module-randomgen.sfmt", false], [187, "module-randomgen.speck128", false], [188, "module-randomgen.threefry", false], [189, "module-randomgen.wrapper", false], [190, "module-randomgen.xoroshiro128", false], [191, "module-randomgen.xorshift1024", false], [192, "module-randomgen.xoshiro256", false], [193, "module-randomgen.xoshiro512", false], [196, "module-randomgen.entropy", false], [216, "module-randomgen", false]], "mt19937 (class in randomgen.mt19937)": [[177, "randomgen.mt19937.MT19937", false]], "mt64 (class in randomgen.mt64)": [[178, "randomgen.mt64.MT64", false]], "multivariate_complex_normal() (randomgen.generator.extendedgenerator method)": [[203, "randomgen.generator.ExtendedGenerator.multivariate_complex_normal", false]], "multivariate_normal() (randomgen.generator.extendedgenerator method)": [[204, "randomgen.generator.ExtendedGenerator.multivariate_normal", false]], "pcg32 (class in randomgen.pcg32)": [[179, "randomgen.pcg32.PCG32", false]], "pcg64 (class in randomgen.pcg64)": [[180, "randomgen.pcg64.PCG64", false]], "pcg64dxsm (class in randomgen.pcg64)": [[181, "randomgen.pcg64.PCG64DXSM", false]], "philox (class in randomgen.philox)": [[182, "randomgen.philox.Philox", false]], "raisinglock (class in randomgen.rdrand)": [[183, "randomgen.rdrand.RaisingLock", false]], "random() (randomgen.generator.extendedgenerator method)": [[205, "randomgen.generator.ExtendedGenerator.random", false]], "random_entropy() (in module randomgen.entropy)": [[196, "randomgen.entropy.random_entropy", false]], "random_raw() (randomgen.aes.aescounter method)": [[9, "randomgen.aes.AESCounter.random_raw", false]], "random_raw() (randomgen.chacha.chacha method)": [[14, "randomgen.chacha.ChaCha.random_raw", false]], "random_raw() (randomgen.dsfmt.dsfmt method)": [[21, "randomgen.dsfmt.DSFMT.random_raw", false]], "random_raw() (randomgen.efiix64.efiix64 method)": [[26, "randomgen.efiix64.EFIIX64.random_raw", false]], "random_raw() (randomgen.hc128.hc128 method)": [[31, "randomgen.hc128.HC128.random_raw", false]], "random_raw() (randomgen.jsf.jsf method)": [[36, "randomgen.jsf.JSF.random_raw", false]], "random_raw() (randomgen.lxm.lxm method)": [[43, "randomgen.lxm.LXM.random_raw", false]], "random_raw() (randomgen.mt19937.mt19937 method)": [[50, "randomgen.mt19937.MT19937.random_raw", false]], "random_raw() (randomgen.mt64.mt64 method)": [[55, "randomgen.mt64.MT64.random_raw", false]], "random_raw() (randomgen.pcg32.pcg32 method)": [[63, "randomgen.pcg32.PCG32.random_raw", false]], "random_raw() (randomgen.pcg64.lcg128mix method)": [[70, "randomgen.pcg64.LCG128Mix.random_raw", false]], "random_raw() (randomgen.pcg64.pcg64 method)": [[78, "randomgen.pcg64.PCG64.random_raw", false]], "random_raw() (randomgen.pcg64.pcg64dxsm method)": [[86, "randomgen.pcg64.PCG64DXSM.random_raw", false]], "random_raw() (randomgen.philox.philox method)": [[94, "randomgen.philox.Philox.random_raw", false]], "random_raw() (randomgen.rdrand.rdrand method)": [[100, "randomgen.rdrand.RDRAND.random_raw", false]], "random_raw() (randomgen.romu.romu method)": [[106, "randomgen.romu.Romu.random_raw", false]], "random_raw() (randomgen.sfc.sfc64 method)": [[111, "randomgen.sfc.SFC64.random_raw", false]], "random_raw() (randomgen.sfmt.sfmt method)": [[119, "randomgen.sfmt.SFMT.random_raw", false]], "random_raw() (randomgen.speck128.speck128 method)": [[127, "randomgen.speck128.SPECK128.random_raw", false]], "random_raw() (randomgen.threefry.threefry method)": [[135, "randomgen.threefry.ThreeFry.random_raw", false]], "random_raw() (randomgen.wrapper.userbitgenerator method)": [[142, "randomgen.wrapper.UserBitGenerator.random_raw", false]], "random_raw() (randomgen.xoroshiro128.xoroshiro128 method)": [[148, "randomgen.xoroshiro128.Xoroshiro128.random_raw", false]], "random_raw() (randomgen.xorshift1024.xorshift1024 method)": [[155, "randomgen.xorshift1024.Xorshift1024.random_raw", false]], "random_raw() (randomgen.xoshiro256.xoshiro256 method)": [[162, "randomgen.xoshiro256.Xoshiro256.random_raw", false]], "random_raw() (randomgen.xoshiro512.xoshiro512 method)": [[169, "randomgen.xoshiro512.Xoshiro512.random_raw", false]], "randomgen": [[216, "module-randomgen", false]], "randomgen.aes": [[0, "module-randomgen.aes", false]], "randomgen.chacha": [[1, "module-randomgen.chacha", false]], "randomgen.dsfmt": [[2, "module-randomgen.dsfmt", false]], "randomgen.efiix64": [[3, "module-randomgen.efiix64", false]], "randomgen.entropy": [[196, "module-randomgen.entropy", false]], "randomgen.hc128": [[172, "module-randomgen.hc128", false]], "randomgen.jsf": [[174, "module-randomgen.jsf", false]], "randomgen.lxm": [[176, "module-randomgen.lxm", false]], "randomgen.mt19937": [[177, "module-randomgen.mt19937", false]], "randomgen.mt64": [[178, "module-randomgen.mt64", false]], "randomgen.pcg32": [[179, "module-randomgen.pcg32", false]], "randomgen.pcg64": [[180, "module-randomgen.pcg64", false]], "randomgen.philox": [[182, "module-randomgen.philox", false]], "randomgen.rdrand": [[183, "module-randomgen.rdrand", false]], "randomgen.romu": [[184, "module-randomgen.romu", false]], "randomgen.sfc": [[185, "module-randomgen.sfc", false]], "randomgen.sfmt": [[186, "module-randomgen.sfmt", false]], "randomgen.speck128": [[187, "module-randomgen.speck128", false]], "randomgen.threefry": [[188, "module-randomgen.threefry", false]], "randomgen.wrapper": [[189, "module-randomgen.wrapper", false]], "randomgen.xoroshiro128": [[190, "module-randomgen.xoroshiro128", false]], "randomgen.xorshift1024": [[191, "module-randomgen.xorshift1024", false]], "randomgen.xoshiro256": [[192, "module-randomgen.xoshiro256", false]], "randomgen.xoshiro512": [[193, "module-randomgen.xoshiro512", false]], "rdrand (class in randomgen.rdrand)": [[183, "randomgen.rdrand.RDRAND", false]], "romu (class in randomgen.romu)": [[184, "randomgen.romu.Romu", false]], "seed() (randomgen.aes.aescounter method)": [[10, "randomgen.aes.AESCounter.seed", false]], "seed() (randomgen.chacha.chacha method)": [[15, "randomgen.chacha.ChaCha.seed", false]], "seed() (randomgen.dsfmt.dsfmt method)": [[22, "randomgen.dsfmt.DSFMT.seed", false]], "seed() (randomgen.efiix64.efiix64 method)": [[27, "randomgen.efiix64.EFIIX64.seed", false]], "seed() (randomgen.hc128.hc128 method)": [[32, "randomgen.hc128.HC128.seed", false]], "seed() (randomgen.jsf.jsf method)": [[37, "randomgen.jsf.JSF.seed", false]], "seed() (randomgen.lxm.lxm method)": [[44, "randomgen.lxm.LXM.seed", false]], "seed() (randomgen.mt19937.mt19937 method)": [[51, "randomgen.mt19937.MT19937.seed", false]], "seed() (randomgen.mt64.mt64 method)": [[56, "randomgen.mt64.MT64.seed", false]], "seed() (randomgen.pcg32.pcg32 method)": [[64, "randomgen.pcg32.PCG32.seed", false]], "seed() (randomgen.pcg64.lcg128mix method)": [[71, "randomgen.pcg64.LCG128Mix.seed", false]], "seed() (randomgen.pcg64.pcg64 method)": [[79, "randomgen.pcg64.PCG64.seed", false]], "seed() (randomgen.pcg64.pcg64dxsm method)": [[87, "randomgen.pcg64.PCG64DXSM.seed", false]], "seed() (randomgen.philox.philox method)": [[95, "randomgen.philox.Philox.seed", false]], "seed() (randomgen.rdrand.rdrand method)": [[101, "randomgen.rdrand.RDRAND.seed", false]], "seed() (randomgen.romu.romu method)": [[107, "randomgen.romu.Romu.seed", false]], "seed() (randomgen.sfc.sfc64 method)": [[112, "randomgen.sfc.SFC64.seed", false]], "seed() (randomgen.sfmt.sfmt method)": [[120, "randomgen.sfmt.SFMT.seed", false]], "seed() (randomgen.speck128.speck128 method)": [[128, "randomgen.speck128.SPECK128.seed", false]], "seed() (randomgen.threefry.threefry method)": [[136, "randomgen.threefry.ThreeFry.seed", false]], "seed() (randomgen.xoroshiro128.xoroshiro128 method)": [[149, "randomgen.xoroshiro128.Xoroshiro128.seed", false]], "seed() (randomgen.xorshift1024.xorshift1024 method)": [[156, "randomgen.xorshift1024.Xorshift1024.seed", false]], "seed() (randomgen.xoshiro256.xoshiro256 method)": [[163, "randomgen.xoshiro256.Xoshiro256.seed", false]], "seed() (randomgen.xoshiro512.xoshiro512 method)": [[170, "randomgen.xoshiro512.Xoshiro512.seed", false]], "seed_seq (randomgen.aes.aescounter attribute)": [[0, "randomgen.aes.AESCounter.seed_seq", false]], "seed_seq (randomgen.chacha.chacha attribute)": [[1, "randomgen.chacha.ChaCha.seed_seq", false]], "seed_seq (randomgen.dsfmt.dsfmt attribute)": [[2, "randomgen.dsfmt.DSFMT.seed_seq", false]], "seed_seq (randomgen.efiix64.efiix64 attribute)": [[3, "randomgen.efiix64.EFIIX64.seed_seq", false]], "seed_seq (randomgen.hc128.hc128 attribute)": [[172, "randomgen.hc128.HC128.seed_seq", false]], "seed_seq (randomgen.jsf.jsf attribute)": [[174, "randomgen.jsf.JSF.seed_seq", false]], "seed_seq (randomgen.lxm.lxm attribute)": [[176, "randomgen.lxm.LXM.seed_seq", false]], "seed_seq (randomgen.mt19937.mt19937 attribute)": [[177, "randomgen.mt19937.MT19937.seed_seq", false]], "seed_seq (randomgen.mt64.mt64 attribute)": [[178, "randomgen.mt64.MT64.seed_seq", false]], "seed_seq (randomgen.pcg32.pcg32 attribute)": [[179, "randomgen.pcg32.PCG32.seed_seq", false]], "seed_seq (randomgen.pcg64.lcg128mix attribute)": [[175, "randomgen.pcg64.LCG128Mix.seed_seq", false]], "seed_seq (randomgen.pcg64.pcg64 attribute)": [[180, "randomgen.pcg64.PCG64.seed_seq", false]], "seed_seq (randomgen.pcg64.pcg64dxsm attribute)": [[181, "randomgen.pcg64.PCG64DXSM.seed_seq", false]], "seed_seq (randomgen.philox.philox attribute)": [[182, "randomgen.philox.Philox.seed_seq", false]], "seed_seq (randomgen.rdrand.rdrand attribute)": [[183, "randomgen.rdrand.RDRAND.seed_seq", false]], "seed_seq (randomgen.sfmt.sfmt attribute)": [[186, "randomgen.sfmt.SFMT.seed_seq", false]], "seed_seq (randomgen.speck128.speck128 attribute)": [[187, "randomgen.speck128.SPECK128.seed_seq", false]], "seed_seq (randomgen.threefry.threefry attribute)": [[188, "randomgen.threefry.ThreeFry.seed_seq", false]], "seed_seq (randomgen.xoroshiro128.xoroshiro128 attribute)": [[190, "randomgen.xoroshiro128.Xoroshiro128.seed_seq", false]], "seed_seq (randomgen.xorshift1024.xorshift1024 attribute)": [[191, "randomgen.xorshift1024.Xorshift1024.seed_seq", false]], "seed_seq (randomgen.xoshiro256.xoshiro256 attribute)": [[192, "randomgen.xoshiro256.Xoshiro256.seed_seq", false]], "seed_seq (randomgen.xoshiro512.xoshiro512 attribute)": [[193, "randomgen.xoshiro512.Xoshiro512.seed_seq", false]], "sfc64 (class in randomgen.sfc)": [[185, "randomgen.sfc.SFC64", false]], "sfmt (class in randomgen.sfmt)": [[186, "randomgen.sfmt.SFMT", false]], "speck128 (class in randomgen.speck128)": [[187, "randomgen.speck128.SPECK128", false]], "standard_wishart() (randomgen.generator.extendedgenerator method)": [[206, "randomgen.generator.ExtendedGenerator.standard_wishart", false]], "state (randomgen.aes.aescounter attribute)": [[11, "randomgen.aes.AESCounter.state", false]], "state (randomgen.chacha.chacha attribute)": [[16, "randomgen.chacha.ChaCha.state", false]], "state (randomgen.dsfmt.dsfmt attribute)": [[23, "randomgen.dsfmt.DSFMT.state", false]], "state (randomgen.efiix64.efiix64 attribute)": [[28, "randomgen.efiix64.EFIIX64.state", false]], "state (randomgen.generator.extendedgenerator attribute)": [[207, "randomgen.generator.ExtendedGenerator.state", false]], "state (randomgen.hc128.hc128 attribute)": [[33, "randomgen.hc128.HC128.state", false]], "state (randomgen.jsf.jsf attribute)": [[38, "randomgen.jsf.JSF.state", false]], "state (randomgen.lxm.lxm attribute)": [[45, "randomgen.lxm.LXM.state", false]], "state (randomgen.mt19937.mt19937 attribute)": [[52, "randomgen.mt19937.MT19937.state", false]], "state (randomgen.mt64.mt64 attribute)": [[57, "randomgen.mt64.MT64.state", false]], "state (randomgen.pcg32.pcg32 attribute)": [[65, "randomgen.pcg32.PCG32.state", false]], "state (randomgen.pcg64.lcg128mix attribute)": [[72, "randomgen.pcg64.LCG128Mix.state", false]], "state (randomgen.pcg64.pcg64 attribute)": [[80, "randomgen.pcg64.PCG64.state", false]], "state (randomgen.pcg64.pcg64dxsm attribute)": [[88, "randomgen.pcg64.PCG64DXSM.state", false]], "state (randomgen.philox.philox attribute)": [[96, "randomgen.philox.Philox.state", false]], "state (randomgen.rdrand.rdrand attribute)": [[102, "randomgen.rdrand.RDRAND.state", false]], "state (randomgen.romu.romu attribute)": [[108, "randomgen.romu.Romu.state", false]], "state (randomgen.sfc.sfc64 attribute)": [[113, "randomgen.sfc.SFC64.state", false]], "state (randomgen.sfmt.sfmt attribute)": [[121, "randomgen.sfmt.SFMT.state", false]], "state (randomgen.speck128.speck128 attribute)": [[129, "randomgen.speck128.SPECK128.state", false]], "state (randomgen.threefry.threefry attribute)": [[137, "randomgen.threefry.ThreeFry.state", false]], "state (randomgen.wrapper.userbitgenerator attribute)": [[143, "randomgen.wrapper.UserBitGenerator.state", false]], "state (randomgen.xoroshiro128.xoroshiro128 attribute)": [[150, "randomgen.xoroshiro128.Xoroshiro128.state", false]], "state (randomgen.xorshift1024.xorshift1024 attribute)": [[157, "randomgen.xorshift1024.Xorshift1024.state", false]], "state (randomgen.xoshiro256.xoshiro256 attribute)": [[164, "randomgen.xoshiro256.Xoshiro256.state", false]], "state (randomgen.xoshiro512.xoshiro512 attribute)": [[171, "randomgen.xoshiro512.Xoshiro512.state", false]], "success (randomgen.rdrand.rdrand attribute)": [[103, "randomgen.rdrand.RDRAND.success", false]], "threefry (class in randomgen.threefry)": [[188, "randomgen.threefry.ThreeFry", false]], "uintegers() (randomgen.generator.extendedgenerator method)": [[208, "randomgen.generator.ExtendedGenerator.uintegers", false]], "userbitgenerator (class in randomgen.wrapper)": [[189, "randomgen.wrapper.UserBitGenerator", false]], "weyl_increments() (randomgen.sfc.sfc64 method)": [[114, "randomgen.sfc.SFC64.weyl_increments", false]], "wishart() (randomgen.generator.extendedgenerator method)": [[209, "randomgen.generator.ExtendedGenerator.wishart", false]], "xoroshiro128 (class in randomgen.xoroshiro128)": [[190, "randomgen.xoroshiro128.Xoroshiro128", false]], "xorshift1024 (class in randomgen.xorshift1024)": [[191, "randomgen.xorshift1024.Xorshift1024", false]], "xoshiro256 (class in randomgen.xoshiro256)": [[192, "randomgen.xoshiro256.Xoshiro256", false]], "xoshiro512 (class in randomgen.xoshiro512)": [[193, "randomgen.xoshiro512.Xoshiro512", false]]}, "objects": {"": [[216, 0, 0, 1, "randomgen", ""]], "randomgen": [[0, 0, 0, 1, "aes", ""], [1, 0, 0, 1, "chacha", ""], [2, 0, 0, 1, "dsfmt", ""], [3, 0, 0, 1, "efiix64", ""], [196, 0, 0, 1, "entropy", ""], [172, 0, 0, 1, "hc128", ""], [174, 0, 0, 1, "jsf", ""], [176, 0, 0, 1, "lxm", ""], [177, 0, 0, 1, "mt19937", ""], [178, 0, 0, 1, "mt64", ""], [179, 0, 0, 1, "pcg32", ""], [180, 0, 0, 1, "pcg64", ""], [182, 0, 0, 1, "philox", ""], [183, 0, 0, 1, "rdrand", ""], [184, 0, 0, 1, "romu", ""], [185, 0, 0, 1, "sfc", ""], [186, 0, 0, 1, "sfmt", ""], [187, 0, 0, 1, "speck128", ""], [188, 0, 0, 1, "threefry", ""], [189, 0, 0, 1, "wrapper", ""], [190, 0, 0, 1, "xoroshiro128", ""], [191, 0, 0, 1, "xorshift1024", ""], [192, 0, 0, 1, "xoshiro256", ""], [193, 0, 0, 1, "xoshiro512", ""]], "randomgen.aes": [[0, 1, 1, 0, "AESCounter", "Container for the AES Counter pseudo-random number generator."]], "randomgen.aes.AESCounter": [[4, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [5, 4, 1, 0, "cffi", "CFFI interface"], [6, 4, 1, 0, "ctypes", "ctypes interface"], [7, 3, 1, 0, "jump", "Jumps the state as-if iter * 2**64 random numbers are generated"], [8, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [0, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [9, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [10, 3, 1, 0, "seed", "Seed the generator"], [0, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [11, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.aes.AESCounter.__init__": [[0, 2, 2, 0, "counter", "Counter to use in the AESCounter state."], [0, 2, 2, 0, "key", "Key to use in the AESCounter state."], [0, 2, 2, 0, "mode", "Deprecated parameter."], [0, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**128), a SeedSequence instance or None (the default)."]], "randomgen.aes.AESCounter.advance": [[4, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.aes.AESCounter.jump": [[7, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.aes.AESCounter.jumped": [[8, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.aes.AESCounter.random_raw": [[9, 2, 2, 0, "output", "Output values."], [9, 2, 2, 0, "size", "Output shape."]], "randomgen.aes.AESCounter.seed": [[10, 2, 2, 0, "counter", "Counter to use in the AESCounter state."], [10, 2, 2, 0, "key", "Key to use in the AESCounter state."], [10, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**128), a SeedSequence instance or None (the default)."]], "randomgen.chacha": [[1, 1, 1, 0, "ChaCha", "Container for the ChaCha family of Counter pseudo-random number generators"]], "randomgen.chacha.ChaCha": [[12, 4, 1, 0, "cffi", "CFFI interface"], [13, 4, 1, 0, "ctypes", "ctypes interface"], [1, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [14, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [15, 3, 1, 0, "seed", "Seed the generator"], [1, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [16, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.chacha.ChaCha.__init__": [[1, 2, 2, 0, "counter", "Counter to use in the ChaCha state."], [1, 2, 2, 0, "key", "Key to use in the ChaCha state."], [1, 2, 2, 0, "mode", "Deprecated parameter."], [1, 2, 2, 0, "rounds", "Number of rounds to run the ChaCha mixer."], [1, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**256), an array of 4 uint64 values, a SeedSequence instance or None (the default)."]], "randomgen.chacha.ChaCha.random_raw": [[14, 2, 2, 0, "output", "Output values."], [14, 2, 2, 0, "size", "Output shape."]], "randomgen.chacha.ChaCha.seed": [[15, 2, 2, "randomgen.chacha.ChaCha.seed", "counter", "Seed the generator"], [15, 2, 2, "randomgen.chacha.ChaCha.seed", "key", "Seed the generator"], [15, 2, 2, "randomgen.chacha.ChaCha.seed", "seed", "Seed the generator"]], "randomgen.dsfmt": [[2, 1, 1, 0, "DSFMT", "Container for the SIMD-based Mersenne Twister pseudo RNG."]], "randomgen.dsfmt.DSFMT": [[17, 4, 1, 0, "cffi", "CFFI interface"], [18, 4, 1, 0, "ctypes", "ctypes interface"], [19, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated."], [20, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [2, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [21, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [22, 3, 1, 0, "seed", "Seed the generator"], [2, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [23, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.dsfmt.DSFMT.__init__": [[2, 2, 2, 0, "mode", "Deprecated parameter."], [2, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator."]], "randomgen.dsfmt.DSFMT.jump": [[19, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator."]], "randomgen.dsfmt.DSFMT.jumped": [[20, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.dsfmt.DSFMT.random_raw": [[21, 2, 2, 0, "output", "Output values."], [21, 2, 2, 0, "size", "Output shape."]], "randomgen.dsfmt.DSFMT.seed": [[22, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator. Can be any integer between 0 and 2**32 - 1 inclusive, an array (or other sequence) of unsigned 32-bit integers, a SeedSequence instance or None (the default)."]], "randomgen.efiix64": [[3, 1, 1, 0, "EFIIX64", "Container for the EFIIX64x384 pseudo-random number generator."]], "randomgen.efiix64.EFIIX64": [[24, 4, 1, 0, "cffi", "CFFI interface"], [25, 4, 1, 0, "ctypes", "ctypes interface"], [3, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [26, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [27, 3, 1, 0, "seed", "Seed the generator"], [3, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [28, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.efiix64.EFIIX64.__init__": [[3, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.efiix64.EFIIX64.random_raw": [[26, 2, 2, 0, "output", "Output values."], [26, 2, 2, 0, "size", "Output shape."]], "randomgen.efiix64.EFIIX64.seed": [[27, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]], "randomgen.entropy": [[196, 5, 1, 0, "random_entropy", "Read entropy from the system cryptographic provider"]], "randomgen.entropy.random_entropy": [[196, 2, 2, 0, "size", "Output shape."], [196, 2, 2, 0, "source", "Source of entropy."]], "randomgen.generator": [[198, 1, 1, 0, "ExtendedGenerator", "Additional random value generator using a bit generator source."]], "randomgen.generator.ExtendedGenerator": [[201, 4, 1, 0, "bit_generator", "Gets the bit generator instance used by the generator"], [202, 3, 1, 0, "complex_normal", "Draw random samples from a complex normal (Gaussian) distribution."], [203, 3, 1, 0, "multivariate_complex_normal", "Draw random samples from a multivariate complex normal (Gaussian) distribution."], [204, 3, 1, 0, "multivariate_normal", "Draw random samples from a multivariate normal distribution."], [205, 3, 1, 0, "random", "Return random floats in the half-open interval [0.0, 1.0)."], [206, 3, 1, 0, "standard_wishart", "Draw samples from the Standard Wishart and Pseudo-Wishart distributions"], [207, 4, 1, 0, "state", "Get or set the bit generator's state"], [208, 3, 1, 0, "uintegers", "Return random unsigned integers"], [209, 3, 1, 0, "wishart", "Draw samples from the Wishart and pseudo-Wishart distributions."]], "randomgen.generator.ExtendedGenerator.__init__": [[198, 2, 2, 0, "bit_generator", "Bit generator to use as the core generator."]], "randomgen.generator.ExtendedGenerator.complex_normal": [[202, 2, 2, 0, "gamma", "Variance of the distribution"], [202, 2, 2, 0, "loc", "Mean of the distribution."], [202, 2, 2, 0, "relation", "Relation between the two component normals"], [202, 2, 2, 0, "size", "Output shape."]], "randomgen.generator.ExtendedGenerator.multivariate_complex_normal": [[203, 2, 2, 0, "check_valid", "Behavior when the covariance matrix implied by gamma and relation is not positive semidefinite."], [203, 2, 2, 0, "gamma", "Covariance of the real component of the distribution."], [203, 2, 2, 0, "loc", "Mean of the distribution."], [203, 2, 2, 0, "method", "The cov input is used to compute a factor matrix A such that A @ A.T = cov."], [203, 2, 2, 0, "relation", "Relation between the two component normals."], [203, 2, 2, 0, "size", "Given a shape of, for example, (m,n,k), m*n*k samples are generated, and packed in an m-by-n-by-k arrangement."], [203, 2, 2, 0, "tol", "Tolerance when checking the singular values in the covariance matrix implied by gamma and relation."]], "randomgen.generator.ExtendedGenerator.multivariate_normal": [[204, 2, 2, 0, "check_valid", "Behavior when the covariance matrix is not positive semidefinite."], [204, 2, 2, 0, "cov", "Covariance matrix of the distribution."], [204, 2, 2, 0, "mean", "Mean of the distribution."], [204, 2, 2, 0, "method", "The cov input is used to compute a factor matrix A such that A @ A.T = cov."], [204, 2, 2, 0, "size", "Given a shape of, for example, (m,n,k), m*n*k samples are generated, and packed in an m-by-n-by-k arrangement."], [204, 2, 2, 0, "tol", "Tolerance when checking the singular values in covariance matrix. cov is cast to double before the check."]], "randomgen.generator.ExtendedGenerator.random": [[205, 2, 2, 0, "dtype", "Desired dtype of the result."], [205, 2, 2, 0, "out", "Alternative output array in which to place the result."], [205, 2, 2, 0, "size", "Output shape."]], "randomgen.generator.ExtendedGenerator.standard_wishart": [[206, 2, 2, 0, "df", "The degree-of-freedom for the simulated Wishart variates."], [206, 2, 2, 0, "dim", "The dimension of the simulated Wishart variates."], [206, 2, 2, 0, "rescale", "Flag indicating whether to rescale the outputs to have expectation identity."], [206, 2, 2, 0, "size", "Output shape, excluding trailing dims."]], "randomgen.generator.ExtendedGenerator.uintegers": [[208, 2, 2, 0, "bits", "Size of the unsigned integer to return, either 32 bit or 64 bit."], [208, 2, 2, 0, "size", "Output shape."]], "randomgen.generator.ExtendedGenerator.wishart": [[209, 2, 2, 0, "check_valid", "Behavior when the covariance matrix has rank less than rank."], [209, 2, 2, 0, "df", "Degree-of-freedom values."], [209, 2, 2, 0, "method", "The cov input is used to compute a factor matrix A such that A @ A.T = cov."], [209, 2, 2, 0, "rank", "The rank of shape when generating from the Singular Wishart distribution."], [209, 2, 2, 0, "scale", "Shape matrix of the distribution."], [209, 2, 2, 0, "size", "Given a shape of, for example, (m,n,k), m*n*k samples are generated, and packed in an m-by-n-by-k arrangement."], [209, 2, 2, 0, "tol", "Tolerance when checking the rank of shape."]], "randomgen.hc128": [[172, 1, 1, 0, "HC128", "Container for the HC-128 cipher-based pseudo-random number generator"]], "randomgen.hc128.HC128": [[29, 4, 1, 0, "cffi", "CFFI interface"], [30, 4, 1, 0, "ctypes", "ctypes interface"], [172, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [31, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [32, 3, 1, 0, "seed", "Seed the generator"], [172, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [33, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.hc128.HC128.__init__": [[172, 2, 2, 0, "key", "Key for HC128."], [172, 2, 2, 0, "mode", "Deprecated parameter."], [172, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.hc128.HC128.random_raw": [[31, 2, 2, 0, "output", "Output values."], [31, 2, 2, 0, "size", "Output shape."]], "randomgen.hc128.HC128.seed": [[32, 2, 2, 0, "key", "Key for HC128."], [32, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]], "randomgen.jsf": [[174, 1, 1, 0, "JSF", "Container for Jenkins's Fast Small (JSF) pseudo-random number generator"]], "randomgen.jsf.JSF": [[34, 4, 1, 0, "cffi", "CFFI interface"], [35, 4, 1, 0, "ctypes", "ctypes interface"], [174, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [36, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [37, 3, 1, 0, "seed", "Seed the generator"], [174, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [38, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.jsf.JSF.__init__": [[174, 2, 2, 0, "mode", "Deprecated parameter."], [174, 2, 2, 0, "p", "One the the three parameters that defines JSF."], [174, 2, 2, 0, "q", "One the the three parameters that defines JSF."], [174, 2, 2, 0, "r", "One the the three parameters that defines JSF."], [174, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."], [174, 2, 2, 0, "seed_size", "Number of distinct seed values used to initialize JSF."], [174, 2, 2, 0, "size", "Output size of a single iteration of JSF."]], "randomgen.jsf.JSF.random_raw": [[36, 2, 2, 0, "output", "Output values."], [36, 2, 2, 0, "size", "Output shape."]], "randomgen.jsf.JSF.seed": [[37, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."]], "randomgen.lxm": [[176, 1, 1, 0, "LXM", "Container for the LXM pseudo-random number generator."]], "randomgen.lxm.LXM": [[39, 4, 1, 0, "cffi", "CFFI interface"], [40, 4, 1, 0, "ctypes", "ctypes interface"], [41, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated"], [42, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [176, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [43, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [44, 3, 1, 0, "seed", "Seed the generator"], [176, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [45, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.lxm.LXM.__init__": [[176, 2, 2, 0, "b", "The additive constant in the LCG update."], [176, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.lxm.LXM.jump": [[41, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.lxm.LXM.jumped": [[42, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.lxm.LXM.random_raw": [[43, 2, 2, 0, "output", "Output values."], [43, 2, 2, 0, "size", "Output shape."]], "randomgen.lxm.LXM.seed": [[44, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). The input is passed to SeedSequence which produces the values used to initialize the state."]], "randomgen.mt19937": [[177, 1, 1, 0, "MT19937", "Container for the Mersenne Twister pseudo-random number generator."]], "randomgen.mt19937.MT19937": [[46, 4, 1, 0, "cffi", "CFFI interface"], [47, 4, 1, 0, "ctypes", "ctypes interface"], [48, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated."], [49, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [177, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [50, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [51, 3, 1, 0, "seed", "Seed the generator"], [177, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [52, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.mt19937.MT19937.__init__": [[177, 2, 2, 0, "mode", "\"sequence\" uses a SeedSequence to transforms the seed into an initial state."], [177, 2, 2, 0, "numpy_seed", "Set to True to use  the same seeding mechanism as NumPy and so matches NumPy exactly."], [177, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator."]], "randomgen.mt19937.MT19937.jump": [[48, 2, 2, 0, "jumps", "Number of times to jump the state of the bit generator."]], "randomgen.mt19937.MT19937.jumped": [[49, 2, 2, 0, "jumps", "Number of times to jump the state of the bit generator returned"]], "randomgen.mt19937.MT19937.random_raw": [[50, 2, 2, 0, "output", "Output values."], [50, 2, 2, 0, "size", "Output shape."]], "randomgen.mt19937.MT19937.seed": [[51, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator. Can be any integer between 0 and 2**32 - 1 inclusive, an array (or other sequence) of unsigned 32-bit integers, a SeedSequence instance or None (the default)."]], "randomgen.mt64": [[178, 1, 1, 0, "MT64", "Container for the 64-bit Mersenne Twister pseudo-random number generator"]], "randomgen.mt64.MT64": [[53, 4, 1, 0, "cffi", "CFFI interface"], [54, 4, 1, 0, "ctypes", "ctypes interface"], [178, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [55, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [56, 3, 1, 0, "seed", "Seed the generator"], [178, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [57, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.mt64.MT64.__init__": [[178, 2, 2, 0, "mode", "Deprecated parameter."], [178, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator."]], "randomgen.mt64.MT64.random_raw": [[55, 2, 2, 0, "output", "Output values."], [55, 2, 2, 0, "size", "Output shape."]], "randomgen.mt64.MT64.seed": [[56, 2, 2, 0, "seed", "Random seed used to initialize the pseudo-random number generator."]], "randomgen.pcg32": [[179, 1, 1, 0, "PCG32", "Container for the PCG-32 pseudo-random number generator."]], "randomgen.pcg32.PCG32": [[58, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [59, 4, 1, 0, "cffi", "CFFI interface"], [60, 4, 1, 0, "ctypes", "ctypes interface"], [61, 3, 1, 0, "jump", "Jump the state a fixed increment"], [62, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [179, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [63, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [64, 3, 1, 0, "seed", "Seed the generator"], [179, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [65, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.pcg32.PCG32.__init__": [[179, 2, 2, 0, "inc", "The increment in the LCG."], [179, 2, 2, 0, "mode", "Deprecated parameter."], [179, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."]], "randomgen.pcg32.PCG32.advance": [[58, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.pcg32.PCG32.jump": [[61, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.pcg32.PCG32.jumped": [[62, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.pcg32.PCG32.random_raw": [[63, 2, 2, 0, "output", "Output values."], [63, 2, 2, 0, "size", "Output shape."]], "randomgen.pcg32.PCG32.seed": [[64, 2, 2, 0, "inc", "The increment in the LCG."], [64, 2, 2, 0, "seed", "Seed for PCG64."]], "randomgen.pcg64": [[175, 1, 1, 0, "LCG128Mix", "Customizable 128-bit LCG bit generator with output mixing"], [180, 1, 1, 0, "PCG64", "Container for the PCG-64 pseudo-random number generator."], [181, 1, 1, 0, "PCG64DXSM", "Container for the PCG-64 updated with a 64-bit mult using DXSM output func."]], "randomgen.pcg64.LCG128Mix": [[66, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [67, 4, 1, 0, "cffi", "CFFI interface"], [68, 4, 1, 0, "ctypes", "ctypes interface"], [69, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [175, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [70, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [71, 3, 1, 0, "seed", "Seed the generator"], [175, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [72, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.pcg64.LCG128Mix.__init__": [[175, 2, 2, 0, "dxsm_multiplier", "The multiplier to use in the DXSM output function."], [175, 2, 2, 0, "inc", "The increment in the LCG."], [175, 2, 2, 0, "multiplier", "The multipler to use in the LCG."], [175, 2, 2, 0, "output", "The name of the output function or a ctypes function or function pointer with a signature uint64(uint64, uint64)."], [175, 2, 2, 0, "post", "Whether the mix the output before or after the next increment of the LCG is computed."], [175, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer, a sequence of integers, a SeedSequence instance or None (the default)."]], "randomgen.pcg64.LCG128Mix.advance": [[66, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.pcg64.LCG128Mix.jumped": [[69, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.pcg64.LCG128Mix.random_raw": [[70, 2, 2, 0, "output", "Output values."], [70, 2, 2, 0, "size", "Output shape."]], "randomgen.pcg64.LCG128Mix.seed": [[71, 2, 2, 0, "inc", "The increment in the LCG."], [71, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."]], "randomgen.pcg64.PCG64": [[73, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [74, 4, 1, 0, "cffi", "CFFI interface"], [75, 4, 1, 0, "ctypes", "ctypes interface"], [76, 3, 1, 0, "jump", "Jump the state a fixed increment"], [77, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [180, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [78, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [79, 3, 1, 0, "seed", "Seed the generator"], [180, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [80, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.pcg64.PCG64.__init__": [[180, 2, 2, 0, "inc", "The increment in the LCG."], [180, 2, 2, 0, "mode", "\"sequence\" uses a SeedSequence to transforms the seed into an initial state."], [180, 2, 2, 0, "numpy_seed", "Set to True to use  the same seeding mechanism as NumPy and so matches NumPy exactly."], [180, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**128), a SeedSequence instance or None (the default)."], [180, 2, 2, 0, "variant", "Name of PCG64 variant to use."]], "randomgen.pcg64.PCG64.advance": [[73, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.pcg64.PCG64.jump": [[76, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.pcg64.PCG64.jumped": [[77, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.pcg64.PCG64.random_raw": [[78, 2, 2, 0, "output", "Output values."], [78, 2, 2, 0, "size", "Output shape."]], "randomgen.pcg64.PCG64.seed": [[79, 2, 2, 0, "inc", "The increment in the LCG."], [79, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."]], "randomgen.pcg64.PCG64DXSM": [[81, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [82, 4, 1, 0, "cffi", "CFFI interface"], [83, 4, 1, 0, "ctypes", "ctypes interface"], [84, 3, 1, 0, "jump", "Not implemented. Use jumped."], [85, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [181, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [86, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [87, 3, 1, 0, "seed", "Seed the generator"], [181, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [88, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.pcg64.PCG64DXSM.__init__": [[181, 2, 2, 0, "inc", "The increment in the LCG."], [181, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**128), a SeedSequence instance or None (the default)."]], "randomgen.pcg64.PCG64DXSM.advance": [[81, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.pcg64.PCG64DXSM.jump": [[84, 2, 2, "randomgen.pcg64.PCG64DXSM.jump", "iter", "Not implemented. Use jumped."]], "randomgen.pcg64.PCG64DXSM.jumped": [[85, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.pcg64.PCG64DXSM.random_raw": [[86, 2, 2, 0, "output", "Output values."], [86, 2, 2, 0, "size", "Output shape."]], "randomgen.pcg64.PCG64DXSM.seed": [[87, 2, 2, 0, "inc", "The increment in the LCG."], [87, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator."]], "randomgen.philox": [[182, 1, 1, 0, "Philox", "Container for the Philox family of pseudo-random number generators."]], "randomgen.philox.Philox": [[89, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [90, 4, 1, 0, "cffi", "CFFI interface"], [91, 4, 1, 0, "ctypes", "ctypes interface"], [92, 3, 1, 0, "jump", "Jumps the state as-if 2**(W*N/2) random numbers have been generated."], [93, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [182, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [94, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [95, 3, 1, 0, "seed", "Seed the generator"], [182, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [96, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.philox.Philox.__init__": [[182, 2, 2, 0, "counter", "Counter to use in the Philox state."], [182, 2, 2, 0, "key", "Key to use in the Philox state."], [182, 2, 2, 0, "mode", "\"sequence\" uses a SeedSequence to transforms the seed into an initial state."], [182, 2, 2, 0, "number", "Number of values to produce in a single call."], [182, 2, 2, 0, "numpy_seed", "Set to True to use  the same seeding mechanism as NumPy and so matches NumPy exactly."], [182, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, data will be read from /dev/urandom (or the Windows analog) if available."], [182, 2, 2, 0, "width", "Bit width the values produced."]], "randomgen.philox.Philox.advance": [[89, 2, 2, 0, "counter", "Flag indicating whether the advance the counter only or both the counter and the buffer position."], [89, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.philox.Philox.jump": [[92, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.philox.Philox.jumped": [[93, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.philox.Philox.random_raw": [[94, 2, 2, 0, "output", "Output values."], [94, 2, 2, 0, "size", "Output shape."]], "randomgen.philox.Philox.seed": [[95, 2, 2, 0, "counter", "Counter to use in the Philox state."], [95, 2, 2, 0, "key", "Key to use in the Philox state."], [95, 2, 2, 0, "seed", "Random seed initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, data will be read from /dev/urandom (or the Windows analog) if available."]], "randomgen.rdrand": [[183, 1, 1, 0, "RDRAND", "Container for the hardware RDRAND random number generator."], [183, 1, 1, 0, "RaisingLock", "A Lock that wraps threading.Lock can can raise errors."]], "randomgen.rdrand.RDRAND": [[97, 4, 1, 0, "cffi", "CFFI interface"], [98, 4, 1, 0, "ctypes", "ctypes interface"], [99, 3, 1, 0, "jumped", "Returns a new bit generator"], [183, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [100, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [101, 3, 1, 0, "seed", "Compatibility function. Not used."], [183, 4, 1, 0, "seed_seq", "Always None since RDRAND cannot be seeded."], [102, 4, 1, 0, "state", "Get or set the PRNG state"], [103, 4, 1, 0, "success", "Gets the flag indicating that all calls to RDRAND succeeded"]], "randomgen.rdrand.RDRAND.__init__": [[183, 2, 2, 0, "retries", "The number of times to retry."], [183, 2, 2, 0, "seed", "Must be None."]], "randomgen.rdrand.RDRAND.jumped": [[99, 2, 2, 0, "iter", "This parameter is ignored"]], "randomgen.rdrand.RDRAND.random_raw": [[100, 2, 2, 0, "output", "Output values."], [100, 2, 2, 0, "size", "Output shape."]], "randomgen.rdrand.RDRAND.seed": [[101, 2, 2, 0, "seed", "Must be None."]], "randomgen.romu": [[184, 1, 1, 0, "Romu", "Mark A. Overton's quad and trio rotate-multiply-based generators"]], "randomgen.romu.Romu": [[104, 4, 1, 0, "cffi", "CFFI interface"], [105, 4, 1, 0, "ctypes", "ctypes interface"], [106, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [107, 3, 1, 0, "seed", "Seed the generator"], [108, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.romu.Romu.__init__": [[184, 2, 2, 0, "seed", "A seed to initialize the BitGenerator."], [184, 2, 2, 0, "variant", "The variant to use."]], "randomgen.romu.Romu.random_raw": [[106, 2, 2, 0, "output", "Output values."], [106, 2, 2, 0, "size", "Output shape."]], "randomgen.romu.Romu.seed": [[107, 2, 2, "randomgen.romu.Romu.seed", "seed", "Seed the generator"]], "randomgen.sfc": [[185, 1, 1, 0, "SFC64", "Chris Doty-Humphrey's Small Fast Chaotic PRNG with optional Weyl Sequence"]], "randomgen.sfc.SFC64": [[109, 4, 1, 0, "cffi", "CFFI interface"], [110, 4, 1, 0, "ctypes", "ctypes interface"], [111, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [112, 3, 1, 0, "seed", "Seed the generator"], [113, 4, 1, 0, "state", "Get or set the PRNG state"], [114, 3, 1, 0, "weyl_increments", "Generate distinct Weyl increments to construct multiple streams"]], "randomgen.sfc.SFC64.__init__": [[185, 2, 2, 0, "k", "The increment to the Weyl sequence."], [185, 2, 2, 0, "mode", "The default uses a seed sequence to initialize all unspecified values. When using \"numpy\" uses the seed sequence to initialize three values and checks that both w and k are 1."], [185, 2, 2, 0, "numpy_seed", "Set to True to use  the same seeding mechanism as NumPy. Uses the seed sequence to initialize three state values and checks that both w and k are 1."], [185, 2, 2, 0, "seed", "A seed to initialize the BitGenerator."], [185, 2, 2, 0, "w", "The starting value of the Weyl sequence."]], "randomgen.sfc.SFC64.random_raw": [[111, 2, 2, 0, "output", "Output values."], [111, 2, 2, 0, "size", "Output shape."]], "randomgen.sfc.SFC64.seed": [[112, 2, 2, "randomgen.sfc.SFC64.seed", "seed", "Seed the generator"]], "randomgen.sfc.SFC64.weyl_increments": [[114, 2, 2, 0, "max_bits", "Maximum number of non-zero bits in the values returned."], [114, 2, 2, 0, "min_bits", "The minimum number of non-zero bits in the values returned."], [114, 2, 2, 0, "n", "Number of distinct values to generate."]], "randomgen.sfmt": [[186, 1, 1, 0, "SFMT", "Container for the SIMD-based Mersenne Twister pseudo RNG."]], "randomgen.sfmt.SFMT": [[115, 4, 1, 0, "cffi", "CFFI interface"], [116, 4, 1, 0, "ctypes", "ctypes interface"], [117, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated."], [118, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [186, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [119, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [120, 3, 1, 0, "seed", "Seed the generator"], [186, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [121, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.sfmt.SFMT.__init__": [[186, 2, 2, 0, "mode", "Deprecated parameter."], [186, 2, 2, 0, "seed", "Entropy used to initialize the pseudo-random number generator."]], "randomgen.sfmt.SFMT.jump": [[117, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator."]], "randomgen.sfmt.SFMT.jumped": [[118, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.sfmt.SFMT.random_raw": [[119, 2, 2, 0, "output", "Output values."], [119, 2, 2, 0, "size", "Output shape."]], "randomgen.sfmt.SFMT.seed": [[120, 2, 2, 0, "seed", "Entropy used to initialize the pseudo-random number generator."]], "randomgen.speck128": [[187, 1, 1, 0, "SPECK128", "Container for the SPECK (128 x 256) pseudo-random number generator."]], "randomgen.speck128.SPECK128": [[122, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [123, 4, 1, 0, "cffi", "CFFI interface"], [124, 4, 1, 0, "ctypes", "ctypes interface"], [125, 3, 1, 0, "jump", "Jumps the state as-if iter * 2**64 random numbers are generated"], [126, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [187, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [127, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [128, 3, 1, 0, "seed", "Seed the generator"], [187, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [129, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.speck128.SPECK128.__init__": [[187, 2, 2, 0, "counter", "Counter to use in the SPECK128 state."], [187, 2, 2, 0, "key", "Key to use in the SPECK128 state."], [187, 2, 2, 0, "mode", "Deprecated parameter."], [187, 2, 2, 0, "rounds", "Number of rounds of the SPECK algorithm to run."], [187, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**256), a SeedSequence instance or None (the default)."]], "randomgen.speck128.SPECK128.advance": [[122, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.speck128.SPECK128.jump": [[125, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.speck128.SPECK128.jumped": [[126, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.speck128.SPECK128.random_raw": [[127, 2, 2, 0, "output", "Output values."], [127, 2, 2, 0, "size", "Output shape."]], "randomgen.speck128.SPECK128.seed": [[128, 2, 2, 0, "counter", "Integer in [0,2**128) containing the counter position or a 2-element array of uint64 containing the counter"], [128, 2, 2, 0, "key", "Integer in [0,2**256) containing the key or a 4-element array of uint64 containing the key"], [128, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**256), a SeedSequence instance or None (the default)."]], "randomgen.threefry": [[188, 1, 1, 0, "ThreeFry", "Container for the ThreeFry family of pseudo-random number generators."]], "randomgen.threefry.ThreeFry": [[130, 3, 1, 0, "advance", "Advance the underlying RNG as-if delta draws have occurred."], [131, 4, 1, 0, "cffi", "CFFI interface"], [132, 4, 1, 0, "ctypes", "ctypes interface"], [133, 3, 1, 0, "jump", "Jumps the state as-if 2**(W*N/2) random numbers have been generated."], [134, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [188, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [135, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [136, 3, 1, 0, "seed", "Seed the generator"], [188, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [137, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.threefry.ThreeFry.__init__": [[188, 2, 2, 0, "counter", "Counter to use in the ThreeFry state."], [188, 2, 2, 0, "key", "Key to use in the ThreeFry state."], [188, 2, 2, 0, "mode", "Deprecated parameter."], [188, 2, 2, 0, "number", "Number of values to produce in a single call."], [188, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, data will be read from /dev/urandom (or the Windows analog) if available."], [188, 2, 2, 0, "width", "Bit width the values produced."]], "randomgen.threefry.ThreeFry.advance": [[130, 2, 2, 0, "counter", "Flag indicating whether the advance the counter only or both the counter and the buffer position."], [130, 2, 2, 0, "delta", "Number of draws to advance the RNG."]], "randomgen.threefry.ThreeFry.jump": [[133, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.threefry.ThreeFry.jumped": [[134, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.threefry.ThreeFry.random_raw": [[135, 2, 2, 0, "output", "Output values."], [135, 2, 2, 0, "size", "Output shape."]], "randomgen.threefry.ThreeFry.seed": [[136, 2, 2, 0, "counter", "Counter to use in the ThreeFry state."], [136, 2, 2, 0, "key", "Key to use in the ThreeFry state."], [136, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, data will be read from /dev/urandom (or the Windows analog) if available."]], "randomgen.wrapper": [[189, 1, 1, 0, "UserBitGenerator", "Construct a bit generator from  Python functions"]], "randomgen.wrapper.UserBitGenerator": [[138, 4, 1, 0, "cffi", "CFFI interface"], [139, 4, 1, 0, "ctypes", "ctypes interface"], [140, 3, 1, 0, "from_cfunc", "state_getter=None, state_setter=None)"], [141, 3, 1, 0, "from_ctypes", "state_getter=None, state_setter=None)"], [142, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [143, 4, 1, 0, "state", "Get or set the state"]], "randomgen.wrapper.UserBitGenerator.__init__": [[189, 2, 2, 0, "bits", "The number of bits output by the next_raw callable."], [189, 2, 2, 0, "next_32", "A callable with the same signature as as next_raw that always return 32 bits."], [189, 2, 2, 0, "next_64", "A callable with the same signature as as next_raw that always return 64 bits."], [189, 2, 2, 0, "next_double", "A callable with the same signature as as next_raw that always return a random double in [0,1)."], [189, 2, 2, 0, "next_raw", "A callable that returns either 64 or 32 random bits."], [189, 2, 2, 0, "state", "A ctypes pointer to pass into the next functions."], [189, 2, 2, 0, "state_getter", "A callable that returns the state of the bit generator."], [189, 2, 2, 0, "state_setter", "A callable that sets the state of the bit generator."]], "randomgen.wrapper.UserBitGenerator.from_cfunc": [[140, 2, 2, 0, "next_32", "A numba callback with a signature uint32(void) the return the next 32 bits from the underlying PRNG."], [140, 2, 2, 0, "next_64", "A numba callback with a signature uint64(void) the return the next 64 bits from the underlying PRNG."], [140, 2, 2, 0, "next_double", "A numba callback with a signature uint32(void) the return the next double in [0,1) from the underlying PRNG."], [140, 2, 2, 0, "next_raw", "A numba callback with a signature uint64(void) the return the next raw value from the underlying PRNG."], [140, 2, 2, 0, "state", "A void pointer to the state."], [140, 2, 2, 0, "state_getter", "A callable that returns the state of the bit generator."], [140, 2, 2, 0, "state_setter", "A callable that sets the state of the bit generator."]], "randomgen.wrapper.UserBitGenerator.from_ctypes": [[141, 2, 2, 0, "next_32", "A CFunctionType returning ctypes.c_uint64 and taking one ctypes.c_void_p input that returns the next 32 bits from the underlying PRNG."], [141, 2, 2, 0, "next_64", "A CFunctionType returning ctypes.c_uint64 and taking one ctypes.c_void_p input that returns the next 64 bits from the underlying PRNG."], [141, 2, 2, 0, "next_double", "A CFunctionType returning ctypes.c_uint64 and taking one ctypes.c_void_p input that returns the next double in [0,1) value from the underlying PRNG."], [141, 2, 2, 0, "next_raw", "A CFunctionType returning ctypes.c_uint64 and taking one ctypes.c_void_p input that returns the next raw value from the underlying PRNG."], [141, 2, 2, 0, "state", "A void pointer to the state."], [141, 2, 2, 0, "state_getter", "A callable that returns the state of the bit generator."], [141, 2, 2, 0, "state_setter", "A callable that sets the state of the bit generator."]], "randomgen.wrapper.UserBitGenerator.random_raw": [[142, 2, 2, 0, "output", "Output values."], [142, 2, 2, 0, "size", "Output shape."]], "randomgen.xoroshiro128": [[190, 1, 1, 0, "Xoroshiro128", "Container for the xoroshiro128+/++ pseudo-random number generator."]], "randomgen.xoroshiro128.Xoroshiro128": [[144, 4, 1, 0, "cffi", "CFFI interface"], [145, 4, 1, 0, "ctypes", "ctypes interface"], [146, 3, 1, 0, "jump", "Jumps the state as-if 2**64 random numbers have been generated."], [147, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [190, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [148, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [149, 3, 1, 0, "seed", "Seed the generator"], [190, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [150, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.xoroshiro128.Xoroshiro128.__init__": [[190, 2, 2, 0, "mode", "Deprecated parameter."], [190, 2, 2, 0, "plusplus", "Whether to use the ++ version (xoroshiro128++)."], [190, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence, or None (the default)."]], "randomgen.xoroshiro128.Xoroshiro128.jump": [[146, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.xoroshiro128.Xoroshiro128.jumped": [[147, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.xoroshiro128.Xoroshiro128.random_raw": [[148, 2, 2, 0, "output", "Output values."], [148, 2, 2, 0, "size", "Output shape."]], "randomgen.xoroshiro128.Xoroshiro128.seed": [[149, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence, or None (the default)."]], "randomgen.xorshift1024": [[191, 1, 1, 0, "Xorshift1024", "Container for the xorshift1024*\u03c6 pseudo-random number generator."]], "randomgen.xorshift1024.Xorshift1024": [[151, 4, 1, 0, "cffi", "CFFI interface"], [152, 4, 1, 0, "ctypes", "ctypes interface"], [153, 3, 1, 0, "jump", "Jumps the state as-if 2**512 random numbers have been generated"], [154, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [191, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [155, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [156, 3, 1, 0, "seed", "Seed the generator"], [191, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [157, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.xorshift1024.Xorshift1024.__init__": [[191, 2, 2, 0, "mode", "Deprecated parameter."], [191, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.xorshift1024.Xorshift1024.jump": [[153, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.xorshift1024.Xorshift1024.jumped": [[154, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.xorshift1024.Xorshift1024.random_raw": [[155, 2, 2, 0, "output", "Output values."], [155, 2, 2, 0, "size", "Output shape."]], "randomgen.xorshift1024.Xorshift1024.seed": [[156, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]], "randomgen.xoshiro256": [[192, 1, 1, 0, "Xoshiro256", "Container for the xoshiro256** pseudo-random number generator."]], "randomgen.xoshiro256.Xoshiro256": [[158, 4, 1, 0, "cffi", "CFFI interface"], [159, 4, 1, 0, "ctypes", "ctypes interface"], [160, 3, 1, 0, "jump", "Jumps the state as-if 2**128 random numbers have been generated."], [161, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [192, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [162, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [163, 3, 1, 0, "seed", "Seed the generator"], [192, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [164, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.xoshiro256.Xoshiro256.__init__": [[192, 2, 2, 0, "mode", "Deprecated parameter."], [192, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.xoshiro256.Xoshiro256.jump": [[160, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.xoshiro256.Xoshiro256.jumped": [[161, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.xoshiro256.Xoshiro256.random_raw": [[162, 2, 2, 0, "output", "Output values."], [162, 2, 2, 0, "size", "Output shape."]], "randomgen.xoshiro256.Xoshiro256.seed": [[163, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]], "randomgen.xoshiro512": [[193, 1, 1, 0, "Xoshiro512", "Container for the xoshiro512** pseudo-random number generator."]], "randomgen.xoshiro512.Xoshiro512": [[165, 4, 1, 0, "cffi", "CFFI interface"], [166, 4, 1, 0, "ctypes", "ctypes interface"], [167, 3, 1, 0, "jump", "Jumps the state as-if 2**256 random numbers have been generated."], [168, 3, 1, 0, "jumped", "Returns a new bit generator with the state jumped"], [193, 4, 1, 0, "lock", "Lock instance that is shared so that the same bit git generator can be used in multiple Generators without corrupting the state. Code that generates values from a bit generator should hold the bit generator's lock."], [169, 3, 1, 0, "random_raw", "Return randoms as generated by the underlying BitGenerator"], [170, 3, 1, 0, "seed", "Seed the generator"], [193, 4, 1, 0, "seed_seq", "The SeedSequence instance used to initialize the generator if mode is \"sequence\" or is seed is a SeedSequence."], [171, 4, 1, 0, "state", "Get or set the PRNG state"]], "randomgen.xoshiro512.Xoshiro512.__init__": [[193, 2, 2, 0, "mode", "Deprecated parameter."], [193, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default)."]], "randomgen.xoshiro512.Xoshiro512.jump": [[167, 2, 2, 0, "iter", "Number of times to jump the state of the rng."]], "randomgen.xoshiro512.Xoshiro512.jumped": [[168, 2, 2, 0, "iter", "Number of times to jump the state of the bit generator returned"]], "randomgen.xoshiro512.Xoshiro512.random_raw": [[169, 2, 2, 0, "output", "Output values."], [169, 2, 2, 0, "size", "Output shape."]], "randomgen.xoshiro512.Xoshiro512.seed": [[170, 2, 2, 0, "seed", "Entropy initializing the pseudo-random number generator. Can be an integer in [0, 2**64), array of integers in [0, 2**64), a SeedSequence instance or None (the default). If seed is None, then  data is read from /dev/urandom (or the Windows analog) if available."]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:parameter", "3": "py:method", "4": "py:attribute", "5": "py:function"}, "terms": {"": [0, 1, 2, 3, 49, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 207, 216, 219], "0": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 44, 51, 56, 64, 71, 79, 87, 89, 95, 103, 114, 120, 128, 130, 136, 140, 141, 149, 156, 163, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 202, 203, 204, 205, 210, 211, 212, 213, 214, 215, 216, 218], "000": [195, 199, 216], "01": [1, 176], "01769784": 194, "04674949j": 203, "04682163j": 203, "04913229": 203, "06687298j": 203, "06912343j": 203, "08": 195, "09": 176, "0930": 191, "0j": 203, "0x0e": 195, "0x1": 195, "0x11": 195, "0x14": 195, "0x1da942042e4dd58b5": 175, "0x3f": 195, "0x5e": 195, "0x77": 195, "0x94d049bb133111eb": 175, "0xb7": 195, "0xbf58476d1ce4e5b9": 175, "0xd1": 195, "0xdead10cc": 175, "0xf1ea5e": 195, "0xff37f1f758180525": 175, "0xffffffff": 195, "0xffffffffffffffff": 195, "1": [0, 1, 2, 3, 7, 8, 19, 20, 22, 41, 42, 48, 49, 51, 56, 61, 62, 64, 69, 76, 77, 84, 85, 89, 92, 93, 99, 114, 117, 118, 120, 125, 126, 130, 133, 134, 140, 141, 146, 147, 153, 154, 160, 161, 167, 168, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 199, 200, 202, 203, 204, 205, 206, 209, 211, 212, 213, 215, 216, 219], "10": [0, 1, 2, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 190, 191, 192, 193, 194, 195, 199, 213, 216], "100": [183, 195, 204, 213, 216], "1000": [114, 195, 202, 215], "1000000": [195, 199], "10000000": 213, "1000x": [194, 195], "101": 216, "102": 216, "1024": [3, 172, 190, 191, 192, 193, 215], "104": 216, "105": 216, "108": 216, "109": 216, "10941": 217, "11": [0, 194, 195, 216], "110": 216, "111": 216, "112": 216, "114": 216, "11400714819323198486": [61, 62], "11659149": 205, "1167245051188668936": 195, "117": 216, "11749869230777074271": 195, "118": 216, "119": 216, "12": [1, 187, 195, 216], "120": 216, "121": 216, "12103276313412614439": 195, "122": [195, 216], "123": [0, 1, 3, 172, 174, 176, 182, 183, 187, 188, 190, 191, 192, 193], "1234": [0, 1, 3, 172, 174, 176, 179, 180, 181, 182, 187, 188, 190, 191, 192, 193], "12345": 211, "124": 216, "126": 216, "127": 216, "12712143389959007425": 195, "128": [0, 1, 2, 10, 15, 19, 20, 32, 41, 42, 48, 49, 69, 71, 76, 77, 79, 85, 87, 95, 117, 118, 128, 136, 160, 161, 173, 176, 177, 180, 181, 186, 187, 190, 192, 193, 194, 195, 211, 215, 216, 219], "12803009197309261862": 184, "128bit": 0, "128gb": 219, "129": [0, 187, 216], "13": [174, 194, 195, 216, 217, 219], "130": 216, "13020151409549081939": 185, "131": 216, "132": [182, 188], "13259944246262022926": 195, "133411349017971402732463711865589153492": 195, "134": 216, "135": 216, "136": 216, "138": 216, "139": 216, "13933250373249421220": 185, "13952735719045862400": 195, "14": [176, 191, 195, 216], "140": 183, "1402": 191, "1403": 191, "14241860431798867506": 195, "143": 216, "14412717025735663865": 189, "145": 216, "14501513697102443756": 195, "147": 216, "149": 216, "15": [187, 195, 211, 216, 219], "15002187965291974971": 195, "15184288j": 203, "152": 216, "154": 216, "155": 216, "156": 216, "15715724510248929625": 195, "15750249268501108917": 175, "15780814468893899944": 195, "158": 216, "16": [1, 3, 4, 58, 66, 73, 81, 89, 122, 130, 172, 175, 181, 191, 211, 215, 216, 219], "160": 216, "162": 216, "163": 216, "16313": [175, 181], "164": 216, "16430795192718506": 195, "165": 216, "1654503": 205, "167": 216, "168": 216, "17": [0, 1, 89, 130, 174, 182, 187, 188, 211, 212, 213, 216], "170": 216, "171": 213, "17190901158427765818": 195, "172": 216, "17233599j": 203, "17318243661941184039": 189, "174": 216, "17400468283504521969": 195, "175": 216, "176": 216, "177": 216, "178": 216, "17987378307908897868": 195, "18": [211, 216], "18011468": 203, "18034113569054765009": 195, "1805": 217, "181": 216, "182": 216, "183": 216, "18366146": 203, "184": 216, "18419364": 203, "185": 216, "186": 216, "1866397": 203, "189": 216, "19": [195, 211, 216, 219], "190": 216, "192": [184, 216], "193": 216, "195": [216, 219], "196": [182, 188, 216, 219], "1966": [206, 209], "197": 216, "19754723j": 203, "198": 216, "199": [206, 209, 216], "1991": 204, "19937": 215, "1994": [206, 209], "1997": [206, 209], "1998": 178, "1999": 175, "1e": [203, 204], "1ghz": 216, "1j": 203, "1tb": 194, "2": [0, 1, 2, 3, 7, 8, 10, 15, 19, 20, 22, 27, 32, 37, 41, 42, 44, 48, 49, 51, 56, 61, 62, 64, 69, 71, 76, 77, 79, 85, 87, 89, 92, 93, 95, 114, 117, 118, 120, 125, 126, 128, 130, 133, 134, 136, 146, 147, 149, 153, 154, 156, 160, 161, 163, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 195, 197, 199, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219], "20": [1, 49, 177, 195, 211, 216, 219], "2000": [176, 178], "2001": 204, "2003": [176, 191], "2006": [2, 186], "2008": [1, 2, 49, 172, 177, 186], "2009": 174, "2011": [176, 182, 188], "2012": 183, "2014": 191, "2015": [183, 202, 203], "2018": 217, "2019": [0, 176, 187], "202": 216, "2020": [3, 49, 175, 176, 181, 183, 184], "20210501": 194, "203": [198, 206, 209], "205": 216, "206": 216, "208": [213, 216], "2080": 114, "21": [176, 195, 216, 219], "210": 216, "210306068529402873165736369884012333108": 76, "212": 216, "213": 216, "215": 216, "2156737186088199787": 184, "217": 216, "219": 216, "22": [0, 3, 194, 206, 209, 216], "225": 175, "227": 216, "228": 216, "229": 216, "23": [200, 211, 216], "23204345": 205, "234": 216, "23587346j": 203, "24": [195, 216], "242": 216, "244": 216, "246": 216, "249": [175, 216], "250": 216, "2549297995355413924": 195, "255": 185, "256": [1, 15, 32, 95, 128, 136, 167, 168, 172, 184, 185, 187, 192, 193, 215, 219], "26": [184, 211], "260": 175, "264": 216, "27": [174, 175, 216], "2701576j": 203, "271": 216, "2740075917084007745": 195, "278": 216, "279": 216, "28": [1, 176, 216], "28036548": 203, "28145563": 203, "282": 216, "283": 216, "285": 216, "2862933555777941757": 176, "287": 216, "290": [2, 177, 186], "298": [2, 177, 186], "2nd": 204, "3": [3, 49, 114, 174, 175, 176, 177, 178, 181, 182, 184, 185, 188, 191, 195, 203, 204, 205, 206, 209, 211, 213, 216, 219], "30": [175, 178, 216], "30220482": 205, "3035725": 203, "3037000493": 176, "304881062738325533": 195, "31": [175, 195, 216], "312": [56, 178], "31483301": 203, "32": [0, 1, 2, 3, 4, 5, 6, 12, 13, 17, 18, 22, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 51, 53, 54, 58, 59, 60, 66, 67, 68, 73, 74, 75, 81, 82, 83, 89, 90, 91, 97, 98, 104, 105, 109, 110, 114, 115, 116, 120, 122, 123, 124, 130, 131, 132, 138, 139, 140, 141, 144, 145, 151, 152, 158, 159, 165, 166, 172, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 208, 214, 215, 216, 219], "32361134": 203, "325874985469": 185, "32699266": 203, "32777": 172, "33": [0, 1, 182, 187, 188, 216], "3315941531": 195, "3394385948627484371": 219, "34": [187, 216], "348": 178, "35": 216, "35185607": 203, "35360097j": 203, "35399562948360463058890781895381311971": 195, "356": 176, "357": 178, "36": 216, "36159505490948474": 195, "366935": 3, "37": [174, 195, 219], "37548236789240574857439075": 175, "381": 194, "3814417803339974021": 195, "382": [2, 186], "384": 2, "385": [49, 177], "39": [172, 195, 216], "390": [49, 177], "395": [206, 209], "3rd": 204, "4": [0, 1, 3, 15, 95, 128, 136, 174, 175, 176, 182, 184, 185, 187, 188, 189, 191, 192, 193, 195, 203, 211, 213, 215, 216, 219], "405": [206, 209], "4141": 183, "42551611": 203, "44163456j": 203, "44740101": 203, "45": 216, "46716898": 203, "47": 172, "47026247687942121848144207491837523525": 175, "47108547995356098": 205, "48": 216, "4865540595714422341": 195, "489048146361948": 184, "4893028492374823749823": 114, "49": 216, "4976686463289251617": 195, "4986": 172, "4j": 203, "4tb": [194, 219], "5": [176, 195, 199, 202, 203, 205, 211, 213, 215, 216], "50": [172, 185, 215, 219], "5000": 204, "50539209j": 203, "51": 216, "512": [153, 154, 172, 190, 191, 192, 193, 215], "521015634160378615": 189, "5228567175856316": 213, "52338984": 205, "5264292724725465572": 195, "53": [194, 195, 215], "530704699024515781": 195, "5336551313612926520": 195, "54": 216, "54323428": 205, "55": [195, 216], "5553417437478470678": 195, "56": 216, "56994348j": 203, "57": 216, "57787275j": 203, "5897100938578919857511": 219, "59": 216, "59809459": 203, "6": [49, 176, 187, 191, 195, 204, 211, 213, 216], "602963287911976729": 195, "603484028490308141": 215, "607": [2, 186], "61": [206, 209, 216], "62": [195, 216], "622": [2, 186], "623": 178, "624": [51, 120, 177, 186], "6246": 191, "63": [114, 195, 206, 209], "64": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 21, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 39, 40, 43, 44, 46, 47, 50, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 74, 75, 77, 78, 79, 82, 83, 85, 86, 87, 90, 91, 94, 95, 97, 98, 104, 105, 106, 109, 110, 111, 114, 115, 116, 119, 123, 124, 125, 126, 127, 128, 131, 132, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 151, 152, 155, 156, 158, 159, 162, 163, 165, 166, 169, 170, 172, 173, 174, 175, 176, 177, 179, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 199, 208, 211, 214, 215, 216, 219], "64185732j": 203, "64gb": 219, "65": [0, 1, 182, 187, 188], "66": [213, 216], "66462037": 203, "66851489": 194, "67": 216, "68": 175, "69": 216, "7": [174, 194, 195, 197, 203, 213, 216, 219], "71": 216, "72": 216, "73": [206, 209, 216], "73939778j": 203, "74": 216, "75": 216, "75224494": 205, "755828109848996024": 195, "76": 213, "764": [2, 22], "76788821": 203, "768": [177, 186], "77": 216, "7713239619832409074": 189, "78": 216, "79": 216, "79479508": 205, "7j": 203, "8": [0, 1, 176, 178, 184, 191, 194, 195, 203, 204, 216, 219], "80": 216, "8062752282355435850": 185, "81": 216, "8192": 184, "8196": [185, 215, 219], "82": 216, "83": 216, "84": 216, "84832672j": 203, "85": [213, 216], "8509285875904376097169743623867": 3, "85384162": 194, "86316980830225721106033794313786972513572058861498566720023788662568817403978": 219, "86532386": 194, "86649667": 203, "86820401": 205, "87": [206, 209], "87136372517582989555478159403783844777": 195, "87316102": 194, "88380663j": 203, "88447445j": 203, "8870424784319794977": 195, "9": [0, 1, 182, 187, 188, 195, 213, 216], "9007199254740992": 195, "91": 216, "9130649916277841551": 184, "91476019": 203, "91802901j": 203, "93": [0, 1, 187], "936j": 198, "93782402j": 203, "9405893610231781608176235507540826829": 195, "95": 216, "9596734350428388680": 195, "96": [187, 215, 216], "9710": 194, "97279918": 203, "98": 216, "99": 216, "99091858": 205, "99149989": 205, "A": [2, 3, 107, 112, 140, 141, 174, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 195, 196, 197, 200, 203, 204, 206, 209, 214, 215, 219], "As": [182, 188, 218], "By": [175, 181, 219], "For": [4, 10, 15, 44, 58, 64, 66, 73, 81, 89, 95, 114, 122, 128, 130, 136, 156, 194, 214, 215, 216], "If": [0, 1, 2, 3, 9, 10, 14, 15, 21, 22, 26, 27, 31, 32, 36, 37, 43, 44, 50, 51, 55, 56, 63, 64, 70, 71, 78, 79, 86, 87, 89, 94, 95, 100, 101, 106, 107, 111, 112, 114, 119, 120, 127, 128, 130, 135, 136, 140, 141, 142, 143, 148, 149, 155, 156, 162, 163, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 198, 202, 203, 204, 205, 206, 208, 209], "In": [0, 1, 2, 3, 4, 58, 66, 73, 81, 89, 114, 122, 130, 172, 175, 177, 178, 180, 181, 183, 186, 187, 189, 190, 191, 192, 193, 194, 196, 204, 208, 209, 211, 213, 215], "It": [3, 10, 15, 27, 32, 37, 44, 64, 71, 79, 87, 95, 107, 112, 128, 136, 149, 156, 163, 170, 172, 175, 180, 183, 184, 189, 190, 192, 193, 194, 195, 197, 198, 204, 209, 211, 219], "NOT": [183, 196], "No": [49, 177, 183], "Not": [84, 101], "ON": [49, 177], "On": [183, 196, 206, 209], "One": [107, 112, 174, 182, 184, 185, 188, 205], "Such": 204, "The": [0, 1, 2, 3, 4, 8, 10, 15, 20, 32, 42, 44, 49, 58, 61, 62, 64, 66, 69, 71, 73, 76, 77, 79, 81, 85, 87, 89, 93, 95, 102, 114, 118, 122, 126, 128, 130, 134, 136, 147, 154, 161, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 209, 211, 213, 215, 216, 219], "Their": [2, 177, 186], "There": [174, 197, 215], "These": [0, 1, 2, 3, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 195, 197, 199, 204, 208, 215, 219], "To": [89, 130, 180, 182, 183, 205, 219], "With": 183, "_": [0, 1, 2, 177, 182, 183, 186, 187, 188, 190, 191, 192, 193, 213, 215, 219], "__del__": 213, "__init__": [195, 213], "__name__": 195, "_fill": 213, "_has_uint32": 195, "_mm_paus": 183, "_next_32": 195, "_next_64": 195, "_next_doubl": 195, "_next_raw": 195, "_random_gener": 213, "_state": 195, "_uinteg": 195, "ab": [191, 217], "abl": 183, "about": [172, 185, 194, 195, 197, 211, 219], "abov": 219, "abrupt": 194, "absolut": 185, "absolute_import": 194, "ac": 49, "acceler": 216, "accept": [189, 195], "access": [0, 1, 2, 3, 49, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 198, 199, 208, 214], "accord": 195, "acm": [178, 182, 188], "acquir": 183, "across": [189, 194, 215, 219], "activ": 197, "actuari": [202, 203], "ad": [175, 176, 185, 194, 200], "add": [175, 194, 200, 205, 211], "addit": [3, 172, 175, 176, 180, 181, 198, 211, 213, 214, 215], "addition": [180, 182, 215], "address": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 144, 145, 151, 152, 158, 159, 165, 166, 189, 195, 199], "advanc": [0, 1, 2, 173, 175, 176, 177, 179, 180, 181, 182, 186, 187, 188, 190, 191, 192, 193, 194, 195, 211, 213], "advanced_encryption_standard": 0, "ae": [173, 211], "aescount": [0, 1, 172, 187, 194, 197, 211, 214, 215, 216, 219], "aesni": 172, "affect": 194, "after": [100, 175, 195, 199, 213], "again": [10, 15, 27, 32, 37, 44, 64, 71, 79, 87, 95, 107, 112, 128, 136, 149, 156, 163, 170], "against": 194, "agenc": 187, "ahead": [2, 49, 177, 186], "algorithm": [2, 174, 175, 177, 179, 180, 181, 184, 185, 186, 187, 196], "alia": [181, 194], "alias": 180, "align": [199, 213], "all": [0, 1, 2, 9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 103, 106, 111, 119, 127, 135, 142, 148, 155, 162, 169, 176, 177, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 197, 199, 202, 205, 208, 209, 213, 216, 219], "allow": [0, 1, 2, 175, 176, 177, 182, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 199, 211, 213, 214], "along": [199, 204, 215], "alongsid": 211, "also": [2, 3, 71, 89, 107, 112, 130, 173, 174, 177, 178, 180, 182, 183, 184, 185, 186, 191, 194, 197, 199, 211, 215, 216], "alter": 176, "altern": [0, 1, 172, 182, 187, 188, 205, 211, 216], "although": [183, 200, 216], "alwai": [0, 1, 2, 3, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 200, 204, 219], "ambigu": 194, "amd": 183, "amer": [206, 209], "among": 194, "amount": 211, "an": [0, 1, 2, 3, 4, 10, 15, 22, 27, 32, 37, 44, 51, 56, 58, 66, 71, 73, 79, 81, 87, 89, 95, 107, 112, 114, 120, 122, 128, 130, 136, 140, 141, 149, 156, 163, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 203, 204, 209, 211, 213, 215, 216, 217, 219], "analog": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 51, 56, 79, 87, 95, 120, 128, 136, 149, 156, 163, 170, 172, 174, 176, 177, 178, 179, 182, 186, 187, 188, 190, 191, 192, 193, 204], "analysi": [182, 188, 206, 209], "ani": [0, 1, 2, 4, 7, 22, 41, 51, 56, 66, 73, 76, 81, 89, 92, 101, 120, 122, 125, 130, 133, 146, 153, 160, 167, 177, 178, 182, 183, 186, 187, 188, 195, 197, 200, 213, 215, 216, 219], "annal": [206, 209], "anon_func_st": 199, "anoth": [0, 1, 10, 15, 95, 136, 172, 182, 187, 188, 190, 191, 192, 193], "api": [99, 194, 197], "appear": [176, 194], "append": [176, 213, 215, 219], "appli": [175, 194, 195, 199, 204, 209], "applic": [0, 1, 2, 99, 172, 176, 177, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 206, 209, 211, 214, 215, 216], "appropri": 175, "approxim": 204, "april": 184, "ar": [0, 1, 2, 3, 4, 7, 9, 10, 14, 15, 21, 22, 26, 27, 31, 32, 36, 37, 43, 44, 50, 51, 55, 56, 58, 63, 64, 66, 70, 73, 78, 79, 81, 86, 87, 89, 94, 95, 100, 102, 106, 107, 111, 112, 114, 119, 120, 122, 125, 127, 128, 130, 135, 136, 142, 143, 148, 149, 155, 156, 162, 163, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 211, 213, 215, 216, 219], "arbitrari": [0, 1, 175, 179, 180, 181, 182, 187, 188, 211, 215], "arg": 213, "argument": [194, 203, 204, 209, 213, 219], "around": [199, 215], "arrai": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 44, 51, 56, 95, 114, 120, 128, 136, 149, 156, 163, 170, 172, 174, 176, 177, 178, 182, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 199, 203, 205, 206, 209, 213, 215], "arrang": [203, 204, 209], "array_lik": [15, 107, 112, 184, 185], "articl": 183, "arxiv": 217, "asarrai": 199, "assert": 183, "assertionerror": 183, "assess": 195, "assoc": [206, 209], "associ": 209, "assum": [175, 204, 209], "assur": [194, 211], "astyp": 213, "attach": 183, "attempt": 196, "attribut": [174, 213, 219], "audit": 183, "aug": 217, "augment": [2, 186], "author": [194, 211], "auto": 196, "automat": [183, 196, 209], "avail": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 49, 51, 56, 79, 87, 95, 114, 120, 128, 136, 143, 149, 156, 163, 170, 172, 174, 175, 176, 177, 178, 179, 181, 182, 183, 186, 187, 188, 190, 191, 192, 193, 194, 195, 211, 218], "averag": [4, 58, 66, 73, 81, 89, 122, 130, 172, 204, 215], "avoid": 194, "axi": 204, "b": [174, 176, 195, 205], "back": 196, "backward": [89, 130, 194, 204, 212, 216, 219], "bad": 219, "base": [2, 4, 58, 66, 73, 81, 89, 122, 130, 172, 175, 184, 186, 190, 194, 199, 211, 214, 215, 216], "base_gen": 219, "basic": [194, 197, 211], "basic_rng": 197, "beaulieu": 187, "becaus": [203, 204, 209], "beck": 176, "becom": [181, 194], "been": [0, 1, 2, 4, 8, 19, 20, 41, 42, 48, 49, 58, 61, 62, 66, 69, 73, 76, 77, 81, 85, 89, 92, 93, 114, 117, 118, 122, 126, 130, 133, 134, 146, 147, 153, 154, 160, 161, 167, 168, 175, 176, 177, 182, 183, 186, 187, 188, 190, 191, 192, 193, 194, 197, 199, 200, 204, 209, 210, 211, 212, 215, 219], "befor": [0, 1, 10, 15, 95, 136, 175, 180, 182, 183, 187, 188, 194, 195, 196, 204, 209, 212, 213, 219], "began": 211, "begin": [195, 203, 219], "behav": 213, "behavior": [203, 204, 209], "being": [194, 197, 211], "bell": 204, "below": [195, 215, 216, 219], "bernstein": 1, "best": [189, 195, 215, 219], "beta": [206, 209], "better": [174, 175, 176, 179, 180, 181, 211], "between": [0, 2, 4, 22, 51, 56, 58, 64, 66, 73, 81, 89, 114, 120, 122, 130, 174, 177, 178, 186, 187, 194, 202, 203, 211, 215], "bg": [184, 189], "big": [8, 20, 42, 49, 62, 69, 77, 85, 93, 118, 126, 134, 147, 154, 161, 168, 175], "bit": [0, 1, 2, 3, 4, 5, 6, 8, 9, 12, 13, 14, 17, 18, 19, 20, 21, 22, 24, 25, 26, 29, 30, 31, 32, 34, 35, 36, 39, 40, 42, 43, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 62, 63, 66, 67, 68, 69, 70, 73, 74, 75, 77, 78, 79, 81, 82, 83, 85, 86, 87, 89, 90, 91, 93, 94, 97, 98, 99, 104, 105, 106, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 126, 127, 130, 131, 132, 134, 135, 138, 139, 140, 141, 142, 144, 145, 147, 148, 151, 152, 154, 155, 158, 159, 161, 162, 165, 166, 168, 169, 172, 174, 176, 177, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 207, 208, 214, 215, 216, 219], "bit_gen": [3, 114, 175, 184, 185, 195, 219], "bit_gen_st": 195, "bit_gener": [0, 1, 2, 8, 20, 42, 49, 62, 69, 77, 85, 93, 99, 118, 126, 134, 147, 154, 161, 168, 177, 179, 180, 181, 182, 186, 187, 188, 190, 191, 192, 193, 195, 197, 198], "bit_generator_kwarg": 219, "bitgen": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 144, 145, 151, 152, 158, 159, 165, 166, 183, 197, 199], "bitgen_st": 199, "bitgen_t": [194, 199], "bitgener": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 107, 111, 112, 119, 127, 135, 142, 148, 155, 162, 169, 183, 184, 185, 194, 197, 201, 211], "bivari": [202, 203], "blackman": [190, 192, 193], "block": [172, 195, 209, 215], "blocked_rng": 215, "blogspot": 176, "bob": 174, "bool": 103, "both": [0, 1, 10, 15, 32, 71, 89, 95, 128, 130, 136, 172, 182, 185, 187, 188, 190, 194, 195, 199, 202, 216], "bound": [194, 199, 208], "boundscheck": 199, "box": 199, "brank": 219, "break": 194, "bret": 176, "bridg": 183, "bring": 194, "brng": [194, 197], "brng_t": 194, "broadcast": [194, 197, 202, 203, 204, 209, 214], "brook": 176, "bryan": 187, "bt": 219, "buffer": [0, 1, 89, 102, 130, 172, 187, 194], "bug": 194, "buggi": 194, "build": 194, "built": 195, "burtleburtl": 174, "byte": [194, 219], "c": [141, 174, 189, 194, 195, 197, 199, 203, 214], "c1": [204, 209], "c2": [204, 209], "c73ddb7b": 3, "c_": 204, "c_uint64": 141, "c_void_p": [141, 195], "call": [0, 1, 2, 4, 10, 15, 27, 32, 37, 44, 58, 64, 66, 71, 73, 79, 81, 87, 89, 95, 103, 107, 112, 122, 128, 130, 136, 141, 143, 149, 156, 163, 170, 176, 177, 180, 181, 182, 183, 186, 187, 188, 190, 191, 192, 193, 194, 195, 199, 213, 215], "callabl": [140, 141, 189, 195], "callback": [140, 195], "can": [0, 1, 2, 3, 4, 10, 15, 22, 27, 32, 37, 44, 51, 56, 58, 64, 66, 71, 73, 79, 81, 87, 89, 95, 99, 107, 112, 120, 122, 128, 130, 136, 149, 156, 163, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 204, 211, 213, 215], "cannot": [0, 1, 10, 15, 32, 95, 136, 172, 182, 183, 187, 188, 215], "canon": 194, "capabl": [200, 211], "capac": 184, "capsul": [0, 1, 2, 3, 172, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 199], "capsule_nam": 199, "captur": [0, 1, 187], "carefulli": [190, 192, 193], "carlo": [2, 186], "carrai": 195, "cascad": 216, "case": [0, 1, 2, 9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 119, 127, 135, 142, 148, 155, 162, 169, 172, 177, 178, 180, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 205, 206, 208, 215], "cast": [195, 199, 204, 209], "casualti": [202, 203], "caveat": 199, "cc": 203, "cdef": 199, "ceil": 213, "center": [203, 204], "cffi": [194, 199], "cfunc": [175, 195], "cfunctiontyp": 141, "chacha": [172, 173, 199, 211, 214, 215, 216, 219], "chanc": 184, "chang": [89, 130, 175, 190, 195, 198, 214, 219], "chaotic": [183, 185, 214], "char": 199, "cheap": 180, "check": [180, 182, 183, 185, 194, 199, 203, 204, 209, 219], "check_valid": [203, 204, 209], "chi": 3, "child": [3, 175, 184, 215, 219], "children": [175, 215], "choic": [194, 216], "choleski": [203, 204, 209], "choos": 194, "chose": [180, 185], "chosen": [114, 175], "chri": [3, 185], "cimport": 199, "cipher": [32, 214, 215], "circularli": 203, "circumst": [194, 213], "cj": [204, 209], "clark": 187, "class": [0, 1, 2, 3, 9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 106, 111, 119, 127, 135, 142, 148, 155, 162, 169, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 205, 211, 213, 219], "classif": 204, "classmethod": [140, 141], "cleanup": 194, "clear": [176, 183, 195], "clone": [194, 195], "close": [114, 182, 188, 194, 216], "closur": 195, "cm": [180, 198, 214], "cnp": 176, "code": [0, 1, 2, 3, 49, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 190, 191, 192, 193, 194, 195, 199, 219], "coeffici": 185, "collis": 215, "com": [175, 176, 181, 183], "combin": [3, 176, 216], "come": [0, 1, 2, 176, 177, 182, 186, 187, 188, 190, 191, 192, 193], "command": [183, 196], "common": [194, 199, 213, 219], "commonli": 219, "compar": [195, 211, 213], "compat": [0, 1, 2, 3, 89, 99, 101, 130, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 204, 212, 216, 219], "compil": [194, 195, 199, 214], "complet": [194, 195, 210, 211, 212], "complex": [197, 202, 203, 214], "complex_norm": [197, 198, 203, 214], "complex_normal_distribut": [202, 203], "complic": 199, "compon": [202, 203, 211], "comput": [4, 7, 41, 49, 66, 73, 76, 81, 92, 122, 125, 133, 146, 153, 160, 167, 175, 176, 177, 178, 182, 188, 203, 204, 209, 215, 216], "concern": 215, "concurr": 213, "condit": 194, "confer": [182, 188], "configur": [114, 181, 211, 215], "congruenti": [176, 195, 214], "conjunct": 197, "consider": 194, "consist": [0, 1, 2, 3, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194], "const": 199, "constant": [3, 176, 194], "constraint": [176, 197], "construct": [114, 140, 141, 189, 192, 193, 219], "constructor": 213, "consum": [0, 1, 2, 3, 172, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193], "consumpt": 173, "contain": [0, 1, 2, 3, 5, 6, 11, 12, 13, 16, 17, 18, 23, 24, 25, 28, 29, 30, 32, 33, 34, 35, 38, 39, 40, 45, 46, 47, 52, 53, 54, 57, 59, 60, 65, 67, 68, 72, 74, 75, 80, 82, 83, 88, 90, 91, 96, 97, 98, 102, 104, 105, 108, 109, 110, 113, 114, 115, 116, 121, 123, 124, 128, 129, 131, 132, 137, 138, 139, 144, 145, 150, 151, 152, 157, 158, 159, 164, 165, 166, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 199, 207, 211], "content": 183, "contigu": [194, 213], "continu": 205, "convert": [89, 130], "coordin": 204, "copi": [194, 218], "core": [4, 58, 66, 73, 81, 89, 122, 130, 183, 197, 198, 211, 213, 215], "corner": 215, "corr": [191, 217], "correct": 194, "correl": [175, 181, 190, 203, 215], "correspond": 180, "corrupt": [0, 1, 2, 3, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 190, 191, 192, 193], "could": 194, "counter": [1, 3, 10, 15, 89, 95, 128, 130, 136, 173, 185, 194, 211, 215], "coupl": 175, "cov": [203, 204, 209], "covari": [202, 203, 204, 206, 209], "cpcg": 175, "cpointer": 195, "cpu": 183, "cpu_count": 213, "cpython": 199, "cr": 1, "creat": [175, 176, 195, 213, 215], "creation": 213, "cryptograph": [0, 3, 172, 182, 187, 188, 196, 211, 214], "cryptographi": [211, 216], "ctype": [140, 141, 175, 189, 194, 195, 199], "current": [2, 173, 177, 178, 186, 194, 199], "curv": 204, "custom": 175, "customiz": 175, "cycl": [172, 176, 183, 185], "cython": [189, 194, 195, 211], "d": [0, 1, 174, 176, 195, 203, 204, 205], "d0fc": 3, "d1": 209, "d2": 209, "danger": [175, 181], "daniel": 217, "data": [0, 1, 3, 10, 15, 27, 32, 37, 79, 87, 95, 128, 136, 149, 156, 163, 170, 172, 174, 176, 179, 182, 187, 188, 190, 191, 192, 193, 199, 204, 219], "data_a": 195, "david": [176, 182, 188, 190, 192, 193], "decemb": 176, "decis": 197, "decomposit": [203, 204, 209], "decor": 195, "deem": 211, "def": [175, 189, 195, 199, 213], "default": [0, 1, 2, 3, 9, 10, 14, 15, 21, 22, 26, 27, 31, 32, 36, 37, 43, 44, 50, 51, 55, 56, 63, 70, 71, 78, 79, 86, 87, 89, 94, 95, 100, 106, 111, 114, 119, 120, 127, 128, 130, 135, 136, 142, 148, 149, 155, 156, 162, 163, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 198, 202, 203, 204, 205, 206, 208, 209, 215, 219], "default_rng": 219, "defin": [174, 175, 194, 211], "definit": [202, 203, 204], "degre": [206, 209], "delta": [4, 58, 66, 73, 81, 89, 122, 130], "delta_new": [89, 130], "demonstr": [189, 214], "depend": [174, 183, 185, 195, 203, 215], "deprec": [0, 1, 2, 172, 174, 178, 179, 186, 187, 188, 190, 191, 192, 193, 194, 197, 218], "deprecationwarn": [194, 197], "deriv": [107, 112, 176, 184, 185], "describ": [11, 16, 23, 28, 33, 38, 45, 52, 57, 65, 72, 80, 88, 96, 102, 108, 113, 121, 129, 137, 150, 157, 164, 171, 207], "design": [0, 1, 182, 183, 187, 188, 199], "desir": 205, "detail": [10, 15, 44, 64, 95, 128, 136, 156, 211], "detect": [183, 215], "determin": [182, 183, 188, 204, 205, 209], "determinist": [183, 194], "dev": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 51, 56, 79, 87, 95, 120, 128, 136, 149, 156, 163, 170, 172, 174, 176, 177, 178, 179, 182, 186, 187, 188, 190, 191, 192, 193, 195, 196, 213, 214], "develop": [172, 183], "deviat": [202, 204, 219], "df": [206, 209], "di": [176, 190, 191, 192, 193], "diag": 203, "diagon": 204, "dict": [11, 16, 23, 28, 33, 38, 45, 52, 57, 65, 72, 80, 88, 96, 102, 108, 113, 121, 129, 137, 150, 157, 164, 171, 195, 207], "dictionari": [11, 16, 23, 28, 33, 38, 45, 52, 57, 65, 72, 80, 88, 96, 102, 108, 113, 121, 129, 137, 150, 157, 164, 171, 207], "did": 194, "differ": [0, 1, 4, 58, 66, 73, 81, 89, 122, 130, 175, 179, 180, 181, 182, 185, 187, 188, 192, 193, 195, 215], "difficult": 215, "digit": 183, "dim": [206, 209], "dimens": [204, 206, 209], "dimension": [178, 203, 204], "direct": 214, "directli": [0, 1, 2, 3, 9, 10, 14, 15, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 95, 106, 111, 119, 127, 135, 136, 142, 148, 155, 162, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 199, 206, 207, 209, 211, 213], "discuss": [3, 175], "disjoint": 49, "distinct": [0, 1, 2, 114, 172, 174, 176, 177, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 211, 216, 219], "distribut": [0, 1, 4, 58, 66, 73, 81, 89, 122, 130, 187, 194, 197, 199, 200, 202, 203, 204, 205, 206, 209, 211, 213, 214, 215, 216], "distutil": 194, "divid": [61, 62, 69, 76, 77, 85], "dk": 209, "dll": [195, 199], "do": [0, 1, 2, 172, 173, 174, 178, 179, 186, 187, 188, 190, 191, 192, 193, 194, 213, 216], "doc": 194, "docstr": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 106, 111, 119, 127, 135, 142, 148, 155, 162, 169, 194], "document": [140, 141, 189, 194, 211], "doe": [183, 194, 195, 196, 207, 213, 215, 218], "done": 194, "doti": [3, 185], "doubl": [0, 1, 3, 5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 140, 141, 144, 145, 151, 152, 158, 159, 165, 166, 172, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 199, 204, 209], "dougla": 187, "draw": [0, 1, 4, 58, 66, 73, 81, 89, 114, 122, 130, 187, 194, 202, 203, 204, 206, 209, 211, 215], "drawn": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 119, 127, 135, 142, 148, 155, 162, 169, 196, 202, 203, 204, 205, 206, 208, 215], "drng": 183, "dror": [182, 188], "dsfmt": [173, 194, 211, 214, 215, 216, 219], "dsfmt\u2074": 219, "dtype": [189, 194, 195, 205, 215], "duda": 204, "due": [213, 219], "dure": 183, "dxsm": [173, 175, 180, 194, 198, 211, 214, 216, 219], "dxsm_mult": 175, "dxsm_multipli": 175, "d\u0131az": [206, 209], "e": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 119, 127, 135, 142, 148, 155, 162, 169, 173, 174, 175, 179, 180, 181, 182, 183, 185, 188, 195, 196, 197, 202, 203, 204, 205, 206, 208, 212, 214], "each": [0, 1, 2, 176, 177, 179, 180, 181, 182, 183, 185, 186, 187, 188, 190, 191, 192, 193, 195, 203, 204, 206, 209, 213, 219], "easi": [182, 188], "ecrypt": 172, "ecuy": [2, 49, 175, 177, 186], "ed": 204, "edg": 194, "edu": 172, "effect": [196, 208], "effici": [2, 49, 173, 175, 177, 179, 180, 181, 186], "efiix64": [3, 173, 194, 211, 216, 219], "efiix64x384": 3, "eg": [194, 198, 203], "eigen": [203, 204, 209], "eigenvalu": 209, "eigh": [203, 204, 209], "either": [0, 1, 2, 10, 15, 95, 114, 136, 172, 174, 177, 178, 180, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 199, 208, 219], "element": [0, 1, 2, 3, 10, 15, 89, 95, 128, 130, 136, 172, 174, 176, 177, 178, 182, 186, 187, 188, 190, 191, 192, 193, 204], "elif": 219, "els": [79, 87, 195, 219], "empti": [194, 199, 213], "en": [0, 183, 202, 203], "enabl": [211, 215], "encod": [182, 188, 215], "encount": 194, "encrypt": [0, 172, 187], "end": [174, 203], "enhanc": [176, 194], "enough": 215, "ensur": [0, 1, 2, 4, 7, 41, 66, 73, 76, 81, 92, 103, 122, 125, 133, 146, 153, 160, 167, 176, 177, 182, 183, 186, 187, 188, 190, 191, 192, 193, 195, 215, 219], "entri": 204, "entropi": [0, 1, 2, 27, 44, 64, 71, 79, 87, 107, 112, 120, 128, 136, 149, 156, 163, 170, 175, 176, 177, 179, 180, 181, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 211, 215, 219], "equal": [204, 216], "equidistribut": 178, "erg": 204, "erron": 194, "error": 183, "escap": 219, "especi": 184, "essenti": 215, "estream": 172, "eu": 172, "eugen": 176, "even": [1, 102, 176, 182, 185, 188, 213], "ever": 183, "everi": [182, 188], "evolut": 211, "evolv": 195, "exact": [4, 7, 41, 66, 73, 76, 81, 92, 122, 125, 133, 146, 153, 160, 167, 215], "exactli": [177, 180, 182], "examin": [195, 199, 219], "exampl": [0, 1, 3, 4, 58, 66, 73, 81, 89, 114, 122, 130, 140, 141, 172, 174, 175, 176, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 202, 203, 204, 205, 209, 213, 214, 215], "exce": 183, "excel": [192, 193, 216], "except": [180, 183, 194, 195, 197, 203, 219], "excess": 219, "exclud": 206, "execut": 183, "executor": 213, "exhaust": 194, "exist": [189, 199, 200, 213], "exit": 183, "exot": 211, "expand": [183, 219], "expect": [172, 185, 206], "expens": 215, "experi": [211, 214], "experiment": [191, 211], "explor": 191, "expon": 216, "exponenti": 194, "export": 199, "expos": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 106, 111, 119, 127, 135, 142, 148, 155, 162, 169, 195, 198, 208, 211], "extend": [194, 200, 211, 219], "extendedgener": [194, 197, 198, 200, 211], "extern": [175, 180, 181, 195], "extra": 219, "extrem": 184, "ey": [203, 206], "f": [195, 199, 205], "f2": [49, 177], "face": 197, "factor": [203, 204, 209], "fail": [100, 183, 194, 196, 219], "failur": [103, 183, 194, 219], "fall": [196, 202, 203], "fallback": [194, 196], "fals": [89, 103, 130, 177, 180, 182, 185, 190, 195, 199, 206, 213, 219], "famili": [1, 175, 179, 180, 181, 182, 188, 216, 219], "fast": [2, 3, 172, 175, 177, 179, 180, 181, 184, 185, 189, 192, 193, 194, 195, 197, 211, 213, 214, 216, 217], "faster": [3, 182, 188, 191, 203, 204, 209, 216], "fastest": [172, 194, 203, 204, 209, 216], "favor": 194, "featur": [0, 1, 2, 3, 172, 175, 176, 177, 179, 180, 181, 182, 183, 186, 187, 188, 190, 191, 192, 193, 194, 197], "feiveson": [206, 209], "few": [185, 194, 195, 197], "fewer": [185, 215, 219], "file": [195, 199], "fill": [102, 199, 213], "filler": 194, "final": [1, 114, 176, 183, 194, 195, 199, 204, 209, 215], "finalist": 172, "fine": 184, "first": [0, 114, 176, 183, 185, 195, 199, 213, 215, 219], "five": [211, 215], "fix": [0, 1, 2, 3, 61, 76, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 214, 215], "flag": [89, 103, 130, 183, 195, 206], "flaw": 194, "float": [194, 195, 205, 209], "float128": 194, "float32": [195, 205], "float64": 205, "fold": 219, "folder": 199, "follow": [204, 216], "form": [215, 219], "fortran": 194, "forum": [202, 203], "four": 213, "frac": 203, "fran\u00e7oi": [49, 177], "freedom": [206, 209], "frequenc": 190, "fresh": [107, 112, 184, 185], "from": [0, 1, 2, 4, 10, 15, 22, 27, 32, 37, 51, 56, 58, 66, 73, 79, 81, 87, 89, 95, 107, 112, 114, 120, 122, 128, 130, 136, 140, 141, 149, 156, 163, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 198, 199, 202, 203, 204, 205, 206, 209, 211, 213, 215, 216, 218, 219], "from_cfunc": 195, "full": [176, 199, 204, 212, 215], "fulli": 194, "func": 181, "function": [0, 1, 2, 3, 5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 101, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 140, 141, 143, 144, 145, 151, 152, 158, 159, 165, 166, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 207, 209, 211, 215], "further": 191, "futur": [173, 181, 194, 211, 213, 218], "futurewarn": 197, "g": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 119, 127, 135, 142, 148, 155, 162, 169, 173, 174, 183, 195, 196, 197, 199, 202, 204, 205, 206, 208, 209, 212, 214], "g1": 203, "g2": 203, "gain": [194, 213], "gamma": [194, 202, 203, 216], "garc\u0131a": [206, 209], "gaussian": [202, 203, 204, 214], "gb": 219, "gb\u00b9": 219, "gen": [183, 195, 198, 216], "gener": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 178, 194, 195, 196, 197, 200, 214, 216, 217, 219], "genrat": 195, "geometr": [204, 216], "georg": [176, 191], "get": [11, 16, 23, 28, 33, 38, 45, 52, 57, 65, 72, 80, 88, 96, 102, 103, 108, 113, 121, 129, 137, 140, 141, 143, 150, 157, 164, 171, 173, 189, 195, 201, 207], "getter": 195, "gil": 183, "git": [0, 1, 2, 3, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 190, 191, 192, 193], "github": [175, 181, 187], "given": [4, 9, 14, 21, 26, 31, 36, 43, 50, 55, 58, 63, 66, 70, 73, 78, 81, 86, 89, 94, 100, 106, 111, 119, 122, 127, 130, 135, 142, 148, 155, 162, 169, 196, 202, 203, 204, 205, 206, 208, 209, 215], "gj": 203, "go": 194, "goal": [200, 211], "golden": [69, 76, 77, 85, 215], "good": [175, 179, 180, 181, 216], "gov": 176, "guarante": [0, 1, 2, 3, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 204, 219], "gui": 176, "guid": [183, 187], "gumbel": 194, "h": [206, 209], "ha": [0, 1, 49, 89, 114, 130, 175, 176, 179, 180, 181, 182, 183, 184, 185, 187, 188, 190, 191, 192, 193, 194, 197, 200, 204, 206, 209, 210, 211, 212, 213, 219], "half": [175, 194, 195, 205], "halliwel": [202, 203], "handcraft": 190, "handl": 194, "happen": [103, 183], "haramoto": [2, 49, 177, 186], "hardwar": [214, 215, 216], "hart": 204, "has_uint": 195, "has_uint32": 195, "hash": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 51, 56, 79, 87, 95, 120, 128, 136, 149, 156, 163, 170, 172, 174, 175, 176, 177, 178, 179, 182, 186, 187, 188, 190, 191, 192, 193, 194, 196], "have": [0, 1, 2, 4, 8, 19, 20, 41, 42, 48, 49, 58, 61, 62, 66, 69, 73, 76, 77, 81, 85, 89, 92, 93, 117, 118, 122, 126, 130, 133, 134, 146, 147, 153, 154, 160, 161, 167, 168, 175, 176, 177, 182, 183, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 199, 200, 203, 204, 205, 206, 209, 211, 212, 215, 216, 219], "hc": 32, "hc128": [172, 173, 211, 214, 215, 216, 219], "hc128_p3": 172, "he": 176, "heavili": 183, "held": [183, 195], "helper": 215, "here": [2, 186, 195], "hi": 175, "high": [1, 182, 184, 188, 194, 195, 199, 211], "higher": [174, 195, 204], "hill": 204, "hiroshi": [2, 49, 177, 186], "hiroshima": 49, "hold": [0, 1, 2, 3, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 190, 191, 192, 193], "home": 172, "hongjun": 172, "hood": 195, "horner": 49, "how": [195, 199, 211, 215], "howev": [183, 215], "html": [1, 172, 174, 176, 183, 185], "http": [0, 1, 3, 49, 172, 174, 175, 176, 179, 180, 181, 183, 184, 185, 187, 190, 191, 192, 193, 202, 203, 217], "humphrei": [3, 185], "hypergeometr": 194, "i": [0, 1, 2, 3, 4, 7, 8, 9, 10, 14, 15, 20, 21, 22, 26, 27, 31, 32, 36, 37, 41, 42, 43, 44, 49, 50, 51, 55, 56, 58, 61, 62, 63, 64, 66, 69, 70, 71, 73, 76, 77, 78, 79, 81, 85, 86, 87, 89, 92, 93, 94, 95, 99, 100, 101, 102, 103, 106, 107, 111, 112, 114, 118, 119, 120, 122, 125, 126, 127, 128, 130, 133, 134, 135, 136, 142, 146, 147, 148, 149, 153, 154, 155, 156, 160, 161, 162, 163, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 211, 213, 214, 215, 216, 218, 219], "id": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 51, 56, 79, 87, 95, 120, 128, 136, 149, 156, 163, 170, 172, 174, 176, 177, 178, 179, 182, 186, 187, 188, 190, 191, 192, 193, 196], "ident": [180, 182, 195, 203, 204, 206, 211, 219], "identifi": [203, 206, 209], "idx": 189, "ignor": 99, "ii": [203, 204], "iii": 176, "ij": 204, "im": [202, 203], "imaginari": [202, 203], "immateri": 194, "immedi": 219, "impact": 197, "implement": [2, 49, 84, 174, 175, 179, 180, 181, 183, 185, 186, 187, 189, 191, 194, 195, 199, 215], "implementationguide1": 187, "implemnt": 195, "impli": [202, 203], "import": [0, 1, 2, 3, 114, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 203, 204, 211, 213, 215, 218, 219], "impress": 195, "improv": [1, 176, 187, 190, 194, 211], "inbound": 194, "inc": [64, 71, 79, 87, 175, 179, 180, 181, 182, 195], "includ": [173, 175, 194, 199, 204, 211, 214, 215, 219], "inclus": [2, 22, 51, 56, 120, 176, 177, 178, 186, 211], "incorpor": [185, 211], "incorrect": 194, "increas": [174, 194], "increment": [0, 1, 61, 64, 71, 76, 79, 87, 114, 175, 179, 180, 181, 182, 185, 187, 188, 190, 191, 192, 193, 194, 195, 214, 215, 216, 219], "independ": 211, "index": [172, 177, 178, 211, 215], "indic": [2, 89, 103, 130, 186, 195, 204, 206, 215, 219], "individu": 194, "ineffici": 194, "inform": [11, 16, 23, 28, 33, 38, 45, 49, 52, 57, 65, 72, 80, 88, 96, 102, 108, 113, 121, 129, 137, 150, 157, 164, 171, 177, 194, 199, 207, 211], "inher": 199, "inherit": 194, "initi": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 44, 51, 56, 64, 71, 79, 87, 95, 107, 112, 120, 128, 136, 149, 156, 163, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 215, 216, 219], "inlin": 195, "inner": [206, 209], "innov": 211, "input": [0, 1, 2, 44, 140, 141, 172, 177, 178, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 203, 204, 206, 209, 211, 215], "insid": 199, "inspect": 183, "instanc": [0, 1, 2, 3, 8, 10, 15, 20, 22, 27, 32, 42, 44, 49, 51, 56, 62, 69, 71, 77, 79, 85, 87, 93, 95, 99, 107, 112, 118, 120, 126, 128, 134, 136, 147, 154, 156, 161, 163, 168, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 197, 198, 201, 215], "instant": [195, 198], "instead": [183, 194, 204, 218], "instruct": [100, 183, 215], "int": [0, 1, 10, 15, 95, 107, 112, 136, 175, 180, 181, 182, 184, 185, 187, 188, 189, 195, 196, 208, 213, 215], "int64": 194, "int_": 195, "integ": [0, 1, 2, 3, 4, 5, 6, 10, 12, 13, 15, 17, 18, 22, 24, 25, 27, 29, 30, 32, 34, 35, 37, 39, 40, 44, 46, 47, 51, 53, 54, 56, 58, 59, 60, 64, 66, 67, 68, 71, 73, 74, 75, 79, 81, 82, 83, 87, 89, 90, 91, 95, 97, 98, 104, 105, 109, 110, 114, 115, 116, 120, 122, 123, 124, 128, 130, 131, 132, 136, 138, 139, 144, 145, 149, 151, 152, 156, 158, 159, 163, 165, 166, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 199, 208, 214, 215, 217], "integr": 194, "intel": [183, 194, 216], "interest": 200, "interfac": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 141, 144, 145, 151, 152, 158, 159, 165, 166, 194, 195, 199], "intern": [182, 188, 194], "intertwin": 219, "interv": [194, 205, 217], "intervent": 183, "intrins": 183, "intrinsicsguid": 183, "introduc": 211, "invalid": [183, 194, 199], "invert": 185, "involv": [189, 195], "io": 187, "irrespect": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 106, 111, 119, 127, 135, 142, 148, 155, 162, 169], "isinst": 195, "issu": [114, 175, 181, 183, 194, 195, 197, 219], "iter": [7, 8, 19, 20, 41, 42, 61, 62, 69, 76, 77, 84, 85, 92, 93, 99, 117, 118, 125, 126, 133, 134, 146, 147, 153, 154, 160, 161, 167, 168, 174, 184, 185, 199], "its": [200, 204], "itself": 219, "ivi": 183, "j": [1, 202, 203, 204, 206, 209], "januari": 187, "jason": 187, "java": [176, 194], "jep": 176, "jit": [195, 199], "john": [182, 188], "jour": [206, 209], "journal": [49, 176, 177, 191, 206, 209], "jp": 49, "jsf": [173, 174, 195, 211, 214, 216, 219], "jsf32": 216, "jsf_next": 195, "jsf_next_sig": 195, "jsf_state": 195, "jsf_ubg": 195, "juli": 183, "jump": [0, 1, 2, 173, 176, 177, 182, 186, 187, 188, 190, 191, 192, 193, 194, 197, 211, 213, 219], "june": [0, 3, 175, 176, 181, 184], "j\u00e1imez": [206, 209], "k": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 114, 119, 127, 135, 142, 148, 155, 162, 169, 182, 185, 188, 195, 196, 202, 203, 204, 205, 206, 208, 209, 215, 216, 219], "kei": [0, 1, 10, 15, 32, 95, 128, 136, 172, 182, 187, 188, 194, 195, 199, 211, 216], "keystream": 172, "keyword": [194, 213, 219], "known": [3, 197, 219], "l": [2, 49, 175, 177, 186, 206, 209], "lake": 216, "landingpag": 183, "laplac": 194, "larg": [114, 184, 187, 194, 213, 215, 216, 219], "larger": [184, 190, 213], "largest": 209, "last": [183, 185, 213], "last_bg": 213, "last_rng": 215, "later": 183, "latest": 194, "latter": 219, "lattic": 175, "lcg": [64, 71, 79, 87, 173, 176, 179, 180, 181, 194, 195, 211], "lcg128mix": [175, 181, 194, 211, 214, 215, 219], "lcg_mult": 175, "lead": [189, 194, 195, 204], "least": [185, 194], "left": [174, 203], "legaci": [194, 197, 211], "legacygener": 194, "leigh": [202, 203], "lemir": [194, 217], "len": 215, "length": [172, 185, 219], "less": [58, 66, 73, 81, 89, 130, 183, 203, 204, 209], "let": 199, "level": [0, 1, 2, 3, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 204], "libnpyrandom": 194, "librari": 195, "like": [114, 181, 194, 196, 197, 204, 209, 211], "limit": [209, 214, 215, 219], "line": [183, 194], "linear": [2, 49, 176, 177, 186, 190, 192, 193, 195], "linux": 216, "list": [174, 175, 185, 204, 211, 215, 219], "liter": 195, "littl": 195, "live": 213, "llnl": 176, "lnc": 172, "lo": 175, "loc": [202, 203], "local": 215, "locat": [0, 187, 195, 204], "lock": [0, 1, 2, 3, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 187, 188, 190, 191, 192, 193], "log": [199, 211, 214], "logist": 194, "logseri": 194, "long": [194, 199, 213, 215], "longdoubl": [194, 205], "longer": 194, "look": 195, "loop": [195, 213], "loui": 187, "low": [0, 1, 2, 3, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 199, 219], "lower": [32, 172, 175, 183, 195], "lxm": [173, 194, 211, 214, 215, 216, 219], "m": [9, 14, 21, 26, 31, 36, 43, 49, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 119, 127, 135, 142, 148, 155, 162, 169, 175, 178, 180, 181, 182, 184, 188, 195, 196, 202, 203, 204, 205, 206, 208, 209, 213], "m1": [203, 204], "m2": [203, 204], "machin": 196, "made": [4, 58, 66, 73, 81, 89, 122, 130, 211, 215], "magnitud": 195, "mai": [49, 107, 112, 114, 173, 184, 185, 200, 203], "main": [2, 177, 178, 186, 194, 197, 211], "maintain": [197, 200], "mainten": 197, "make": [0, 1, 2, 3, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 196, 213, 219], "makoto": [2, 49, 177, 186], "manag": 195, "mani": [114, 174, 183, 194, 197, 211, 215, 219], "manipul": 207, "manual": [103, 183], "manylinux": 194, "map": [182, 185, 188, 214], "mardia": [206, 209], "mark": [182, 184, 188, 219], "marsaglia": [176, 191], "massiv": 183, "mat": 49, "match": [49, 177, 180, 182, 194, 195, 205], "math": 49, "mathemat": 175, "mathrm": 203, "matplotlib": 204, "matrix": [202, 203, 204, 206, 209], "matsumoto": [2, 49, 177, 178, 186, 191], "max_bit": 114, "maximum": [114, 183, 219], "mcgraw": 204, "mean": [183, 185, 195, 202, 203, 204, 213, 216], "mechan": [177, 180, 182, 185], "melissa": [175, 179, 180, 181], "member": [199, 219], "memori": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 144, 145, 151, 152, 158, 159, 165, 166, 189, 195], "merg": [200, 211], "mersenn": [194, 214, 216, 219], "method": [0, 1, 2, 4, 9, 10, 14, 15, 21, 26, 27, 31, 32, 36, 37, 43, 44, 49, 50, 55, 58, 63, 64, 66, 70, 71, 73, 78, 79, 81, 86, 87, 89, 94, 95, 106, 107, 111, 112, 114, 119, 122, 127, 128, 130, 135, 136, 142, 148, 149, 155, 156, 162, 163, 169, 170, 173, 175, 176, 177, 179, 180, 181, 182, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 200, 203, 204, 206, 208, 209, 211, 215, 219], "might": [185, 187], "migrat": 200, "min_bit": 114, "minim": 199, "minimum": [114, 185, 194], "mix": [173, 176, 180, 184, 185, 194, 211], "mixer": [1, 175, 180], "mk": [203, 204], "mod": [175, 176, 180, 181], "mode": [0, 1, 2, 3, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195], "model": [178, 216], "moder": [213, 215], "modern": [194, 211], "modifi": 49, "modul": [2, 177, 178, 186, 211], "modulo": [89, 130], "modulu": 195, "mont": [2, 186], "mora": [182, 188], "more": [1, 4, 58, 66, 73, 81, 89, 122, 130, 183, 189, 194, 197, 199, 211, 215], "most": [114, 183, 189, 194, 204, 208, 211, 215, 219], "move": [194, 197], "mrng": 213, "mt": [49, 219], "mt19937": [173, 194, 198, 211, 214, 215, 216, 219], "mt19937\u2074": 219, "mt64": [173, 178, 194, 211, 214, 216], "mu": 203, "much": 183, "muller": 199, "mult": 181, "multibuild": 194, "multidimension": 194, "multinomi": 194, "multinorm": 204, "multipl": [0, 1, 2, 3, 49, 114, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 190, 191, 192, 193, 194, 197, 204, 211, 213, 215, 219], "multipli": [173, 175, 180, 194, 195, 205, 211, 215], "multiprocess": 213, "multithread": 211, "multithreadedrng": 213, "multivari": [203, 204, 206, 209, 214], "multivariate_complex_norm": 194, "multivariate_norm": [194, 197, 203, 214], "murmur3": [175, 176], "murmur3_mix": 175, "murmurhash3": 176, "must": [0, 1, 2, 3, 58, 66, 71, 73, 81, 89, 101, 114, 130, 140, 141, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 199, 202, 203, 204, 205, 209, 212, 215], "mutsuo": [2, 186], "n": [0, 9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 89, 92, 94, 100, 106, 111, 114, 119, 127, 130, 133, 135, 142, 148, 155, 162, 169, 175, 180, 181, 182, 188, 195, 196, 199, 202, 203, 204, 205, 206, 208, 209, 213, 216], "name": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 144, 145, 151, 152, 158, 159, 165, 166, 175, 180, 182, 188, 194, 195, 197, 205], "namedtupl": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 144, 145, 151, 152, 158, 159, 165, 166], "nan": 194, "nation": 187, "nativ": 195, "natur": 219, "nb": 199, "ndarrai": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 114, 119, 127, 135, 142, 148, 155, 162, 169, 196, 202, 203, 204, 205, 206, 208, 209], "necessari": 183, "necessarili": 189, "need": [183, 194, 195, 199, 213, 215, 216], "neg": [89, 130, 204], "neglig": 215, "neill": [175, 179, 180, 181], "net": [3, 174, 176, 185], "network": [182, 188], "never": 102, "new": [8, 20, 42, 49, 62, 69, 77, 85, 93, 99, 118, 126, 134, 147, 154, 161, 168, 176, 182, 188, 194, 195, 197, 204, 215], "new_kei": 215, "newer": 216, "next": [0, 140, 141, 175, 183, 187, 189, 194, 195, 199, 216], "next_32": [140, 141, 189, 195], "next_64": [140, 141, 189, 195], "next_doubl": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 140, 141, 144, 145, 151, 152, 158, 159, 165, 166, 189, 195, 199], "next_gen": 215, "next_raw": [140, 141, 189, 195, 199], "next_uint32": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 144, 145, 151, 152, 158, 159, 165, 166, 199], "next_uint64": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 144, 145, 151, 152, 158, 159, 165, 166, 199], "next_valu": 195, "nextgen": 200, "nishimura": [49, 177, 178], "njsf": 195, "node4": 176, "nois": 194, "non": [0, 1, 114, 179, 180, 181, 182, 187, 188, 190, 191, 192, 193, 204, 206, 211, 219], "noncryptograph": 174, "none": [0, 1, 2, 3, 9, 10, 14, 15, 21, 22, 26, 27, 31, 32, 36, 37, 43, 44, 50, 51, 55, 56, 63, 64, 70, 71, 78, 79, 86, 87, 89, 94, 95, 100, 101, 106, 107, 111, 112, 114, 119, 120, 127, 128, 130, 135, 136, 140, 141, 142, 148, 149, 155, 156, 162, 163, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 198, 202, 203, 204, 205, 206, 208, 209, 213, 219], "nonlinear": 184, "nonneg": 204, "nopython": 199, "normal": [194, 195, 197, 199, 202, 203, 204, 206, 209, 213, 214, 216], "normals_zig": 199, "normalsj": 199, "note": [0, 1, 2, 3, 4, 7, 9, 10, 14, 15, 21, 26, 31, 36, 41, 43, 49, 50, 55, 58, 61, 62, 63, 66, 69, 70, 73, 76, 77, 78, 81, 85, 86, 89, 92, 94, 95, 99, 102, 103, 106, 111, 114, 119, 122, 125, 127, 128, 130, 133, 135, 136, 140, 141, 142, 146, 148, 153, 155, 160, 162, 167, 169, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 196, 202, 203, 204, 206, 207, 208, 209, 215], "notebook": [189, 214], "notic": 195, "notimplementederror": [140, 141, 143, 189, 194, 195, 197], "novel": 200, "now": [194, 195, 197, 218], "np": [185, 189, 194, 195, 199, 202, 203, 205, 213, 215, 219], "nsacyb": 187, "ntu": 172, "nuclear": 176, "null": 189, "num_stream": [184, 185, 215, 219], "numba": [140, 173, 175, 189, 194, 211, 214], "numbajsf": 195, "number": [0, 1, 2, 3, 4, 7, 8, 9, 10, 14, 15, 19, 20, 21, 22, 26, 27, 31, 32, 36, 37, 41, 42, 43, 44, 48, 49, 50, 51, 55, 56, 58, 61, 62, 63, 66, 69, 70, 71, 73, 76, 77, 78, 79, 81, 85, 86, 87, 89, 92, 93, 94, 95, 106, 111, 114, 117, 118, 119, 120, 122, 125, 126, 127, 128, 130, 133, 134, 135, 136, 142, 146, 147, 148, 149, 153, 154, 155, 156, 160, 161, 162, 163, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 205, 208, 211, 213, 219], "numer": [206, 209], "numpi": [0, 1, 2, 3, 114, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 208, 209, 210, 211, 212, 213, 215, 216, 218, 219], "numpy_se": [177, 180, 182, 185], "ny": [182, 188], "nz_bit": 114, "o": [107, 112, 175, 179, 180, 181, 182, 184, 185, 188, 204], "object": [0, 1, 2, 3, 172, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 199, 213, 219], "occur": [4, 58, 66, 73, 81, 89, 122, 130, 183, 194, 215], "odd": [114, 175, 176, 185, 215], "odel": [206, 209], "offici": [187, 194, 195, 197], "offset": [0, 187], "onc": 103, "one": [4, 58, 66, 73, 81, 89, 122, 130, 141, 185, 194, 195, 199, 204, 211, 215, 216], "ones": [200, 203], "onli": [0, 1, 2, 89, 114, 130, 172, 173, 174, 176, 177, 178, 182, 183, 186, 187, 188, 190, 191, 192, 193, 194, 204, 213, 219], "onlin": [3, 49, 175, 176, 181, 183, 191], "opaqu": 199, "open": [3, 194, 205], "openjdk": 176, "oper": [183, 194, 195, 197], "option": [15, 107, 112, 175, 176, 185, 199, 211, 214], "order": 195, "org": [0, 172, 175, 179, 180, 181, 184, 185, 189, 195, 202, 203, 217, 219], "orient": [2, 204], "origin": [2, 49, 174, 176, 177, 180, 186, 190, 191, 192, 193, 194, 216], "other": [2, 22, 51, 56, 101, 120, 174, 177, 178, 183, 185, 186, 194, 199, 204, 208, 211, 214, 219], "otherwis": [202, 204, 205, 206, 209], "oubl": 195, "out": [9, 10, 14, 15, 21, 22, 26, 27, 31, 32, 36, 37, 43, 44, 50, 51, 55, 56, 63, 64, 70, 78, 79, 86, 87, 94, 95, 100, 106, 107, 111, 112, 119, 120, 127, 128, 135, 136, 142, 148, 149, 155, 156, 162, 163, 169, 170, 189, 194, 195, 199, 202, 203, 204, 205, 208, 213], "outcom": 195, "output": [0, 1, 2, 4, 9, 14, 21, 26, 31, 36, 43, 50, 55, 58, 63, 66, 70, 73, 78, 81, 86, 89, 94, 100, 106, 111, 119, 122, 127, 130, 135, 142, 148, 155, 162, 169, 172, 173, 174, 176, 177, 178, 180, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 202, 203, 204, 205, 206, 208, 209, 211, 213, 215, 216, 219], "outsid": [89, 130], "over": 205, "overal": 216, "overhead": 213, "overlap": [0, 1, 179, 180, 181, 182, 184, 187, 188, 190, 191, 192, 193, 215], "overton": 184, "p": [3, 172, 174, 175, 195, 204, 206, 209], "p3cipher": 172, "pack": [203, 204, 209], "packag": 211, "page": 211, "panneton": [49, 177], "paper": 1, "papouli": 204, "parallel": [1, 3, 99, 172, 184, 194], "paramet": [0, 1, 2, 3, 4, 7, 8, 9, 10, 14, 19, 20, 21, 22, 26, 27, 31, 32, 36, 37, 41, 42, 43, 44, 48, 49, 50, 51, 55, 56, 58, 61, 62, 63, 64, 66, 69, 70, 71, 73, 76, 77, 78, 79, 81, 85, 86, 87, 89, 92, 93, 94, 95, 99, 100, 101, 106, 111, 114, 117, 118, 119, 120, 122, 125, 126, 127, 128, 130, 133, 134, 135, 136, 140, 141, 142, 146, 147, 148, 149, 153, 154, 155, 156, 160, 161, 162, 163, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 198, 202, 203, 204, 205, 206, 208, 209], "parameter": [174, 202, 203], "parametr": 194, "particular": [4, 58, 66, 73, 81, 89, 122, 130, 196, 215], "pass": [3, 44, 101, 107, 112, 140, 141, 143, 183, 184, 185, 189, 195, 198, 199, 207, 211, 215, 219], "path": 194, "pattern": [89, 130, 204, 215], "paus": [183, 194], "pcg": [175, 179, 180, 181, 185, 194, 195, 198, 211, 215], "pcg32": [173, 194, 211, 214, 215], "pcg4": 214, "pcg64": [64, 173, 175, 179, 181, 194, 195, 197, 198, 211, 214, 215, 216, 219], "pcg64dxsm": [181, 194, 216, 219], "pcg64dxsm\u00b2": 219, "pcg64\u2075": 219, "pcg_default_multipli": 195, "pdf": [172, 187], "peak": 204, "per": [195, 213], "percentag": 216, "perform": [1, 9, 14, 21, 26, 31, 36, 43, 49, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 119, 127, 135, 142, 148, 155, 162, 169, 182, 183, 187, 188, 189, 194, 199, 209, 211, 215, 219], "period": [0, 1, 61, 62, 69, 175, 179, 180, 182, 185, 187, 188, 190, 191, 192, 193, 194, 211, 213, 215], "perman": 173, "permut": [175, 194, 214], "phi": [61, 62, 69, 76, 77, 85, 194, 215], "philox": [0, 173, 187, 188, 194, 211, 214, 215, 216], "philoxnxw": 182, "philox\u2075": 219, "pickl": 194, "pierr": [2, 49, 177, 186], "place": [194, 195, 197, 205], "plan": [197, 211], "platform": 183, "plot": 204, "plt": 204, "plu": [2, 177, 178, 186], "plusplu": 190, "point": [204, 209], "pointer": [0, 1, 2, 3, 5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 140, 141, 144, 145, 151, 152, 158, 159, 165, 166, 172, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 199], "polynomi": [2, 49, 177, 186], "pool": [0, 1, 196], "popular": 204, "portion": 200, "posit": [0, 1, 2, 89, 128, 130, 177, 178, 182, 186, 187, 188, 202, 203, 204, 209], "possibl": [0, 1, 2, 103, 114, 177, 178, 182, 183, 186, 187, 188, 190, 191, 192, 193, 195, 197, 198, 200, 211], "post": [175, 185, 194], "pp": [2, 49, 172, 176, 177, 186, 191], "pracrand": [3, 185], "practic": [3, 114, 183, 185, 208, 219], "practrand": [185, 194, 219], "pre": [4, 7, 41, 66, 73, 76, 81, 92, 122, 125, 133, 146, 153, 160, 167, 181, 194, 204, 209, 215], "precis": [194, 209], "precomput": 49, "predecessor": 200, "predefin": 175, "prefer": [175, 190, 194, 197], "prepar": 197, "present": [197, 198, 216], "prevent": 194, "previou": [194, 214], "previous": 114, "primari": 198, "print": [195, 199, 213], "prng": [0, 1, 3, 7, 9, 10, 11, 14, 15, 16, 19, 21, 22, 23, 26, 27, 28, 31, 32, 33, 36, 37, 38, 41, 43, 44, 45, 48, 50, 51, 52, 55, 56, 57, 63, 64, 65, 70, 72, 78, 79, 80, 86, 87, 88, 92, 94, 95, 96, 102, 106, 107, 108, 111, 112, 113, 117, 119, 120, 121, 125, 127, 128, 129, 133, 135, 136, 137, 140, 141, 142, 146, 148, 149, 150, 153, 155, 156, 157, 160, 162, 163, 164, 167, 169, 170, 171, 172, 174, 176, 179, 182, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 211, 213, 216], "probabl": [194, 204, 215], "problem": 3, "procedur": [206, 209], "proceed": [182, 188], "process": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 51, 56, 79, 87, 95, 120, 128, 136, 149, 156, 163, 170, 172, 174, 176, 177, 178, 179, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 196, 204, 215], "processor": 183, "produc": [0, 1, 2, 3, 5, 6, 9, 12, 13, 14, 17, 18, 21, 24, 25, 26, 29, 30, 31, 34, 35, 36, 39, 40, 43, 44, 46, 47, 49, 50, 53, 54, 55, 59, 60, 63, 67, 68, 70, 74, 75, 78, 82, 83, 86, 90, 91, 94, 97, 98, 104, 105, 106, 109, 110, 111, 114, 115, 116, 119, 123, 124, 127, 131, 132, 135, 138, 139, 142, 144, 145, 148, 151, 152, 155, 158, 159, 162, 165, 166, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 199, 203, 208, 211, 213, 214, 215, 216, 219], "product": [202, 206, 209], "project": [200, 211], "proof": 194, "propag": 183, "proper": 204, "properti": [1, 140, 141, 175, 180, 181, 183, 189, 195, 204], "propos": [176, 194], "prototyp": 199, "provid": [0, 1, 2, 3, 10, 15, 71, 95, 99, 102, 136, 140, 141, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 203, 205, 214, 218], "pseudo": [0, 1, 2, 3, 9, 10, 14, 15, 21, 22, 26, 27, 31, 32, 36, 37, 43, 44, 50, 51, 55, 56, 63, 70, 71, 78, 79, 86, 87, 94, 95, 106, 111, 119, 120, 127, 128, 135, 136, 142, 148, 149, 155, 156, 162, 163, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 188, 190, 191, 192, 193, 195, 197, 206, 208, 209, 211, 215], "pseudorandom": [2, 49, 186], "pull": [107, 112, 184, 185, 194, 200], "pure": [195, 199], "put": 200, "py_ssize_t": 199, "pycapsul": [183, 199], "pycapsule_getpoint": 199, "pycapsule_isvalid": 199, "pyerr_occur": 183, "pyplot": 204, "python": [0, 1, 2, 3, 10, 15, 95, 136, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 211, 213, 214], "python_pcg": 195, "pythonpcg64": 195, "pyx": [195, 199], "q": [172, 174, 195], "quad": 184, "qualifi": 194, "qualiti": [3, 172, 184, 190, 192, 193, 194, 211], "quasi": [2, 186], "quickli": 183, "r": [2, 174, 176, 177, 186, 195, 204, 206, 209], "r1": 203, "r2": [199, 203], "rai": 187, "rais": [10, 15, 22, 27, 32, 37, 44, 51, 56, 64, 79, 87, 95, 100, 101, 107, 112, 120, 128, 136, 140, 141, 143, 149, 156, 163, 170, 183, 189, 194, 195, 196, 197, 199, 203], "raisinglock": 183, "rand": 174, "randint": [194, 197], "random": [0, 1, 2, 3, 4, 7, 8, 9, 10, 14, 15, 19, 20, 21, 22, 26, 27, 31, 32, 36, 37, 41, 42, 43, 44, 48, 49, 50, 51, 55, 56, 58, 61, 62, 63, 66, 69, 70, 71, 73, 76, 77, 78, 79, 81, 85, 86, 87, 89, 92, 93, 94, 95, 100, 106, 111, 117, 118, 119, 120, 122, 125, 126, 127, 128, 130, 133, 134, 135, 136, 140, 141, 142, 146, 147, 148, 149, 153, 154, 155, 156, 160, 161, 162, 163, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 208, 209, 213, 214, 216, 217, 219], "random123": [194, 211], "random_entropi": [2, 177, 186, 196, 211, 214, 215], "random_gauss_zig": 199, "random_integ": [194, 197], "random_raw": [183, 184, 185, 194, 195], "random_sampl": [194, 197], "random_st": 213, "random_uinteg": 194, "random_valu": 199, "randomgen": [0, 1, 2, 3, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 210, 212, 213, 215, 218, 219], "randomgener": [194, 197], "randomst": [194, 197, 200, 211, 212, 216], "rang": [0, 1, 2, 10, 15, 22, 27, 32, 37, 44, 51, 56, 64, 79, 87, 89, 95, 107, 112, 120, 128, 130, 136, 149, 156, 163, 170, 172, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 190, 191, 192, 193, 195, 199, 213, 214, 215, 219], "rank": 209, "ranomgen": 194, "rapidli": 199, "rare": 194, "rather": [172, 180], "ratio": [69, 76, 77, 85, 215], "raw": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 106, 111, 119, 127, 135, 140, 141, 142, 148, 155, 162, 169, 195, 199, 208], "rdrand": [173, 194, 211, 214, 215, 216], "re": [10, 15, 27, 32, 37, 44, 64, 71, 79, 87, 95, 107, 112, 128, 136, 149, 156, 163, 170, 202, 203], "read": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 51, 56, 79, 87, 95, 120, 128, 136, 149, 156, 163, 170, 172, 174, 176, 177, 178, 179, 182, 186, 187, 188, 190, 191, 192, 193, 195, 196, 211], "real": [202, 203], "realist": 189, "realli": 3, "reason": [4, 58, 66, 73, 81, 89, 122, 130, 213, 215, 216, 219], "receiv": 197, "recent": 211, "recogn": 194, "recommend": [183, 185, 194, 211, 219], "recurr": [2, 177, 186], "redirect": 194, "reduc": [1, 187], "refactor": 194, "refer": [0, 1, 2, 3, 49, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 202, 203, 204, 206, 209, 211], "refil": 194, "reflect": 197, "regist": 194, "reject": [4, 58, 66, 73, 81, 89, 114, 122, 130, 215], "rel": [114, 203, 216, 219], "relat": [0, 1, 10, 15, 95, 128, 136, 172, 182, 187, 188, 190, 192, 193, 202, 203], "relationship": [4, 58, 66, 73, 81, 89, 122, 130, 215], "releas": [173, 194, 214], "relev": 219, "reli": [183, 194], "remain": 103, "remov": [190, 194, 197, 199, 200, 210, 212, 218], "renam": [194, 197], "repeat": [213, 215], "replac": [114, 180, 194, 197], "replic": 194, "report": [183, 219], "repositori": [175, 181], "repres": [175, 179, 180, 181, 204], "represent": [10, 15, 95, 128, 136], "reproduc": [4, 7, 41, 66, 71, 73, 76, 81, 92, 122, 125, 133, 146, 153, 160, 167, 183, 196, 211, 213], "request": 200, "requir": [4, 7, 11, 16, 23, 28, 33, 38, 41, 45, 52, 57, 58, 65, 66, 72, 73, 76, 80, 81, 88, 89, 92, 96, 102, 108, 113, 121, 122, 125, 129, 130, 133, 137, 146, 150, 153, 157, 160, 164, 167, 171, 194, 199, 207, 213, 215, 216, 219], "rescal": 206, "research": 172, "resembl": 219, "reset": [4, 7, 41, 66, 73, 76, 81, 89, 92, 103, 122, 125, 130, 133, 146, 153, 160, 167, 194, 215], "reshap": 215, "restor": [102, 194], "result": [183, 194, 205, 211, 215], "retain": 211, "retri": [100, 183, 194], "retriev": [0, 176, 184], "return": [4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 174, 175, 180, 189, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 215], "revamp": 200, "rg": [0, 1, 3, 172, 174, 176, 179, 180, 181, 182, 183, 187, 188, 190, 191, 192, 193, 198, 211, 213, 219], "rho": 203, "right": 203, "rng": [2, 4, 7, 10, 15, 41, 58, 61, 66, 73, 76, 81, 89, 92, 95, 122, 125, 130, 133, 136, 146, 153, 160, 167, 175, 176, 179, 180, 181, 186, 191, 194, 195, 197, 199, 211, 215], "rng_engin": 185, "rngman": 176, "robust": [203, 204, 209], "romu": [173, 194, 211, 216, 219], "ron": [182, 188], "rot": 195, "rotat": [174, 180, 189, 190, 195, 211, 214], "rotate64": 195, "rotate64_sig": 195, "rotl": 174, "rotr_64": 195, "roughli": 204, "round": [1, 187, 216, 219], "rq": 203, "rr": [175, 180, 182, 195], "rsa": 196, "run": [0, 1, 10, 15, 95, 136, 182, 183, 185, 187, 188, 195, 213, 216], "runtimeerror": [100, 183, 196], "runtimerror": 183, "rv": 189, "s_": [175, 180, 181, 195], "sai": 215, "said": 215, "saito": [2, 186, 191], "salmon": [182, 188], "salsa20": 1, "same": [0, 1, 2, 3, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 205, 211, 213, 215, 219], "sampl": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 114, 119, 127, 135, 142, 148, 155, 162, 169, 194, 196, 202, 203, 204, 205, 206, 208, 209, 219], "sampler": 114, "satisfi": 213, "save": 195, "sc11": [182, 188], "scalar": [196, 197, 202, 203, 205], "scale": [206, 209, 213, 216], "scheme": [182, 188], "sci": 49, "scrambl": 191, "search": 211, "sebastiano": [190, 191, 192, 193], "second": [0, 1, 175, 176, 180, 181, 182, 183, 187, 188, 215, 219], "secur": [1, 183, 187], "see": [0, 1, 9, 10, 14, 15, 21, 26, 31, 36, 43, 44, 50, 55, 63, 64, 70, 78, 86, 94, 95, 106, 111, 119, 127, 128, 135, 136, 140, 141, 142, 148, 155, 156, 162, 169, 172, 174, 175, 179, 182, 183, 187, 188, 189, 190, 191, 192, 193, 194, 195, 211, 214, 219], "seed": [173, 194, 195, 196, 211, 213, 215], "seed_seq": [0, 1, 2, 3, 114, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 215, 219], "seed_sequ": [194, 197], "seed_siz": [174, 195, 219], "seedsequ": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 44, 51, 56, 71, 79, 87, 95, 107, 112, 114, 120, 128, 136, 149, 156, 163, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 197, 211, 216, 218, 219], "seedseuqnc": 181, "seen": 204, "segment": [0, 1, 2, 176, 177, 182, 186, 187, 188, 190, 191, 192, 193], "select": [174, 203, 204, 209], "self": [4, 7, 19, 41, 48, 58, 61, 66, 73, 76, 81, 89, 92, 117, 122, 125, 130, 133, 146, 153, 160, 167, 175, 181, 195, 213], "semi": [202, 203], "semidefinit": [203, 204, 209], "sens": 213, "sensit": 219, "sent": 194, "separ": 219, "septemb": 176, "sequenc": [0, 1, 2, 3, 22, 49, 51, 56, 71, 120, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 211, 214, 219], "servic": 196, "set": [0, 1, 3, 10, 11, 15, 16, 23, 28, 33, 38, 45, 52, 57, 65, 71, 72, 80, 88, 95, 96, 102, 103, 108, 113, 114, 121, 128, 129, 136, 137, 140, 141, 143, 150, 157, 164, 171, 172, 173, 176, 177, 180, 182, 183, 185, 187, 188, 189, 194, 195, 196, 199, 203, 207, 209, 215, 219], "seta": [2, 177, 186], "settabl": 176, "setter": 195, "setup": [194, 199], "setuptool": 194, "sfc": [185, 194], "sfc64": [173, 194, 211, 214, 215, 216, 219], "sfc64\u2075": 219, "sfmt": [173, 194, 211, 214, 215, 216, 219], "sfmt\u2074": 219, "sg": 172, "shape": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 119, 127, 135, 142, 148, 155, 162, 169, 194, 196, 202, 203, 204, 205, 206, 208, 209], "share": [0, 1, 2, 3, 71, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 190, 191, 192, 193, 198, 219], "shaw": [182, 188], "shift": [190, 194, 211, 214], "shootout": [176, 190, 191, 192, 193], "shor": 187, "short": [183, 219], "should": [0, 1, 2, 3, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 208, 210, 212, 219], "show": [0, 187, 195, 199, 204, 213, 215], "shutdown": 213, "sig": 195, "signatur": [140, 175, 189], "signature_or_funct": 195, "signific": [175, 181], "sim": 203, "simd": 194, "similar": [0, 1, 2, 3, 172, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 214], "similarli": 194, "simon": 187, "simpl": [172, 175, 176, 179, 180, 181, 190, 191, 192, 193, 194, 195, 208], "simpler": [114, 195], "simplest": 199, "simpli": 219, "simplifi": 194, "simul": [4, 58, 66, 73, 81, 89, 122, 130, 178, 206, 214, 215], "sinc": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 119, 127, 135, 142, 148, 155, 162, 169, 176, 183, 194, 195, 208, 211, 214, 215, 216, 218, 219], "singl": [0, 1, 2, 4, 9, 14, 21, 26, 31, 36, 43, 50, 55, 58, 63, 66, 70, 73, 78, 81, 86, 89, 94, 100, 106, 111, 119, 122, 127, 130, 135, 140, 141, 142, 148, 155, 162, 169, 172, 174, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 202, 203, 204, 205, 206, 208, 209, 213, 215, 216, 219], "singular": [203, 204, 206, 209], "site": 183, "size": [9, 14, 21, 26, 31, 36, 37, 43, 50, 55, 58, 61, 62, 63, 66, 69, 70, 73, 76, 77, 78, 81, 85, 86, 89, 94, 100, 106, 111, 119, 127, 130, 135, 142, 148, 155, 162, 169, 174, 175, 183, 190, 192, 193, 194, 195, 196, 202, 203, 204, 205, 206, 208, 209, 215, 219], "skip": 194, "skylak": 183, "slow": [114, 189, 195, 211, 214], "slower": [183, 184, 195, 203, 204, 209, 216], "slowest": [203, 204, 209], "small": [0, 1, 2, 114, 177, 178, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 198, 199], "smaller": [1, 179, 191, 202], "smallprng": 174, "smith": 187, "so": [0, 1, 2, 3, 4, 58, 66, 73, 81, 89, 99, 114, 122, 130, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 199, 200, 202, 204, 209, 211, 213, 215, 219], "societi": [202, 203], "softwar": [172, 176, 183, 191], "some": [183, 190, 195, 198, 200, 206, 209, 211, 215, 219], "somewhat": 184, "sourc": [195, 196, 198, 214], "sourceforg": [3, 185], "space": [2, 174, 175, 177, 179, 180, 181, 186, 204], "spars": 215, "spawn": [3, 175, 184, 215, 216, 219], "special": 183, "specif": [183, 194, 198, 215, 216, 219], "specifi": [194, 203, 204, 209], "speck128": [173, 187, 211, 214, 215, 216, 219], "spectral": [175, 180, 181], "spectrum": 199, "speed": [190, 194, 214], "spheric": 204, "sphinx": 194, "split": [2, 176, 177, 186, 190, 191, 192, 193], "splitmix64": [0, 1, 172, 187, 190, 191, 192, 193], "spread": 204, "springer": [2, 172, 186], "sqrt": [199, 215], "squar": [3, 204], "ss": [3, 175], "sse2": 211, "st": [195, 199], "stabil": 212, "stabl": [211, 219], "stafford": 176, "standard": [0, 1, 176, 194, 195, 199, 202, 203, 204, 206, 209, 211, 219], "standard_exponenti": 194, "standard_gamma": 194, "standard_norm": [0, 1, 3, 172, 174, 176, 182, 183, 187, 188, 190, 191, 192, 193, 194, 195, 199, 213], "standard_wishart": [194, 209], "start": [183, 185, 195], "stat": [206, 209], "state": [4, 5, 6, 7, 8, 10, 12, 13, 15, 17, 18, 19, 20, 24, 25, 29, 30, 34, 35, 39, 40, 41, 42, 44, 46, 47, 48, 49, 53, 54, 58, 59, 60, 61, 62, 66, 67, 68, 69, 73, 74, 75, 76, 77, 81, 82, 83, 85, 89, 90, 91, 92, 93, 95, 97, 98, 104, 105, 107, 109, 110, 112, 115, 116, 117, 118, 122, 123, 124, 125, 126, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 144, 145, 146, 147, 151, 152, 153, 154, 158, 159, 160, 161, 165, 166, 167, 168, 173, 194, 195, 196, 199, 205, 211, 213, 219], "state_addr": 199, "state_address": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 144, 145, 151, 152, 158, 159, 165, 166, 195, 199], "state_gett": [140, 141, 143, 189, 195], "state_sett": [140, 141, 143, 189, 195], "stateless": [99, 183], "statist": [3, 175, 176, 179, 180, 181, 185, 187, 190, 191, 192, 193, 206, 209, 211], "statu": [103, 183], "std": [195, 213], "stdlib": [2, 177, 178, 186], "steel": 176, "stefan": 187, "step": [0, 1, 4, 49, 58, 61, 62, 66, 69, 73, 76, 77, 81, 85, 89, 122, 130, 175, 179, 180, 181, 182, 187, 188, 194, 195, 211, 213, 215, 216], "still": [183, 199], "stochast": 204, "storag": [182, 188], "store": [89, 130, 182, 188, 195, 215], "stork": 204, "strategi": 215, "stream": [0, 1, 2, 3, 49, 114, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 211, 215, 216, 219], "struct": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 144, 145, 151, 152, 158, 159, 165, 166, 195, 199], "structur": [175, 183, 194, 195, 199], "studi": 219, "subject": 215, "submit": 213, "subsequ": [192, 193, 195], "substanti": [200, 211, 213], "succe": 211, "succeed": [103, 183, 200], "success": 183, "successor": 190, "suggest": 176, "suit": 174, "suitabl": [172, 214, 215], "sum": [3, 176], "summer": [49, 177], "suppli": [194, 211], "support": [0, 1, 2, 3, 172, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 197, 200, 206, 213, 214, 215], "svd": [203, 204, 209], "swap": 194, "switch": 194, "symmetr": [203, 204, 209], "sync": 194, "synchron": 194, "system": [71, 174, 175, 180, 181, 194, 211, 214, 215], "t": [178, 203, 204, 209], "tabl": [3, 175, 178, 216, 219], "take": [89, 130, 140, 141, 183, 189, 195], "taken": [197, 216, 219], "takuji": [49, 177], "tb\u00b9": 219, "te": 219, "temp": 195, "templat": 219, "test": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 102, 106, 111, 119, 127, 135, 142, 148, 155, 162, 169, 173, 194, 199, 211, 212, 214], "text": 183, "tf": 219, "than": [4, 58, 66, 73, 81, 89, 122, 130, 172, 180, 183, 195, 202, 203, 204, 209, 214, 215], "thei": [183, 197], "theme": 194, "theoret": 211, "theori": [206, 209], "thi": [0, 1, 2, 3, 4, 7, 9, 10, 14, 15, 21, 26, 27, 31, 32, 36, 37, 41, 43, 44, 50, 55, 58, 63, 64, 66, 70, 71, 73, 76, 78, 79, 81, 86, 87, 89, 92, 94, 95, 99, 102, 103, 106, 107, 111, 112, 114, 119, 122, 125, 127, 128, 130, 133, 135, 136, 141, 142, 146, 148, 149, 153, 155, 156, 160, 162, 163, 167, 169, 170, 172, 175, 176, 177, 180, 181, 182, 183, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 203, 204, 207, 208, 209, 211, 213, 215, 219], "those": 219, "thread": [0, 1, 2, 3, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 190, 191, 192, 193, 213], "threadpoolexecutor": 213, "three": [174, 185, 199, 205, 219], "threefri": [0, 173, 182, 187, 194, 197, 211, 214, 215, 216, 219], "threefrynxw": 188, "through": [0, 1, 10, 15, 95, 128, 136, 143, 182, 187, 188, 195, 199, 207], "time": [0, 1, 2, 3, 7, 8, 10, 15, 19, 20, 22, 27, 32, 37, 41, 42, 48, 49, 51, 56, 61, 62, 69, 76, 77, 79, 85, 87, 92, 93, 95, 99, 117, 118, 120, 125, 126, 128, 133, 134, 136, 146, 147, 149, 153, 154, 156, 160, 161, 163, 167, 168, 170, 172, 174, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 211, 213, 215], "timeit": [195, 199, 213], "times2": 219, "tini": 184, "togeth": 204, "tol": [203, 204, 209], "toler": [203, 204, 209], "tolist": 215, "too": [3, 194, 211], "tool": 199, "trail": 206, "transact": 178, "transform": [177, 180, 182, 190, 192, 193, 195, 204, 209, 219], "translat": 195, "treat": 194, "treatman": 187, "trio": [184, 216, 219], "trivari": 203, "trivial": 207, "true": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 89, 94, 100, 103, 106, 111, 119, 127, 130, 135, 142, 148, 155, 162, 169, 175, 177, 180, 182, 183, 185, 190, 195, 199, 204, 206], "truncat": 208, "trust": 180, "try": [79, 87, 179], "tupl": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 138, 139, 144, 145, 151, 152, 158, 159, 165, 166, 215], "twice": 204, "twister": [194, 214, 216, 219], "two": [0, 4, 10, 15, 58, 66, 73, 81, 89, 95, 122, 128, 130, 136, 176, 194, 195, 202, 203, 204, 205, 209, 215, 219], "txt": 185, "type": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 142, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209], "typedef": 199, "typeerror": 101, "typic": 1, "u": [49, 183], "uhlig": [206, 209], "uint": 195, "uint32": [1, 140, 174, 195, 216], "uint32_t": 199, "uint64": [0, 1, 9, 10, 14, 15, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 95, 100, 106, 111, 119, 127, 128, 135, 136, 140, 142, 148, 155, 162, 169, 174, 175, 182, 187, 188, 189, 194, 195, 215, 216], "uint64_t": 199, "uint8": [0, 195, 215], "uinteg": [195, 197, 214], "unavail": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 51, 56, 79, 87, 95, 120, 128, 136, 149, 156, 163, 170, 172, 174, 176, 177, 178, 179, 182, 186, 187, 188, 190, 191, 192, 193], "undefin": 204, "under": [195, 213], "underli": [4, 9, 14, 21, 26, 31, 36, 43, 50, 55, 58, 63, 66, 70, 73, 78, 81, 86, 89, 94, 100, 106, 111, 119, 122, 127, 130, 135, 140, 141, 142, 148, 155, 162, 169, 180, 195, 197, 208, 213, 215], "understand": 195, "unif": 205, "uniform": [178, 194, 197, 199, 205, 216], "uniformli": 114, "unimi": [176, 190, 191, 192, 193], "uniqu": [183, 194, 215], "univari": 204, "univers": 215, "unix": [196, 214], "unless": [103, 205, 216], "unlik": [0, 1, 10, 15, 95, 136, 182, 187, 188, 194], "unpack": 199, "unpickl": [102, 194], "unpredict": [107, 112, 184, 185], "unsid": 174, "unsign": [0, 1, 2, 3, 9, 14, 21, 22, 26, 31, 36, 43, 50, 51, 55, 56, 63, 70, 78, 86, 94, 106, 111, 119, 120, 127, 135, 142, 148, 155, 162, 169, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 199, 208, 214, 215], "unspecifi": 185, "untest": 187, "up": [183, 194, 195, 199], "updat": [3, 4, 58, 66, 73, 81, 89, 122, 130, 175, 176, 181, 194, 195, 215], "upper": [32, 172, 175, 195, 209, 219], "upstream": 194, "urandom": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 51, 56, 79, 87, 95, 120, 128, 136, 149, 156, 163, 170, 172, 174, 176, 177, 178, 179, 182, 186, 187, 188, 190, 191, 192, 193, 196, 214], "us": [0, 1, 2, 3, 4, 9, 10, 14, 15, 21, 22, 26, 27, 31, 32, 36, 37, 43, 44, 49, 50, 51, 55, 56, 58, 63, 66, 70, 71, 73, 78, 79, 81, 84, 86, 87, 89, 94, 95, 99, 100, 101, 102, 106, 111, 114, 119, 120, 122, 127, 128, 130, 135, 136, 140, 141, 142, 148, 149, 155, 156, 162, 163, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 206, 208, 209, 210, 211, 212, 213, 214, 216, 218, 219], "user": [0, 1, 175, 183, 194, 195, 199, 211], "userbitgener": [189, 194, 195, 199, 211, 214], "usual": [1, 195, 199], "util": [183, 199], "v": [206, 209], "v1": [197, 211], "v2": 211, "valid": [194, 195], "valu": [0, 1, 2, 3, 4, 9, 10, 14, 15, 21, 22, 26, 27, 31, 32, 36, 37, 43, 44, 50, 51, 55, 56, 58, 63, 64, 66, 70, 73, 78, 79, 81, 86, 87, 89, 94, 95, 100, 101, 102, 106, 107, 111, 112, 114, 119, 120, 122, 127, 128, 130, 135, 136, 140, 141, 142, 148, 149, 155, 156, 162, 163, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 202, 203, 204, 205, 206, 208, 209, 213, 214, 215, 216, 219], "valueerror": [10, 15, 22, 27, 32, 37, 44, 51, 56, 64, 79, 87, 95, 107, 112, 120, 128, 136, 149, 156, 163, 170, 195, 199], "var": 199, "vari": [0, 187, 204, 215], "variabl": [58, 66, 73, 81, 89, 130, 202, 203, 204], "varianc": [202, 204], "variant": [1, 180, 181, 182, 184, 187, 188, 194, 195, 198, 211, 214, 216, 219], "variat": [140, 141, 175, 180, 181, 194, 198, 199, 206, 209], "varieti": 211, "vector": [0, 1, 2, 3, 172, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193], "vendor": [194, 218], "veri": [114, 194, 216], "verifi": [49, 103], "verlag": 172, "version": [49, 182, 188, 190, 194, 195, 211, 214, 218, 219], "view": [195, 215], "vigna": [190, 191, 192, 193], "virtual": 197, "void": [140, 141, 189, 195, 199], "void_p": 195, "voidp": 189, "vol": [49, 177], "w": [89, 92, 93, 130, 133, 134, 182, 185, 188, 216], "wa": [172, 183, 194, 200, 211, 219], "wai": [180, 182, 199, 211, 215], "wait": [183, 213], "warm": 199, "warn": [197, 203, 204, 209, 213], "wast": 114, "we": [195, 204], "weaker": [182, 188], "weakli": 202, "week": 187, "welcom": 200, "well": [187, 213], "were": [194, 197, 211, 216, 219], "weyl": [114, 185, 194, 211, 214, 216, 219], "weyl_inc": [185, 215], "weyl_incr": [185, 194, 215], "wheel": 194, "when": [0, 1, 3, 10, 15, 44, 61, 62, 64, 69, 76, 77, 85, 89, 95, 102, 114, 128, 130, 136, 140, 141, 156, 172, 180, 182, 183, 184, 185, 187, 188, 194, 195, 203, 204, 206, 209, 213, 214, 215, 219], "where": [0, 1, 89, 130, 174, 175, 176, 180, 181, 182, 183, 187, 188, 194, 195, 197, 202, 203, 204, 209, 215, 219], "whether": [89, 130, 175, 190, 206], "which": [0, 1, 2, 3, 9, 10, 14, 15, 21, 26, 31, 36, 43, 44, 50, 55, 63, 70, 71, 78, 86, 89, 94, 95, 100, 106, 111, 119, 127, 130, 135, 136, 142, 148, 155, 162, 169, 174, 175, 176, 177, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 203, 204, 205, 206, 208, 213, 214, 215, 219], "while": [1, 176, 183, 189, 195, 199, 203, 204, 209, 215, 219], "wider": [211, 214], "width": [182, 188, 204], "wiki": [0, 202, 203], "wikipedia": [0, 202, 203], "wilei": 204, "window": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 51, 56, 79, 87, 95, 120, 128, 136, 149, 156, 163, 170, 172, 174, 176, 177, 178, 179, 182, 186, 187, 188, 190, 191, 192, 193, 194, 196], "winger": 187, "wire": 195, "wishart": [194, 206], "wit": 219, "within": [2, 177, 178, 186], "without": [0, 1, 2, 3, 114, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 190, 191, 192, 193, 194, 195, 215], "word": 204, "worker": [2, 176, 177, 186, 190, 191, 192, 193], "worri": 219, "would": [195, 203, 204], "wrap": [183, 189, 195, 199], "wraparound": 199, "wrapper": [5, 6, 12, 13, 17, 18, 24, 25, 29, 30, 34, 35, 39, 40, 46, 47, 53, 54, 59, 60, 67, 68, 74, 75, 82, 83, 90, 91, 97, 98, 104, 105, 109, 110, 115, 116, 123, 124, 131, 132, 144, 145, 151, 152, 158, 159, 165, 166, 173, 189, 194, 195], "writabl": 213, "write": [175, 183, 199, 211, 212], "written": [3, 140, 141, 189, 190, 192, 193, 194, 214], "wrong": 194, "wu": 172, "wuhj": 172, "www": [49, 172, 175, 179, 180, 181, 183, 184, 185], "x": [174, 187, 195, 197, 199, 203, 204], "x1": 199, "x2": 199, "x_1": 204, "x_2": 204, "x_i": 204, "x_j": 204, "x_n": 204, "xl": 195, "xor": [180, 195, 211], "xoroshiro": [190, 192, 193, 211], "xoroshiro1024": 191, "xoroshiro120": 194, "xoroshiro128": [173, 191, 194, 199, 211, 214, 215], "xorshift": [176, 180, 181, 190, 191, 192, 193, 194, 211], "xorshift1024": [173, 190, 192, 193, 194, 211, 214, 215], "xorshift128": [190, 211], "xorshift256": 213, "xorshiro256": 211, "xorshiro512": 211, "xoshiro": 211, "xoshiro256": [173, 194, 211, 213, 214, 215, 216, 219], "xoshiro256starstar": 194, "xoshiro512": [173, 194, 211, 214, 215, 216, 219], "xoshiro512starstar": 194, "xsadd": [191, 211], "xsl": [175, 180, 182, 195], "y": [174, 203, 204], "york": [182, 188, 204], "you": [183, 197, 210, 212, 216], "your": 183, "yp": 1, "z": [175, 195, 203], "zero": [114, 195, 202, 203, 213, 215], "ziggurat": 199, "zimbri": 176, "zipf": 194, "\u00b2": 219, "\u00b3": 219, "\u00b5": [195, 213], "\u00b9": 219, "\u03c6": [173, 211], "\u2074": 219, "\u2075": 219}, "titles": ["AES Counter-based RNG", "ChaCha Cipher-based RNG", "Double SIMD Mersenne Twister (dSFMT)", "Entropy From Iteration, Indirection, Xor (EFIIX)  Generator", "randomgen.aes.AESCounter.advance", "randomgen.aes.AESCounter.cffi", "randomgen.aes.AESCounter.ctypes", "randomgen.aes.AESCounter.jump", "randomgen.aes.AESCounter.jumped", "randomgen.aes.AESCounter.random_raw", "randomgen.aes.AESCounter.seed", "randomgen.aes.AESCounter.state", "randomgen.chacha.ChaCha.cffi", "randomgen.chacha.ChaCha.ctypes", "randomgen.chacha.ChaCha.random_raw", "randomgen.chacha.ChaCha.seed", "randomgen.chacha.ChaCha.state", "randomgen.dsfmt.DSFMT.cffi", "randomgen.dsfmt.DSFMT.ctypes", "randomgen.dsfmt.DSFMT.jump", "randomgen.dsfmt.DSFMT.jumped", "randomgen.dsfmt.DSFMT.random_raw", "randomgen.dsfmt.DSFMT.seed", "randomgen.dsfmt.DSFMT.state", "randomgen.efiix64.EFIIX64.cffi", "randomgen.efiix64.EFIIX64.ctypes", "randomgen.efiix64.EFIIX64.random_raw", "randomgen.efiix64.EFIIX64.seed", "randomgen.efiix64.EFIIX64.state", "randomgen.hc128.HC128.cffi", "randomgen.hc128.HC128.ctypes", "randomgen.hc128.HC128.random_raw", "randomgen.hc128.HC128.seed", "randomgen.hc128.HC128.state", "randomgen.jsf.JSF.cffi", "randomgen.jsf.JSF.ctypes", "randomgen.jsf.JSF.random_raw", "randomgen.jsf.JSF.seed", "randomgen.jsf.JSF.state", "randomgen.lxm.LXM.cffi", "randomgen.lxm.LXM.ctypes", "randomgen.lxm.LXM.jump", "randomgen.lxm.LXM.jumped", "randomgen.lxm.LXM.random_raw", "randomgen.lxm.LXM.seed", "randomgen.lxm.LXM.state", "randomgen.mt19937.MT19937.cffi", "randomgen.mt19937.MT19937.ctypes", "randomgen.mt19937.MT19937.jump", "randomgen.mt19937.MT19937.jumped", "randomgen.mt19937.MT19937.random_raw", "randomgen.mt19937.MT19937.seed", "randomgen.mt19937.MT19937.state", "randomgen.mt64.MT64.cffi", "randomgen.mt64.MT64.ctypes", "randomgen.mt64.MT64.random_raw", "randomgen.mt64.MT64.seed", "randomgen.mt64.MT64.state", "randomgen.pcg32.PCG32.advance", "randomgen.pcg32.PCG32.cffi", "randomgen.pcg32.PCG32.ctypes", "randomgen.pcg32.PCG32.jump", "randomgen.pcg32.PCG32.jumped", "randomgen.pcg32.PCG32.random_raw", "randomgen.pcg32.PCG32.seed", "randomgen.pcg32.PCG32.state", "randomgen.pcg64.LCG128Mix.advance", "randomgen.pcg64.LCG128Mix.cffi", "randomgen.pcg64.LCG128Mix.ctypes", "randomgen.pcg64.LCG128Mix.jumped", "randomgen.pcg64.LCG128Mix.random_raw", "randomgen.pcg64.LCG128Mix.seed", "randomgen.pcg64.LCG128Mix.state", "randomgen.pcg64.PCG64.advance", "randomgen.pcg64.PCG64.cffi", "randomgen.pcg64.PCG64.ctypes", "randomgen.pcg64.PCG64.jump", "randomgen.pcg64.PCG64.jumped", "randomgen.pcg64.PCG64.random_raw", "randomgen.pcg64.PCG64.seed", "randomgen.pcg64.PCG64.state", "randomgen.pcg64.PCG64DXSM.advance", "randomgen.pcg64.PCG64DXSM.cffi", "randomgen.pcg64.PCG64DXSM.ctypes", "randomgen.pcg64.PCG64DXSM.jump", "randomgen.pcg64.PCG64DXSM.jumped", "randomgen.pcg64.PCG64DXSM.random_raw", "randomgen.pcg64.PCG64DXSM.seed", "randomgen.pcg64.PCG64DXSM.state", "randomgen.philox.Philox.advance", "randomgen.philox.Philox.cffi", "randomgen.philox.Philox.ctypes", "randomgen.philox.Philox.jump", "randomgen.philox.Philox.jumped", "randomgen.philox.Philox.random_raw", "randomgen.philox.Philox.seed", "randomgen.philox.Philox.state", "randomgen.rdrand.RDRAND.cffi", "randomgen.rdrand.RDRAND.ctypes", "randomgen.rdrand.RDRAND.jumped", "randomgen.rdrand.RDRAND.random_raw", "randomgen.rdrand.RDRAND.seed", "randomgen.rdrand.RDRAND.state", "randomgen.rdrand.RDRAND.success", "randomgen.romu.Romu.cffi", "randomgen.romu.Romu.ctypes", "randomgen.romu.Romu.random_raw", "randomgen.romu.Romu.seed", "randomgen.romu.Romu.state", "randomgen.sfc.SFC64.cffi", "randomgen.sfc.SFC64.ctypes", "randomgen.sfc.SFC64.random_raw", "randomgen.sfc.SFC64.seed", "randomgen.sfc.SFC64.state", "randomgen.sfc.SFC64.weyl_increments", "randomgen.sfmt.SFMT.cffi", "randomgen.sfmt.SFMT.ctypes", "randomgen.sfmt.SFMT.jump", "randomgen.sfmt.SFMT.jumped", "randomgen.sfmt.SFMT.random_raw", "randomgen.sfmt.SFMT.seed", "randomgen.sfmt.SFMT.state", "randomgen.speck128.SPECK128.advance", "randomgen.speck128.SPECK128.cffi", "randomgen.speck128.SPECK128.ctypes", "randomgen.speck128.SPECK128.jump", "randomgen.speck128.SPECK128.jumped", "randomgen.speck128.SPECK128.random_raw", "randomgen.speck128.SPECK128.seed", "randomgen.speck128.SPECK128.state", "randomgen.threefry.ThreeFry.advance", "randomgen.threefry.ThreeFry.cffi", "randomgen.threefry.ThreeFry.ctypes", "randomgen.threefry.ThreeFry.jump", "randomgen.threefry.ThreeFry.jumped", "randomgen.threefry.ThreeFry.random_raw", "randomgen.threefry.ThreeFry.seed", "randomgen.threefry.ThreeFry.state", "randomgen.wrapper.UserBitGenerator.cffi", "randomgen.wrapper.UserBitGenerator.ctypes", "randomgen.wrapper.UserBitGenerator.from_cfunc", "randomgen.wrapper.UserBitGenerator.from_ctypes", "randomgen.wrapper.UserBitGenerator.random_raw", "randomgen.wrapper.UserBitGenerator.state", "randomgen.xoroshiro128.Xoroshiro128.cffi", "randomgen.xoroshiro128.Xoroshiro128.ctypes", "randomgen.xoroshiro128.Xoroshiro128.jump", "randomgen.xoroshiro128.Xoroshiro128.jumped", "randomgen.xoroshiro128.Xoroshiro128.random_raw", "randomgen.xoroshiro128.Xoroshiro128.seed", "randomgen.xoroshiro128.Xoroshiro128.state", "randomgen.xorshift1024.Xorshift1024.cffi", "randomgen.xorshift1024.Xorshift1024.ctypes", "randomgen.xorshift1024.Xorshift1024.jump", "randomgen.xorshift1024.Xorshift1024.jumped", "randomgen.xorshift1024.Xorshift1024.random_raw", "randomgen.xorshift1024.Xorshift1024.seed", "randomgen.xorshift1024.Xorshift1024.state", "randomgen.xoshiro256.Xoshiro256.cffi", "randomgen.xoshiro256.Xoshiro256.ctypes", "randomgen.xoshiro256.Xoshiro256.jump", "randomgen.xoshiro256.Xoshiro256.jumped", "randomgen.xoshiro256.Xoshiro256.random_raw", "randomgen.xoshiro256.Xoshiro256.seed", "randomgen.xoshiro256.Xoshiro256.state", "randomgen.xoshiro512.Xoshiro512.cffi", "randomgen.xoshiro512.Xoshiro512.ctypes", "randomgen.xoshiro512.Xoshiro512.jump", "randomgen.xoshiro512.Xoshiro512.jumped", "randomgen.xoshiro512.Xoshiro512.random_raw", "randomgen.xoshiro512.Xoshiro512.seed", "randomgen.xoshiro512.Xoshiro512.state", "HC-128 Cipher Generator", "Bit Generators", "Jenkins Small Fast Generator", "128-bit Linear Congruential Generator (LCG) with Output Mixing", "LXM Generator", "Mersenne Twister (MT19937)", "64-bit Mersenne Twister", "Permuted Congruential Generator (32-bit, PCG32)", "Permuted Congruential Generator (64-bit, PCG64)", "Permuted Congruential Generator 2.0 (64-bit Multiplier, DXSM Output)", "Philox Counter-based RNG", "Hardware-based Random Number Generator (RDRAND)", "Rotate-Multiply (Romu) Generators", "SFC64 Generator", "SIMD-oriented Fast Mersenne Twister (SFMT)", "SPECK Counter-based RNG", "ThreeFry Counter-based RNG", "User-defined Bit Generators", "Xoroshiro128+", "Xorshift1024*\u03c6", "Xoshiro256**", "Xoshiro512**", "Change Log", "Writing a BitGenerator", "System Entropy", "Evolution of randomgen", "Extended Generator", "Extending", "Future Plans", "randomgen.generator.ExtendedGenerator.bit_generator", "randomgen.generator.ExtendedGenerator.complex_normal", "randomgen.generator.ExtendedGenerator.multivariate_complex_normal", "randomgen.generator.ExtendedGenerator.multivariate_normal", "randomgen.generator.ExtendedGenerator.random", "randomgen.generator.ExtendedGenerator.standard_wishart", "randomgen.generator.ExtendedGenerator.state", "randomgen.generator.ExtendedGenerator.uintegers", "randomgen.generator.ExtendedGenerator.wishart", "Random Generator", "RandomGen", "Legacy Random Generation", "Multithreaded Generation", "What\u2019s New or Different", "Parallel Random Number Generation", "Performance", "References", "Seed Sequences", "Quality Assurance"], "titleterms": {"": [211, 214, 215], "0": [181, 194, 219], "1": [194, 197, 214], "128": [172, 175], "15": 194, "16": [194, 197], "17": [194, 214], "18": [194, 197], "19": [194, 197], "2": [181, 194], "20": 194, "23": [194, 197], "26": 194, "3": 194, "32": 179, "4": 194, "5": 194, "6": 194, "64": [178, 180, 181], "addit": 219, "advanc": [4, 58, 66, 73, 81, 89, 122, 130, 215], "ae": [0, 4, 5, 6, 7, 8, 9, 10, 11], "aescount": [4, 5, 6, 7, 8, 9, 10, 11], "also": [181, 198, 202, 203, 206, 209], "assur": 219, "base": [0, 1, 182, 183, 187, 188], "between": 197, "bit": [173, 175, 178, 179, 180, 181, 189, 199, 211], "bit_gener": 201, "bitgener": [195, 199], "cffi": [5, 12, 17, 24, 29, 34, 39, 46, 53, 59, 67, 74, 82, 90, 97, 104, 109, 115, 123, 131, 138, 144, 151, 158, 165], "chacha": [1, 12, 13, 14, 15, 16], "chang": [194, 197, 211], "cipher": [1, 172], "complex_norm": 202, "configur": 219, "congruenti": [175, 179, 180, 181], "core": 219, "correl": 219, "counter": [0, 182, 187, 188], "cryptograph": 215, "ctype": [6, 13, 18, 25, 30, 35, 40, 47, 54, 60, 68, 75, 83, 91, 98, 105, 110, 116, 124, 132, 139, 145, 152, 159, 166], "custom": 183, "cython": 199, "danger": [210, 211, 212], "defin": [173, 189], "differ": [211, 214], "distinct": 215, "distribut": 198, "doubl": 2, "dsfmt": [2, 17, 18, 19, 20, 21, 22, 23], "dxsm": 181, "efiix": 3, "efiix64": [24, 25, 26, 27, 28], "entropi": [3, 196], "evolut": 197, "exampl": 219, "experi": 219, "experiment": 173, "extend": [0, 1, 2, 3, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 198, 199], "extendedgener": [201, 202, 203, 204, 205, 206, 207, 208, 209], "fast": [174, 186], "featur": 211, "from": [3, 189, 214], "from_cfunc": 140, "from_ctyp": 141, "futur": 200, "gener": [0, 2, 3, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215], "hardwar": 183, "hc": 172, "hc128": [29, 30, 31, 32, 33], "histori": 211, "indic": 211, "indirect": 3, "introduct": 211, "iter": 3, "jenkin": 174, "jsf": [34, 35, 36, 37, 38], "jump": [7, 8, 19, 20, 41, 42, 48, 49, 61, 62, 69, 76, 77, 84, 85, 92, 93, 99, 117, 118, 125, 126, 133, 134, 146, 147, 153, 154, 160, 161, 167, 168, 215], "kei": 215, "lcg": 175, "lcg128mix": [66, 67, 68, 69, 70, 71, 72], "legaci": 212, "level": 189, "linear": 175, "lock": 183, "log": 194, "low": 189, "lxm": [39, 40, 41, 42, 43, 44, 45, 176], "manipul": 198, "mersenn": [2, 177, 178, 186], "mix": 175, "mt19937": [46, 47, 48, 49, 50, 51, 52, 177], "mt64": [53, 54, 55, 56, 57], "multipli": [181, 184], "multithread": 213, "multivariate_complex_norm": 203, "multivariate_norm": 204, "new": [199, 211, 214], "non": 215, "note": [216, 218, 219], "numba": [195, 199], "number": [183, 215], "numpi": 214, "object": 189, "orient": 186, "output": [175, 181], "parallel": [0, 2, 175, 176, 177, 179, 180, 181, 182, 183, 185, 186, 187, 188, 190, 191, 192, 193, 211, 215], "pcg32": [58, 59, 60, 61, 62, 63, 64, 65, 179], "pcg64": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 180], "pcg64dxsm": [81, 82, 83, 84, 85, 86, 87, 88], "perform": [195, 216], "permut": [179, 180, 181], "philox": [89, 90, 91, 92, 93, 94, 95, 96, 182], "plan": 200, "prng": 215, "python": [195, 199], "qualiti": 219, "random": [183, 205, 210, 211, 212, 215], "random_raw": [9, 14, 21, 26, 31, 36, 43, 50, 55, 63, 70, 78, 86, 94, 100, 106, 111, 119, 127, 135, 142, 148, 155, 162, 169], "randomgen": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 197, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211], "rdrand": [97, 98, 99, 100, 101, 102, 103, 183], "recommend": 216, "refer": 217, "remov": 211, "reproduc": 215, "rng": [0, 1, 173, 182, 187, 188], "romu": [104, 105, 106, 107, 108, 184], "rotat": 184, "see": [181, 198, 202, 203, 206, 209], "seed": [0, 1, 2, 3, 10, 15, 22, 27, 32, 37, 44, 51, 56, 64, 71, 79, 87, 95, 101, 107, 112, 120, 128, 136, 149, 156, 163, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 198, 218, 219], "seedsequ": 215, "sequenc": [215, 218], "sequenti": 219, "sfc": [109, 110, 111, 112, 113, 114], "sfc64": [109, 110, 111, 112, 113, 114, 185], "sfmt": [115, 116, 117, 118, 119, 120, 121, 186], "simd": [2, 186], "small": 174, "speck": 187, "speck128": [122, 123, 124, 125, 126, 127, 128, 129], "stabl": 173, "standard_wishart": 206, "state": [0, 1, 2, 3, 11, 16, 23, 28, 33, 38, 45, 52, 57, 65, 72, 80, 88, 96, 102, 108, 113, 121, 129, 137, 143, 150, 157, 164, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 198, 207, 215], "success": 103, "support": 211, "system": 196, "tabl": 211, "test": [0, 1, 2, 3, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 219], "threefri": [130, 131, 132, 133, 134, 135, 136, 137, 188], "time": 216, "twister": [2, 177, 178, 186], "uinteg": 208, "us": [195, 215], "user": [173, 189], "userbitgener": [138, 139, 140, 141, 142, 143], "v1": 194, "v2": 194, "weyl": 215, "weyl_incr": 114, "what": [211, 214], "wishart": 209, "wrapper": [138, 139, 140, 141, 142, 143], "write": 195, "xor": 3, "xoroshiro128": [144, 145, 146, 147, 148, 149, 150, 190], "xorshift1024": [151, 152, 153, 154, 155, 156, 157, 191], "xoshiro256": [158, 159, 160, 161, 162, 163, 164, 192], "xoshiro512": [165, 166, 167, 168, 169, 170, 171, 193], "zero": 219, "\u03c6": 191}})