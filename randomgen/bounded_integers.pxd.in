from libc.stdint cimport (
    int8_t,
    int16_t,
    int32_t,
    int64_t,
    intptr_t,
    uint8_t,
    uint16_t,
    uint32_t,
    uint64_t,
)

import numpy as np

cimport numpy as np

ctypedef np.npy_bool bool_t

from randomgen.common cimport bitgen_t


cdef inline uint64_t _gen_mask(uint64_t max_val) noexcept nogil:
    """Mask generator for use in bounded random numbers"""
    # Smallest bit mask >= max
    cdef uint64_t mask = max_val
    mask |= mask >> 1
    mask |= mask >> 2
    mask |= mask >> 4
    mask |= mask >> 8
    mask |= mask >> 16
    mask |= mask >> 32
    return mask
{{
py:
inttypes = ("uint64","uint32","uint16","uint8","bool","int64","int32","int16","int8")
}}
{{for inttype in inttypes}}
cdef object _rand_{{inttype}}(object low, object high, object size, bint use_masked, bint closed, bitgen_t *state, object lock)
{{endfor}}
