from threading import Lock
from types import TracebackType

import numpy as np

from randomgen.common import BitGenerator

class RaisingLock:
    lock: Lock
    def acquire(self, blocking: bool = ..., timeout: int = ...) -> None: ...
    def release(self) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(
        self,
        type: type[BaseException] | None,
        value: BaseException | None,
        traceback: TracebackType | None,
    ) -> None: ...

class RDRAND(BitGenerator):
    def __init__(self, seed: None = ..., *, retries: int = ...) -> None: ...
    @property
    def success(self) -> bool: ...
    def seed(self, seed: None = ...) -> None: ...
    def random_raw(
        self, size: int | None = ..., output: bool = ...
    ) -> int | np.ndarray | None: ...
    def jumped(self, iter: int = ...) -> RDRAND: ...
    @property
    def state(self) -> dict[str, str | int | np.ndarray]: ...
    @state.setter
    def state(self, value: dict[str, str | int | np.ndarray]) -> None: ...
